// ta_Dump File v2.0
LeabraProject .projects[0] { 
  Doc_Group @.docs = [2] {
    taDoc @[0] { };
    taDoc @[1] { };
  };

  Wizard_Group @.wizards = [1] {
    LeabraWizard @[0] { 
   UserDataItem_List @*(.user_data_) { 
	UserDataItem @[0] { };
   };

      LayerWizElList @.layer_cfg = [3] {
	LayerWizEl @[0] { };
	LayerWizEl @[1] { };
	LayerWizEl @[2] { };
      };
    };
  };

  SelectEdit_Group @.edits = [1] {
    SelectEdit @[0] { 
      EditMbrItem_Group @.mbrs = [17] {
	EditMbrItem @[0] { };
	EditMbrItem @[1] { };
	EditMbrItem @[2] { };
	EditMbrItem @[3] { };
	EditMbrItem @[4] { };
	EditMbrItem @[5] { };
	EditMbrItem @[6] { };
	EditMbrItem @[7] { };
	EditMbrItem @[8] { };
	EditMbrItem @[9] { };
	EditMbrItem @[10] { };
	EditMbrItem @[11] { };
	EditMbrItem @[12] { };
	EditMbrItem @[13] { };
	EditMbrItem @[14] { };
	EditMbrItem @[15] { };
	EditMbrItem @[16] { };
      };

      EditMthItem_Group @.mths = [4] {
	EditMthItem @[0] { };
	EditMthItem @[1] { };
	EditMthItem @[2] { };
	EditMthItem @[3] { };
      };
    };
  };

  DataTable_Group @.data = [0] {
    DataTable_Group @.gp[0] = [4] { 
      DataTable @[0] { 
	DataTableCols @.data = [4] {
	  String_Data @[0] { };
	  float_Data @[1] { };
	  float_Data @[2] { };
	  float_Data @[3] { };
	};
      };
      DataTable @[1] { 
	DataTableCols @.data = [4] {
	  String_Data @[0] { };
	  float_Data @[1] { };
	  float_Data @[2] { };
	  float_Data @[3] { };
	};
      };
      DataTable @[2] { 
	DataTableCols @.data = [2] {
	  String_Data @[0] { };
	  float_Data @[1] { };
	};
      };
      DataTable @[3] { 
	DataTableCols @.data = [4] {
	  String_Data @[0] { };
	  float_Data @[1] { };
	  float_Data @[2] { };
	  float_Data @[3] { };
	};
      };
    };
    DataTable_Group @.gp[1] = [4] { 
      DataTable @[0] { 
	DataTableCols @.data = [19] {
	  int_Data @[0] { 
      UserDataItem_List @*(.user_data_) { 
	      UserDataItem @[0] { };
      };
};
	  int_Data @[1] { 
      UserDataItem_List @*(.user_data_) { 
	      UserDataItem @[0] { };
      };
};
	  int_Data @[2] { 
      UserDataItem_List @*(.user_data_) { 
	      UserDataItem @[0] { };
      };
};
	  String_Data @[3] { };
	  String_Data @[4] { };
	  int_Data @[5] { 
      UserDataItem_List @*(.user_data_) { 
	      UserDataItem @[0] { };
      };
};
	  float_Data @[6] { };
	  float_Data @[7] { };
	  float_Data @[8] { };
	  float_Data @[9] { };
	  float_Data @[10] { };
	  float_Data @[11] { };
	  float_Data @[12] { };
	  float_Data @[13] { };
	  float_Data @[14] { };
	  float_Data @[15] { };
	  float_Data @[16] { };
	  float_Data @[17] { };
	  float_Data @[18] { };
	};
      };
      DataTable @[1] { 
	DataTableCols @.data = [14] {
	  int_Data @[0] { 
      UserDataItem_List @*(.user_data_) { 
	      UserDataItem @[0] { };
      };
};
	  int_Data @[1] { 
      UserDataItem_List @*(.user_data_) { 
	      UserDataItem @[0] { };
      };
};
	  float_Data @[2] { };
	  float_Data @[3] { };
	  float_Data @[4] { };
	  float_Data @[5] { };
	  float_Data @[6] { };
	  float_Data @[7] { };
	  float_Data @[8] { };
	  float_Data @[9] { };
	  float_Data @[10] { };
	  float_Data @[11] { };
	  float_Data @[12] { };
	  float_Data @[13] { };
	};
      };
      DataTable @[2] { 
	DataTableCols @.data = [9] {
	  int_Data @[0] { 
      UserDataItem_List @*(.user_data_) { 
	      UserDataItem @[0] { };
      };
};
	  int_Data @[1] { 
      UserDataItem_List @*(.user_data_) { 
	      UserDataItem @[0] { };
      };
};
	  int_Data @[2] { 
      UserDataItem_List @*(.user_data_) { 
	      UserDataItem @[0] { };
      };
};
	  String_Data @[3] { };
	  String_Data @[4] { };
	  int_Data @[5] { 
      UserDataItem_List @*(.user_data_) { 
	      UserDataItem @[0] { };
      };
};
	  float_Data @[6] { };
	  float_Data @[7] { };
	  float_Data @[8] { };
	};
      };
      DataTable @[3] { };
    };
    DataTable_Group @.gp[2] = [1] { 
      DataTable @[0] { 
	DataTableCols @.data = [2] {
	  int_Data @[0] { 
      UserDataItem_List @*(.user_data_) { 
	      UserDataItem @[0] { };
      };
};
	  float_Data @[1] { };
	};
      };
    };
  };

  taBase_Group @.data_proc = [4] {
    taDataProc @[0] { 
   UserDataItem_List @*(.user_data_) { 
	UserDataItem @[0] { };
   };
};
    taDataAnal @[1] { 
   UserDataItem_List @*(.user_data_) { 
	UserDataItem @[0] { };
   };
};
    taDataGen @[2] { 
   UserDataItem_List @*(.user_data_) { 
	UserDataItem @[0] { };
   };
};
    taImageProc @[3] { 
   UserDataItem_List @*(.user_data_) { 
	UserDataItem @[0] { };
   };
};
  };

  Program_Group @.programs = [5] {
    Program @[0] { 
      ProgVar_List @.args = [2] {
	ProgVar @[0] { };
	ProgVar @[1] { };
      };

      ProgVar_List @.vars = [14] {
	ProgVar @[0] { };
	ProgVar @[1] { };
	ProgVar @[2] { };
	ProgVar @[3] { };
	ProgVar @[4] { };
	ProgVar @[5] { };
	ProgVar @[6] { };
	ProgVar @[7] { };
	ProgVar @[8] { };
	ProgVar @[9] { };
	ProgVar @[10] { };
	ProgVar @[11] { };
	ProgVar @[12] { };
	ProgVar @[13] { };
      };

      ProgEl_List @.prog_code = [57] {
	IfReturn @[0] { };
	Comment @[1] { };
	MiscCall @[2] { 
	  ProgArg_List @.meth_args = [2] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	  };
	};
	MiscCall @[3] { 
	  ProgArg_List @.meth_args = [2] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	  };
	};
	MiscCall @[4] { 
	  ProgArg_List @.meth_args = [2] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	  };
	};
	MiscCall @[5] { 
	  ProgArg_List @.meth_args = [2] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	  };
	};
	MiscCall @[6] { 
	  ProgArg_List @.meth_args = [2] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	  };
	};
	RegisterArgs @[7] { };
	Comment @[8] { };
	PrintExpr @[9] { };
	MethodCall @[10] { };
	MiscCall @[11] { 
	  ProgArg_List @.meth_args = [1] {
	    ProgArg @[0] { };
	  };
	};
	MiscCall @[12] { 
	  ProgArg_List @.meth_args = [1] {
	    ProgArg @[0] { };
	  };
	};
	MethodCall @[13] { 
	  ProgArg_List @.meth_args = [3] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	  };
	};
	MethodCall @[14] { 
	  ProgArg_List @.meth_args = [3] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	  };
	};
	MemberFmArg @[15] { };
	MemberFmArg @[16] { };
	MemberFmArg @[17] { };
	MemberFmArg @[18] { };
	MemberFmArg @[19] { };
	MemberFmArg @[20] { };
	MemberFmArg @[21] { };
	MemberFmArg @[22] { };
	MemberFmArg @[23] { };
	MemberFmArg @[24] { };
	MemberFmArg @[25] { };
	MemberFmArg @[26] { };
	MemberFmArg @[27] { };
	MemberFmArg @[28] { };
	MemberFmArg @[29] { };
	MemberFmArg @[30] { };
	MemberFmArg @[31] { };
	MemberFmArg @[32] { };
	ProgVarFmArg @[33] { };
	ProgVarFmArg @[34] { };
	MemberFmArg @[35] { };
	MemberFmArg @[36] { };
	MemberFmArg @[37] { };
	MemberFmArg @[38] { };
	MemberFmArg @[39] { };
	MemberFmArg @[40] { };
	MemberFmArg @[41] { };
	MemberFmArg @[42] { };
	MemberFmArg @[43] { };
	MemberFmArg @[44] { };
	MemberFmArg @[45] { };
	MemberFmArg @[46] { };
	MiscCall @[47] { 
	  ProgArg_List @.meth_args = [1] {
	    ProgArg @[0] { };
	  };
	};
	If @[48] { 
	  ProgEl_List @.true_code = [7] {
	    UserScript @[0] { };
	    UserScript @[1] { };
	    UserScript @[2] { };
	    UserScript @[3] { };
	    MethodCall @[4] { };
	    MethodCall @[5] { };
	    PrintVar @[6] { };
	  };
	};
	Comment @[49] { };
	MethodCall @[50] { 
	  ProgArg_List @.meth_args = [4] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	    ProgArg @[3] { };
	  };
	};
	MethodCall @[51] { 
	  ProgArg_List @.meth_args = [3] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	  };
	};
	MethodCall @[52] { 
	  ProgArg_List @.meth_args = [4] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	    ProgArg @[3] { };
	  };
	};
	MethodCall @[53] { 
	  ProgArg_List @.meth_args = [3] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	  };
	};
	OtherProgramVar @[54] { };
	PrintExpr @[55] { };
	ProgramCall @[56] { 
	  ProgArg_List @.prog_args = [2] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	  };
	};
      };
    };
    Program @[1] { 
      ProgVar_List @.args = [2] {
	ProgVar @[0] { };
	ProgVar @[1] { };
      };

      ProgVar_List @.vars = [14] {
	ProgVar @[0] { };
	ProgVar @[1] { };
	ProgVar @[2] { };
	ProgVar @[3] { };
	ProgVar @[4] { };
	ProgVar @[5] { };
	ProgVar @[6] { };
	ProgVar @[7] { };
	ProgVar @[8] { };
	ProgVar @[9] { };
	ProgVar @[10] { };
	ProgVar @[11] { };
	ProgVar @[12] { };
	ProgVar @[13] { };
      };

      ProgEl_List @.prog_code = [59] {
	IfReturn @[0] { };
	Comment @[1] { };
	MiscCall @[2] { 
	  ProgArg_List @.meth_args = [2] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	  };
	};
	MiscCall @[3] { 
	  ProgArg_List @.meth_args = [2] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	  };
	};
	MiscCall @[4] { 
	  ProgArg_List @.meth_args = [2] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	  };
	};
	MiscCall @[5] { 
	  ProgArg_List @.meth_args = [2] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	  };
	};
	MiscCall @[6] { 
	  ProgArg_List @.meth_args = [2] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	  };
	};
	RegisterArgs @[7] { };
	Comment @[8] { };
	PrintExpr @[9] { };
	MethodCall @[10] { };
	MiscCall @[11] { 
	  ProgArg_List @.meth_args = [1] {
	    ProgArg @[0] { };
	  };
	};
	MiscCall @[12] { 
	  ProgArg_List @.meth_args = [1] {
	    ProgArg @[0] { };
	  };
	};
	MethodCall @[13] { 
	  ProgArg_List @.meth_args = [3] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	  };
	};
	MethodCall @[14] { 
	  ProgArg_List @.meth_args = [3] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	  };
	};
	MemberFmArg @[15] { };
	MemberFmArg @[16] { };
	MemberFmArg @[17] { };
	MemberFmArg @[18] { };
	MemberFmArg @[19] { };
	MemberFmArg @[20] { };
	MemberFmArg @[21] { };
	MemberFmArg @[22] { };
	MemberFmArg @[23] { };
	MemberFmArg @[24] { };
	MemberFmArg @[25] { };
	MemberFmArg @[26] { };
	MemberFmArg @[27] { };
	MemberFmArg @[28] { };
	MemberFmArg @[29] { };
	MemberFmArg @[30] { };
	MemberFmArg @[31] { };
	MemberFmArg @[32] { };
	ProgVarFmArg @[33] { };
	ProgVarFmArg @[34] { };
	MemberFmArg @[35] { };
	MemberFmArg @[36] { };
	MemberFmArg @[37] { };
	MemberFmArg @[38] { };
	MemberFmArg @[39] { };
	MemberFmArg @[40] { };
	MemberFmArg @[41] { };
	MemberFmArg @[42] { };
	MemberFmArg @[43] { };
	MemberFmArg @[44] { };
	MemberFmArg @[45] { };
	MemberFmArg @[46] { };
	MemberFmArg @[47] { };
	MemberFmArg @[48] { };
	MiscCall @[49] { 
	  ProgArg_List @.meth_args = [1] {
	    ProgArg @[0] { };
	  };
	};
	If @[50] { 
	  ProgEl_List @.true_code = [7] {
	    UserScript @[0] { };
	    UserScript @[1] { };
	    UserScript @[2] { };
	    UserScript @[3] { };
	    MethodCall @[4] { };
	    MethodCall @[5] { };
	    PrintVar @[6] { };
	  };
	};
	Comment @[51] { };
	MethodCall @[52] { 
	  ProgArg_List @.meth_args = [4] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	    ProgArg @[3] { };
	  };
	};
	MethodCall @[53] { 
	  ProgArg_List @.meth_args = [3] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	  };
	};
	MethodCall @[54] { 
	  ProgArg_List @.meth_args = [4] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	    ProgArg @[3] { };
	  };
	};
	MethodCall @[55] { 
	  ProgArg_List @.meth_args = [3] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	  };
	};
	OtherProgramVar @[56] { };
	PrintExpr @[57] { };
	ProgramCall @[58] { 
	  ProgArg_List @.prog_args = [2] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	  };
	};
      };
    };
    Program @[2] { 
      ProgObjList @.objs = [2] {
	DataTable @[0] { 
	  DataTableCols @.data = [2] {
	    String_Data @[0] { };
	    float_Data @[1] { };
	  };
	};
	DataTable @[1] { 
	  DataTableCols @.data = [19] {
	    int_Data @[0] { 
       UserDataItem_List @*(.user_data_) { 
		UserDataItem @[0] { };
       };
};
	    int_Data @[1] { 
       UserDataItem_List @*(.user_data_) { 
		UserDataItem @[0] { };
       };
};
	    int_Data @[2] { 
       UserDataItem_List @*(.user_data_) { 
		UserDataItem @[0] { };
       };
};
	    String_Data @[3] { };
	    String_Data @[4] { };
	    int_Data @[5] { 
       UserDataItem_List @*(.user_data_) { 
		UserDataItem @[0] { };
       };
};
	    float_Data @[6] { };
	    float_Data @[7] { };
	    float_Data @[8] { };
	    float_Data @[9] { };
	    float_Data @[10] { };
	    float_Data @[11] { };
	    float_Data @[12] { };
	    float_Data @[13] { };
	    float_Data @[14] { };
	    float_Data @[15] { };
	    float_Data @[16] { };
	    float_Data @[17] { };
	    float_Data @[18] { };
	  };
	};
      };

      ProgVar_List @.args = [1] {
	ProgVar @[0] { };
      };

      ProgVar_List @.vars = [8] {
	ProgVar @[0] { };
	ProgVar @[1] { };
	ProgVar @[2] { };
	ProgVar @[3] { };
	ProgVar @[4] { };
	ProgVar @[5] { };
	ProgVar @[6] { };
	ProgVar @[7] { };
      };

      ProgEl_List @.init_code = [6] {
	MemberFmArg @[0] { };
	MemberFmArg @[1] { };
	MemberFmArg @[2] { };
	MemberFmArg @[3] { };
	MemberFmArg @[4] { };
	MemberFmArg @[5] { };
      };

      ProgEl_List @.prog_code = [2] {
	DataSelectRowsProg @[0] { 
	  DataOpList @.ops = [1] {
	    DataSelectEl @[0] { };
	  };
	};
	DataGroupProg @[1] { 
	  DataOpList @.ops = [2] {
	    DataGroupEl @[0] { };
	    DataGroupEl @[1] { };
	  };
	};
      };
    };
    Program @[3] { 
      ProgVar_List @.args = [1] {
	ProgVar @[0] { };
      };
    };
    Program @[4] { 
      ProgVar_List @.args = [1] {
	ProgVar @[0] { };
      };
    };
    Program_Group @.gp[0] = [10] { 
      Program @[0] { 
	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgEl_List @.init_code = [1] {
	  NetCounterInit @[0] { };
	};

	ProgEl_List @.prog_code = [2] {
	  NetCounterInit @[0] { };
	  WhileLoop @[1] { 
	    ProgEl_List @.loop_code = [2] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [3] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		};
	      };
	      NetCounterIncr @[1] { };
	    };
	  };
	};
      };
      Program @[1] { 
	ProgObjList @.objs = [1] {
	  RndSeed_List @[0] { 
	    taList @.seeds = [25] {
	      RndSeed @[0] { };
	      RndSeed @[1] { };
	      RndSeed @[2] { };
	      RndSeed @[3] { };
	      RndSeed @[4] { };
	      RndSeed @[5] { };
	      RndSeed @[6] { };
	      RndSeed @[7] { };
	      RndSeed @[8] { };
	      RndSeed @[9] { };
	      RndSeed @[10] { };
	      RndSeed @[11] { };
	      RndSeed @[12] { };
	      RndSeed @[13] { };
	      RndSeed @[14] { };
	      RndSeed @[15] { };
	      RndSeed @[16] { };
	      RndSeed @[17] { };
	      RndSeed @[18] { };
	      RndSeed @[19] { };
	      RndSeed @[20] { };
	      RndSeed @[21] { };
	      RndSeed @[22] { };
	      RndSeed @[23] { };
	      RndSeed @[24] { };
	    };
	  };
	};

	ProgVar_List @.args = [3] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	};

	ProgVar_List @.vars = [6] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	  ProgVar @[5] { };
	};

	ProgEl_List @.init_code = [6] {
	  AssignExpr @[0] { };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  AssignExpr @[2] { };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  IfGuiPrompt @[4] { 
	    ProgEl_List @.yes_code = [2] {
	      MethodCall @[0] { };
	      PrintExpr @[1] { };
	    };
	  };
	  AssignExpr @[5] { };
	};

	ProgEl_List @.prog_code = [10] {
	  MemberAssign @[0] { };
	  MemberAssign @[1] { };
	  AssignExpr @[2] { };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MemberAssign @[4] { };
	  MethodCall @[5] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  IfElse @[6] { 
	    ProgEl_List @.true_code = [2] {
	      MethodCall @[0] { };
	      PrintExpr @[1] { };
	    };
	  };
	  AssignExpr @[7] { };
	  WhileLoop @[8] { 
	    ProgEl_List @.loop_code = [3] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      NetCounterIncr @[1] { };
	      IfBreak @[2] { };
	    };
	  };
	  MethodCall @[9] { };
	};
      };
      Program @[2] { 
	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [6] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	  ProgVar @[5] { };
	};

	ProgEl_List @.init_code = [2] {
	  NetCounterInit @[0] { };
	  AssignExpr @[1] { };
	};

	ProgEl_List @.prog_code = [9] {
	  NetCounterInit @[0] { };
	  AssignExpr @[1] { };
	  MethodCall @[2] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[3] { };
	  NetDataLoop @[4] { 
	    ProgEl_List @.loop_code = [2] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      IfElse @[1] { 
		ProgEl_List @.true_code = [1] {
		  MethodCall @[0] { };
		};
	      };
	    };
	  };
	  IfElse @[5] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { };
	    };
	  };
	  MethodCall @[6] { };
	  MethodCall @[7] { };
	  IfElse @[8] { 
	    ProgEl_List @.true_code = [1] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [1] {
		  ProgArg @[0] { };
		};
	      };
	    };

	    ProgEl_List @.false_code = [1] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [1] {
		  ProgArg @[0] { };
		};
	      };
	    };
	  };
	};
      };
      Program @[3] { 
	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [3] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	};

	ProgEl_List @.init_code = [1] {
	  NetCounterInit @[0] { };
	};

	ProgEl_List @.prog_code = [7] {
	  If @[0] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { };
	    };
	  };
	  NetCounterInit @[1] { };
	  MethodCall @[2] { };
	  WhileLoop @[3] { 
	    ProgEl_List @.loop_code = [3] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      NetCounterIncr @[1] { };
	      MethodCall @[2] { };
	    };
	  };
	  MethodCall @[4] { };
	  ProgramCall @[5] { 
	    ProgArg_List @.prog_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  NetUpdateView @[6] { };
	};
      };
      Program @[4] { 
	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [8] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	  ProgVar @[5] { };
	  ProgVar @[6] { };
	  ProgVar @[7] { };
	};

	ProgEl_List @.init_code = [1] {
	  NetCounterInit @[0] { };
	};

	ProgEl_List @.prog_code = [12] {
	  NetCounterInit @[0] { };
	  MethodCall @[1] { };
	  ProgramCall @[2] { 
	    ProgArg_List @.prog_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[3] { };
	  AssignExpr @[4] { };
	  Switch @[5] { 
	    ProgEl_List @.cases = [3] {
	      CaseBlock @[0] { 
		ProgEl_List @.prog_code = [1] {
		  MemberAssign @[0] { };
		};
	      };
	      CaseBlock @[1] { 
		ProgEl_List @.prog_code = [1] {
		  MemberAssign @[0] { };
		};
	      };
	      CaseBlock @[2] { 
		ProgEl_List @.prog_code = [1] {
		  MemberAssign @[0] { };
		};
	      };
	    };
	  };
	  IfElse @[6] { 
	    ProgEl_List @.true_code = [1] {
	      AssignExpr @[0] { };
	    };

	    ProgEl_List @.false_code = [1] {
	      AssignExpr @[0] { };
	    };
	  };
	  WhileLoop @[7] { 
	    ProgEl_List @.loop_code = [5] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [1] {
		  ProgArg @[0] { };
		};
	      };
	      If @[1] { 
		ProgEl_List @.true_code = [4] {
		  AssignExpr @[0] { };
		  AssignExpr @[1] { };
		  AssignExpr @[2] { };
		  AssignExpr @[3] { };
		};
	      };
	      NetCounterIncr @[2] { };
	      IfContinue @[3] { };
	      IfBreak @[4] { };
	    };
	  };
	  MethodCall @[8] { };
	  IfElse @[9] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { };
	    };
	  };
	  IfElse @[10] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { };
	    };
	  };
	  NetUpdateView @[11] { };
	};
      };
      Program @[5] { 
	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [1] {
	  ProgVar @[0] { };
	};

	ProgEl_List @.prog_code = [2] {
	  MethodCall @[0] { };
	  NetUpdateView @[1] { };
	};
      };
      Program @[6] { 
	ProgObjList @.objs = [1] {
	  LayerWriter @[0] { 
	    LayerDataEl_List @.layer_data = [4] {
	      LayerWriterEl @[0] { };
	      LayerWriterEl @[1] { };
	      LayerWriterEl @[2] { };
	      LayerWriterEl @[3] { };
	    };
	  };
	};

	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [1] {
	  ProgVar @[0] { };
	};

	ProgEl_List @.init_code = [2] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [1] {
	  MethodCall @[0] { };
	};
      };
      Program @[7] { 
	ProgObjList @.objs = [1] {
	  NetMonitor @[0] { 
	    NetMonItem_List @.items = [15] {
	      NetMonItem @[0] { };
	      NetMonItem @[1] { };
	      NetMonItem @[2] { };
	      NetMonItem @[3] { };
	      NetMonItem @[4] { };
	      NetMonItem @[5] { };
	      NetMonItem @[6] { };
	      NetMonItem @[7] { };
	      NetMonItem @[8] { };
	      NetMonItem @[9] { };
	      NetMonItem @[10] { };
	      NetMonItem @[11] { };
	      NetMonItem @[12] { };
	      NetMonItem @[13] { };
	      NetMonItem @[14] { };
	    };
	  };
	};

	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [6] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	  ProgVar @[5] { };
	};

	ProgEl_List @.init_code = [3] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[2] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [6] {
	  MethodCall @[0] { };
	  MethodCall @[1] { };
	  OtherProgramVar @[2] { };
	  DataVarProg @[3] { };
	  MethodCall @[4] { };
	  MethodCall @[5] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	};
      };
      Program @[8] { 
	ProgObjList @.objs = [1] {
	  NetMonitor @[0] { 
	    NetMonItem_List @.items = [14] {
	      NetMonItem @[0] { };
	      NetMonItem @[1] { };
	      NetMonItem @[2] { };
	      NetMonItem @[3] { };
	      NetMonItem @[4] { };
	      NetMonItem @[5] { };
	      NetMonItem @[6] { };
	      NetMonItem @[7] { };
	      NetMonItem @[8] { };
	      NetMonItem @[9] { };
	      NetMonItem @[10] { };
	      NetMonItem @[11] { };
	      NetMonItem @[12] { };
	      NetMonItem @[13] { };
	    };
	  };
	};

	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [3] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	};

	ProgEl_List @.init_code = [4] {
	  AssignExpr @[0] { };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[2] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [6] {
	  MethodCall @[0] { };
	  MethodCall @[1] { };
	  AssignExpr @[2] { };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	    };
	  };
	  MethodCall @[4] { 
	    ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	    };
	  };
	  MethodCall @[5] { };
	};
      };
      Program @[9] { 
	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [6] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	  ProgVar @[5] { };
	};

	ProgEl_List @.prog_code = [6] {
	  IfReturn @[0] { };
	  MiscCall @[1] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MiscCall @[2] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  AssignExpr @[3] { };
	  MethodCall @[4] { 
	    ProgArg_List @.meth_args = [4] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	      ProgArg @[3] { };
	    };
	  };
	  MethodCall @[5] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	};
      };
    };
    Program_Group @.gp[1] = [7] { 
      Program @[0] { 
	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [6] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	  ProgVar @[5] { };
	};

	ProgEl_List @.init_code = [2] {
	  NetCounterInit @[0] { };
	  AssignExpr @[1] { };
	};

	ProgEl_List @.prog_code = [13] {
	  NetCounterInit @[0] { };
	  MemberAssign @[1] { };
	  MemberAssign @[2] { };
	  AssignExpr @[3] { };
	  MethodCall @[4] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[5] { };
	  NetDataLoop @[6] { 
	    ProgEl_List @.loop_code = [2] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      IfElse @[1] { 
		ProgEl_List @.true_code = [1] {
		  MethodCall @[0] { };
		};
	      };
	    };
	  };
	  IfElse @[7] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { };
	    };
	  };
	  MethodCall @[8] { };
	  MethodCall @[9] { };
	  ProgramCall @[10] { 
	    ProgArg_List @.prog_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MemberAssign @[11] { };
	  MemberAssign @[12] { };
	};
      };
      Program @[1] { 
	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgEl_List @.init_code = [1] {
	  NetCounterInit @[0] { };
	};

	ProgEl_List @.prog_code = [7] {
	  MethodCall @[0] { };
	  NetCounterInit @[1] { };
	  MethodCall @[2] { };
	  WhileLoop @[3] { 
	    ProgEl_List @.loop_code = [3] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      NetCounterIncr @[1] { };
	      MethodCall @[2] { };
	    };
	  };
	  MethodCall @[4] { };
	  ProgramCall @[5] { 
	    ProgArg_List @.prog_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  NetUpdateView @[6] { };
	};
      };
      Program @[2] { 
	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [4] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	};

	ProgEl_List @.init_code = [1] {
	  NetCounterInit @[0] { };
	};

	ProgEl_List @.prog_code = [12] {
	  NetCounterInit @[0] { };
	  MethodCall @[1] { };
	  ProgramCall @[2] { 
	    ProgArg_List @.prog_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[3] { };
	  AssignExpr @[4] { };
	  Switch @[5] { 
	    ProgEl_List @.cases = [3] {
	      CaseBlock @[0] { 
		ProgEl_List @.prog_code = [1] {
		  MemberAssign @[0] { };
		};
	      };
	      CaseBlock @[1] { 
		ProgEl_List @.prog_code = [2] {
		  MemberAssign @[0] { };
		  MemberAssign @[1] { };
		};
	      };
	      CaseBlock @[2] { 
		ProgEl_List @.prog_code = [1] {
		  MemberAssign @[0] { };
		};
	      };
	    };
	  };
	  IfElse @[6] { 
	    ProgEl_List @.true_code = [1] {
	      AssignExpr @[0] { };
	    };

	    ProgEl_List @.false_code = [1] {
	      AssignExpr @[0] { };
	    };
	  };
	  WhileLoop @[7] { 
	    ProgEl_List @.loop_code = [4] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [1] {
		  ProgArg @[0] { };
		};
	      };
	      NetCounterIncr @[1] { };
	      IfContinue @[2] { };
	      IfBreak @[3] { };
	    };
	  };
	  MethodCall @[8] { };
	  IfElse @[9] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { };
	    };
	  };
	  IfElse @[10] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { };
	    };
	  };
	  NetUpdateView @[11] { };
	};
      };
      Program @[3] { 
	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [1] {
	  ProgVar @[0] { };
	};

	ProgEl_List @.prog_code = [2] {
	  MethodCall @[0] { };
	  NetUpdateView @[1] { };
	};
      };
      Program @[4] { 
	ProgObjList @.objs = [1] {
	  LayerWriter @[0] { 
	    LayerDataEl_List @.layer_data = [4] {
	      LayerWriterEl @[0] { };
	      LayerWriterEl @[1] { };
	      LayerWriterEl @[2] { };
	      LayerWriterEl @[3] { };
	    };
	  };
	};

	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [1] {
	  ProgVar @[0] { };
	};

	ProgEl_List @.init_code = [2] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [1] {
	  MethodCall @[0] { };
	};
      };
      Program @[5] { 
	ProgObjList @.objs = [1] {
	  NetMonitor @[0] { 
	    NetMonItem_List @.items = [9] {
	      NetMonItem @[0] { };
	      NetMonItem @[1] { };
	      NetMonItem @[2] { };
	      NetMonItem @[3] { };
	      NetMonItem @[4] { };
	      NetMonItem @[5] { };
	      NetMonItem @[6] { };
	      NetMonItem @[7] { };
	      NetMonItem @[8] { };
	    };
	  };
	};

	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgEl_List @.init_code = [3] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[2] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [4] {
	  MethodCall @[0] { };
	  MethodCall @[1] { };
	  MethodCall @[2] { };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	};
      };
      Program @[6] { 
	ProgObjList @.objs = [1] {
	  NetMonitor @[0] { 
	    NetMonItem_List @.items = [8] {
	      NetMonItem @[0] { };
	      NetMonItem @[1] { };
	      NetMonItem @[2] { };
	      NetMonItem @[3] { };
	      NetMonItem @[4] { };
	      NetMonItem @[5] { };
	      NetMonItem @[6] { };
	      NetMonItem @[7] { };
	    };
	  };
	};

	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [3] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	};

	ProgEl_List @.init_code = [4] {
	  AssignExpr @[0] { };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[2] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [6] {
	  MethodCall @[0] { };
	  MethodCall @[1] { };
	  AssignExpr @[2] { };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	    };
	  };
	  MethodCall @[4] { 
	    ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	    };
	  };
	  MethodCall @[5] { };
	};
      };
    };
  };

  DataViewer_List @.viewers = [1] {
    MainWindowViewer @[0] { 
   UserDataItem_List @*(.user_data_) { 
	UserDataItem @[0] { };
	UserDataItem @[1] { };
	UserDataItem @[2] { };
	UserDataItem @[3] { };
	UserDataItem @[4] { };
	UserDataItem @[5] { };
   };

      ToolBar_List @.toolbars = [1] {
	ToolBar @[0] { 
     UserDataItem_List @*(.user_data_) { 
	    UserDataItem @[0] { };
     };
};
      };

      FrameViewer_List @.frames = [3] {
	tabBrowseViewer @[0] { };
	PanelViewer @[1] { };
	T3DataViewer @[2] { 
	  T3DataViewFrame_List @.frames = [6] {
	    T3DataViewFrame @[0] { 
	      T3DataView_List @.children = [2] {
		NetView @[0] { 
		  ScaleRange_List @.scale_ranges = [17] {
		    ScaleRange @[0] { };
		    ScaleRange @[1] { };
		    ScaleRange @[2] { };
		    ScaleRange @[3] { };
		    ScaleRange @[4] { };
		    ScaleRange @[5] { };
		    ScaleRange @[6] { };
		    ScaleRange @[7] { };
		    ScaleRange @[8] { };
		    ScaleRange @[9] { };
		    ScaleRange @[10] { };
		    ScaleRange @[11] { };
		    ScaleRange @[12] { };
		    ScaleRange @[13] { };
		    ScaleRange @[14] { };
		    ScaleRange @[15] { };
		    ScaleRange @[16] { };
		  };
		};
		GraphTableView @[1] { 
		  T3DataView_List @.children = [14] {
		    GraphColView @[0] { };
		    GraphColView @[1] { };
		    GraphColView @[2] { };
		    GraphColView @[3] { };
		    GraphColView @[4] { };
		    GraphColView @[5] { };
		    GraphColView @[6] { };
		    GraphColView @[7] { };
		    GraphColView @[8] { };
		    GraphColView @[9] { };
		    GraphColView @[10] { };
		    GraphColView @[11] { };
		    GraphColView @[12] { };
		    GraphColView @[13] { };
		  };
		};
	      };
	    };
	    T3DataViewFrame @[1] { 
	      T3DataView_List @.children = [1] {
		GraphTableView @[0] { 
		  T3DataView_List @.children = [14] {
		    GraphColView @[0] { };
		    GraphColView @[1] { };
		    GraphColView @[2] { };
		    GraphColView @[3] { };
		    GraphColView @[4] { };
		    GraphColView @[5] { };
		    GraphColView @[6] { };
		    GraphColView @[7] { };
		    GraphColView @[8] { };
		    GraphColView @[9] { };
		    GraphColView @[10] { };
		    GraphColView @[11] { };
		    GraphColView @[12] { };
		    GraphColView @[13] { };
		  };
		};
	      };
	    };
	    T3DataViewFrame @[2] { 
	      T3DataView_List @.children = [1] {
		GraphTableView @[0] { 
		  T3DataView_List @.children = [2] {
		    GraphColView @[0] { };
		    GraphColView @[1] { };
		  };
		};
	      };
	    };
	    T3DataViewFrame @[3] { 
	      T3DataView_List @.children = [1] {
		GridTableView @[0] { 
		  T3DataView_List @.children = [14] {
		    GridColView @[0] { };
		    GridColView @[1] { };
		    GridColView @[2] { };
		    GridColView @[3] { };
		    GridColView @[4] { };
		    GridColView @[5] { };
		    GridColView @[6] { };
		    GridColView @[7] { };
		    GridColView @[8] { };
		    GridColView @[9] { };
		    GridColView @[10] { };
		    GridColView @[11] { };
		    GridColView @[12] { };
		    GridColView @[13] { };
		  };
		};
	      };
	    };
	    T3DataViewFrame @[4] { 
	      T3DataView_List @.children = [1] {
		GridTableView @[0] { 
		  T3DataView_List @.children = [19] {
		    GridColView @[0] { };
		    GridColView @[1] { };
		    GridColView @[2] { };
		    GridColView @[3] { };
		    GridColView @[4] { };
		    GridColView @[5] { };
		    GridColView @[6] { };
		    GridColView @[7] { };
		    GridColView @[8] { };
		    GridColView @[9] { };
		    GridColView @[10] { };
		    GridColView @[11] { };
		    GridColView @[12] { };
		    GridColView @[13] { };
		    GridColView @[14] { };
		    GridColView @[15] { };
		    GridColView @[16] { };
		    GridColView @[17] { };
		    GridColView @[18] { };
		  };
		};
	      };
	    };
	    T3DataViewFrame @[5] { 
	      T3DataView_List @.children = [1] {
		GridTableView @[0] { 
		  T3DataView_List @.children = [2] {
		    GridColView @[0] { };
		    GridColView @[1] { };
		  };
		};
	      };
	    };
	  };
	};
      };

      DockViewer_List @.docks = [1] {
	ToolBoxDockViewer @[0] { 
     UserDataItem_List @*(.user_data_) { 
	    UserDataItem @[0] { };
	    UserDataItem @[1] { };
	    UserDataItem @[2] { };
	    UserDataItem @[3] { };
	    UserDataItem @[4] { };
	    UserDataItem @[5] { };
     };
};
      };
    };
  };

  Network_Group @.networks = [1] {
    CtLeabraNetwork @[0] { 
      BaseSpec_Group @.specs = [4] {
	CtLeabraLayerSpec @[0] { 
	  BaseSpec_Group @.children = [1] {
	    CtLeabraLayerSpec @[0] { };
	  };
	};
	CtLeabraConSpec @[1] { 
	  BaseSpec_Group @.children = [2] {
	    CtLeabraBiasSpec @[0] { 
	      Schedule @.lrate_sched = [2] {
		SchedItem @[0] { };
		SchedItem @[1] { };
	      };
	    };
	    CtLeabraConSpec @[1] { 
	      Schedule @.lrate_sched = [2] {
		SchedItem @[0] { };
		SchedItem @[1] { };
	      };
	    };
	  };

	  Schedule @.lrate_sched = [2] {
	    SchedItem @[0] { };
	    SchedItem @[1] { };
	  };
	};
	CtLeabraUnitSpec @[2] { 
	  BaseSpec_Group @.children = [1] {
	    CtLeabraUnitSpec @[0] { };
	  };
	};
	FullPrjnSpec @[3] { };
      };

      Layer_Group @.layers = [7] {
	CtLeabraLayer @[0] { 
	  Projection_Group @.projections = [1] {
	    LeabraPrjn @[0] { };
	  };

	  Unit_Group @.units = [24] {
	  };
	};
	CtLeabraLayer @[1] { 
	  Projection_Group @.projections = [2] {
	    LeabraPrjn @[0] { };
	    LeabraPrjn @[1] { };
	  };

	  Unit_Group @.units = [64] {
	  };
	};
	CtLeabraLayer @[2] { 
	  Projection_Group @.projections = [1] {
	    LeabraPrjn @[0] { };
	  };

	  Unit_Group @.units = [12] {
	  };
	};
	CtLeabraLayer @[3] { 
	  Projection_Group @.projections = [2] {
	    LeabraPrjn @[0] { };
	    LeabraPrjn @[1] { };
	  };

	  Unit_Group @.units = [64] {
	  };
	};
	CtLeabraLayer @[4] { 
	  Projection_Group @.projections = [1] {
	    LeabraPrjn @[0] { };
	  };

	  Unit_Group @.units = [24] {
	  };
	};
	CtLeabraLayer @[5] { 
	  Projection_Group @.projections = [2] {
	    LeabraPrjn @[0] { };
	    LeabraPrjn @[1] { };
	  };

	  Unit_Group @.units = [64] {
	  };
	};
	CtLeabraLayer @[6] { 
	  Projection_Group @.projections = [3] {
	    LeabraPrjn @[0] { };
	    LeabraPrjn @[1] { };
	    LeabraPrjn @[2] { };
	  };

	  Unit_Group @.units = [64] {
	  };
	};
      };
    };
  };
};
LeabraProject .projects[0] {
 name="Project_0";
 desc="


";
 tags=;
 templates {
  name=;
  el_typ=taBase;
  el_def=0;
 };
 docs {
  name=;
  el_typ=taDoc;
  el_def=0;
  taDoc @[0] {
   name="ProjectDocs";
   auto_open=1;
   text="<html>
<head></head>
<body>
== Family Trees Model ==

This is the family trees model, originally studied by Hinton in the 80's or so.  Is a paradigm case of a \"deep network\" that uses multiple hidden layers to perform an efficient mapping by re-representing inputs in a more systematic way.

It is used extensively in Leabra development to test new algorithm features, because it is a challenging problem that clearly reveals performance differences.  Leabra solves it much faster than backprop, due to the combination of hebbian and error-driven learning.

</body>
</html>
";
  };
  taDoc @[1] {
   name="ChangeLog";
   auto_open=0;
   text="<html>
<head>ChangeLog</head>
<body>
<h1>ChangeLog</h1>
<ul>

<li>Mon Feb  4 22:55:33 2008 oreilly <code>ft_ct_kv2k.proj</code><br>
  separate test programs

<li>Mon Feb  4 21:55:43 2008 oreilly <code>ft_ct_kv2k.proj</code><br>
  current best params: sp_qsub_q 8h emergent -nogui -ni ft_ct_kv2k.proj epochs=200 batches=10 hiddens=64 lrate=0.03 lrs_start=200 event_decay=1 sravg_start=20 sravg_end=20 sin_burst_i=0.05 sin_trough_i=0.05 minus=40 plus=20 inhib=20 trial_init_sd=true sd_ca_gain=0.2 syndep_int=20 ca_inc=0.3 ca_dec=0.3 tag=_ed1sd2i_h64_cyc40pi20_srs20e20_bi05t05_lr03_sdi20ca3

<li>Sat Feb  2 00:30:11 2008 oreilly <code>ft_ct_kv2k.proj</code><br>
  new Contrastive Attractor Learning

<li>Sat Dec 29 22:56:02 2007 oreilly <code>ft_ct.proj</code><br>
  turned off vm_eq_cyc for input/output, and added vm_dt startup arg

<li>Sat Dec 29 02:50:28 2007 oreilly <code>ft_ct.proj</code><br>
  full set of startup args

<li>Fri Dec 28 11:50:03 2007 oreilly <code>ft_ct.proj</code><br>
  turned off opt_thresh.learn and updt_wts -- key!!!  also turned down fminput/output


<li>Fri Dec 28 01:48:05 2007 oreilly <code>ft_ct.proj</code><br>
  NOTHING_SYNC version of CtLeabra


<li>Sat Sep 29 23:23:15 2007 oreilly <code>ft_comp_cost.proj</code><br>
  competitor cost kwta inhibition function

</ul>
</body>
</html>
";
  };
 };
 wizards {
  name=;
  el_typ=LeabraWizard;
  el_def=0;
  LeabraWizard @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItemBase;
    el_def=0;
    UserDataItem @[0] {
     name="NO_CLIP";
     value 1 0=1;
    };
   };
   name="LeabraWizard_2";
   auto_open=0;
   n_layers=3;
   layer_cfg {
    name=;
    el_typ=LayerWizEl;
    el_def=0;
    LayerWizEl @[0] {
     name="Input";
     n_units=25;
     io_type=INPUT;
    };
    LayerWizEl @[1] {
     name="Hidden";
     n_units=25;
     io_type=HIDDEN;
    };
    LayerWizEl @[2] {
     name="Output";
     n_units=25;
     io_type=OUTPUT;
    };
   };
   connectivity=BIDIRECTIONAL;
   default_net_type=LeabraNetwork;
  };
 };
 edits {
  name=;
  el_typ=SelectEdit;
  el_def=0;
  SelectEdit @[0] {
   name="ManipParams";
   auto_edit=1;
   desc="params that are currently being manipulated";
   mbrs {
    name=;
    el_typ=EditMbrItem;
    el_def=0;
    EditMbrItem @[0] {
     label="update_net_view bool_val";
     desc=" boolean value";
     base=.projects[0].programs.gp[0][5].vars[0]$0$;
     mbr=ProgVar::bool_val;
    };
    EditMbrItem @[1] {
     label="ConSpec ca_dep";
     desc=" calcium-based depression of synaptic efficacy and learning rate<br>  intwt dt: [Default: 0.02]  time constant for integrating intwt value relative to current weight value -- default base value is .001 per cycle -- multiply by network->ct_learn.syndep_int to get this value (default = 20)<br>  ca inc: [Default: 0.2]  time constant for increases in Ca_i (from NMDA etc currents) -- default base value is .01 per cycle -- multiply by network->ct_learn.syndep_int to get this value (default = 20)<br>  ca dec: [Default: 0.2]  time constant for decreases in Ca_i (from Ca pumps pushing Ca back out into the synapse) -- default base value is .01 per cycle -- multiply by network->ct_learn.syndep_int to get this value (default = 20)<br>  sd ca thr: [Default: 0.2]  synaptic depression ca threshold: only when ca_i has increased by this amount (thus synaptic ca depleted) does it affect firing rates and thus synaptic depression<br>  sd ca gain: [Default: 0.3]  multiplier on cai value for computing synaptic depression -- modulates overall level of depression independent of rate parameters";
     base=.projects[0].networks[0].specs[1]$1$;
     mbr=CtLeabraConSpec::ca_dep;
    };
    EditMbrItem @[2] {
     label="ConSpec lmix";
     desc=" mixture of hebbian & err-driven learning<br>  hebb:  [Default: .01] amount of hebbian learning (should be relatively small, can be effective at .0001)<br>  err:  [Default: .99] amount of error driven learning, automatically computed to be 1-hebb<br>  err sb: [Default: true]  apply exponential soft-bounding to the error learning component";
     base=$1$;
     mbr=LeabraConSpec::lmix;
    };
    EditMbrItem @[3] {
     label="ConSpec savg_cor";
     desc=" for Hebbian and netinput computation: correction for sending average act levels (i.e., renormalization); also norm_con_n for normalizing netinput computation<br>  cor: [Default: 0.4]  proportion of correction to apply (0=none, 1=all, .5=half, etc)<br>  thresh: [Default: 0.001]  threshold of sending average activation below which learning does not occur (prevents learning when there is no input)<br>  norm con n: [Default: false]  in normalizing netinput, divide by the actual number of connections (recv group n), not the overall number of units in the sending layer; this is good when units only receive from a small fraction of sending layer units";
     base=$1$;
     mbr=LeabraConSpec::savg_cor;
    };
    EditMbrItem @[4] {
     label="FmInput_Output wt_scale";
     desc=" scale effective weight values to control the overall strength of a projection -- relative shifts balance among different projections, while absolute is a direct multipler<br>  abs: [Default: 1]  absolute scaling (not subject to normalization: directly multiplies weight values)<br>  rel:  [Default: 1] relative scaling that shifts balance between different projections (subject to normalization across all other projections into unit)";
     base=.projects[0].networks[0].specs[1].children[1]$2$;
     mbr=LeabraConSpec::wt_scale;
    };
    EditMbrItem @[5] {
     label="UnitSpec dt";
     desc=" time constants (rate of updating): membrane potential (vm) and net input (net)<br>  vm: [Default: 0.3]  membrane potential time constant -- if units oscillate too much, then this is too high (but see d_vm_max for another solution)<br>  net: [Default: 0.7]  net input time constant -- how fast to update net input (damps oscillations)<br>  d vm max: [Default: 0.025]  maximum change in vm at any timestep (limits blowup)<br>  vm eq cyc: [Default: 0]  number of cycles to compute the vm as equilibirium potential given current inputs: set to 1 to quickly activate input layers; set to 100 to always use this computation<br>  vm eq dt: [Default: 1]  time constant for integrating the vm_eq values: how quickly to move toward the current eq value from previous vm value";
     base=.projects[0].networks[0].specs[2]$3$;
     mbr=LeabraUnitSpec::dt;
    };
    EditMbrItem @[6] {
     label="Hidden inhib";
     desc=" how to compute inhibition -- for kwta modes, a single global inhibition value is computed for the entire layer<br>  type:  how to compute inhibition (g_i)<br>    KWTA INHIB:  between thresholds of k and k+1th most activated units (sets precise k value, should use i_kwta_pt = .25 std)<br>    KWTA AVG INHIB:  average of top k vs avg of rest (provides more flexibility in actual k value, should use i_kwta_pt = .6 std)<br>    KWTA KV2K:  average of top k vs avg of next k (2k) -- avoids long 'tail' of distribution of weakly active units, while providing similar flexibility as KWTA_AVG_INHIB, and also is equivalent to KWTA_INHIB for k=1 -- i_kwta_pt = .25 is std. In general, this is now preferred to KWTA_AVG_INHIB<br>    KWTA COMP COST:  competitor cost kwta function: inhibition is i_kwta_pt below the k'th unit's threshold inhibition value if there are no strong competitors (>comp_thr proportion of kth inhib val), and each competitor increases inhibition linearly (normalized by total possible = n-k) with gain comp_gain -- produces cleaner competitive dynamics and considerable kwta flexibility<br>    AVG MAX PT INHIB:  put inhib value at i_kwta_pt between avg and max values for layer<br>    MAX INHIB:  put inhib value at i_kwta_pt below max guy in layer<br>    UNIT INHIB:  unit-based inhibition (g_i from netinput -- requires connections with inhib flag set to provide inhibition)<br>  kwta pt:  [Default: .25 for KWTA_INHIB, .6 for KWTA_AVG, .2 for AVG_MAX_PT_INHIB] point to place inhibition between k and k+1 (or avg and max for AVG_MAX_PT_INHIB)<br>  min i:  minimum inhibition value -- set this higher than zero to prevent units from getting active even if there is not much overall excitation<br>  comp thr:  [0-1] Threshold for competitors in KWTA_COMP_COST -- competitor threshold inhibition is normalized by k'th inhibition and those above this threshold are counted as competitors <br>  comp gain:  Gain for competitors in KWTA_COMP_COST -- how much to multiply contribution of competitors to increase inhibition level<br>  gp pt:  [Default: .2] for unit groups: point to place inhibition between avg and max for AVG_MAX_PT_INHIB";
     base=.projects[0].networks[0].specs[0]$4$;
     mbr=LeabraLayerSpec::inhib;
    };
    EditMbrItem @[7] {
     label="ConSpec dwt norm";
     desc=" renormalize weight changes to compensate for overal mean changes<br>  on:  whether to do normalized dwt Compute_Weights function <br>  norm pct:  what proportion of full normalization to apply to the delta weights (0 = no norm, 1 = full norm)";
     base=$1$;
     mbr=CtLeabraConSpec::dwt_norm;
    };
    EditMbrItem @[8] {
     label="family_trees ct time";
     desc=" timing parameters for ct leabra trial<br>  minus:  number of cycles to run in the minus phase with only inputs and no targets (used by CtLeabraSettle program), sets cycle_max -- can be 0<br>  plus:  number of cycles to run in the plus phase with input and target activations (used by CtLeabraSettle program), sets cycle_max -- must be > 0<br>  inhib:  number of cycles to run in the final inhibitory phase -- network can do MINUS_PLUS_PLUS, MINUS_PLUS_MINUS, or MINUS_PLUS_NOTHING for inputs on this phase<br>  inhib max:  number of cycles into inhib phase for inhibition to reach its maximum level (on a linear ramp) -- 0 means do not apply this function<br>  burst:  number of cycles at start of trial to reduce inhibition levels as a result of residual refractoriness from prior trial, allowing incoming activation to over-activate relative to stable values -- ramps down linearly from start of trial to 0 reduction after burst cycles -- <=1 means do not apply<br>  sravg start:  number of cycles from the start of a new pattern to start computing sravg value -- 8 or so cycles is good to avoid transitional states that are too far away from attractor state<br>  sravg end:  number of cycles from the start of the final inhibitory phase to continue recording sravg<br>  syndep int: [Default: 20]  interval for doing synaptic depression and associated Ca_i integration calcuations -- numbers > 1 result in faster processing and actually work better too -- need to adjust the conspec ca/syndep rate constants in step with this (multiply by this number)";
     base=.projects[0].networks[0]$5$;
     mbr=CtLeabraNetwork::ct_time;
    };
    EditMbrItem @[9] {
     label="family_trees ct sravg";
     desc=" parameters controlling computation of sravg value as a function of layer-level delta-activation <br>  min da thr: [Default: 0.005]  minimum threshold value of accumulated layer-level delta activation (da_sum) for computing sravg value<br>  max da thr: [Default: 0.5]  maximum value of layer-level max da (max delta-activation), above which sravg is not computed (prevents learning when too far out of the attractor state)";
     base=$5$;
     mbr=CtLeabraNetwork::ct_sravg;
    };
    EditMbrItem @[10] {
     label="family_trees ct sin i";
     desc=" sinusoidal inhibition parameters for inhibitory modulations during trial, simulating oscillations resulting from imperfect inhibtory set point behavior<br>  start:  [20] number of cycles from onset of new input to start applying sinusoidal inhibitory modulation<br>  duration:  [20] number of cycles from start to apply modulation -- either a full sine wave (burst and trough) or half sine wave (burst only) is applied during this time<br>  burst only:  if true, only does positive portion (bursting) of sine wave<br>  burst i:  [.02] maximum reduction in inhibition as a proportion of computed kwta value to subtract for positive activation (burst) phase of wave -- value should be a positive number<br>  trough i:  [.02] maximum extra inhibition as proportion of computed kwta value to add for negative activation (trough) phase of wave -- value shoudl be a positive number";
     base=$5$;
     mbr=CtLeabraNetwork::ct_sin_i;
    };
    EditMbrItem @[11] {
     label="family_trees ct fin i";
     desc=" final inhibition parameters for extra inhibition to apply during final inhib phase, simulating slow-onset GABA currents<br>  start:  number of cycles into inhib phase for inhibition ramp to start<br>  end:  number of cycles into inhib phase for inhibition ramp to end -- remains at full inhibition level from end to end of inhib phase<br>  inhib i:  [.05 when in use] maximum extra inhibition as proportion of computed kwta value to add during final inhib phase";
     base=$5$;
     mbr=CtLeabraNetwork::ct_fin_i;
    };
    EditMbrItem @[12] {
     label="Hidden decay";
     desc=" decay of activity state vars between events, -/+ phase, and 2nd set of phases (if appl)<br>  event: [Default: 1]  proportion decay of state vars between events<br>  phase: [Default: 1]  proportion decay of state vars between minus and plus phases <br>  phase2: [Default: 0]  proportion decay of state vars between 2nd set of phases (if appl, 0 std)<br>  clamp phase2: [Default: false]  if true, hard-clamp second plus phase activations to prev plus phase (only special layers will then update -- optimizes speed)";
     base=$4$;
     mbr=LeabraLayerSpec::decay;
    };
    EditMbrItem @[13] {
     label="ConSpec lrate";
     desc="[Default: 0.01]  learning rate -- how fast do the weights change per experience";
     base=$1$;
     mbr=LeabraConSpec::lrate;
    };
    EditMbrItem @[14] {
     label="init_sd bool val";
     desc=" boolean value";
     base=.projects[0].programs.gp[0][3].vars[2]$6$;
     mbr=ProgVar::bool_val;
    };
    EditMbrItem @[15] {
     label="LeabraAll_Std step prog";
     desc=" the program that will be stepped when the Step button is pressed";
     base=.projects[0].programs.gp[0]$7$;
     mbr=Program_Group::step_prog;
    };
    EditMbrItem @[16] {
     label="sep_test bool val";
     desc=" boolean value";
     base=.projects[0].programs.gp[0][2].vars[5]$8$;
     mbr=ProgVar::bool_val;
    };
   };
   mths {
    name=;
    el_typ=EditMthItem;
    el_def=0;
    group_type=GT_BUTTONS;
    EditMthItem @[0] {
     label="Train Init";
     desc=" set the program state back to the beginning";
     base=.projects[0].programs.gp[0][1]$9$;
     mth=Program::Init;
    };
    EditMthItem @[1] {
     label="Train Run";
     desc=" run the program";
     base=$9$;
     mth=Program::Run;
    };
    EditMthItem @[2] {
     label="Train Step";
     desc=" step the program, at the previously selected step level (see SetAsStep or the program group control panel)";
     base=$9$;
     mth=Program::Step;
    };
    EditMthItem @[3] {
     label="Train Stop";
     desc=" stop the current program at its next natural stopping point (i.e., cleanly stopping when appropriate chunks of computation have completed)";
     base=$9$;
     mth=Program::Stop;
    };
   };
  };
 };
 data {
  name=;
  el_typ=DataTable;
  el_def=0;
  DataTable_Group @.gp[0] {
   name="InputData";
   el_typ=DataTable;
   el_def=0;
   DataTable @[0] {
    name="ft_1ufg_train";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @[0] {
      name="Name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [100] "Christo.Wife.Penny";"Penny.Husb.Christo";"Maria.Husb.Rob";"Andy.Wife.Christi";"Christi.Husb.Andy";"Pierro.Wife.Francy";"Francy.Husb.Pierro";"Art.Wife.Marge";"Marge.Husb.Art";"Emilio.Wife.Gina";"Gina.Husb.Emilio";"Vicky.Husb.James";"Marco.Wife.Lucia";"Lucia.Husb.Marco";"Chuck.Wife.Jenn";"Jenn.Husb.Chuck";"Tomaso.Wife.Angela";"Angela.Husb.Tomaso";"Christo.Son.Art";"Art.Fath.Christo";"Christo.Daug.Vicky";"Vicky.Fath.Christo";"Rob.Son.Emilio";"Emilio.Fath.Rob";"Rob.Daug.Lucia";"Andy.Son.James";"James.Fath.Andy";"Andy.Daug.Jenn";"Jenn.Fath.Andy";"Pierro.Son.Marco";"Marco.Fath.Pierro";"Pierro.Daug.Angela";"Angela.Fath.Pierro";"James.Son.Colin";"Colin.Fath.James";"James.Daug.Charlot";"Charlot.Fath.James";"Marco.Son.Alf";"Alf.Fath.Marco";"Marco.Daug.Sophia";"Sophia.Fath.Marco";"Penny.Son.Art";"Art.Moth.Penny";"Penny.Daug.Vicky";"Vicky.Moth.Penny";"Art.Sis.Vicky";"Vicky.Bro.Art";"Maria.Son.Emilio";"Emilio.Moth.Maria";"Maria.Daug.Lucia";"Lucia.Moth.Maria";"Lucia.Bro.Emilio";"Christi.Son.James";"James.Moth.Christi";"Jenn.Moth.Christi";"James.Sis.Jenn";"Jenn.Bro.James";"Francy.Son.Marco";"Marco.Moth.Francy";"Francy.Daug.Angela";"Angela.Moth.Francy";"Marco.Sis.Angela";"Vicky.Son.Colin";"Colin.Moth.Vicky";"Vicky.Daug.Charlot";"Charlot.Moth.Vicky";"Colin.Sis.Charlot";"Lucia.Son.Alf";"Alf.Moth.Lucia";"Lucia.Daug.Sophia";"Sophia.Moth.Lucia";"Alf.Sis.Sophia";"Sophia.Bro.Alf";"Colin.Uncle.ArtChu";"Colin.Aunt.MarJen";"Art.Nephew.Colin";"Chuck.Nephew.Colin";"Marge.Nephew.Colin";"Jenn.Nephew.Colin";"Alf.Uncle.EmiTom";"Emilio.Nephew.Alf";"Tomaso.Nephew.Alf";"Gina.Nephew.Alf";"Angela.Nephew.Alf";"Charlot.Uncle.ArtChu";"Charlot.Aunt.MarJen";"Art.Neice.Charlot";"Chuck.Neice.Charlot";"Marge.Neice.Charlot";"Jenn.Neice.Charlot";"Sophia.Uncle.EmiTom";"Sophia.Aunt.GinAng";"Emilio.Neice.Sophia";"Tomaso.Neice.Sophia";"Gina.Neice.Sophia";"Angela.Neice.Sophia";"Charlot.Bro.Colin";"Alf.Aunt.GinAng";"Emilio.Sis.Lucia";"Rob.Wife.Maria";      };
     };
     float_Data @[1] {
      name="Agent";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 6;4;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [6 4 100] 1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;      };
     };
     float_Data @[2] {
      name="Relation";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 6;2;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [6 2 100] 0;0;0;1;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;      };
     };
     float_Data @[3] {
      name="Patient";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 6;4;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [6 4 100] 0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   DataTable @[1] {
    name="ft_1ufg_test";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @[0] {
      name="Name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [4] "James.Wife.Vicky";"Lucia.Fath.Robert";"Angela.Bro.Marco";"Christi.Daug.Jenn";      };
     };
     float_Data @[1] {
      name="Agent";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 6;4;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [6 4 4] 0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;      };
     };
     float_Data @[2] {
      name="Relation";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 6;2;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [6 2 4] 0;0;0;1;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;      };
     };
     float_Data @[3] {
      name="Patient";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 6;4;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [6 4 4] 0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   DataTable @[2] {
    name="People_Patterns";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @[0] {
      name="Name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [24] "Christo";"Penny";"Andy";"Christi";"Marge";"Art";"Vicky";"James";"Jenn";"Chuck";"Colin";"Charlot";"Rob";"Maria";"Pierro";"Francy";"Gina";"Emilio";"Lucia";"Marco";"Angela";"Tomaso";"Alf";"Sophia";      };
     };
     float_Data @[1] {
      name="People";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 6;4;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [6 4 24] 1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   DataTable @[3] {
    name="ft_1u_full_all";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @[0] {
      name="Name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [104] "Christo.Wife.Penny";"Penny.Husb.Christo";"Rob.Wife.Maria";"Maria.Husb.Rob";"Andy.Wife.Christi";"Christi.Husb.Andy";"Pierro.Wife.Francy";"Francy.Husb.Pierro";"Art.Wife.Marge";"Marge.Husb.Art";"Emilio.Wife.Gina";"Gina.Husb.Emilio";"James.Wife.Vicky";"Vicky.Husb.James";"Marco.Wife.Lucia";"Lucia.Husb.Marco";"Chuck.Wife.Jenn";"Jenn.Husb.Chuck";"Tomaso.Wife.Angela";"Angela.Husb.Tomaso";"Christo.Son.Art";"Art.Fath.Christo";"Christo.Daug.Vicky";"Vicky.Fath.Christo";"Rob.Son.Emilio";"Emilio.Fath.Rob";"Rob.Daug.Lucia";"Lucia.Fath.Rob";"Andy.Son.James";"James.Fath.Andy";"Andy.Daug.Jenn";"Jenn.Fath.Andy";"Pierro.Son.Marco";"Marco.Fath.Pierro";"Pierro.Daug.Angela";"Angela.Fath.Pierro";"James.Son.Colin";"Colin.Fath.James";"James.Daug.Charlot";"Charlot.Fath.James";"Marco.Son.Alf";"Alf.Fath.Marco";"Marco.Daug.Sophia";"Sophia.Fath.Marco";"Penny.Son.Art";"Art.Moth.Penny";"Penny.Daug.Vicky";"Vicky.Moth.Penny";"Art.Sis.Vicky";"Vicky.Bro.Art";"Maria.Son.Emilio";"Emilio.Moth.Maria";"Maria.Daug.Lucia";"Lucia.Moth.Maria";"Emilio.Sis.Lucia";"Lucia.Bro.Emilio";"Christi.Son.James";"James.Moth.Christi";"Christi.Daug.Jenn";"Jenn.Moth.Christi";"James.Sis.Jenn";"Jenn.Bro.James";"Francy.Son.Marco";"Marco.Moth.Francy";"Francy.Daug.Angela";"Angela.Moth.Francy";"Marco.Sis.Angela";"Angela.Bro.Marco";"Vicky.Son.Colin";"Colin.Moth.Vicky";"Vicky.Daug.Charlot";"Charlot.Moth.Vicky";"Colin.Sis.Charlot";"Charlot.Bro.Colin";"Lucia.Son.Alf";"Alf.Moth.Lucia";"Lucia.Daug.Sophia";"Sophia.Moth.Lucia";"Alf.Sis.Sophia";"Sophia.Bro.Alf";"Colin.Uncle.ArtChu";"Colin.Aunt.MarJen";"Art.Nephew.Colin";"Chuck.Nephew.Colin";"Marge.Nephew.Colin";"Jenn.Nephew.Colin";"Alf.Uncle.EmiTom";"Alf.Aunt.GinAng";"Emilio.Nephew.Alf";"Tomaso.Nephew.Alf";"Gina.Nephew.Alf";"Angela.Nephew.Alf";"Charlot.Uncle.ArtChu";"Charlot.Aunt.MarJen";"Art.Neice.Charlot";"Chuck.Neice.Charlot";"Marge.Neice.Charlot";"Jenn.Neice.Charlot";"Sophia.Uncle.EmiTom";"Sophia.Aunt.GinAng";"Emilio.Neice.Sophia";"Tomaso.Neice.Sophia";"Gina.Neice.Sophia";"Angela.Neice.Sophia";      };
     };
     float_Data @[1] {
      name="Agent";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 6;4;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [6 4 104] 1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;      };
     };
     float_Data @[2] {
      name="Relation";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 6;2;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [6 2 104] 0;0;0;1;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;1;      };
     };
     float_Data @[3] {
      name="Patient";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 6;4;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [6 4 104] 0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
  };
  DataTable_Group @.gp[1] {
   name="OutputData";
   el_typ=DataTable;
   el_def=0;
   DataTable @[0] {
    name="TrialOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="batch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [100] 0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;      };
     };
     int_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="epoch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [100] 0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;      };
     };
     int_Data @[2] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="trial";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [100] 0;1;2;3;4;5;6;7;8;9;10;11;12;13;14;15;16;17;18;19;20;21;22;23;24;25;26;27;28;29;30;31;32;33;34;35;36;37;38;39;40;41;42;43;44;45;46;47;48;49;50;51;52;53;54;55;56;57;58;59;60;61;62;63;64;65;66;67;68;69;70;71;72;73;74;75;76;77;78;79;80;81;82;83;84;85;86;87;88;89;90;91;92;93;94;95;96;97;98;99;      };
     };
     String_Data @[3] {
      name="trial_name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [100] "Andy.Wife.Christi";"Angela.Neice.Sophia";"Colin.Moth.Vicky";"Art.Sis.Vicky";"Marco.Wife.Lucia";"Maria.Husb.Rob";"Charlot.Moth.Vicky";"Alf.Uncle.EmiTom";"James.Daug.Charlot";"Marco.Moth.Francy";"Marge.Husb.Art";"Colin.Sis.Charlot";"Jenn.Husb.Chuck";"Christo.Wife.Penny";"Art.Fath.Christo";"Angela.Husb.Tomaso";"Penny.Husb.Christo";"Art.Moth.Penny";"Lucia.Husb.Marco";"Chuck.Wife.Jenn";"Sophia.Uncle.EmiTom";"Vicky.Daug.Charlot";"Alf.Fath.Marco";"Tomaso.Neice.Sophia";"James.Moth.Christi";"James.Fath.Andy";"Emilio.Neice.Sophia";"Christi.Son.James";"Alf.Aunt.GinAng";"Jenn.Bro.James";"Gina.Husb.Emilio";"Alf.Sis.Sophia";"Pierro.Daug.Angela";"Jenn.Fath.Andy";"Alf.Moth.Lucia";"Rob.Son.Emilio";"Emilio.Fath.Rob";"Gina.Neice.Sophia";"Vicky.Bro.Art";"Lucia.Daug.Sophia";"Lucia.Bro.Emilio";"Pierro.Wife.Francy";"Gina.Nephew.Alf";"Art.Nephew.Colin";"Tomaso.Nephew.Alf";"Pierro.Son.Marco";"Art.Wife.Marge";"Charlot.Bro.Colin";"Marge.Nephew.Colin";"Marco.Fath.Pierro";"Rob.Wife.Maria";"Charlot.Uncle.ArtChu";"Jenn.Nephew.Colin";"Colin.Fath.James";"Rob.Daug.Lucia";"Jenn.Neice.Charlot";"James.Son.Colin";"Marco.Daug.Sophia";"Charlot.Fath.James";"Angela.Fath.Pierro";"Sophia.Bro.Alf";"Penny.Daug.Vicky";"Colin.Aunt.MarJen";"Maria.Son.Emilio";"Emilio.Nephew.Alf";"Emilio.Wife.Gina";"Angela.Moth.Francy";"Chuck.Neice.Charlot";"Tomaso.Wife.Angela";"James.Sis.Jenn";"Angela.Nephew.Alf";"Vicky.Son.Colin";"Lucia.Moth.Maria";"Sophia.Fath.Marco";"Francy.Husb.Pierro";"Art.Neice.Charlot";"Francy.Daug.Angela";"Marco.Sis.Angela";"Sophia.Aunt.GinAng";"Christo.Daug.Vicky";"Andy.Daug.Jenn";"Marco.Son.Alf";"Vicky.Husb.James";"Vicky.Fath.Christo";"Christi.Husb.Andy";"Christo.Son.Art";"Maria.Daug.Lucia";"Francy.Son.Marco";"Emilio.Sis.Lucia";"Charlot.Aunt.MarJen";"Sophia.Moth.Lucia";"Penny.Son.Art";"Colin.Uncle.ArtChu";"Jenn.Moth.Christi";"Emilio.Moth.Maria";"Chuck.Nephew.Colin";"Marge.Neice.Charlot";"Vicky.Moth.Penny";"Andy.Son.James";"Lucia.Son.Alf";      };
     };
     String_Data @[4] {
      name="group_name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [100] ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;      };
     };
     int_Data @[5] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="phase_no";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [100] 3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;      };
     };
     float_Data @[6] {
      name="minus_cycles";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [100] 50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;      };
     };
     float_Data @[7] {
      name="sse";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [100] 1.6507857;1.7196991;1.5764754;1.7445725;1.5809076;1.6953715;1.4406996;3.0229516;1.69488;1.6758963;1.6458647;1.712065;1.6945536;1.6862764;1.6615673;1.6604123;1.6770601;1.7753952;1.5329499;1.7461704;0.99047756;1.6912296;1.6777108;1.7700707;1.5535067;1.5254381;1.7724686;1;2.5691373;1.4359084;1.7073207;0.77943587;1.7927248;0.99998534;1.7387207;1.785426;1.5262735;0.99986613;1.5765934;1.7673919;1.7042915;1.7033765;1.7118454;1.792981;1.7762191;1.4463966;1.6186625;1.6687;1.7678318;1.6230295;1.7930743;1.9999255;1.7970939;1.7590637;1.7923521;1.6418297;0;1.7797332;1.579226;0.99971926;1.5651914;1.6564496;2.808125;0.99999189;1.7630138;1.8205926;1.6013402;0;1.7014;1.7679119;0;1.5987349;1.772078;1.7875741;0;1.7693537;1.7273164;1.7907233;2.7470543;1.8135147;1.6717234;1.7258239;1.7703657;1.7858516;1.6549497;1.7989935;1.7522593;1.7531965;1.7717041;3.4977489;1.6653078;0.99999964;2.3920333;1.8217974;1;1.8187462;1.8174527;1.8010292;1.7682601;1.7395549;      };
     };
     float_Data @[8] {
      name="ext_rew";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [100] 0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;      };
     };
     float_Data @[9] {
      name="mean_Agent_act_dif";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [100] 0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;      };
     };
     float_Data @[10] {
      name="mean_Agent__act_dif";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [100] 0.033564948;0.040739223;0.031113828;0.032425124;0.045841999;0.030894397;0.059023969;0.030724028;0.046611566;0.051987953;0.033542573;0.051335901;0.029184982;0.037468359;0.034289394;0.0300074;0.030055281;0.04928856;0.027213866;0.043503173;0.026039757;0.051812425;0.038223028;0.027176304;0.030358994;0.038148627;0.040702365;0.029851306;0.046120577;0.075247072;0.034124777;0.047876317;0.064312048;0.042064775;0.033725142;0.045499932;0.040453471;0.043245543;0.045198649;0.045943085;0.050138611;0.027011421;0.034736026;0.036431834;0.033373479;0.039083779;0.030985858;0.029665377;0.017854933;0.042026471;0.058660161;0.036617972;0.081612326;0.052861918;0.03902017;0.070836462;0.028546199;0.038657073;0.051973484;0.025616659;0.034355097;0.041113492;0.026651494;0.022112841;0.040963717;0.027193079;0.031386696;0.030290069;0.046528623;0.044792343;0.025224155;0.062074542;0.02046207;0.019004742;0.032151289;0.055237494;0.044698507;0.052166354;0.036385912;0.035684824;0.029281212;0.031751201;0.04323322;0.04870024;0.05469837;0.025060495;0.037219845;0.024214912;0.052364536;0.044123441;0.038964663;0.048963897;0.016771842;0.050207861;0.051435485;0.049407013;0.033392802;0.030793317;0.043333773;0.031530939;      };
     };
     float_Data @[11] {
      name="mean_Relati_act_dif";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [100] 0.040210746;0.056273703;0.040818688;0.03313116;0.038167976;0.032295488;0.04531474;0.03619241;0.02623662;0.037832621;0.058825206;0.046157788;0.03218456;0.031772025;0.023850847;0.038771171;0.038148571;0.044716287;0.046469107;0.041961305;0.026469549;0.032260548;0.056945916;0.037578639;0.024323279;0.047887228;0.036536034;0.041358877;0.063803732;0.05668699;0.032893762;0.039222732;0.043702088;0.021858905;0.025744084;0.038383398;0.048318766;0.033829886;0.02779823;0.030078029;0.067870833;0.030917628;0.029955193;0.031253193;0.019532226;0.034947567;0.033149943;0.045522571;0.019845728;0.036242783;0.044998452;0.028623395;0.040101212;0.040439971;0.021550771;0.045650102;0.025800364;0.025189597;0.043424472;0.040619824;0.068901129;0.016110867;0.02411709;0.026986767;0.016669044;0.036803793;0.029579177;0.028974464;0.031761941;0.030462869;0.013887968;0.051655166;0.03136801;0.038213369;0.036110282;0.034358639;0.021785311;0.04196386;0.05208895;0.014350927;0.013058874;0.03690983;0.036718838;0.026563855;0.034219958;0.029230224;0.014191657;0.038857546;0.03547027;0.022940241;0.035391483;0.037014131;0.036877643;0.034392428;0.023463015;0.024163118;0.037641183;0.015321697;0.052646104;0.039172962;      };
     };
     float_Data @[12] {
      name="mean_Patien_act_dif";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [100] 0.12690724;0.15864879;0.1797621;0.16527236;0.14408259;0.1332006;0.19010514;0.12562336;0.17841177;0.17184347;0.21292073;0.2070073;0.14255702;0.15301499;0.14925726;0.16010243;0.13863237;0.20495324;0.12959136;0.19267134;0.077776514;0.19273442;0.16060148;0.16366976;0.12987785;0.17921054;0.13293792;0.16717111;0.17808001;0.15816242;0.16548061;0.12744211;0.21971312;0.13238375;0.15158103;0.16653267;0.17465521;0.1281704;0.16039906;0.17050651;0.19384764;0.1355672;0.22108749;0.19534744;0.20304172;0.16377577;0.14904979;0.159347;0.20312268;0.22455075;0.24808815;0.10735734;0.26358968;0.16034041;0.13480456;0.15155362;0.015765792;0.22231694;0.2033924;0.15685067;0.1930753;0.20429112;0.094888471;0.13048378;0.17486924;0.18722016;0.14794692;0.042987812;0.17314714;0.18253066;0.018781886;0.20335093;0.21353601;0.16640271;0.022600794;0.20846775;0.12741302;0.16955864;0.16062973;0.20049104;0.14637938;0.17942037;0.21205898;0.17170016;0.19080937;0.16844976;0.2203299;0.18288743;0.18209678;0.21892901;0.18014428;0.19440235;0.11706673;0.19179544;0.18283051;0.24332422;0.18676189;0.19425468;0.24435361;0.19289507;      };
     };
     float_Data @[13] {
      name="mean_Hidden_act_dif";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [100] 0.056957483;0.099635378;0.075829946;0.062705792;0.058023099;0.054806534;0.10153165;0.05244264;0.076891288;0.093156636;0.093419045;0.093414702;0.059815228;0.058090612;0.05786093;0.076093316;0.06570027;0.079996109;0.067381322;0.085903913;0.041371346;0.07728187;0.081920862;0.069229074;0.051832985;0.093451433;0.061281119;0.078069285;0.088909894;0.094399348;0.067239702;0.071805231;0.10539211;0.062063951;0.05684109;0.084560774;0.071970068;0.062533781;0.077710845;0.067433879;0.093141437;0.065689884;0.072728001;0.075829029;0.073627718;0.083962157;0.049248029;0.08383105;0.057173401;0.091539219;0.10272455;0.066322781;0.13009891;0.086236566;0.058887377;0.086781688;0.04209495;0.066284783;0.089839973;0.079546794;0.10765286;0.059519354;0.043230753;0.056485467;0.072010472;0.062932916;0.067078643;0.047454581;0.069507018;0.070633434;0.038151376;0.096543722;0.074432567;0.070527397;0.042691767;0.083085671;0.055888496;0.078477867;0.081590384;0.050888591;0.044391073;0.058618192;0.10123365;0.057748429;0.073946431;0.057151131;0.048139062;0.071496278;0.076360241;0.077750303;0.071394198;0.076412387;0.049005568;0.075621806;0.071605206;0.074532695;0.082799323;0.061252061;0.087737441;0.075967856;      };
     };
     float_Data @[14] {
      name="pat_code_st_maxda";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [100] 0.056070387;0.069289267;0.1092366;0.1220191;0.19670647;0.093507588;0.10286787;0.078037262;0.098922461;0.12441814;0.047278896;0.081572652;0.10191879;0.066117674;0.053930908;0.090259731;0.12832379;0.074668229;0.10977325;0.099351466;0.076707065;0.069125026;0.10097188;0.11708581;0.074330889;0.14049155;0.17899835;0.07639432;0.078290641;0.15747687;0.10794872;0.12704381;0.23153624;0.1119892;0.15088141;0.12462658;0.13497835;0.096673578;0.15256168;0.17806017;0.1579394;0.13059096;0.16972142;0.061427057;0.12617427;0.073694915;0.066372275;0.084085301;0.10640633;0.15743101;0.16572908;0.048701361;0.1950826;0.13565513;0.055249453;0.11300951;0.16829401;0.064965725;0.098584175;0.094301641;0.12658325;0.069035262;0.13639826;0.052841693;0.16199368;0.14575708;0.082824491;0.037110835;0.11328359;0.14705896;0.057980061;0.061198354;0.12831131;0.087987483;0.14754862;0.1518735;0.15020743;0.045896351;0.058996677;0.025996715;0.15389934;0.035407722;0.087115049;0.16733563;0.1853219;0.088989615;0.071832657;0.19251508;0.20793724;0.13115233;0.086256742;0.13611239;0.1031456;0.19421875;0.089411169;0.20085409;0.10442835;0.11020981;0.16110474;0.06968227;      };
     };
     float_Data @[15] {
      name="hidden_st_maxda";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [100] 0.025924459;0.029250488;0.046400189;0.037480384;0.076626033;0.022693008;0.042647108;0.030643225;0.042703867;0.042327374;0.044203967;0.041738987;0.026607573;0.031128615;0.039962947;0.037333488;0.028537944;0.037029415;0.028915942;0.064198762;0.029755831;0.039606005;0.094918698;0.033353955;0.017693639;0.036076009;0.09092766;0.023119211;0.037468433;0.050419033;0.033321738;0.039568424;0.053537577;0.052290469;0.058911085;0.0309503;0.052090406;0.041567028;0.032920301;0.057218313;0.031339705;0.052180812;0.040393144;0.034819186;0.065279037;0.05087173;0.051665634;0.037371144;0.02761507;0.049939811;0.09607178;0.021590337;0.061563343;0.034236915;0.041443944;0.043866366;0.036185406;0.036000073;0.028786838;0.02782172;0.033613205;0.030351743;0.027600408;0.041292191;0.063023686;0.066279665;0.048784882;0.030374765;0.032414496;0.049715042;0.078625411;0.035984427;0.05635041;0.083672941;0.041851759;0.037804306;0.039386183;0.041359127;0.02451849;0.018020809;0.045469031;0.030831575;0.02488637;0.047224283;0.040097773;0.034327894;0.038000271;0.054051682;0.045938522;0.068789631;0.057062477;0.037369132;0.033202082;0.060922623;0.037760317;0.079772413;0.037722051;0.050668448;0.060747981;0.037772596;      };
     };
     float_Data @[16] {
      name="ag_code_st_maxda";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [100] 0.015067071;0.019937098;0.016926706;0.0214324;0.027235903;0.022990078;0.023088247;0.035112083;0.013139606;0.016701579;0.034061611;0.023672201;0.014758945;0.011837691;0.015981749;0.013098896;0.015325129;0.01585722;0.02491194;0.020931691;0.0083639324;0.012354195;0.012150794;0.02362293;0.0058887601;0.025327027;0.030890226;0.012239277;0.019478381;0.016416699;0.02109623;0.019097775;0.038284034;0.038571388;0.031728983;0.030983329;0.014869988;0.036425591;0.013843536;0.038373917;0.018604219;0.022367716;0.019272119;0.016889274;0.030580223;0.020661399;0.026467592;0.03180626;0.020218194;0.021837354;0.026843667;0.022175431;0.031726331;0.023447156;0.013315797;0.027410448;0.021483809;0.026365936;0.021398067;0.014915794;0.026305497;0.018564522;0.018664479;0.01791504;0.046478987;0.026615202;0.019154549;0.016013131;0.011237904;0.017510056;0.042875022;0.017199218;0.011938721;0.049257994;0.033848763;0.021711469;0.020660967;0.040669292;0.0068710446;0.012889296;0.01017791;0.013860524;0.013632834;0.032269686;0.021059453;0.014826655;0.022795618;0.034317672;0.036113761;0.011548758;0.012095898;0.0075707436;0.013344526;0.024717748;0.036114335;0.018875077;0.020993203;0.017537594;0.013916597;0.030124843;      };
     };
     float_Data @[17] {
      name="rel_code_st_maxda";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [100] 0.021035969;0.018846422;0.018974602;0.014792621;0.035215229;0.022957623;0.021002054;0.032452554;0.017284572;0.014314532;0.033532932;0.019551098;0.011574596;0.006362468;0.014896661;0.010937303;0.037893742;0.028819978;0.023899853;0.022674263;0.0090043247;0.010930091;0.026163667;0.020878613;0.0065001249;0.047380298;0.029619381;0.015216529;0.031878561;0.018770061;0.020581394;0.013175189;0.010501027;0.012349509;0.031796604;0.030990571;0.012939304;0.027980804;0.010714054;0.013057411;0.015623212;0.020026028;0.021055609;0.022889853;0.010216713;0.028697371;0.016940355;0.025947392;0.008412838;0.038226694;0.038467765;0.031407654;0.014223307;0.044231057;0.0070762038;0.015401646;0.052937657;0.0089942664;0.018084228;0.031044662;0.017245591;0.010015726;0.021980703;0.016970366;0.034716338;0.023625851;0.02581802;0.021871924;0.0051766299;0.021569997;0.052823246;0.015206546;0.010760665;0.063656986;0.030051738;0.013185024;0.011732221;0.057856977;0.011525601;0.011418998;0.0049679801;0.030571282;0.010485768;0.027071178;0.022349894;0.014449269;0.020285353;0.025497735;0.03311348;0.012971401;0.016879454;0.02093339;0.022826865;0.039814532;0.044777662;0.024934798;0.025490344;0.012937427;0.012354404;0.018145561;      };
     };
     float_Data @[18] {
      name="Hidden_act_m";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 8;8;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [8 8 100] 0.0001260542;0.00063443091;3.7881052e-06;6.7954006e-06;0.0042383131;0.17931604;0.00010252949;5.9534877e-06;0.001965818;0.034655258;0.00018123721;0.019202609;0.02727958;0.0017433447;0.7237578;0.0037937351;0.015711416;0.17489989;0.00055830809;0.044005811;0.017299999;0.049634799;0.022502512;0.83227777;0.00066928513;0.0067677833;0.53478819;0.044554383;0.0012988779;0.0052103819;0.013575458;0.052372962;0.012100581;0.046381615;5.3870572e-06;0.019162359;0.0065282127;0.52648342;0.051040955;0.00026693312;0.6006003;0.38752449;0.39518529;0.021886451;0.49931151;0.77948046;0.61039931;0.012382459;0.015098155;0.013491951;0.032036204;0.0070815468;0.0020252941;0.03772055;0.026148608;0.00010478788;0.75111216;0.74298203;0.0010754155;0.00023712341;0.013226414;0.0081920065;0.0032380766;0.038531162;0.011988238;0.048216566;0.25050357;0.04889062;0.019869763;0.17996542;0.00011299345;0.013213677;0.61386853;0.044955328;0.0079961605;4.7961134e-07;0.0056520104;0.035057209;0.024558824;0.023963619;0.0012743578;0.0044807051;0.33999982;0.71241719;0.0015788288;0.029882923;0.040648617;0.028151531;0.26648131;0.048536647;0.10865781;0.31615993;0.56200856;0.060011927;0.76171458;7.3294723e-05;0.28368556;0.00070158718;0.0058044996;0.26223612;0.0086180689;0.0072724465;0.39069188;0.0018236391;0.0067857383;0.018622836;0.14779203;0.54428905;0.009456736;0.027475201;0.019933997;0.028052678;6.0071528e-05;0.0018830203;0.013030204;8.2640736e-06;0.0013438166;0.011278735;0.0031264438;0.0014381142;0.69761086;0.000337531;0.042280912;0.0034172973;0.22769159;0.8245886;0.023020133;0.017842021;0.039071683;0.071158111;0.0014863716;0.52757758;0.0087465122;0.71772355;0.00051440898;0.0010543591;0.0062551694;0.023983639;0.24172504;2.1611018e-05;0.026494177;0.2367453;0.4705798;0.078607254;0.049223118;0.13510364;0.057564095;0.074846633;0.69790727;0.0023759091;0.017710427;0.0005202099;0.043186814;0.0036026654;0.00031853403;0.010673285;0.20932294;0.024998449;0.042769093;0.00019829636;0.41115242;0.002718349;0.022110434;0.5437023;0.0013035587;0.57550097;0.032998469;0.0049645272;0.66863978;0.10113995;0.059834186;0.011374857;0.012336802;0.75763363;0.12848601;0.12639949;0.019307092;0.014730368;0.17126533;0.0038402895;0.013029002;0.049246266;0.033057518;0.017824503;0.41018417;0.012900438;0.075670257;0.029210344;0.17037031;0.0492201;0.0034468295;0.025595114;0.00080536236;0.013886053;0.058876883;0.0044318419;0.00039034605;0.76672792;9.93063e-05;0.00014663413;0.00030544831;0.0059794961;0.015104404;0.00061025238;0.17544834;0.03780745;0.25154534;0.048653409;0.0027964253;7.1352464e-05;0.041387767;0.5575617;0.31677034;0.033015579;0.28620386;0.0031414316;0.056375477;0.48057237;0.0016447352;0.5339002;0.41959131;0.0015124133;0.76374459;0.00076585799;0.71289313;2.7542617e-05;0.037170973;0.0052755331;0.025658095;0.016113568;0.11124099;0.00082172354;0.028535474;0.014836343;0.58821625;0.21362816;0.12087382;0.24296597;0.012058888;0.018133784;0.013035972;0.067577235;0.11051196;3.3168892e-06;0.00018130202;0.27118513;0.02753735;0.0002106467;0.59833246;0.0054237898;0.013680471;0.012625769;0.025539221;0.065236546;0.00060962694;0.03022776;0.0013838427;0.00023793221;0.00015436931;6.2904139e-05;0.012639106;0.24545637;5.9421793e-05;0.00018127321;0.013128849;0.01618842;0.00043739087;0.019860795;0.0041800234;0.0033434988;0.59623307;2.7530117e-05;0.02545747;0.34926295;0.0095824162;0.049529783;0.011633546;0.073787689;0.00052471692;0.79133761;0.0049136123;0.016705001;0.64381075;0.007598842;0.010186665;0.0033795899;0.010196157;0.010227637;0.00022012428;0.24253982;2.2054453e-06;0.0015896976;0.00047610843;0.015952442;0.028521292;1.9811803e-05;0.0029406955;0.8108508;0.58100796;0.17557161;0.016828673;0.41668412;0.74941361;6.6576715e-05;0.0021117677;0.084415667;0.011818943;0.00012584301;0.0011717564;0.72288454;0.0079937233;2.6794736e-05;0.74971759;0.47102132;0.00091683271;0.0026230984;0.24682792;0.22201696;0.017488319;0.0068010003;4.1243053e-05;0.2113626;1.9034871e-07;0.00062564376;0.02749522;0.68984061;0.00019208518;2.4057456e-06;0.0038247714;3.0475487e-05;0.0075568403;0.00029311684;0.17878635;0.0059903972;0.54604924;0.010721706;0.03299243;0.40153262;0.085692406;0.039605156;0.5040257;0.0063246805;0.17607093;0.031063201;0.00016828206;0.00052564288;0.0066249776;0.056447573;0.018889155;0.042902965;0.022152979;0.00079598621;0.067854613;0.00023482421;7.1973533e-05;0.3273342;0.005820659;0.15439214;0.028164878;0.016110443;0.47840905;0.15858676;0.16783531;0.04408231;0.39444974;0.74572182;0.18020302;0.030045383;0.66323107;0.00011625264;0.065522432;0.025196156;0.30371931;0.0010051162;0.003421702;0.010574399;0.037798055;0.044021245;0.0068950718;0.0019154993;0.7140584;0.040845901;0.21719675;0.28292912;0.0054035904;0.11916672;0.0013253251;0.62118161;0.0017303531;0.69344586;0.00063547952;7.5650452e-05;0.018807404;0.041926943;0.078539163;0.00089361693;0.032785416;0.14671211;0.011682689;0.22505236;0.016062263;0.013721444;0.050912116;0.52220422;0.76297969;0.0077736466;0.02267394;0.0004178604;0.28134683;0.0079058073;0.004288651;0.0035595396;0.0036081155;0.066500768;0.065706685;0.00056884286;0.30830824;0.0027140393;0.00058144418;0.029742567;0.00056130055;0.65127444;0.26719704;0.0035940467;0.63867033;0.038309384;0.66932702;0.020845782;0.02875049;0.60193843;0.010166119;0.0984874;0.01213927;0.0010533012;0.18624486;0.00027074723;0.00051226281;0.060630772;0.080828778;0.00021066591;0.52248967;0.018695829;0.00975856;0.0075560706;0.05083327;0.065207005;0.0004151194;0.096447356;0.00023782181;8.179828e-06;0.00016322287;0.013992028;0.00043922436;0.52082008;0.039769225;0.00014568133;0.00017319965;0.04862858;0.00065181521;0.0010223179;0.57979149;0.029371765;0.11226761;0.020122526;0.00046545098;0.0013578446;0.00038525037;0.1629636;0.29610464;0.00023514342;0.52112365;0.7122612;0.002302459;0.042762049;0.0043846457;0.5633474;0.018888114;0.0024844999;0.07471545;0.0010431425;0.015704928;0.00026329682;0.0053752474;0.027000956;0.0014578665;0.5903374;0.0031106637;1.2200003e-06;0.33411586;0.042808346;0.089637026;0.0043860567;0.16617747;0.80811119;0.0067331563;0.029932765;0.0043350132;0.046100117;0.70760846;0.0001004031;0.0005730004;0.16441868;0.18395996;0.042474844;0.7099213;0.07265114;0.0026638159;0.002166681;0.03027943;0.0010909941;0.00012691101;0.36633343;0.0082338201;0.021851415;0.030818272;0.031994265;0.0058892081;0.6621083;2.4422039e-05;8.5674474e-05;0.31011319;0.014517097;0.0010908637;3.0482435e-05;0.00017517243;0.66062945;0.054253086;0.0099702701;0.0024481551;0.00068055972;0.26976082;0.38441214;0.086697303;0.0074203182;0.18715417;0.01284733;0.027559247;0.050685309;2.6737474e-05;0.026798036;0.054871928;0.0061300616;0.82432199;0.028970512;0.00016064048;0.0082811601;0.029220773;0.42460513;0.011189101;0.041319318;0.17865148;0.0019500379;0.044658057;0.34593794;0.00083636015;0.082478032;0.00060077844;0.18763652;0.00050841802;0.074822605;0.035072643;0.018794056;0.80491006;0.0074352594;0.00013188859;0.037382349;0.004453131;0.0061600721;0.72371781;0.033659775;0.50734925;0.018331073;0.066832721;0.63746309;0.042729165;0.036162741;0.018565902;0.023137547;0.036729094;0.28448033;0.00055706943;0.60411906;0.025216594;0.00093938177;0.029344652;0.12483183;0.006417213;0.03986619;0.00083307055;0.73322529;0.029986572;0.0070312084;0.021424301;0.014923213;0.011030259;0.0076395613;0.072455876;0.00017183885;0.0057388996;0.0084075611;0.0005655745;0.54524273;0.0060200235;0.25639448;0.48972121;0.0062221447;0.04318111;0.0017054789;0.013816364;0.00065738917;0.0016511043;0.011865201;0.00048344844;0.060817525;0.029319417;0.0009408599;0.6409204;0.54391527;0.20667943;0.66806841;0.0061034495;0.61182666;0.011003224;0.0083948243;0.0052035851;0.037479315;0.57316762;0.014047539;6.7195169e-06;0.5740602;0.0057943035;0.00015846609;0.65704405;0.11476547;0.0057587782;0.34661594;0.019443901;0.007173758;0.01316898;0.0029551764;6.6976691e-06;0.0059483312;1.9418534e-05;0.0051367027;0.0014277671;0.50082976;0.00011617584;0.0010119128;0.30380312;2.2770774e-07;0.0068529416;0.013518626;4.4551674e-05;0.25520065;0.0037027008;0.25364387;0.0068771807;0.034905888;0.001549512;0.26387855;0.076192968;0.38573813;0.46218401;0.11040999;0.58510828;0.0026219259;0.026969047;0.011991002;0.016293949;0.015142973;0.032869294;0.0019174956;0.2190212;0.026757576;0.0006495954;0.072672673;0.0082362229;0.021582175;0.49118304;0.0026058289;0.22161224;0.53495127;0.048180662;0.4560006;0.0027218978;0.34743157;0.099406496;0.00012348141;0.026521496;0.13044976;0.010238211;0.023277069;0.08178959;0.23822604;0.015031591;3.4537413e-07;0.027165085;0.0039726435;0.006010212;0.00060533453;0.73808366;0.80257916;0.23447008;0.020635771;0.0012933565;0.015241018;0.26990685;0.047776029;0.064704321;0.65944868;3.0890583e-06;0.010271253;0.025600744;0.0054043601;0.019797813;6.6980632e-05;0.0089560589;0.79952896;0.028348196;0.013428992;0.00056899007;0.014601924;0.68670571;0.063102141;0.013953099;0.01061477;0.0079310089;0.00024385539;0.016040394;0.0560265;6.3794791e-06;0.024306893;0.33353657;0.0016683419;0.68366188;0.0039182012;0.29778987;0.0024040472;0.24614589;0.2906372;0.033790626;0.03639324;0.012739073;0.00091145624;0.29633203;0.0076678405;0.0041932329;0.078685358;0.00053137017;0.044390652;0.00062288437;0.17449437;0.0036783654;0.033837937;0.57284594;2.8337781e-05;7.6961223e-05;0.047038894;0.0049133557;0.010235807;0.80350214;0.0061466061;0.48996156;0.19271545;0.001486589;0.48432511;0.16833195;0.01257194;0.00013308859;0.008349767;1.1647609e-05;0.0013492655;0.0010622715;0.62518209;0.0010592283;0.00018732599;0.01761491;3.115302e-05;0.0096105319;0.011472061;0.002009229;0.0087749884;0.012523999;0.2677165;0.026937973;0.38426453;0.31714138;0.64162016;0.028989907;0.083094865;0.052478313;0.010765562;0.0067418772;0.49568141;0.17752957;0.014774224;0.023806997;0.0023273332;0.22173645;0.019906886;0.0012456062;0.0025978754;0.0029648724;0.039418943;0.023930876;0.0013431645;0.20590532;0.00058238849;0.028629739;0.82080722;0.08787097;0.16328874;0.0043595731;0.44759986;0.78152722;0.00052884372;0.0088432357;0.18624218;0.0076706619;0.031267531;0.017954014;0.41305387;0.00060866424;3.3845779e-05;0.26739812;0.017691448;0.00065940182;0.0031720095;0.66414523;0.52768636;0.059435144;0.007597303;6.9723428e-06;0.0014550115;8.5491229e-06;0.0028421492;0.64785087;0.05204751;0.0011540476;5.5425471e-07;0.050487351;0.0097943656;0.00026454777;0.0014938784;0.023744432;0.0042460077;0.52375144;0.0048188996;0.069430254;0.18186265;0.00064659689;0.016050246;0.00036104728;0.01646642;0.065495394;0.8026157;0.071671814;0.00020489632;0.75776547;0.069196939;0.0011146446;0.0075102858;0.0066673001;0.010187265;0.010526698;0.0097612031;0.00031493453;0.15817319;0.0022574004;0.69979519;0.24746925;1.707374e-05;0.51500267;0.36912054;0.0028123953;0.61332136;0.025267271;0.029378228;0.084564865;2.3844488e-05;0.048197776;0.01021418;0.022304596;7.2049967e-05;0.026825564;0.047341533;0.029304817;7.4775164e-07;0.7106213;0.69128305;0.019611159;0.00017454123;0.18915859;0.33473825;0.00032142221;0.015545364;0.0052859853;0.00015441011;0.002398185;0.0081528369;0.00013325179;0.089069612;0.0012599675;0.002633048;0.012400722;0.00019009558;0.0015199489;0.0070498688;0.010605878;0.076284587;0.021094374;0.0080464985;0.0032109525;0.0014635907;0.011131307;0.66231698;0.45732018;0.015581891;0.48920611;0.011837807;0.1036163;0.55574715;0.021342549;0.4894146;0.041185781;0.013622317;0.7960099;0.0076337261;0.013360985;0.024103347;0.18351692;0.037282027;0.068892524;0.00020166114;0.7083686;0.044811726;8.49231e-05;0.64444506;0.34752414;0.21425879;0.0086842729;0.30350628;0.090527683;0.00061575283;0.0020585021;0.010211417;0.0053608194;0.00019743956;0.012441094;0.76928115;0.015128434;0.017058287;0.11308196;0.0039502638;0.013604174;0.031406101;0.086687595;0.60547107;0.071562663;0.035728246;0.0070251804;0.059128225;8.1723934e-05;0.00066253199;0.0024896334;0.30473667;0.0035009505;0.0074260253;0.002032202;0.0011783068;0.00092603487;0.013076583;0.84071785;0.68899274;0.02909293;0.20574044;0.012659051;0.053283263;0.015668882;0.7585597;0.67339599;0.15710132;0.022093333;0.10479552;0.011843814;0.11552364;0.012101542;0.030712919;0.062454756;0.36348125;0.072482415;0.0016582338;0.0019059932;0.045043904;0.026133802;0.39169765;0.00011860463;0.056310888;0.17940001;0.014600122;0.075486504;0.011112203;0.53139472;0.1885896;0.077822186;0.80050945;0.015504393;0.00019702676;0.28489444;0.00013627578;0.001846327;0.033260509;0.039434712;0.028197411;0.25642017;0.0008159703;0.002959264;0.0051710736;0.0035882795;0.035716165;0.025958825;0.20265901;0.011105234;0.0247363;0.0023966325;0.023130041;0.00010689267;0.00020784591;0.00086663337;0.17100093;3.3282908e-05;2.6401467e-05;0.0041123717;8.1041253e-06;0.006026628;0.0012274627;0.033815119;0.048034713;0.25359893;0.028302314;0.0062323408;0.060454533;0.1119728;0.55915195;0.54623723;0.0039556501;0.21854261;0.010568511;0.0074646287;0.11023033;0.0011676698;0.027086046;0.03930755;0.021463301;0.66944629;0.074379995;0.0018154639;0.012215086;0.032963239;0.046201445;0.0011314695;0.0001860036;0.71846616;0.34057432;0.0023327833;0.071581684;0.74041814;0.58757001;0.0070990529;0.23369277;0.079463921;0.0035052283;0.57297736;0.00028989138;0.0002580233;0.034334838;0.054018766;0.084711067;0.004070498;0.0025260097;0.020945886;0.0055560153;0.00031178881;0.00074022211;0.49889454;0.6280843;0.33415654;0.12783813;0.0071273316;0.036397602;0.044930499;0.010474912;0.0064298455;0.60577238;0.020402402;0.003169443;0.017881647;0.081874706;0.017160686;0.0055540917;0.0019585935;0.15863678;0.030104611;0.011931526;0.0038163068;0.0029247571;0.012305561;0.010337337;0.35739163;0.0011779154;0.31881943;0.012354344;0.14552499;0.010862285;0.056265324;0.35924304;0.02928292;0.018971743;0.42253354;0.00031828263;0.25338155;0.00040192332;0.000469308;0.65399361;0.0097592808;0.073059201;0.34508479;0.00021549469;0.23038971;0.6231184;0.02646769;0.15651624;0.0041866922;0.70031351;0.45825958;0.010522973;0.0030217823;0.01383571;0.09797132;0.0071742712;0.0036789989;0.65553707;0.00035867421;3.995053e-05;0.69909632;0.0025167572;0.0058168117;0.039667562;0.049640503;0.5217557;0.00021902507;0.0085980035;0.00042031321;0.040807653;4.3057798e-07;0.00036602037;0.67986786;0.56485385;0.00013304778;0.00019061638;0.0047859396;0.010320515;0.0080035347;0.4602218;0.13098317;0.028909197;0.63361126;0.33738577;0.34051687;0.23968753;0.070685461;0.011434574;0.016854115;0.0075333705;0.27355021;0.0056386082;0.0013163983;0.028712116;8.2217317e-05;0.057132006;0.012005179;0.046523876;0.00024607059;0.00087919767;0.068827935;0.00048702955;0.052067641;0.84785241;0.036262389;0.020276021;0.028032031;0.029003881;0.56415612;0.058985028;0.049300622;0.77858573;0.030662255;0.013393426;0.061667182;6.7988251e-05;0.41489524;0.075071439;0.00020227794;0.048920818;0.007029477;0.043911867;0.020835146;0.0039766193;0.0056519462;0.010694671;4.6597788e-06;0.52588767;0.32214922;0.0099642621;0.026680414;0.042214818;1.6404341e-05;0.0088897347;6.6348264e-05;0.0062079094;0.022734627;0.15046905;0.00049252383;0.0016037836;0.00073836715;0.0076812427;3.9796128e-06;0.052713487;0.030349217;0.036577106;0.059129726;0.041145183;0.5580759;0.021623051;0.010042362;0.089169502;0.61115658;0.058997549;0.026599078;0.090951502;0.0059256954;0.034256324;0.032628056;0.036193609;0.0080152052;0.0070273611;0.39606598;0.010712094;0.0043117357;0.004189129;0.0034032599;0.0036626169;0.0018730706;0.6608116;0.081804112;0.0016234054;0.0018748768;0.81699193;0.19009203;0.22055013;0.047267385;0.77840263;0.31135556;0.0011591052;0.0024048393;0.099972524;0.13933668;0.015688106;0.02565893;0.76523888;0.029197207;5.2047208e-06;0.66001338;0.33030254;0.0041138465;2.2557238e-06;0.038292609;0.51976442;1.2018498e-05;0.013225213;0.002183158;0.02150522;0.0090890685;0.0011117317;0.011364765;0.029946947;0.019314183;0.0029442445;9.458312e-05;0.0025658084;0.00095136644;0.00061510899;0.80162054;0.40743458;0.51632792;0.0060771583;4.7078523e-05;0.0035744007;0.0027754167;0.25559789;0.69999558;0.0014749812;0.05118724;0.78336781;0.033347409;0.0021922207;0.46519601;0.47556138;0.027227443;0.039295807;0.054370247;0.01386815;0.00015515411;0.67038858;0.017936079;0.015314791;0.00077308936;0.014863737;0.010551449;0.00014289495;0.23533198;0.00095310539;0.03284581;0.15267354;0.44058251;0.7422567;0.003527821;0.016051088;0.37204024;0.0061315363;0.0036602721;0.001497081;0.015926849;0.34608054;0.085739464;0.0106698;0.018556725;0.070871718;0.0037598128;0.21171913;0.01469264;0.024962578;0.00054887088;0.071047455;0.0014181011;0.0096082492;0.015827844;0.014713186;0.0006226452;0.77252603;3.6111633e-06;5.7886832e-06;0.028928801;0.054286633;0.0020156614;0.00012883579;3.4783901e-05;0.45207861;0.021563822;0.0057937261;0.001571438;0.00011755584;0.4432413;0.12926915;0.015788674;0.0066177957;0.4400993;0.0061979056;0.0066168979;0.31938198;8.5128966e-05;0.013951897;0.46139175;0.00060174114;0.86051148;0.0021316037;0.015786871;0.0001865196;0.076036751;0.30499521;0.021508973;0.00068338559;0.50659376;0.00091158669;0.00098037883;0.11596341;0.0012816471;0.15263961;9.737911e-05;0.0044923755;0.0015457442;0.039082754;0.016576534;0.12000883;0.77040499;0.0006275631;0.00017747402;0.066035636;0.0011792197;0.00094196131;0.76679486;0.0029628761;0.38872039;0.030363645;0.015741695;0.59348547;0.052247815;0.020992601;0.0012321435;0.00057028391;0.0005657585;0.00094955496;0.051217437;0.060533639;0.38831758;0.0095609091;0.00060243404;0.018582795;0.00063963089;0.22824834;0.7278896;0.015074845;0.023699384;0.032873321;0.0027623936;0.0098797949;4.9056812e-06;0.0063600135;0.60189879;0.0022921292;0.35250542;0.84266704;0.0064002196;0.015747823;0.058069281;0.74517518;0.0031731185;0.027793448;0.018279562;0.00031472606;0.0080586821;0.00095980061;0.0036258602;0.069661066;0.046090052;0.0050441064;0.15341672;2.3502085e-05;0.0062033562;0.45274332;0.0037104008;0.0256704;0.6742571;0.757936;0.035811789;0.002163037;0.019835353;0.0070794942;0.12060884;0.0011438309;0.0069123851;0.019182796;0.14841461;0.7077409;0.034306318;0.057234146;0.0063752751;0.015695676;0.0080190524;0.024030771;0.021255167;0.6445601;0.020172162;0.23475167;0.24906243;0.0044449233;0.0034008836;0.099931598;7.845353e-05;0.0032056291;0.83255005;0.0091819465;0.0019911991;6.1548206e-05;0.0052121137;0.0021635755;0.011374257;0.57426405;0.0052959891;0.00064226764;0.04961903;0.36769444;6.3679829e-05;0.013831504;0.06683372;0.075260699;0.058891904;0.036205687;0.60001153;0.42420483;0.044788241;0.015975751;0.49359655;8.3945022e-05;0.3039611;0.00064562185;0.012650881;0.31989425;0.21648046;0.049597554;0.6223532;0.00340589;0.24293491;0.0653487;0.051628448;0.034981381;0.0023187462;0.047865279;0.023047872;0.055435695;2.0003641e-05;0.0099812038;0.0043258434;2.6287817e-05;0.0046445439;0.012661094;1.9489885e-06;0.0013830021;0.71701425;0.013122842;0.03726257;0.064748883;0.52360874;0.34961823;0.023117945;0.03214189;0.0015203982;0.0029872118;7.8937364e-06;0.5994525;0.28746539;0.68200415;0.02390293;0.00051134912;0.019578835;0.0084299091;0.0082189208;0.014353327;0.023065181;0.51432306;0.4871507;0.013217762;0.012040624;0.037005898;0.00099516043;0.045613617;0.52364045;0.003388589;0.0030259965;0.066316515;0.12074272;0.00031928212;0.03424995;0.014376277;0.0078884307;0.013497839;0.01088199;0.00022157386;0.00097110413;0.0019850836;0.0002392906;0.17081246;0.023392815;0.70791149;0.0055982736;0.0034499983;0.83401281;0.51528358;0.015206533;0.13049485;0.45148259;0.78110969;0.0089954687;0.03294814;0.017116889;0.00020686432;0.058666594;0.040554337;9.713191e-05;0.046733573;0.15923436;0.0028690198;0.30669004;0.45605454;0.0072757164;0.0036475339;0.0053495974;0.0035360595;0.0053201001;0.018766945;0.0026259818;0.024139009;0.0012452729;0.048787281;0.3196477;0.085422538;0.066324025;0.0034323486;0.029409302;0.012391711;6.3186446e-05;4.497209e-05;0.35596555;0.55388731;0.27269801;0.17990558;0.0034892266;0.034941789;0.0027483879;0.031136679;0.061177514;0.0011725245;0.14913367;0.81946021;0.036492892;0.00047218392;0.016959852;0.13597722;7.3354662e-05;0.15480123;0.0080986479;0.0024828522;2.4309553e-05;0.033838607;0.005041285;0.60083222;0.0014302162;0.027858101;0.011956037;0.022607204;0.67024451;0.6851424;0.022905014;0.087630272;0.50407231;0.52970701;0.04431751;0.0021471302;0.2411458;0.00011007506;0.56805474;0.0010666335;0.0026061458;0.020699378;0.017132949;0.038756967;0.048294403;0.059252895;0.014479608;0.00084064971;0.058570966;0.041865543;0.024887081;0.52759117;0.012292465;0.039648101;0.038034596;0.0077517158;0.01551725;0.017640144;3.162964e-06;0.0075227255;0.72950017;0.015079532;0.015065234;1.1408295e-06;0.00020166594;0.0016047255;0.0013800169;0.081376031;0.0035564343;0.00051405944;0.70307416;0.7137931;0.00014404455;0.015911711;0.033350091;0.0033613699;0.60988194;0.078696877;0.43815428;0.25830993;0.34863999;0.0024417227;0.78132105;8.0739155e-06;0.17436753;0.00067483546;0.012219531;0.02521117;0.013243476;0.012818854;0.60878766;0.0011063553;0.011176605;0.015138527;0.031165533;0.24118006;0.0085030822;0.001235578;0.011257468;0.21719354;5.6365561e-06;0.005558324;0.0011145577;0.00010714467;7.9788617e-05;0.0010921101;0.0018494322;0.0073042521;0.79036438;0.0067283469;0.045813918;0.0081739835;0.37937331;0.81404382;0.013593601;0.025487084;0.076102845;0.029687718;0.0460357;0.0015780607;1.4322308e-05;0.12121995;0.00016502767;0.00025914545;0.0008511272;0.0041105761;0.0030471948;0.001519094;0.016596764;0.01091335;0.14047019;0.0075002182;0.0169903;0.0033456851;0.0038996693;0.023627434;0.71430904;0.00031166617;0.30572534;0.025763832;0.051745541;0.50297105;0.00031546803;0.27058908;0.00098779867;0.07911545;0.021010119;0.00032315144;0.00041487411;0.0069124494;0.0065991352;0.42695689;0.0062394589;0.010814944;0.66060787;0.0045068678;0.0038084837;0.24458055;0.046001136;0.00084051926;0.0072598141;0.79082263;0.48532584;0.23825389;0.014130685;0.071718872;0.74423391;0.023044325;0.049034558;0.61547029;5.7526435e-05;0.024312524;0.80531722;0.24074002;0.08139205;0.001756368;0.033473227;0.0010257524;0.0062078452;0.044029299;0.037576277;0.0010384182;0.0022168411;0.096152551;0.040363427;0.026564458;0.54779351;0.019712098;0.0007988991;0.02026163;3.9538986e-06;0.0017878964;0.0011764662;0.3142401;0.0014859803;0.050259199;0.00010868547;0.0012243758;8.1409482e-05;0.15354535;0.040691901;0.15194021;0.01782638;0.7956109;0.014697686;0.0026709454;0.0068925708;0.75235343;0.0015749161;0.041290462;0.12013645;0.0010014208;0.024630357;0.0069705462;0.012051318;0.16011508;0.012070782;0.010227758;0.5991115;0.00011535984;0.032009024;0.83153003;0.0024918513;0.17771269;0.00057978858;0.7204327;0.025326291;0.00075375737;0.004781194;0.0019583083;0.092434548;0.0069011636;0.0045907432;0.38746443;0.018070593;0.17072046;0.63923138;0.012138669;0.018122105;0.008604371;0.21932527;0.68235856;0.041177392;0.0056600901;5.1803887e-05;0.038545925;0.00024289779;0.068224616;0.0107175;0.48670921;0.0036411015;0.00026375061;0.0072294828;0.022136504;0.55521703;0.00041607599;0.0020213968;0.0046790433;0.00051072979;0.012639587;1.1759515e-05;0.0072269179;0.76491761;0.7788254;0.44247359;0.20218791;0.20943537;0.00021849468;0.022421384;0.19744156;0.0057237661;0.014601324;0.36431688;0.0066147819;0.67477715;0.0011656554;0.013056878;0.00050784776;0.023117945;0.00055819156;0.007686629;0.00052108674;0.64645922;0.011791908;0.0051867198;0.15816784;0.042350702;0.018336287;0.061346747;0.001732191;0.12724575;0.01888415;0.074471124;0.058043748;0.021806367;0.015921924;0.011746971;0.0046146619;0.0037559981;0.0042921137;0.059822671;0.021155063;0.017921688;0.0014225646;0.18802865;0.67275339;0.79686958;0.33220559;0.0019535869;0.0025980023;6.9453628e-05;3.1576592e-06;0.00061135006;0.26316762;0.0041746367;8.6132241e-05;0.0018327649;0.11640111;0.00056370429;0.40823519;0.85709548;0.0025697376;0.71675557;0.066755615;0.44587067;0.015844425;0.0031788538;0.18584827;0.48148236;0.0073922956;0.022955276;0.73384386;0.0013805386;0.093939088;0.14935429;0.045173414;0.013428992;0.0051562609;0.0038603607;0.00037673913;0.0029142685;0.0036628069;0.01129039;0.01240661;3.4352193e-05;0.06876485;0.00193749;0.002007518;0.032285828;0.0082484782;0.2961956;0.087041356;0.62761647;0.56777388;0.065066814;0.013714234;0.49431032;0.046746321;0.021497086;0.0066689029;0.0030708651;0.00073607749;0.01300329;0.019750055;0.04889901;0.22623652;0.015968181;0.050595053;0.016181121;0.0029377802;0.012044949;0.74514323;0.00046891556;0.00018288841;0.0096323993;0.70160687;0.025714196;0.76502329;0.0033716683;0.0012120289;0.032643154;0.025796782;0.0046007466;2.2475166e-05;0.018020958;0.68038619;0.021465596;0.013253327;0.00024889887;0.0013297307;0.038461041;0.3808094;0.00079473993;0.0043748347;0.046539646;0.18988122;0.005081363;0.012368522;0.0016488228;0.31096536;0.05867561;0.00024946302;0.42622635;2.153748e-05;0.57057607;3.0057674e-05;0.0047173258;0.4049277;0.075466476;0.26019433;0.023035359;6.9259495e-06;0.34979087;0.18108912;0.0029134131;0.023670396;0.0017005991;0.58809334;0.00090499292;0.0235461;7.3595264e-05;0.01860657;0.21201679;0.0011019788;2.4290366e-05;0.0076273778;0.025491672;0.0021960863;0.82967049;0.0072296108;0.081736013;0.03416406;0.099446729;0.60473955;0.0053372853;0.03775645;0.13683651;0.0027074802;0.016294781;0.021385303;0.00026051904;0.73072141;0.0013708002;0.010259357;0.17414422;0.0082309358;0.0050846334;1.8895629e-05;7.2257981e-06;0.75304008;0.10084931;0.00039588328;0.0025871971;0.00019933075;0.052396446;0.12621775;0.024437655;0.0052258363;0.45563757;0.035826553;0.015366817;0.0054255854;0.045611937;0.026275616;0.053832512;0.019158186;0.71362245;6.2855238e-06;0.00048781442;0.026212633;0.04132301;0.68807858;0.00253935;0.0034944231;0.59771788;0.035528611;0.0033569974;0.55771798;6.3533153e-06;0.075346813;0.00030052429;0.09344174;0.0096143764;0.0014527509;0.012997763;0.018658916;0.75347471;0.019793849;0.044769786;0.17687662;0.0030308762;0.010045846;0.39235064;0.0067249481;0.78537691;0.028677706;0.0076301349;0.42554083;0.015589341;0.0011618731;0.0074761072;0.0051882593;0.0098152719;0.011197631;8.004313e-05;0.025439952;0.0004423394;0.026917119;0.011871209;0.027834952;0.012044949;0.00016475166;6.6555913e-06;0.0092130657;0.014640734;0.010684579;0.0031199795;0.65915221;0.66323608;0.76929682;0.01402555;0.19832274;0.022037443;0.035107873;0.010344425;0.23505574;0.56814766;0.10666632;0.050786968;0.019483319;0.17696148;0.41928107;0.00049427146;0.24887505;0.0011013846;0.023470812;0.01559643;4.9506361e-06;0.28068376;0.00069974677;0.0015482513;0.60717195;0.0071431063;0.0069740089;0.048927862;0.048023306;0.78265941;0.080436245;0.00073658471;0.023391146;0.050235711;0.0043693199;0.0081420233;0.33758688;0.019732537;0.0079862205;0.60663277;0.0013503523;0.01569844;0.026427649;0.54740161;0.44383487;0.071755923;0.0037633397;0.033631593;0.00018078843;0.003825092;0.33501592;0.0076910537;0.70537442;0.11745963;0.037342757;0.0013307596;0.040957294;0.011787462;0.026628483;0.0045680432;0.69705439;0.035339378;0.0010624744;6.3896121e-05;0.0015022836;2.4491215e-05;0.01973775;0.012636462;0.00038260745;0.014087549;0.080867834;0.00027139724;0.053128053;0.022321906;0.13502415;0.20175534;0.0017934099;0.37034896;6.8148211e-06;0.48706239;0.0072010756;0.0089344317;0.2711947;0.057074927;0.080325097;0.015222634;6.9069691e-05;0.53236878;0.7242738;0.037242774;0.12334462;0.0024965093;0.79059553;0.026535887;0.013557675;4.534821e-05;0.027304396;0.13336004;0.0016172174;8.0711279e-06;0.58455098;0.0058127716;0.037986618;0.7214033;0.009534956;0.011794792;0.46987343;0.11307849;0.035266571;0.016919391;0.00060225627;0.01301146;0.053713851;5.1455565e-05;0.013773229;0.0019832458;0.76703972;0.0001293086;2.5880596e-05;0.5655629;0.43482342;0.061843924;0.0096958401;0.080704615;0.0038436241;0.071229711;0.71253449;0.0084838578;0.0016061456;0.003288015;0.029240794;0.36693636;0.0012034208;0.66386539;0.046053816;0.039537381;0.21639267;0.026682081;0.34562269;0.0020561889;0.28916019;0.026331924;1.2806316e-08;0.017714806;2.6864189e-08;0.051815331;0.18411271;0.028931931;0.079607621;0.12054572;0.36457458;0.5116024;0.021980507;0.41789001;0.0043661138;0.39930093;0.062579423;0.0089542568;0.039910477;0.011745529;0.018514182;0.060636278;0.0053538936;0.022010539;0.015149221;0.0072072316;0.00016480687;0.43798503;0.0057201111;0.0018381517;0.026051005;0.17932051;0.0020277658;0.031016227;0.35835987;0.035817493;0.0016716374;0.0064778109;0.0035111855;0.0047123241;0.0012571127;0.00022072186;0.020063089;0.21543655;0.011860275;0.0024512289;1.85727e-05;0.00025460165;0.015008282;0.00084056274;0.015440111;0.00080062356;0.054293141;0.34080175;0.73144537;0.0045543844;0.013319291;0.023960073;0.38361901;0.05139694;0.043283105;0.80445588;0.44848287;0.047897823;0.0080477167;0.71558231;0.02005871;0.0088572931;0.53353775;0.0034775657;0.047115393;0.0012763287;0.0016509775;0.58439922;0.0076466789;0.0076866932;0.47960109;0.0076704696;0.0088403514;0.040093001;0.055322543;0.17373064;0.014750433;0.00056407833;0.00017014206;0.0063815592;0.003470151;0.020780923;0.077549815;0.13882485;0.038570754;0.56368494;0.015314071;0.055501785;0.13771635;0.5921672;0.72181797;0.007254363;0.00022651545;0.018621169;0.013839914;0.14082658;0.013222208;0.0010206079;0.11541334;6.836871e-05;0.002727031;0.35044885;0.12300126;0.010715578;0.00020532352;0.0015609604;0.00081028952;0.0074848924;0.071683325;0.01473986;0.029446008;0.80889463;0.72096199;0.0044726892;0.048516519;0.0071439398;0.011936452;0.47081038;0.026212633;0.57041752;0.019716477;0.3325527;0.0018862206;0.64741474;7.4979864e-05;0.077264927;0.00051361183;0.023633899;0.0080160387;0.0080088563;0.0053553046;0.43954009;0.0013670614;0.0010041308;0.049204662;0.026616804;0.022272687;0.014975119;0.00019778035;0.051187575;0.3354899;1.9874878e-05;0.14455047;0.024721701;0.0013891757;6.5801898e-05;0.00015304452;0.00063584745;0.026437242;0.82294852;0.0077670417;0.028230364;0.0046399273;0.51662016;0.72393912;0.12190528;0.15981227;0.0013087756;0.17467569;0.00020565232;0.05466665;0.01250153;0.32878244;0.00036489818;6.2056351e-05;0.038470432;0.00079931936;0.37147731;0.0015866689;6.555955e-05;0.0041576438;0.01971752;0.34643331;0.0028758957;2.305911e-05;0.057198096;0.66115439;0.40920344;0.067243777;0.62133026;0.0015785825;0.75014293;0.026675198;0.035519551;0.0056883693;0.51174283;0.017023042;0.23864897;0.00094778696;0.68228239;0.00011351185;0.0070975134;0.00052713905;0.0026000303;0.0080865128;0.71830612;0.019159021;0.01688936;0.052404165;0.047587804;0.20860344;0.0022551506;4.6551031e-06;0.025104392;0.0023949211;0.078196198;0.0042699263;0.001378959;0.00044129085;0.0053431205;0.00090306555;0.16772723;0.0026937281;0.046742633;0.024948813;0.00089747173;0.00034035175;0.54428226;0.45878202;0.48339307;0.018325651;0.0033712564;0.0099532083;0.0049937041;0.094263718;0.0040571601;0.73096937;1.3410699e-06;1.6614802e-06;0.072088376;0.017098328;0.0075249057;4.3183918e-06;0.00023252743;0.20745353;0.41918349;0.044660408;0.0091666868;0.020957565;0.66623354;0.63799834;0.0089816516;0.012731984;0.077374578;0.033813443;0.07466238;0.051813655;0.013129571;0.0046685911;0.46642974;0.00078788539;0.82452387;0.00019601396;0.031671159;0.00020167315;0.032117397;0.47128376;0.038320124;0.00088579138;0.18817335;0.0047413725;0.00096427859;0.062820256;0.00042450137;0.036974024;9.5936717e-05;0.0030233981;0.066906318;0.022358403;0.01469312;0.24288566;0.49478862;0.0023437471;0.0015686122;0.0014005952;0.0054193009;0.0002422018;0.71993136;0.00061604101;0.20510551;0.04570521;0.42976335;0.5541501;0.033936244;0.016652863;0.00076598837;0.0030299574;6.2411622e-05;0.0014270135;0.10980928;0.69427884;0.00037668392;0.00020543873;0.011796233;0.15206616;0.038520761;0.021936502;0.057956129;0.0055413307;0.61973643;0.80593765;0.19284512;0.00018912359;0.013243115;0.65105242;0.022298548;0.006686409;0.27743056;0.0078039775;0.21633378;0.055567376;0.0023241327;0.14838067;0.10679118;0.039294131;0.00083265029;8.1010676e-06;0.26953581;2.0437896e-05;0.67204463;0.67739868;0.0012483017;0.12258369;0.0024016704;0.0061441688;0.60310805;0.0043686787;0.026982186;0.62427413;0.010570794;0.00057164521;0.0040372172;1.9359821e-05;0.0046558301;0.033387333;7.0065985e-06;0.00011355505;0.00086143083;0.0016821257;0.025909608;0.0024960022;0.002809607;0.024016382;0.00033789279;0.78940821;0.028988864;0.0020526717;0.065415286;0.015951362;0.0088838469;0.015400581;0.004934581;0.00056951132;0.027344022;0.007956082;0.0055192718;6.2994595e-06;0.34678859;0.022013459;0.0095374789;0.0039344891;0.0080293771;0.019475184;0.41443241;0.0018037715;0.83977628;0.006497818;0.0028188596;0.078843579;0.0065582236;0.025655594;0.56506449;0.0282166;0.22258872;0.011446829;0.33204281;0.36779952;0.080865331;0.014027473;0.003752576;0.018764026;4.3716049e-05;0.10496894;0.017800104;0.022552354;0.0017604239;0.59863377;0.071925655;0.0024594357;0.0037064715;0.048297089;0.0089057153;0.51822853;0.045023438;0.042314131;0.015034595;0.00034750166;0.30302274;0.014414125;0.24237709;0.00036569536;0.0055406252;0.71936876;0.38122472;0.0019960157;0.65272361;0.64452243;0.24293277;0.0024561402;0.00039297057;0.098585904;1.4718775e-05;0.00093857024;0.0041853455;0.041709527;0.28297701;0.051111415;0.022873314;0.35413915;0.006505128;0.0096672438;0.16705909;0.17771715;0.0021730182;0.28709435;0.1279082;0.017812615;0.006293131;0.018960064;0.021456627;0.68394339;0.75319606;0.046970449;0.23877744;0.11841965;0.16813633;0.066748604;0.0021259317;0.059411108;0.11289467;0.33264846;0.023901887;0.064884067;0.10317514;0.087646924;0.0034410306;0.034759939;0.0032006861;0.016645564;0.011233437;0.0064248433;0.057607654;0.0095514171;0.013516583;0.053613715;0.16107084;0.056301877;0.49257621;0.0013541202;0.02212566;0.04769282;0.62280518;0.034698874;0.054684673;0.040215462;0.0050734114;0.012240439;0.035707109;0.050429642;0.77037358;0.15459132;0.049030196;0.18646638;0.28959349;0.67029417;0.028251637;0.029158209;0.010324961;0.18713185;0.011338932;0.039452832;0.0043092989;0.57083207;0.00038866588;0.0073047653;0.026291257;0.020947762;0.0033661546;0.0043804138;0.0026365018;0.3145082;0.00041160575;0.24603882;0.0023899782;0.00093765726;0.0037398695;0.01327063;0.02114401;0.068374321;0.52965945;0.032446541;0.0094303023;0.39127234;0.0017083941;0.79626459;0.00079982652;0.16157642;0.17788866;0.00089352997;0.015750226;0.004996141;0.02553943;0.16498411;0.14835209;0.01386803;0.54153889;0.019776957;0.012804196;0.6304751;0.088828221;0.58804375;0.054955542;0.039737687;0.049590174;0.00025569927;0.0089178504;0.005697988;0.26028854;0.005519785;0.0031855397;0.70111507;0.0014335493;0.0012655033;0.6867885;0.050407499;0.036805592;0.015902821;0.056380484;0.47126904;0.0020735851;0.016193008;0.027714409;0.53242087;0.082734376;0.033569857;0.022513982;0.030588442;0.011339172;7.794625e-05;0.7407155;0.00028402306;0.00059443794;0.015900295;0.19011703;0.047717981;0.00014803573;0.07550253;0.001688875;0.065747738;0.025579888;0.00069625425;0.19252698;0.013735021;0.37403175;0.021885617;0.0058565689;0.052042812;0.10474142;0.73517179;0.00038065747;0.17966172;0.01134518;0.0020362579;3.2111122e-05;0.0038479206;0.00024485379;0.037550777;0.63484037;0.0019447462;0.69461006;0.028170303;0.15977655;0.033282652;0.24618337;0.028103981;0.080719128;0.0048950161;0.029369678;0.0014979505;0.59785074;0.0015944364;0.026224729;0.0027595102;0.0099695493;0.029331304;0.001930804;0.02942849;0.69299042;0.26282927;0.011814496;0.1859751;0.21164526;0.6744625;0.017793847;0.04229534;0.052816126;0.044075601;1.4586522e-05;0.0041360338;0.58836693;0.45512986;0.0059367893;0.00068605208;0.20735395;0.043724313;0.053894598;0.026993865;0.037369262;0.04493352;0.1721139;0.053226687;0.048575569;0.065741234;0.02471628;0.019466218;0.069222473;0.009424896;0.74094748;0.0045659272;0.00068767514;0.0076697641;0.025964458;0.2171839;0.0069029592;0.69348228;0.020257043;0.0014693439;0.017849738;0.0030904792;0.03794669;0.70531482;0.012166305;0.35108685;0.049569037;0.023508143;0.39966118;0.02491628;0.011422798;0.40133247;0.60238248;0.04495969;0.002788852;0.02483286;0.39935097;0.0063500097;0.0077808285;0.0037979032;0.055807702;0.084075198;0.070395574;0.093267627;0.61920315;0.0056629758;0.013826938;0.023234732;0.54015708;0.03226234;0.0024993294;0.098916776;0.002363076;0.010048729;0.0054560448;0.00056667218;0.00055021996;0.29928601;0.0016504389;0.00074769981;0.36318603;0.0093497997;0.0014642572;0.052402154;0.049935088;0.042341307;0.041849103;0.003109016;0.026410757;0.010335535;0.00056079158;0.14699347;0.0092444262;0.10132724;0.04799445;0.32139996;0.0095967147;0.03230663;0.024509605;0.1542903;0.0011989863;0.012389788;0.47705266;0.025334425;0.025954239;0.033670176;0.00026580482;0.019153807;0.067476593;0.02963433;0.23046252;0.0025994915;0.012624688;0.7606619;0.2570647;0.020641401;0.025308773;0.79367739;0.63579386;0.000392713;0.00041291799;0.23101285;0.23076659;0.019732537;0.013832465;0.84013087;0.00085440231;1.1752831e-05;0.81651145;0.04049797;0.0010846322;0.0021612942;0.036533151;0.56444156;0.00041088217;0.014861815;0.0034499348;0.075210124;0.00037921031;0.20535928;0.061405826;0.27178597;0.027870197;5.3564881e-06;0.37833002;0.034793153;0.055935878;0.040443279;0.0040113106;0.3580271;7.6855958e-06;0.05631239;0.13459182;0.0022288188;0.00097090122;0.020018669;0.1359942;0.013715316;0.054475889;0.13207708;0.014734332;0.38785225;0.051067125;0.050387368;0.070474677;0.37486988;0.0002104907;0.00065595424;0.0073046368;0.00020863791;0.014266938;0.0030580952;0.00022266107;0.61303985;0.71161854;0.0002098259;0.42247349;0.77183962;0.13863549;0.34793696;0.0057343468;0.008488304;0.0082101496;0.00032277737;0.022505431;0.0022577173;0.041952442;0.00077237922;0.018723357;0.0231949;0.053665787;0.0012690248;0.37519264;0.72470307;0.030582404;0.013649232;0.020876855;0.53807068;0.057425406;0.24600135;0.00029639131;0.29584372;0.013344044;0.037931591;0.0029562537;0.38093197;0.00030099647;0.0020670891;0.059636418;0.0003111327;0.00089534145;0.0016203476;0.0011670032;0.56566936;8.838334e-06;0.3802765;0.00023267862;0.024780095;0.0012904292;0.0061563528;0.0063536651;0.4487772;0.3403134;0.14287388;0.015826043;0.084177844;0.072709218;0.8090049;0.00068196544;0.20287529;0.0098570855;0.00048460742;0.0078458507;0.021938588;0.0072868103;0.037325982;0.12548456;0.050621893;0.66716093;0.0096841855;0.0072896318;0.61701858;0.014223442;0.35787949;0.18024948;0.024485622;0.040712703;0.00048390223;0.057122491;0.0024368747;0.13524656;0.0023062932;0.055328049;0.60350847;0.0064988439;0.0005073878;0.33009666;0.070266396;0.073055692;0.0089179706;0.10128839;0.5560326;0.055631962;0.044375554;0.021764867;0.068632171;0.0031318939;0.063378513;0.0051793456;0.16682774;0.0015126596;0.0010114636;0.15618128;0.013266184;0.00017084525;0.028281875;0.0050623179;0.067191705;0.012356747;0.28106436;0.21068057;0.0071355398;0.0078313593;0.05907315;0.034020122;0.0019345748;0.068382829;0.21626097;0.00018953398;0.76584786;0.0043256511;0.45534325;0.052386045;0.013916932;0.21789376;0.0078918934;0.0006196957;0.00042697258;0.045434114;0.013284688;0.025562163;0.031814091;0.30011666;0.00064587942;0.064532585;0.83237898;0.13207985;0.024925038;0.023966122;0.17164227;0.13302061;0.0063103167;0.011691581;0.036073491;0.75003892;0.016076561;0.0059374301;0.28054011;0.0052990671;0.00021327709;0.69328022;0.2027104;0.029454768;0.010289036;0.41476765;0.061319709;0.041222017;0.68527323;0.011203039;0.052095152;0.0019657863;0.017240144;0.090188481;0.0023995792;0.00029591302;0.00016594207;0.7645399;0.0059203086;0.00057273055;0.11696783;0.051553965;0.0026278198;0.29780662;0.045129463;0.74456191;0.066895805;0.00043182913;0.0033228071;0.37859023;0.0099508045;0.036382504;0.051939473;0.55610508;0.014573328;0.040572792;0.026770923;0.00011301505;0.0017725283;0.045705885;0.00033306077;0.00051758537;0.0040893508;0.0045695822;0.029672911;0.19189277;0.25852835;0.28862879;0.052304517;0.12003796;0.61905646;0.033354454;0.0060350923;0.0013700756;0.026458515;0.73187602;0.0074817501;0.021265594;0.28743666;0.15665291;0.027243501;0.020156521;0.68517548;0.011449232;3.0357352e-05;0.66697711;0.37013629;0.0026782334;0.00042724854;0.024666853;0.055968422;0.00035576761;0.095535196;7.030923e-05;0.011740002;3.3017976e-05;0.0084059993;0.60833961;0.18365359;0.0033590253;0.0011800746;0.012058767;0.012578309;0.013229658;0.43324628;0.76020986;0.059763089;0.16640702;0.0042671049;0.028817434;0.35044137;0.027127545;0.0038221423;0.81678689;0.044726171;0.043053277;0.6596325;0.0014636486;0.00042347732;0.025840994;0.0072561586;0.010960449;0.035848025;0.0005560331;0.030020773;0.025729628;0.017577579;0.013908042;0.0051310598;2.0954407e-05;0.15350069;0.0076132701;0.0015947552;0.15960416;0.0068245344;0.35899284;0.028646216;0.34062701;0.42453507;0.0014514611;0.11885111;0.73304796;0.013520788;0.003038703;0.0026433463;0.03000284;0.03951893;0.82919943;0.0016992366;0.054351721;0.073386647;0.0031373124;0.031586945;0.028835371;0.028987404;0.00055885385;0.22469261;0.0010665467;0.29303816;0.0072542345;0.11707257;0.0057818634;0.36909801;0.0021810667;0.0031767625;0.015581291;0.028304815;0.0051362538;0.00070373196;0.00043907104;0.17317507;2.746937e-05;0.34955066;0.00025175026;0.011882504;0.016616367;0.017546713;0.013460591;0.10592272;0.36024129;0.033942282;0.00035445538;0.43476945;0.014552421;0.85109633;8.3283128e-05;0.45663586;0.00088497985;0.0070129326;0.00052367448;0.00069661654;0.0064974972;0.026770506;0.19452503;0.0056059044;0.65700763;0.00032435945;0.0057308199;0.60880351;0.014414846;0.44308922;0.24292207;0.0014536638;0.27555144;0.00027026894;0.023881659;0.0016485694;0.2397978;0.015740614;0.0011948273;0.42630643;0.0090820994;0.0036306765;0.68702698;0.054510437;0.016593218;0.018750053;0.11808392;0.5214929;0.0030958659;0.027563209;0.0031269509;0.011742044;0.0011621774;0.011257588;0.029081251;0.035922509;0.00017484365;0.027237453;0.0059928345;0.036235884;0.30372173;0.011880821;0.016161518;0.02488333;0.024282075;0.013033328;0.022358194;0.046300419;0.048339698;0.054904472;0.074295886;0.00045833172;0.62515235;0.1646688;0.028079163;0.048511147;0.0021565412;0.093962669;0.0088520069;0.17537421;0.020561319;0.00091500673;0.0038294524;0.010196998;0.040761687;0.77955681;0.036797877;0.021611163;0.58870196;0.0033339609;0.49204397;0.34676856;0.034560978;0.00065483828;0.099484883;0.77385706;0.68364859;0.05773633;0.014080821;0.029581774;0.10986547;2.0092004e-05;0.02027894;0.15073702;0.0019292831;0.13480619;0.72872418;0.022205533;0.030037459;0.0013380634;0.048024982;0.15835184;0.0486269;0.82659912;0.2090649;0.39514026;0.014929701;0.0014886179;0.00011587104;0.51067519;0.00019467717;0.039202869;0.071163617;0.015303858;0.058216985;0.019388428;0.00074778678;0.51814699;0.042562079;0.11316103;0.017408444;0.00094222219;0.0019370146;0.00072338275;0.077930838;0.0014068845;0.026362581;0.021829516;0.0011067612;0.67677599;0.0045038541;0.0031182687;0.040303372;0.0059351218;0.65143704;0.00046221941;0.026833698;0.0069228373;0.037897035;0.21750082;0.14527936;0.0093340604;0.33809435;0.028355494;0.049582124;0.31220296;0.011071952;0.0041947719;0.00053773518;0.00798776;0.11939494;0.18074968;0.044188336;0.065086342;0.78703547;0.013296823;0.00041668306;0.15666899;0.00063444319;0.0094908597;0.69185269;0.0055541559;0.79219484;0.53513479;0.01653962;0.0018191079;0.0072096037;0.054407798;0.0010142894;0.014660198;0.61623949;0.0051215691;0.0090435306;0.40802252;1.8842726e-05;0.0072755245;0.15285487;0.18153127;0.048058532;0.00021827867;5.3271007e-05;0.017153803;0.00036026852;0.007236152;0.00035903597;0.0036686058;0.78588653;0.57686239;0.0076572597;0.045345202;0.042647634;3.751662e-05;0.076825827;0.03991719;0.0090706851;0.068347283;0.30571577;0.012204633;0.63585335;0.0033218567;0.051083229;0.0014320132;0.052149508;0.0074943826;0.0067626536;0.00011961503;0.46423942;0.00057124055;0.0043061571;0.022127744;0.01783368;0.12513217;0.058270056;0.00096419163;0.0089555783;0.60810566;0.00047523156;0.062027674;0.14237098;0.00086356112;6.1271974e-05;0.0027212957;5.6440647e-05;0.0027721215;0.78768528;0.0014030442;0.029302942;0.0011835672;0.05907315;0.77953589;0.66189301;0.18793844;0.0045180256;0.040667742;0.0005165675;0.058523402;0.20040093;0.63840669;0.0006854579;0.00042308489;0.18731406;0.2166325;0.0015693656;0.0014851978;0.024068519;0.54995692;0.007095526;0.017591344;0.0015244848;0.020846408;0.00026056197;0.0010721404;0.025551943;0.0041286591;0.22761236;0.41848797;0.00062198297;0.012355905;0.0054850932;0.61155307;0.00051637739;0.15082812;0.0022951395;0.0010304622;1.1978677e-05;0.0016059283;0.011171678;0.36022377;0.0029025129;0.33992562;0.083397284;0.011274409;0.19106208;0.76004976;0.019900003;0.042065173;0.59976971;0.42622134;0.0016325675;0.0012449252;0.029094599;0.00045135961;0.68122911;0.0068182498;0.004981841;0.031307459;0.015356004;0.028492721;0.70616269;0.057266191;0.0039728358;0.0010050727;0.2828238;0.045312993;0.011949428;0.20571688;0.0066644782;0.039988317;0.018892702;0.35682368;0.00040468882;0.77129441;0.00015545171;8.5412748e-06;0.10799051;0.0030017877;0.0022644666;0.00017956922;1.9174957e-05;0.593876;0.088763706;0.013740188;0.0016645712;0.0067382865;0.26950946;0.43909368;0.0061598793;0.015962536;0.0051176576;0.091463424;0.00061945652;0.15724602;0.0068628807;0.0038108563;0.25965148;0.00013975576;0.81816661;0.0036977576;0.080415718;1.6856615e-05;0.00095196057;0.077354051;0.0011882191;0.0013977258;0.084600918;0.00011506224;0.0021485877;0.45921862;0.0025053499;0.011067746;0.00021802667;0.074094109;0.01880949;0.02702035;0.015950639;0.062646016;0.79009104;0.045518328;0.0029143002;0.0013228906;0.0018310222;3.3157203e-06;0.73242396;0.0040138117;0.44936585;0.0014937045;0.499753;0.46308663;0.044653699;0.11588572;0.0015566419;0.015393611;0.0025899538;0.16111997;0.012827987;0.014240504;2.7649872e-05;0.024912942;0.016573615;0.35529253;0.52979082;0.10193974;0.011162547;0.0068837856;0.00047089619;0.00389595;0.012021881;0.032222416;0.6473394;0.44199529;0.117092;0.0034512656;0.51975536;0.0080468189;0.072673671;0.26686671;0.01071642;0.087398589;0.0036988985;0.18526676;0.015151744;0.0032535396;0.0026831131;0.0060695279;0.0084361574;0.097155578;0.0029766285;0.002356105;0.82286614;0.035058551;0.091513366;0.22952139;0.31216228;0.0040113749;0.11451297;0.15862785;0.10617868;0.28049225;0.0071533024;0.00060613168;0.033935569;0.0011986386;0.0024002446;0.035517205;0.007016588;0.0059060734;0.72535104;0.10514305;0.0071443245;0.0030278661;0.0072868746;0.35204506;0.085846111;0.75607133;0.0042113806;0.027140476;0.013028521;0.012118723;0.026665606;0.051668711;0.0025781663;0.032833058;0.082238197;0.22073857;0.011897282;0.0016000881;0.58903497;0.5342989;0.0063528316;0.41118243;0.055017125;0.00044002151;0.20646529;0.79154849;0.0078371949;0.001411348;0.028285004;0.19474773;0.0480894;0.26258087;0.013187844;0.23677099;0.09514536;0.28172985;0.20288171;0.0054353965;0.00040590297;0.016798642;0.16345668;0.6380915;0.0030791988;0.056583259;0.2475549;0.079022318;0.053577665;0.10594492;0.54799289;0.06168621;0.32328629;0.1736199;0.016861415;0.012238035;0.014123355;8.3219711e-05;0.05271399;0.00061970798;0.0032649152;0.0075014364;0.06170173;0.019960273;0.17240956;0.004929964;0.0012207674;0.40928349;0.02943141;0.42293385;0.033458129;0.16120483;0.00066383625;0.35134453;0.26570812;0.019578835;0.054218039;0.031376574;0.14727128;0.00017418843;0.78991103;0.004355405;0.025151733;0.023074774;0.1838769;0.015611328;0.0018118833;0.0034656832;0.00091141276;0.0074825836;0.02998261;0.058849845;0.36908299;0.007766657;0.053182628;0.048115909;0.15926473;0.003403767;0.61314493;0.57754201;0.072627112;0.032327097;0.037768532;0.0035801679;0.00015961568;0.038815681;0.0018119151;0.16875981;0.0017151751;0.0014968491;0.55780411;0.00035251764;0.047384143;0.06424319;0.016594678;0.32145742;0.2254924;0.032881372;0.018244734;0.0036602404;0.66141772;0.0015643805;0.041058622;0.023067474;0.033093754;0.0065582236;0.0015712497;0.0075158644;0.23858365;0.042766407;0.0090011163;0.35569033;0.078398973;0.83653641;0.30487075;0.045994431;0.0024845949;0.1073142;0.042880818;0.02293713;8.0819173e-06;0.73461187;1.712016e-06;1.0936063e-05;0.0079226727;0.0079098474;0.015548369;1.907835e-06;0.00032970042;0.10614747;0.32316658;0.01653962;0.011441181;0.014175742;0.0787149;0.16915372;0.72071934;0.0074718106;0.3276861;0.014775304;0.038277175;0.0016291585;0.0015894657;0.0012454614;0.058986533;0.003308865;0.81984317;0.031405766;0.083794817;0.00041085767;0.0094200894;0.55837947;0.0008308533;0.0020956707;0.74671245;0.11874151;0.0001581109;0.0083913403;0.010542077;0.019332744;0.0080320053;0.052616887;0.079251133;0.3072454;0.057135511;0.071392432;0.67026436;0.02562869;0.073760152;0.0079177991;0.010840897;0.012546828;0.66907865;0.0002602615;0.54988444;0.0070169726;0.06350819;0.30350628;0.002562925;0.020034935;0.0025186902;0.058087308;0.011616124;0.17432912;0.0083218915;0.074983321;0.0005447134;0.0067743245;0.021892916;0.0092572821;0.0060568308;2.0265911e-06;0.0030778362;0.12892301;0.0036292507;0.085302874;6.9815847e-05;0.0033443859;0.42262861;0.79882175;0.046848655;0.00584182;0.0059813559;0.0016716691;0.11390464;0.0040641497;3.3106575e-05;0.010382755;0.0357779;0.0053155469;0.70108855;0.010320756;0.18613499;0.00012001343;0.013156245;0.23549259;0.012267353;0.073598936;0.053373389;7.402437e-05;0.072108403;0.024971753;0.070067622;0.00099556614;6.1158193e-05;0.73873824;0.028221186;0.1807729;0.035872854;0.001025593;0.41945371;9.1014328e-05;0.0013093408;0.017175283;0.00058280549;0.0019325468;0.80410475;0.00091051427;0.16723415;0.00017609884;0.33036476;0.86073852;0.15142213;0.61889589;0.0010437947;0.040340275;7.1428032e-05;0.0051086801;0.0032846879;0.8437053;0.00017680203;1.5720987e-05;0.11595301;0.44424695;0.057997186;3.0808173e-05;0.01514886;0.016174449;0.067475095;0.36826488;0.0032276832;0.034180835;0.04637289;0.15232965;0.20692033;0.00089968898;0.54629159;0.023832232;0.012128336;0.0098298108;0.024920868;0.045323055;0.16692868;0.023380093;0.42890981;6.9424095e-05;0.4466114;1.4203692e-06;0.053030919;0.1497491;0.0010005079;0.3847549;0.002005395;0.0064756307;0.29283231;0.025085624;0.015810903;0.0061279451;0.59096384;0.07935077;0.0012821254;0.32387996;0.012579029;0.039366268;0.22035955;0.00046148972;0.087879293;0.0019454751;0.0068572378;0.039426662;0.55448985;0.00053628802;0.2563827;0.030067489;0.6663776;0.002578293;0.062603958;0.07924863;0.0017450558;0.06927605;0.11587601;0.022976965;0.036814988;0.056047529;0.0031483392;0.00090942741;0.72970545;0.0076468717;0.0033751223;0.0088536888;0.016801769;0.02056111;6.7434055e-05;0.026297931;0.0057484545;0.070356518;0.3043465;0.022082489;0.058182936;0.01553359;0.43268216;0.011894398;0.027983438;0.063260354;0.34377724;0.76910114;0.0064368993;0.18907553;0.078132108;0.0036732003;0.00029974553;0.020457042;0.00055817934;0.034904882;0.026125874;0.0050678966;0.7510215;0.007897215;0.016376117;0.11548202;0.12602144;0.29346186;0.32084939;0.0010323317;0.0069136033;0.011216857;0.51781398;0.00021523309;0.0018513018;0.017449111;0.0026487648;0.019114392;0.031532589;0.035618529;0.74285668;0.11387412;0.02337905;0.1900143;0.25350791;0.85270625;0.01510969;0.0054465542;0.0052652089;0.0009825381;0.0094671892;0.0018153372;0.036847197;0.0050689867;0.0050534685;8.5386957e-05;0.60720569;0.0086010071;0.0021881328;0.011777489;0.025558826;0.017510217;0.029868323;0.033043765;0.28966531;0.0028231372;0.064434454;0.52533942;0.010024939;0.02800638;0.040339269;0.70669758;0.046905361;0.00069479056;0.60306644;0.60882729;0.0020986809;0.0066083688;0.44102892;0.0088214874;0.0036452208;0.11689638;0.00057207444;0.011083847;0.00022357785;0.083787307;0.66170752;0.011042874;0.024541097;0.12678933;0.041519288;0.39141244;0.015734605;0.043832351;0.017522104;0.0010477798;0.074891694;0.018428467;0.0090176975;0.0072663547;0.00063001586;0.54212564;0.27623367;5.8628731e-05;0.77947938;0.055564873;0.044280268;0.0013044137;0.020922111;0.82483953;0.00022093547;0.00097055349;0.047653899;0.00056204863;0.0037149952;0.041265301;0.00018229081;0.64680415;0.01308956;0.02234276;0.28493035;0.26999301;0.051089272;0.00030503134;0.12934476;0.84632385;0.028287508;0.00041979813;0.025151525;0.044153776;0.016934199;0.13723311;0.061717249;0.00213661;0.021644324;0.0021953576;0.015161837;0.013692727;0.029147154;0.020517314;0.61016738;0.033227291;0.071377411;1.6737442e-05;0.029856436;0.025695426;0.012901399;0.46672654;0.0030136069;0.40234822;0.0064917263;0.0012096813;0.56221014;0.15535235;0.055824727;0.17283027;0.0035946802;0.64760303;0.026557576;0.0022185524;0.00021289309;0.0025083285;0.029493766;0.0078849029;0.00083907013;0.52181005;0.070246868;0.00063307572;0.49624065;0.018594056;0.02717155;0.75238943;0.00024373058;0.28523436;0.0031705517;8.3724386e-05;0.00031108977;0.016436806;0.64265698;0.0029837261;0.043756858;0.53117722;2.6818579e-06;0.0099438364;0.2585187;0.40210304;0.011357675;0.0018952198;0.00010396229;0.0058567612;0.0026275027;0.00022065466;0.0011633367;0.0012371721;0.75429559;0.38786724;0.0051693423;0.039401162;0.013059401;0.00010441108;0.065522432;0.029438291;0.023648499;0.023190312;0.45640284;0.017378829;0.63871002;0.00063933042;0.01124401;0.0029765333;0.032328773;0.02118843;0.0005451488;0.0010220716;0.37202272;0.00024120099;0.0023394059;0.0075887744;0.060937189;0.45501459;0.075515047;0.010114573;6.7621688e-05;0.30067441;0.00024488498;0.024224099;0.062059715;2.4844954e-05;1.1122378e-05;0.0011969141;1.2113255e-05;0.00084254809;0.81908858;0.013402558;0.015035076;0.00090506539;0.019232014;0.76036894;0.67393088;0.33906385;0.0004429649;0.0021675681;0.084817216;0.0041366108;0.0022971674;0.086498916;0.00095562701;0.00057434943;0.24580541;0.0019986457;0.00053300743;0.046360813;0.0012352737;0.15010461;0.013597566;0.0033255322;0.12420753;0.063716978;4.6383619e-05;0.019819919;0.0090226233;0.012623847;0.19016705;0.15883061;0.016984459;0.0012307088;0.43898329;0.067156658;0.00011277026;0.061577059;0.001582814;0.00061723677;0.001538875;0.067640319;0.0037000391;0.25782812;0.013258855;0.12980188;0.78552866;0.0098146712;0.034877036;0.77239418;0.024864558;0.25435802;0.00014655973;0.44787702;0.59437954;0.00022548105;0.00093028101;0.35566783;0.052500457;0.0077812131;0.016010957;0.81032205;0.0025421383;1.3325327e-05;0.70432943;0.35052142;0.0067796465;0.0051974934;0.0013917118;0.57892388;0.0030512509;0.0031258417;3.4512021e-05;0.0072253784;0.0055663395;0.71778482;0.29133138;0.76193959;0.0070643611;0.0057481974;0.041490097;0.029246006;0.00044110688;0.0001829364;0.0079443473;0.82691604;0.0059333905;0.062710606;0.080113307;0.0030868985;0.022937339;0.19231439;0.10930291;0.0064333724;0.020378627;0.010867932;0.011828074;0.0028835009;0.00013742296;0.0077275406;0.035995986;0.0077710175;0.48477396;0.0062423442;0.014194606;0.00014369655;0.042540267;0.12370602;0.01911168;0.71202385;0.018399479;0.0070596798;0.42193809;0.48541415;0.012700504;0.043152589;0.043696463;0.59608638;2.2956216e-05;0.11486813;0.00053742854;0.016005309;0.43218178;0.0059271706;1.4746969e-05;0.0078831073;0.19140418;0.00061231275;0.74566984;0.0074591781;0.044868093;0.0027327347;0.011064382;0.45300084;0.00039284179;0.0078023104;0.0022946324;0.26160228;0.4883182;0.037281357;0.0092185931;0.062491305;0.027120665;0.0044540931;0.75760329;0.0020491227;0.00054276345;0.0086798277;0.17794582;0.23790912;9.7207931e-06;0.0037579532;0.00030924403;0.041077074;0.20195343;0.012751088;0.052469593;0.0065906709;0.23958474;0.0096112527;0.0072500026;0.01199845;0.21346542;0.76756501;0.003417646;0.43257913;0.021155689;0.0014015661;9.8744706e-05;0.010612247;0.00031755291;0.29041457;0.026080202;0.00053620827;0.7261337;0.010225235;0.0077011213;0.026097097;0.17498296;0.20709807;0.18710147;0.0028767514;0.0066635804;0.00023855621;0.62209547;0.00016259888;0.014511809;0.0049078409;0.0047767698;0.019388428;0.025309816;0.0096004391;0.67614174;0.0023828803;0.012376332;0.27400982;0.035579946;0.8141979;0.0071327183;0.0031748931;0.0023681459;0.0101672;0.0011854366;0.028958833;0.039207567;0.69955838;0.0021179782;6.3680604e-06;0.049156688;0.40643382;0.0037036515;0.0013008341;0.013876201;0.53965867;0.016335033;0.007791217;9.5300718e-05;0.01690104;0.0012027107;0.00048938423;0.0086023286;0.0032169097;0.47175223;0.66750705;0.00011507425;0.0083987899;0.0086034099;0.76870769;0.020772371;0.034063067;0.081709482;0.00023799461;0.0061937375;1.5800921e-05;0.23241331;0.084187359;0.011425681;0.028462064;0.14493814;0.0028636963;0.011915785;0.78569609;0.0071894685;0.0068741026;0.65065199;0.036469068;0.0017549421;0.0019269066;0.027138181;0.0055606323;0.72338587;0.013434518;0.049946159;0.037732296;0.0067025046;0.37194267;0.74720711;0.019201148;0.015085299;0.0059192833;0.40019912;0.012473295;0.073110268;0.068173543;0.073627472;0.0022249529;0.00073554128;0.23061669;0.16601132;0.69889259;0.00068526954;0.0022546751;0.026141934;0.68201411;0.17294818;0.049576081;0.012585158;0.12268634;0.81684285;0.069203451;0.48196802;0.0068925065;0.079819903;0.069051236;0.23645835;0.0012098842;0.083396278;9.9570301e-05;0.079072386;0.0062257359;0.0033958135;0.050496072;0.52950317;0.0022627872;0.061764315;4.9679884e-06;0.016470173;0.0019276037;0.54164541;0.78122479;0.013780558;0.02305809;0.0023850666;0.015964337;0.49314034;0.12605196;0.00047266221;0.11584064;0.0031178249;0.13488926;0.055890314;0.0038174612;0.008146829;0.05755258;0.00046383828;0.04201854;0.0020245654;0.041640408;0.015813667;0.012693896;0.031052465;0.050261885;0.001087661;0.65714508;0.033588979;0.00015787809;0.005813092;0.00034783894;7.2536408e-05;0.014650706;0.22726117;0.010464218;0.023140259;0.0026297842;8.0742378e-05;0.0027238308;0.099381529;0.014372792;0.0097816298;0.0034183748;0.050791331;0.028446632;0.001894174;0.0002723661;0.00081668037;0.17243814;0.044252753;0.049175475;0.1790579;0.013525475;0.359193;0.07579492;0.053685311;0.0026665409;0.58266622;0.26050377;0.00050388032;0.086195588;0.046885565;0.0021278011;0.00039702997;0.078688368;5.3542892e-05;0.55554551;0.051635157;5.0333292e-05;0.75917494;0.0047824127;0.036814317;0.084294006;0.012032694;0.079923548;0.34599298;0.050508823;0.66468513;0.065412283;0.28951448;0.029502109;0.049199298;0.00048396966;0.052320622;0.029682089;0.0033896347;0.05149357;0.72521907;0.0075385002;0.013864426;0.032319717;0.4765842;0.55823225;0.011971537;0.7499736;0.0066662738;0.022246618;1.8693616e-05;0.0018992757;0.045062695;0.17937768;4.6573849e-05;0.0013435702;0.10240171;0.014518658;8.7056746e-05;0.023862055;0.61973447;0.60845655;0.030085426;0.77224666;0.71791953;0.00099020428;0.0056847781;0.51402634;0.005692922;0.0030238419;0.0012325346;0.0069330335;0.009545289;0.57066214;0.0012799515;0.010459892;0.012337642;0.0091558732;0.05169186;5.5812627e-05;0.0117698;0.00071415154;0.57186282;0.73886359;0.00038106219;0.47545591;0.0037207305;0.12659511;0.5207997;0.17288297;0.52529413;0.14527757;0.0097098984;0.2248864;0.0036736757;0.0018879317;0.049970318;0.01803931;0.0048839222;0.01112638;0.0012567504;0.0053043254;0.0033328836;3.3335025e-05;0.030263325;0.025038492;7.6469572e-05;0.5040527;0.041872252;0.0043902891;0.015645092;0.014603486;0.0012639093;0.015886839;0.6425162;0.0065263533;0.011761629;0.52302426;7.0112917e-05;0.0065049995;0.2354594;0.19105671;0.0092697777;0.0012642136;0.00015721089;0.052438725;0.00065084628;0.0018219914;0.00023094343;5.8125092e-06;0.35570785;0.4038794;0.00083188224;0.02464975;0.14130268;3.8259303e-05;0.081027552;0.035756093;0.0034486358;0.27527136;0.4728756;0.015549931;0.79901963;1.652613e-05;0.23581807;0.00025527616;0.11768091;0.06523104;0.016488943;0.00014507414;0.54101336;0.00021472429;0.0020677545;0.017615743;0.024116278;0.50043732;0.0099719521;0.015826883;0.00022155467;0.12171037;4.1467159e-05;0.010393448;0.029873954;2.3444241e-05;5.9001373e-05;0.037643045;0.000186426;0.0010586921;0.79567498;0.00055270956;0.010798363;0.0034021195;0.0064789653;0.80933905;0.49423674;0.055915851;0.17981537;0.00097236491;0.0074876496;0.019461628;0.00010856066;0.76174808;0.00043459469;0.051597916;0.23625064;0.01195892;0.00075223576;0.00027167931;4.3096716e-05;0.83166903;0.089428924;0.00074639556;0.029988658;0.0049091876;0.070325479;0.049163058;0.028687924;0.0019064685;0.062325578;0.009488456;0.001587176;0.020203028;0.016274553;0.00028943762;0.26743883;0.03102126;0.69734418;2.010334e-05;0.0032261307;0.0077469707;0.011705037;0.72177392;0.0016007258;0.015645452;0.56370533;0.11768368;0.034234516;0.67480028;7.516054e-05;0.041251544;6.4557225e-06;0.046218555;0.028161749;0.0014901829;0.0019974415;0.030029533;0.72381383;0.014169854;0.017244523;0.13756897;0.021472685;0.0012546346;0.58314645;0.0049168826;0.71052527;0.091729097;0.0026627067;0.14588943;0.014628598;0.00056209764;0.0030353758;0.0046746829;0.10652759;0.72104466;0.014184994;0.83221108;0.005072129;0.041333072;0.010264885;0.056748986;0.0054959944;0.0079742931;0.00020038674;0.87182647;0.02404245;0.0026544682;0.00094426551;0.065245554;0.13418004;0.027348403;0.018665589;0.0057182517;0.067453563;0.031158153;8.8443936e-05;0.081514716;0.0063344277;0.046031334;0.1294724;0.0093848845;0.22917555;0.00020554672;0.097922765;0.00032754196;0.0059607076;0.09207315;0.00057513436;0.0077479966;0.22911131;0.0051257373;0.38030151;0.72290188;0.0047947248;0.25878209;0.0014304916;0.060643788;0.010424087;0.0060948571;0.0037384436;0.0079889139;0.71014529;0.0070560249;0.00059224881;0.28513384;0.0091283582;4.2832371e-06;0.57775271;0.014737938;0.43914029;0.039081749;0.0016995535;0.1771571;0.11082133;0.0018524742;0.0021171861;0.01015915;0.20131317;0.033426926;0.013551427;0.011857872;0.0091061294;0.010272333;0.010271132;0.0078418115;7.5510601e-05;1.8379698e-05;2.9033557e-05;0.58925503;0.00048444798;0.0011931752;1.9244426e-05;0.011000821;0.0061644325;0.36982107;0.090357736;0.17130284;0.026071236;0.60719377;0.033356465;8.1792554e-05;0.055290498;0.56868225;0.0012714884;0.050635651;0.25816646;0.0014743435;0.0020454787;0.14576975;0.016769862;0.16784692;0.00044562004;3.363036e-05;0.69130951;0.00023164182;0.063998356;0.76722497;0.0029823319;0.13971004;0.0040494651;0.51806319;0.17443809;0.0055129877;0.038230538;0.00096835068;0.076332659;0.0092974138;0.015946435;0.53815448;0.00028073016;0.0043672039;0.72518039;0.013570051;0.029449761;0.027804501;0.074248314;0.79891664;0.059658445;0.002016929;0.001357207;0.029534224;0.001576771;0.16321729;0.0016511676;0.77476013;0.00010773987;7.8170433e-06;0.1310699;0.0058840141;0.0090756109;5.4560056e-05;0.00062734232;0.21275449;0.059531774;0.011855229;0.015550411;0.0063801487;0.085783526;0.06260246;0.14596447;0.019497499;0.2453022;0.060587712;0.017011154;0.042704001;0.17556536;0.0010894;0.077845722;0.0091552725;0.80942988;0.0025628614;0.022530457;0.0050725136;0.028322753;0.38605338;0.0032789842;0.055428687;0.74909633;0.0011901754;0.0026146062;0.11233003;0.000627373;0.040395971;0.00041890284;0.044246044;0.0038256049;0.016057335;0.010673164;0.057320762;0.68750888;0.0013252237;0.061810378;0.010053656;0.047481444;0.00015351252;0.79258412;0.0012876322;0.79557276;0.0085202642;0.19988808;0.61693531;3.4590197e-05;0.0030984324;0.012689931;0.140614;0.0010909217;0.055749625;1.8746516e-05;0.6698603;0.00044260922;0.014415687;0.010808937;0.065425798;6.7571302e-05;0.00081492693;0.0001266902;0.80260593;0.018861627;0.25910437;0.20632824;0.0017684724;0.0075242007;0.07747221;0.16770668;0.00082054967;0.0022927946;0.0047434247;7.0849096e-06;0.044250742;0.0002949319;0.00021821387;0.084884807;0.0083330665;0.79111785;0.0033710662;0.0012192747;0.00010337429;0.063451111;0.5561617;0.010328806;0.37549037;0.045275748;0.010302252;0.0068083107;0.46375376;0.00041594109;0.014616102;0.0018108377;0.71761018;0.015565431;0.052361555;4.3881089e-05;0.039400153;0.72245926;0.093092829;0.0015951029;0.0053105452;0.054988585;0.005033141;0.68668747;0.032451238;0.6879676;0.0095985169;0.019950889;0.11198112;7.3398933e-06;0.0014922698;0.0074995765;0.12646122;0.056164689;0.11856809;0.045997113;0.70998931;0.0088298982;8.2006882e-06;0.70641941;0.40046179;0.0010053626;0.3336682;0.0084320717;0.032646846;0.01122755;0.0056460467;0.010500024;0.14252909;0.04958313;0.0002103275;0.20649847;0.0023074972;0.15150967;0.031612109;1.3120118e-05;0.049360681;0.023554025;0.57148677;0.032517001;0.045996778;0.051471092;0.0050442987;0.0010270856;2.4704856e-05;0.00080500008;0.20861843;0.0016385562;0.027213469;0.079339758;0.0031938101;0.04884566;0.66798896;0.0461132;0.022248078;0.41063452;0.17859431;0.0078774653;0.0033994578;0.27005285;0.017441813;0.6139062;0.062724121;0.020663507;0.014698647;0.0042247185;0.0018058311;0.79459304;0.01450424;0.031814426;0.0098283691;0.42203066;0.24007833;0.097777098;0.027264565;5.7732301e-05;0.049101993;7.1937347e-07;0.0044531953;0.07457877;0.17768589;1.1018321e-05;4.3361943e-06;0.0013690467;0.030769622;0.47241694;0.30661103;0.015414278;0.0032319927;0.34948564;0.1802325;0.6351397;0.018020123;0.057882026;0.26069862;0.16979775;0.0071997931;0.74837637;0.0065836813;0.048367545;0.19321987;0.0012074786;0.018624088;0.057614662;0.012216888;0.0079230573;0.00045159261;0.079372793;5.6670833e-05;0.015775697;0.73563844;0.0034891316;0.0067598321;0.75769323;0.044446684;0.25837737;0.058154397;0.14250766;0.24006549;0.018671846;0.37300098;0.61707801;0.0086807888;0.074489646;0.0092911655;0.0013573084;0.00092517992;0.036175489;0.095352761;0.00011103986;0.0031048334;0.039515909;0.26989725;8.6979435e-06;0.0011423962;0.026667692;0.033036046;0.22459197;0.071343862;0.029608052;1.3270392e-05;0.0081270039;0.030811897;0.00023845541;0.050091438;8.2805374e-05;0.0014465919;0.0054822075;0.011244612;0.016714178;0.0011011093;0.0010500695;0.11585728;0.0058144387;0.0025623229;0.010572837;0.00083715719;0.032996792;0.63412869;0.049766324;0.012905004;0.5754171;0.0035447418;0.048246089;0.092233382;0.015796004;0.33974367;0.016511049;0.012778123;0.82404715;0.0035288034;0.018387174;0.035450436;0.086016849;0.080110304;0.055332053;5.6457153e-05;0.84156424;0.24038455;4.9591479e-05;0.58675516;0.14413245;0.044378906;0.0026065577;0.020905636;0.057119489;0.0036376161;0.00048282911;0.0075433739;0.02601013;0.0015965521;0.014482012;0.75002289;0.016220121;0.029308781;0.71634895;0.00083638914;0.022398235;0.0067734905;0.096633255;0.75896674;0.19069049;0.28830802;0.046775512;0.042215154;8.1049002e-05;0.0045239893;0.0042715296;0.010068194;5.5490364e-05;0.0011704522;0.01116447;0.0004917389;0.00098084263;0.012376452;0.018978;0.019196978;0.63201743;0.5504213;0.58916777;0.0047282269;0.00038606592;0.012203672;0.143676;0.0025560171;0.011170838;0.1983934;0.07596916;0.16534497;0.017572157;0.0093036611;7.0150272e-05;0.021761112;0.00061659899;0.004146358;0.0014850963;0.0098922905;0.00055680575;0.72136861;0.004226001;0.0083663482;0.033211522;0.018983839;0.13150482;0.73785698;0.20520081;0.072860926;0.03447542;0.81239337;0.68022883;0.0012839658;0.012230226;0.044537272;0.56986928;0.58375812;0.024295632;0.47568402;0.00069541374;0.0064904434;0.51258332;0.023997404;0.0015650762;0.0029965909;0.08891423;0.0027024737;0.024916071;0.013528118;0.001162047;0.001582872;3.9531792e-06;0.042701319;0.48706976;0.49942678;0.00026001621;1.337881e-05;0.62971979;0.038816355;0.012207517;0.0081408219;0.0043232786;0.005039874;0.03702737;0.027640998;0.0050640493;0.05510775;0.021368619;0.028515663;0.027606171;0.090017147;0.3696034;0.48303005;0.063429579;0.0016951807;0.36117199;0.078181677;0.072407812;0.067110099;0.068689249;0.0014413313;0.22387674;0.020617835;0.0062375991;0.022630144;0.0019528264;0.53815448;0.25686234;0.00030917657;0.21361211;0.54844141;0.012843726;0.042419817;0.11433332;0.032145582;7.8073936e-05;0.00052056555;0.0052387896;0.029191785;0.0404208;0.0015122973;0.049295589;0.01441016;0.18842345;0.00023609381;0.77638096;0.034906559;0.032103643;0.0012308536;0.79937887;0.69146687;0.013006894;0.0014083337;0.031100107;0.57041073;0.0006518336;0.00071441237;0.0012804009;0.6358692;0.00093332422;0.011300603;0.0069922204;0.12134342;0.041138809;0.013998035;0.00096164108;0.69553745;0.2742109;0.0078649605;0.0065403967;0.01495986;0.035030365;0.0050733471;0.19606574;0.00016151168;0.045167711;0.063210785;0.00067012565;0.016230131;0.003649055;0.0020959242;0.20414405;0.0014110871;0.78182435;0.008237184;0.047522377;0.0030875322;0.02110355;0.3116045;0.034265384;0.031784564;0.011388915;0.029430784;0.018173827;0.13267848;0.0015645835;0.012107309;0.0051612626;0.083678164;0.013532083;0.2458643;0.13065925;0.010631591;0.78306121;0.0013335419;0.0013165432;0.034081858;0.003251892;0.6519267;0.43145332;0.0030580319;0.82879823;0.28091356;0.12451136;0.003147769;0.035971832;0.013131853;0.030954493;0.0080671674;0.0022236221;0.0015333683;0.07791131;0.33615059;0.0028157542;0.005791482;0.42227584;0.027527755;0.0029166769;0.04954052;0.52704072;0.68425971;0.0095827766;0.013587954;0.0027981997;0.14278902;0.092388071;0.0079989815;0.063224301;0.00270729;0.073453739;0.003288934;0.00040976002;0.016678933;0.010053776;0.022107724;0.002211201;0.63464409;0.01378176;4.5063302e-05;0.014647342;0.0028915175;0.0063999631;0.69418281;0.11485633;0.21623528;0.1202738;0.12509957;0.74494189;0.19534303;0.36606321;0.019100001;0.3283731;0.10113648;0.014976441;0.0059958482;0.27599669;0.014085267;0.040843554;0.0047274577;0.029791368;0.012717085;0.043905493;0.012142033;0.71857816;0.00086616963;0.0083011054;0.21869785;0.28897828;0.02864684;0.004300578;0.20991717;0.047030509;0.0081382981;0.020909598;0.0019410707;0.0082634976;0.61422735;0.00016857726;0.57300681;0.027347777;0.012961958;0.038862653;0.0018848581;0.015426895;0.80124021;0.0046932148;0.061174512;0.0010994718;0.0017822244;0.37766701;0.050502114;0.0074117258;0.0030057803;0.0057161353;0.0084121265;0.010463498;0.38779721;0.046878852;0.012502012;0.22543246;0.0077935895;0.78581119;0.0040805656;0.54667443;0.04914058;0.029658314;0.049801551;0.02237029;0.051373452;0.014178025;0.024363201;0.28040847;0.061829902;0.077336527;0.031112187;0.0069475896;0.034623049;0.001896107;0.36602068;0.016599266;0.0079180561;0.073261976;0.00062591967;1.6322797e-06;0.045808889;0.019627843;0.14823775;0.70715302;0.0005782065;0.75329739;0.7238605;0.0081489915;0.012493601;0.021910226;0.00093030999;0.0048123589;0.085889176;0.0085993251;0.67248511;0.0054721399;0.014417609;0.014274627;0.0078198807;0.022690415;0.026999287;0.0011230209;0.00015347172;0.00047079811;0.49807775;5.794251e-05;0.050518889;0.0023039484;0.0063730949;0.064442463;0.70361406;0.12847075;0.020522319;0.00092686096;0.0054142992;0.097236045;0.067204729;6.8123751e-05;0.019903339;0.0056645786;0.066984423;0.71611965;0.00745905;0.025465187;0.00012375502;0.010814464;0.0042713373;0.026276451;0.042869076;0.43428135;0.0016922022;0.052665424;0.56194741;0.52976817;0.015893567;0.0019441443;0.5544672;0.0014107974;0.10558144;0.040412746;0.00022436985;0.21151571;0.0035846357;0.00047367401;0.051090948;0.043950118;0.00028355702;0.80195796;0.014009209;0.1754671;0.00033148483;0.097098008;0.82121098;0.0083432794;0.25386018;0.010559379;0.0071810042;0.075585641;0.06199513;0.017652865;0.20966128;0.02291419;0.038310394;0.030079376;0.049695864;0.11132701;0.0013892626;0.017984046;0.74797237;0.057538562;8.6739943e-05;6.5035769e-05;0.0067877267;0.0057231248;0.023628686;0.11619301;0.0014076382;0.015429897;0.039347813;0.022304179;0.018030344;0.57252431;0.047160015;0.31488642;0.013779117;0.12738518;0.00045510626;0.0073508071;0.58276814;0.017580707;0.34194118;0.046672843;0.0067703486;0.025965501;0.0010553011;0.66841453;0.18753737;0.040137287;0.21234548;0.069556929;0.65006721;0.071941175;0.155439;0.017131697;0.019177582;0.0094639454;0.0025051599;0.00035138323;0.61179888;0.0037489003;0.019246612;0.59731942;0.022604492;0.012541061;0.82582557;0.0399343;0.25889343;0.010024698;0.0048122946;0.0022328747;0.0045053931;0.024146518;0.0029279257;0.020866428;0.48039088;1.8764495e-06;0.00015771489;0.42651406;0.033844311;0.055727594;0.00028844422;0.00020553952;0.0014448238;0.053272251;0.0096942782;0.005175883;0.14168231;0.022550894;0.049414702;0.52625465;0.043409262;0.63574034;0.058042746;0.19039126;0.00035273226;0.039059602;0.042054102;0.078854591;0.13874446;0.13590397;0.016495408;0.6742273;0.0025710051;0.00032528536;0.026899183;0.0008782412;0.004451015;0.66616398;0.014548216;0.027383856;0.34223086;0.044118211;0.12522167;0.36244297;0.0025416631;0.016899997;0.041705165;0.012331274;0.20879938;0.012657009;0.097765304;0.022749644;0.035480633;0.029747572;0.00094698992;0.82281017;0.01844953;0.0086407773;0.0006922835;0.79107809;0.51561433;0.064372368;0.027787611;0.021024719;0.0013653368;5.8356847e-05;0.17304465;0.085269831;0.1183378;0.00011686704;0.026862061;0.020298753;0.0042209351;0.02146643;0.0016253327;0.040487569;0.066771135;0.48351571;0.020100003;0.0053948052;0.22337246;0.0059891148;0.0052439836;0.17744204;0.01103158;0.036649242;0.60329837;0.006498972;0.0019564386;0.0013247889;0.041875944;0.0047546467;0.015936341;0.021946097;0.052334376;0.065329172;0.020717731;0.0021797041;0.29993713;0.004929387;0.56564897;0.0024946397;0.00039214274;0.80292225;0.44015327;0.047381125;0.002493816;0.048375264;0.85554671;0.29823992;0.014039489;0.020816585;0.16486351;0.17534651;0.017739832;0.0071866475;0.48333666;0.066659987;0.012382699;0.82211214;0.012121848;0.016373405;0.00045359167;0.031661764;0.043333434;0.0034020876;0.34085202;0.010208653;0.0087175556;0.00020646352;0.4899027;0.042956647;0.80326611;0.064096995;0.005854581;0.0089204935;0.061691217;0.041276373;0.013287211;7.5090182e-05;0.75229347;0.040787857;0.0084903464;0.0036968386;0.02711378;0.0027717412;0.019475602;0.11594468;0.0072314064;0.0080841091;0.0053081084;0.010577042;0.0065186583;0.010440788;0.0065836813;0.25316101;0.0034629898;0.087737098;0.003590371;0.051203683;0.00064562797;1.3554662e-05;0.24100019;0.56203347;0.054954041;0.0033788928;0.00082259299;0.7008037;0.78098202;0.0011394689;0.0047259824;0.17212373;0.8533085;0.064138047;0.012205714;0.00015404531;0.02696738;0.4932875;0.055284489;0.00018324121;0.07345023;0.011025332;0.00011965343;0.69003439;0.020927742;0.015907746;0.049966626;0.16785853;0.038465403;0.021153603;0.0025874823;0.047618337;0.0019943363;0.0032698268;0.56751788;0.064491026;0.62354463;0.0017089961;0.032335822;0.16307348;0.043593124;0.041971564;0.00011091746;0.0024229642;0.43678564;0.078872114;0.015279707;0.046699688;0.00040928173;0.014163366;0.021341089;0.16579872;0.00013482137;0.0040295864;0.0004994162;0.076853871;0.0028119201;0.0091818264;0.084388629;0.15272714;0.0020949102;0.7342785;7.0072965e-05;0.37702402;0.004083259;0.046783566;0.68654507;0.012537576;0.10662678;0.011250018;0.0091598378;0.68935704;0.68769932;0.0018273148;0.0027057691;0.0016142031;0.83558559;0.01381252;0.035796355;0.00075446744;0.026465815;0.012506217;0.1238725;0.001234665;0.038357027;0.02861389;0.00306814;0.71272379;0.003354399;0.017250571;0.16428739;0.027479582;0.073651001;7.3914925e-05;0.00022030187;0.00015125652;0.19394365;0.044633903;0.030116081;0.037449118;0.3360309;0.00029070082;0.043426372;0.013674464;0.023585724;0.0026736388;0.016257035;0.0032373476;0.37513009;0.00010466308;0.01755297;0.0029774522;0.08820878;0.11488616;0.0072839889;0.037851069;0.40829274;0.16497874;0.056474112;0.0030660168;0.13173372;0.012470651;0.8334229;0.00066669116;0.30353978;0.0011589603;0.0065880418;0.00061296276;0.030359283;0.0015123843;0.044251412;0.01781345;0.053996235;0.50947088;0.012509702;0.0018679691;0.59496039;0.079645671;0.71144921;0.58920544;0.032235499;0.010192312;0.0010005368;0.08505404;0.0012073191;0.014814234;0.010608042;0.011669952;0.17133142;0.0036592265;0.021645159;0.69053614;0.29084066;0.010195796;0.008410925;0.07212092;0.7061528;0.012920625;0.080646031;0.00088471902;0.036158714;0.75690639;0.0026371989;0.0099121155;0.31307432;0.00017741162;0.0078028236;0.59345573;0.019803027;0.0026758886;0.00065095059;0.00018150601;0.082129054;4.4264158e-05;0.010502307;0.00018614519;0.00045923312;0.21880063;0.36734167;0.00054727658;0.24029568;0.054915987;0.0005723504;0.070871718;0.021743802;0.070408091;0.15509778;0.40222815;0.02410898;0.70235211;5.2397161e-05;0.260674;0.012370205;0.026042454;0.0058137337;0.022567369;0.00013070059;0.63926309;0.00020147394;0.0016309555;0.025842246;0.0091139395;0.34015062;0.039475311;0.0067627821;0.00019061638;0.2076484;0.00041641938;0.035599407;0.043491799;1.2340555e-05;0.0012966027;0.015554016;0.0010089276;4.7909809e-05;0.70800757;0.00064158696;0.071716368;0.00037268584;0.013073338;0.78197503;0.72182196;0.068847463;0.0025478736;0.012688008;0.0010568807;0.53367364;0.043876972;0.72411245;0.013585911;9.0147936e-05;0.00060413877;0.39555058;0.31761056;0.0033814595;6.1341474e-05;0.36017373;0.25547475;0.0062585035;0.047490165;0.01264271;0.02330564;0.010019412;0.27060103;5.9597256e-05;0.5248003;0.0014330131;0.1271209;0.00026383033;0.011633426;0.025744228;0.36480224;0.0032968239;0.20744497;0.00050227373;0.34295139;5.3984157e-05;2.1147698e-05;0.71539432;0.024159031;0.04753647;0.23327628;0.0028334672;0.69841731;0.39793238;0.00097608927;0.025058512;0.024493547;0.32978785;0.17035332;0.033486985;0.016204063;0.003146755;0.17401649;0.0076926569;0.00094297575;0.14769377;0.00064755959;0.00088308146;0.63259625;0.0050485949;0.00018212042;0.0026787403;0.047663964;0.015653502;0.0016001172;0.00062162115;0.0001553965;0.0076634157;0.0063092904;0.0001840764;0.0024508485;0.34313571;0.00012645261;0.00022047947;0.0006362276;0.11884834;0.12115891;0.044410449;0.0049306052;0.0086961687;0.0079258149;0.00089415314;0.012874005;0.026164874;0.033100132;0.034187209;0.44745025;0.00087958894;0.7070967;0.0097753815;0.00014482455;0.029385736;0.0011043265;0.20589462;0.017533783;0.17248638;0.052144475;0.00061807071;0.0046460191;0.00095900358;0.009693197;0.76036263;0.022580508;0.048056856;0.66656804;0.0021616111;0.17194775;0.37538779;0.066003084;0.00054013281;0.11880949;0.83644903;0.71649826;0.047495872;0.0023807255;0.012345212;0.0383728;0.0077702478;0.0099463593;0.045078799;6.407332e-05;0.0023683361;0.83390462;0.42718709;0.00056160713;0.00013021339;0.033068255;0.035204835;0.0020588189;0.27884769;0.029813059;0.007163947;0.0023344944;0.0014124638;0.59348941;0.38187271;0.0016013344;4.6837846e-07;0.76461732;0.23245078;0.0023012867;0.061752297;0.16242766;0.0012117536;0.67159915;0.0076632234;0.33697885;0.33916917;0.042685211;0.0036144529;0.13971809;0.00070632598;0.65836728;0.0017952794;0.00094365684;0.014499795;0.01323879;0.36779702;0.2895911;0.29104653;0.008978528;0.0019650259;0.0035769991;0.00072759984;0.031145738;0.62283492;0.0076970812;0.0088565722;0.040267132;0.0050772587;0.037446767;0.011458604;0.011685212;0.038727105;0.14632086;0.00035872325;0.0012218254;0.0017102002;0.48958629;0.024619721;0.013548664;0.0050806575;0.02848563;0.027682709;0.013034889;0.0024227106;0.43062672;0.018743588;0.00078640721;0.36106691;0.43667769;0.065550469;0.06565211;0.00022620105;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   DataTable @[1] {
    name="EpochOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="batch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [7] 0;0;0;0;0;0;0;      };
     };
     int_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="epoch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [7] 0;0;0;0;0;0;0;      };
     };
     float_Data @[2] {
      name="avg_sse";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [7] 1.639068;1.639068;1.639068;1.639068;1.639068;1.639068;1.639068;      };
     };
     float_Data @[3] {
      name="cnt_err";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [7] 96;96;96;96;96;96;96;      };
     };
     float_Data @[4] {
      name="avg_ext_rew";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [7] 0;0;0;0;0;0;0;      };
     };
     float_Data @[5] {
      name="avg_cycles";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [7] 50;50;50;50;50;50;50;      };
     };
     float_Data @[6] {
      name="epoch_time_tot";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [7] 18.92;18.92;18.92;18.92;18.92;18.92;18.92;      };
     };
     float_Data @[7] {
      name="epoch_time_usr";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [7] 18.440001;18.440001;18.440001;18.440001;18.440001;18.440001;18.440001;      };
     };
     float_Data @[8] {
      name="mean_Hidden_act_dif";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [7] 0.072124884;0.072124884;0.072124884;0.072124884;0.072124884;0.072124884;0.072124884;      };
     };
     float_Data @[9] {
      name="pat_code_st_maxda_mean";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [7] 0.11229672;0.11229672;0.11229672;0.11229672;0.11229672;0.11229672;0.11229672;      };
     };
     float_Data @[10] {
      name="hidden_st_maxda_mean";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [7] 0.043547511;0.043547511;0.043547511;0.043547511;0.043547511;0.043547511;0.043547511;      };
     };
     float_Data @[11] {
      name="ag_code_st_maxda_mean";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [7] 0.021921361;0.021921361;0.021921361;0.021921361;0.021921361;0.021921361;0.021921361;      };
     };
     float_Data @[12] {
      name="rel_code_st_maxda_mean";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [7] 0.022154178;0.022154178;0.022154178;0.022154178;0.022154178;0.022154178;0.022154178;      };
     };
     float_Data @[13] {
      name="hidden_acts";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 8;8;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [8 8 7] 0.0032990456;0.010212408;0.011874874;0.0037164481;0.09385445;0.11427762;0.0016981381;0.00037458248;0.2659829;0.012911391;0.0016869736;0.03607928;0.024651755;0.030885454;0.30004737;0.015132989;0.29925519;0.097546421;0.0099024447;0.10811939;0.11709908;0.041827817;0.11056328;0.42047411;0.10392897;0.013131809;0.3786853;0.15359873;0.011667131;0.013278093;0.15506977;0.015263353;0.0065398645;0.070015222;0.0034037102;0.058097653;0.031749669;0.33371428;0.27189875;0.0089053567;0.14624509;0.52352077;0.17053404;0.24688946;0.075139806;0.37312272;0.41670439;0.0025696899;0.052037306;0.12389491;0.099645697;0.0094840946;0.012428013;0.57447869;0.084994279;0.00024973499;0.72127616;0.41075909;0.035941422;0.0016204009;0.063490257;0.35638568;0.0027903768;0.021059416;0.0065476261;0.04648884;3.9021928e-05;0.0019227628;0.083773375;0.34867436;0.00093224895;0.0011449179;0.045294125;0.017374991;0.051302504;0.12508944;0.26975784;0.1669358;0.3206923;0.26731667;0.28143138;0.12137114;0.066984214;0.32470271;0.26463449;0.066391997;0.19886544;0.12189954;0.074790582;0.17764612;0.039388891;0.028170485;0.025620902;0.054013181;0.10830253;0.01045683;0.045621283;0.010166222;0.071433686;0.39334545;0.0083630765;0.081343733;0.24477144;0.059551012;0.23135941;0.26331669;0.27941987;0.27633625;0.12075885;0.45664033;0.25838193;0.0060034874;0.26023635;0.051091988;0.068334557;0.079873554;0.056874465;0.13861826;0.031753037;0.0047305855;0.09931799;0.063227676;0.0035087839;0.11268236;0.31369251;0.22548854;0.11602422;0.13505702;0.038529836;0.030033819;0.0062371767;0.017247893;0.11547986;0.26528025;0.0028273768;0.0076899673;0.17818466;0.05374869;0.013445316;0.014115211;0.20987295;0.33789933;0.12269845;0.25331998;0.31242606;0.013500692;0.049985498;0.2648626;0.024628101;0.0077793482;0.30992502;0.081091806;0.049411245;0.2706055;0.070402116;0.21897219;0.05024498;0.17191176;0.20168325;0.0056037935;0.0051961113;0.025368638;0.14630391;0.46769762;0.0075814174;0.25284472;0.21176748;0.044626586;0.17427245;0.29035637;0.20428364;0.2044661;0.16744481;0.12514403;0.030165587;0.0078448988;0.13185947;0.015603179;0.30187827;0.0086300168;0.019429535;0.21227776;0.087497488;0.020919396;0.42670509;0.14826487;0.17881477;0.16299897;0.17237525;0.17417215;0.018071439;0.1603498;0.038529836;0.030033819;0.0062371767;0.017247893;0.11547986;0.26528025;0.0028273768;0.0076899673;0.17818466;0.05374869;0.013445316;0.014115211;0.20987295;0.33789933;0.12269845;0.25331998;0.31242606;0.013500692;0.049985498;0.2648626;0.024628101;0.0077793482;0.30992502;0.081091806;0.049411245;0.2706055;0.070402116;0.21897219;0.05024498;0.17191176;0.20168325;0.0056037935;0.0051961113;0.025368638;0.14630391;0.46769762;0.0075814174;0.25284472;0.21176748;0.044626586;0.17427245;0.29035637;0.20428364;0.2044661;0.16744481;0.12514403;0.030165587;0.0078448988;0.13185947;0.015603179;0.30187827;0.0086300168;0.019429535;0.21227776;0.087497488;0.020919396;0.42670509;0.14826487;0.17881477;0.16299897;0.17237525;0.17417215;0.018071439;0.1603498;0.038529836;0.030033819;0.0062371767;0.017247893;0.11547986;0.26528025;0.0028273768;0.0076899673;0.17818466;0.05374869;0.013445316;0.014115211;0.20987295;0.33789933;0.12269845;0.25331998;0.31242606;0.013500692;0.049985498;0.2648626;0.024628101;0.0077793482;0.30992502;0.081091806;0.049411245;0.2706055;0.070402116;0.21897219;0.05024498;0.17191176;0.20168325;0.0056037935;0.0051961113;0.025368638;0.14630391;0.46769762;0.0075814174;0.25284472;0.21176748;0.044626586;0.17427245;0.29035637;0.20428364;0.2044661;0.16744481;0.12514403;0.030165587;0.0078448988;0.13185947;0.015603179;0.30187827;0.0086300168;0.019429535;0.21227776;0.087497488;0.020919396;0.42670509;0.14826487;0.17881477;0.16299897;0.17237525;0.17417215;0.018071439;0.1603498;0.038529836;0.030033819;0.0062371767;0.017247893;0.11547986;0.26528025;0.0028273768;0.0076899673;0.17818466;0.05374869;0.013445316;0.014115211;0.20987295;0.33789933;0.12269845;0.25331998;0.31242606;0.013500692;0.049985498;0.2648626;0.024628101;0.0077793482;0.30992502;0.081091806;0.049411245;0.2706055;0.070402116;0.21897219;0.05024498;0.17191176;0.20168325;0.0056037935;0.0051961113;0.025368638;0.14630391;0.46769762;0.0075814174;0.25284472;0.21176748;0.044626586;0.17427245;0.29035637;0.20428364;0.2044661;0.16744481;0.12514403;0.030165587;0.0078448988;0.13185947;0.015603179;0.30187827;0.0086300168;0.019429535;0.21227776;0.087497488;0.020919396;0.42670509;0.14826487;0.17881477;0.16299897;0.17237525;0.17417215;0.018071439;0.1603498;0.013909808;0.075726405;0.05453486;0.14246596;0.081776425;0.42725953;0.019964643;0.0058579887;0.18273561;0.090952016;0.018794822;0.062938176;0.078658134;0.25895119;0.16235048;0.089014255;0.087748341;0.079193026;0.073241197;0.14151563;0.14066119;0.058980398;0.16965356;0.12413836;0.073323064;0.084769897;0.071773306;0.17691134;0.1101253;0.085579157;0.26884824;0.0038560075;0.086299926;0.019065861;0.03827475;0.2581827;0.035327826;0.083270334;0.20526187;0.014728758;0.23266731;0.39687338;0.11152148;0.16711892;0.16031681;0.29794204;0.15273087;0.056158543;0.11764075;0.052193549;0.25900355;0.020597912;0.032761224;0.20156956;0.019936781;0.069188543;0.53174388;0.065452881;0.11332538;0.10317776;0.2672841;0.2777085;0.081998006;0.17732626;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   DataTable @[2] {
    name="TrialTestOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="batch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     int_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="epoch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     int_Data @[2] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="trial";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     String_Data @[3] {
      name="trial_name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     String_Data @[4] {
      name="group_name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     int_Data @[5] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="phase_no";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[6] {
      name="minus_cycles";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[7] {
      name="sse";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[8] {
      name="ext_rew";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [0]       };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   DataTable @[3] {
    name="EpochTestOutputData";
    desc=;
    data {
     name="data";
     el_typ=DataColTp;
     el_def=0;
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
  };
  DataTable_Group @.gp[2] {
   name="AnalysisData";
   el_typ=DataTable;
   el_def=0;
   DataTable @[0] {
    name="family_trees_InhibMod";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="ct_cycle";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [80] 0;1;2;3;4;5;6;7;8;9;10;11;12;13;14;15;16;17;18;19;20;21;22;23;24;25;26;27;28;29;30;31;32;33;34;35;36;37;38;39;40;41;42;43;44;45;46;47;48;49;50;51;52;53;54;55;56;57;58;59;60;61;62;63;64;65;66;67;68;69;70;71;72;73;74;75;76;77;78;79;      };
     };
     float_Data @[1] {
      name="inhib_mod";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar {
       name=;
	    [80] -0;-0;-0;-0;-0;-0;-0;-0;-0;-0;-0;-0;-0;-0;-0;-0;-0;-0;-0;-0;-0;-0;-0;-0;-0;-0;-0;-0;-0;-0;-0;-0;-0;-0;-0;-0;-0;-0;-0;-0;-0;0.01545085;0.029389266;0.040450852;0.047552828;0.050000001;0.047552824;0.040450852;0.02938926;0.015450852;-4.371139e-09;-0.01545086;-0.029389277;-0.040450841;-0.047552824;-0.050000001;-0.047552824;-0.040450841;-0.029389266;-0.015450847;-0;-0;-0;-0;-0;-0;-0;-0;-0;-0;-0;-0;-0;-0;-0;-0;-0;-0;-0;-0;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
  };
 };
 data_proc {
  name=;
  el_typ=taDataProc;
  el_def=0;
  taDataProc @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItemBase;
    el_def=0;
    UserDataItem @[0] {
     name="NO_CLIP";
     value 1 0=1;
    };
   };
   name="data_base";
  };
  taDataAnal @[1] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItemBase;
    el_def=0;
    UserDataItem @[0] {
     name="NO_CLIP";
     value 1 0=1;
    };
   };
   name="data_anal";
  };
  taDataGen @[2] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItemBase;
    el_def=0;
    UserDataItem @[0] {
     name="NO_CLIP";
     value 1 0=1;
    };
   };
   name="data_gen";
  };
  taImageProc @[3] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItemBase;
    el_def=0;
    UserDataItem @[0] {
     name="NO_CLIP";
     value 1 0=1;
    };
   };
   name="image_proc";
  };
 };
 programs {
  name=;
  el_typ=Program;
  el_def=0;
  step_prog=NULL;
  tags=;
  desc=;
  Program @[0] {
   name="LeabraStartup";
   tags="Leabra, Startup";
   desc="run project in the background (replaces leabra_startup.css)
command line is: emergent -nogui -ni -p <project name>.proj [Epochs=xxx] [Batches=xxx] [Tag=xxx]";
   flags=STARTUP_RUN;
   objs {
    name=;
    el_typ=taNBase;
    el_def=0;
   };
   types {
    name=;
    el_typ=ProgType;
    el_def=0;
   };
   args {
    name=;
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="network";
     var_type=T_Object;
     object_type=CtLeabraNetwork;
     object_val=$5$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK;
     desc="network to operate on -- updates batch counter on network and passes it to train program";
    };
    ProgVar @[1] {
     name="input_data";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.projects[0].data.gp[0][0]$10$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK;
     desc="datatable with training patterns -- not used by this program, but passed to train program";
    };
   };
   vars {
    name=;
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="train";
     var_type=T_Object;
     object_type=Program;
     object_val=$9$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK;
     desc="set this to point to your train process";
    };
    ProgVar @[1] {
     name="batch";
     var_type=T_Object;
     object_type=Program;
     object_val=.projects[0].programs.gp[0][0]$11$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK;
     desc="set this to point to your batch process";
    };
    ProgVar @[2] {
     name="tag";
     var_type=T_String;
     string_val=;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK;
     desc=;
    };
    ProgVar @[3] {
     name="log_dir";
     var_type=T_String;
     string_val=;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK;
     desc="log file directory";
    };
    ProgVar @[4] {
     name="log_file_nm";
     var_type=T_String;
     string_val="/Users/oreilly/svn_sims/leabra/ft/ft_ct.epc.dat";
     objs_ptr=0;
     flags=NULL_CHECK;
     desc="name of log file";
    };
    ProgVar @[5] {
     name="hidden_size";
     var_type=T_Int;
     int_val=100;
     objs_ptr=0;
     flags=NULL_CHECK;
     desc="hidden size arg";
    };
    ProgVar @[6] {
     name="EpochOutputData";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.projects[0].data.gp[1][1]$12$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK;
     desc=;
    };
    ProgVar @[7] {
     name="TrialOutputData";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.projects[0].data.gp[1][0]$13$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK;
     desc=;
    };
    ProgVar @[8] {
     name="con_spec";
     var_type=T_Object;
     object_type=CtLeabraConSpec;
     object_val=$1$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK;
     desc=;
    };
    ProgVar @[9] {
     name="FmInput_Output";
     var_type=T_Object;
     object_type=CtLeabraConSpec;
     object_val=$2$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK;
     desc=;
    };
    ProgVar @[10] {
     name="settle";
     var_type=T_Object;
     object_type=Program;
     object_val=.projects[0].programs.gp[0][4]$14$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK;
     desc=;
    };
    ProgVar @[11] {
     name="unit_spec";
     var_type=T_Object;
     object_type=CtLeabraUnitSpec;
     object_val=$3$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK;
     desc=;
    };
    ProgVar @[12] {
     name="bias_spec";
     var_type=T_Object;
     object_type=CtLeabraBiasSpec;
     object_val=.projects[0].networks[0].specs[1].children[0]$15$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK;
     desc=;
    };
    ProgVar @[13] {
     name="layer_spec";
     var_type=T_Object;
     object_type=CtLeabraLayerSpec;
     object_val=$4$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK;
     desc=;
    };
   };
   functions {
    name=;
    el_typ=Function;
    el_def=0;
   };
   load_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
   init_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
   prog_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
    IfReturn @[0] {
     desc="don't run if running in the gui!";
     flags=;
     cond {
      expr="taMisc::gui_active";
     };
    };
    Comment @[1] {
     desc="add our special args from command line";
     flags=;
    };
    MiscCall @[2] {
     desc=;
     flags=;
     result_var=NULL;
     object_type=taMisc;
     method=taMisc::AddArgName;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="flag";
       required=0;
       def_val="\"\"";
       expr {
	expr="\"tag=\"";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="name";
       required=0;
       def_val="\"\"";
       expr {
	expr="\"FileTag\"";
       };
      };
     };
    };
    MiscCall @[3] {
     desc=;
     flags=;
     result_var=NULL;
     object_type=taMisc;
     method=taMisc::AddArgName;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="flag";
       required=0;
       def_val="\"\"";
       expr {
	expr="\"logdir=\"";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="name";
       required=0;
       def_val="\"\"";
       expr {
	expr="\"LogDir\"";
       };
      };
     };
    };
    MiscCall @[4] {
     desc=;
     flags=;
     result_var=NULL;
     object_type=taMisc;
     method=taMisc::AddArgName;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="flag";
       required=0;
       def_val="\"\"";
       expr {
	expr="\"epochs=\"";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="name";
       required=0;
       def_val="\"\"";
       expr {
	expr="\"EpochMax\"";
       };
      };
     };
    };
    MiscCall @[5] {
     desc=;
     flags=;
     result_var=NULL;
     object_type=taMisc;
     method=taMisc::AddArgName;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="flag";
       required=0;
       def_val="\"\"";
       expr {
	expr="\"batches=\"";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="name";
       required=0;
       def_val="\"\"";
       expr {
	expr="\"BatchMax\"";
       };
      };
     };
    };
    MiscCall @[6] {
     desc=;
     flags=;
     result_var=NULL;
     object_type=taMisc;
     method=taMisc::AddArgName;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="flag";
       required=0;
       def_val="\"\"";
       expr {
	expr="\"hiddens=\"";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="name";
       required=0;
       def_val="\"\"";
       expr {
	expr="\"HiddenSize\"";
       };
      };
     };
    };
    RegisterArgs @[7] {
     desc=;
     flags=;
    };
    Comment @[8] {
     desc="Initialize and set variables from args";
     flags=;
    };
    PrintExpr @[9] {
     desc=;
     flags=;
     expr {
      expr="\"Loaded project: \" << .projects[0].file_name";
     };
    };
    MethodCall @[10] {
     desc=;
     flags=;
     result_var=NULL;
     obj=.projects[0].programs[0].vars[1]$16$;
     method=Program::Init;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
     };
    };
    MiscCall @[11] {
     desc=;
     flags=;
     result_var=.projects[0].programs[0].vars[2]$17$;
     object_type=taMisc;
     method=taMisc::FindArgByName;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="nm";
       required=0;
       def_val="\"\"";
       expr {
	expr="\"FileTag\"";
       };
      };
     };
    };
    MiscCall @[12] {
     desc=;
     flags=;
     result_var=.projects[0].programs[0].vars[3]$18$;
     object_type=taMisc;
     method=taMisc::FindArgByName;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="nm";
       required=0;
       def_val="\"\"";
       expr {
	expr="\"LogDir\"";
       };
      };
     };
    };
    MethodCall @[13] {
     desc=;
     flags=;
     result_var=NULL;
     obj=.projects[0].programs[0].vars[0]$19$;
     method=Program::SetVarFmArg;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="arg_nm";
       required=1;
       def_val=;
       expr {
	expr="\"EpochMax\"";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="var_nm";
       required=1;
       def_val=;
       expr {
	expr="\"max_epoch\"";
       };
      };
      ProgArg @[2] {
       arg_type=bool;
       type="bool";
       name="quiet";
       required=0;
       def_val="false";
       expr {
	expr="false";
       };
      };
     };
    };
    MethodCall @[14] {
     desc=;
     flags=;
     result_var=NULL;
     obj=$16$;
     method=Program::SetVarFmArg;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="arg_nm";
       required=1;
       def_val=;
       expr {
	expr="\"BatchMax\"";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="var_nm";
       required=1;
       def_val=;
       expr {
	expr="\"max_batch\"";
       };
      };
      ProgArg @[2] {
       arg_type=bool;
       type="bool";
       name="quiet";
       required=0;
       def_val="false";
       expr {
	expr="false";
       };
      };
     };
    };
    MemberFmArg @[15] {
     desc=;
     flags=;
     obj=.projects[0].programs[0].args[0]$20$;
     path="ct_time.minus";
     arg_name="minus";
     update_after=1;
     quiet=0;
    };
    MemberFmArg @[16] {
     desc=;
     flags=;
     obj=$20$;
     path="ct_time.plus";
     arg_name="plus";
     update_after=1;
     quiet=0;
    };
    MemberFmArg @[17] {
     desc=;
     flags=;
     obj=$20$;
     path="ct_time.inhib";
     arg_name="inhib";
     update_after=1;
     quiet=0;
    };
    MemberFmArg @[18] {
     desc=;
     flags=;
     obj=$20$;
     path="ct_time.syndep_int";
     arg_name="syndep_int";
     update_after=1;
     quiet=0;
    };
    MemberFmArg @[19] {
     desc=;
     flags=;
     obj=$20$;
     path="ct_fin_i.start";
     arg_name="fin_start";
     update_after=1;
     quiet=0;
    };
    MemberFmArg @[20] {
     desc=;
     flags=;
     obj=$20$;
     path="ct_fin_i.end";
     arg_name="fin_end";
     update_after=1;
     quiet=0;
    };
    MemberFmArg @[21] {
     desc=;
     flags=;
     obj=$20$;
     path="ct_fin_i.inhib_i";
     arg_name="inhib_i";
     update_after=1;
     quiet=0;
    };
    MemberFmArg @[22] {
     desc=;
     flags=;
     obj=$20$;
     path="ct_sin_i.start";
     arg_name="sin_start";
     update_after=1;
     quiet=0;
    };
    MemberFmArg @[23] {
     desc=;
     flags=;
     obj=$20$;
     path="ct_sin_i.duration";
     arg_name="sin_dur";
     update_after=1;
     quiet=0;
    };
    MemberFmArg @[24] {
     desc=;
     flags=;
     obj=$20$;
     path="ct_sin_i.burst_only";
     arg_name="sin_burst_only";
     update_after=1;
     quiet=0;
    };
    MemberFmArg @[25] {
     desc=;
     flags=;
     obj=$20$;
     path="ct_sin_i.burst_i";
     arg_name="sin_burst_i";
     update_after=1;
     quiet=0;
    };
    MemberFmArg @[26] {
     desc=;
     flags=;
     obj=$20$;
     path="ct_sin_i.trough_i";
     arg_name="sin_trough_i";
     update_after=1;
     quiet=0;
    };
    MemberFmArg @[27] {
     desc=;
     flags=;
     obj=$20$;
     path="ct_sravg.start";
     arg_name="sravg_start";
     update_after=1;
     quiet=0;
    };
    MemberFmArg @[28] {
     desc=;
     flags=;
     obj=$20$;
     path="ct_sravg.end";
     arg_name="sravg_end";
     update_after=1;
     quiet=0;
    };
    MemberFmArg @[29] {
     desc=;
     flags=;
     obj=$20$;
     path="ct_sravg.min_da_thr";
     arg_name="min_da_thr";
     update_after=1;
     quiet=0;
    };
    MemberFmArg @[30] {
     desc=;
     flags=;
     obj=$20$;
     path="ct_sravg.max_da_thr";
     arg_name="max_da_thr";
     update_after=1;
     quiet=0;
    };
    MemberFmArg @[31] {
     desc=;
     flags=;
     obj=$20$;
     path="phase_order";
     arg_name="phase_order";
     update_after=1;
     quiet=0;
    };
    MemberFmArg @[32] {
     desc=;
     flags=;
     obj=$20$;
     path="phase_order";
     arg_name="phase_order";
     update_after=1;
     quiet=0;
    };
    ProgVarFmArg @[33] {
     desc=;
     flags=;
     prog=.projects[0].programs.gp[0][3]$21$;
     var_name="init_sd";
     arg_name="trial_init_sd";
    };
    ProgVarFmArg @[34] {
     desc=;
     flags=;
     prog=.projects[0].programs.gp[0][2]$22$;
     var_name="sep_test";
     arg_name="sep_test";
    };
    MemberFmArg @[35] {
     desc=;
     flags=;
     obj=.projects[0].programs[0].vars[13]$23$;
     path="decay.event";
     arg_name="event_decay";
     update_after=1;
     quiet=0;
    };
    MemberFmArg @[36] {
     desc=;
     flags=;
     obj=.projects[0].programs[0].vars[8]$24$;
     path="lmix.hebb";
     arg_name="hebb";
     update_after=1;
     quiet=0;
    };
    MemberFmArg @[37] {
     desc=;
     flags=;
     obj=$24$;
     path="savg_cor.cor";
     arg_name="savg_cor";
     update_after=1;
     quiet=0;
    };
    MemberFmArg @[38] {
     desc=;
     flags=;
     obj=$24$;
     path="ca_dep.intwt_dt";
     arg_name="intwt_dt";
     update_after=1;
     quiet=0;
    };
    MemberFmArg @[39] {
     desc=;
     flags=;
     obj=$24$;
     path="ca_dep.ca_inc";
     arg_name="ca_inc";
     update_after=1;
     quiet=0;
    };
    MemberFmArg @[40] {
     desc=;
     flags=;
     obj=$24$;
     path="ca_dep.ca_dec";
     arg_name="ca_dec";
     update_after=1;
     quiet=0;
    };
    MemberFmArg @[41] {
     desc=;
     flags=;
     obj=$24$;
     path="ca_dep.sd_ca_thr";
     arg_name="sd_ca_thr";
     update_after=1;
     quiet=0;
    };
    MemberFmArg @[42] {
     desc=;
     flags=;
     obj=$24$;
     path="ca_dep.sd_ca_gain";
     arg_name="sd_ca_gain";
     update_after=1;
     quiet=0;
    };
    MemberFmArg @[43] {
     desc=;
     flags=;
     obj=$24$;
     path="dwt_norm.on";
     arg_name="dwt_norm";
     update_after=1;
     quiet=0;
    };
    MemberFmArg @[44] {
     desc=;
     flags=;
     obj=.projects[0].programs[0].vars[9]$25$;
     path="wt_scale.rel";
     arg_name="fm_io";
     update_after=1;
     quiet=0;
    };
    MemberFmArg @[45] {
     desc=;
     flags=;
     obj=.projects[0].programs[0].vars[11]$26$;
     path="dt.vm";
     arg_name="vm_dt";
     update_after=1;
     quiet=0;
    };
    MemberFmArg @[46] {
     desc=;
     flags=;
     obj=.projects[0].programs[0].vars[12]$27$;
     path="dwt_thresh";
     arg_name="bias_thr";
     update_after=1;
     quiet=0;
    };
    MiscCall @[47] {
     desc=;
     flags=;
     result_var=.projects[0].programs[0].vars[5]$28$;
     object_type=taMisc;
     method=taMisc::FindArgByName;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="nm";
       required=0;
       def_val="\"\"";
       expr {
	expr="\"HiddenSize\"";
       };
      };
     };
    };
    If @[48] {
     desc=;
     flags=;
     cond {
      expr="hidden_size >= 25";
     };
     true_code {
      name=;
      el_typ=ProgEl;
      el_def=0;
      UserScript @[0] {
       desc=;
       flags=;
       script {
	expr="network.layers.Agent_Code.un_geom.SetXY(1,1);
network.layers.Agent_Code.un_geom.FitN(hidden_size);

";
       };
      };
      UserScript @[1] {
       desc=;
       flags=;
       script {
	expr="network.layers.Relation_Code.un_geom.SetXY(1,1);
network.layers.Relation_Code.un_geom.FitN(hidden_size);
";
       };
      };
      UserScript @[2] {
       desc=;
       flags=;
       script {
	expr="network.layers.Hidden.un_geom.SetXY(1,1);
network.layers.Hidden.un_geom.FitN(hidden_size);
";
       };
      };
      UserScript @[3] {
       desc=;
       flags=;
       script {
	expr="network.layers.Patient_Code.un_geom.SetXY(1,1);
network.layers.Patient_Code.un_geom.FitN(hidden_size);
";
       };
      };
      MethodCall @[4] {
       desc=;
       flags=;
       result_var=NULL;
       obj=$20$;
       method=Network::Build;
       meth_args {
	name=;
	el_typ=ProgArg;
	el_def=0;
       };
      };
      MethodCall @[5] {
       desc="note: needed after rebuild!";
       flags=;
       result_var=NULL;
       obj=$16$;
       method=Program::Init;
       meth_args {
	name=;
	el_typ=ProgArg;
	el_def=0;
       };
      };
      PrintVar @[6] {
       desc=;
       flags=;
       message=;
       print_var=$28$;
       print_var2=NULL;
       print_var3=NULL;
       print_var4=NULL;
       print_var5=NULL;
       print_var6=NULL;
      };
     };
    };
    Comment @[49] {
     desc="Set log files";
     flags=;
    };
    MethodCall @[50] {
     desc="last arg is to include dmem proc number";
     flags=;
     result_var=.projects[0].programs[0].vars[4]$29$;
     obj=.projects[0].programs[0].vars[6]$30$;
     method=taBase::GetFileNameFmProject;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="ext";
       required=1;
       def_val=;
       expr {
	expr="\".epc.dat\"";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="tag";
       required=0;
       def_val="\"\"";
       expr {
	expr="tag";
       };
      };
      ProgArg @[2] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="subdir";
       required=0;
       def_val="\"\"";
       expr {
	expr="log_dir";
       };
      };
      ProgArg @[3] {
       arg_type=bool;
       type="bool";
       name="dmem_proc_no";
       required=0;
       def_val="false";
       expr {
	expr="false";
       };
      };
     };
    };
    MethodCall @[51] {
     desc="last arg is to restrict log to dmem_proc = 0";
     flags=;
     result_var=NULL;
     obj=$30$;
     method=DataTable::SaveDataLog;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="fname";
       required=0;
       def_val="\"\"";
       expr {
	expr="log_file_nm";
       };
      };
      ProgArg @[1] {
       arg_type=bool;
       type="bool";
       name="append";
       required=0;
       def_val="false";
       expr {
	expr="false";
       };
      };
      ProgArg @[2] {
       arg_type=bool;
       type="bool";
       name="dmem_proc_0";
       required=0;
       def_val="true";
       expr {
	expr="true";
       };
      };
     };
    };
    MethodCall @[52] {
     desc="last arg is to include dmem proc number";
     flags=OFF;
     result_var=$29$;
     obj=.projects[0].programs[0].vars[7]$31$;
     method=taBase::GetFileNameFmProject;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="ext";
       required=1;
       def_val=;
       expr {
	expr="\".trl.dat\"";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="tag";
       required=0;
       def_val="\"\"";
       expr {
	expr="tag";
       };
      };
      ProgArg @[2] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="subdir";
       required=0;
       def_val="\"\"";
       expr {
	expr="log_dir";
       };
      };
      ProgArg @[3] {
       arg_type=bool;
       type="bool";
       name="dmem_proc_no";
       required=0;
       def_val="false";
       expr {
	expr="true";
       };
      };
     };
    };
    MethodCall @[53] {
     desc="last arg is to restrict log to dmem_proc = 0";
     flags=OFF;
     result_var=NULL;
     obj=$31$;
     method=DataTable::SaveDataLog;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="fname";
       required=0;
       def_val="\"\"";
       expr {
	expr="log_file_nm";
       };
      };
      ProgArg @[1] {
       arg_type=bool;
       type="bool";
       name="append";
       required=0;
       def_val="false";
       expr {
	expr="false";
       };
      };
      ProgArg @[2] {
       arg_type=bool;
       type="bool";
       name="dmem_proc_0";
       required=0;
       def_val="true";
       expr {
	expr="false";
       };
      };
     };
    };
    OtherProgramVar @[54] {
     desc=;
     flags=;
     other_prog=.projects[0].programs.gp[0][9]$32$;
     set_other=1;
     var_1=$17$;
     var_2=NULL;
     var_3=NULL;
     var_4=NULL;
    };
    PrintExpr @[55] {
     desc=;
     flags=;
     expr {
      expr="\"Running: \" << batch.name";
     };
    };
    ProgramCall @[56] {
     desc=;
     flags=;
     target=$11$;
     targ_ld_init="*LeabraBatch*";
     prog_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=CtLeabraNetwork;
       type="CtLeabraNetwork*";
       name="network";
       required=1;
       def_val=;
       expr {
	expr="network";
       };
      };
      ProgArg @[1] {
       arg_type=DataTable;
       type="DataTable*";
       name="input_data";
       required=1;
       def_val=;
       expr {
	expr="input_data";
       };
      };
     };
    };
   };
  };
  Program @[1] {
   name=;
   tags="Leabra, Startup";
   desc="run project in the background (replaces leabra_startup.css)
command line is: emergent -nogui -ni -p <project name>.proj [Epochs=xxx] [Batches=xxx] [Tag=xxx]";
   flags=STARTUP_RUN;
   objs {
    name=;
    el_typ=taNBase;
    el_def=0;
   };
   types {
    name=;
    el_typ=ProgType;
    el_def=0;
   };
   args {
    name=;
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="network";
     var_type=T_Object;
     object_type=CtLeabraNetwork;
     object_val=$5$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK;
     desc="network to operate on -- updates batch counter on network and passes it to train program";
    };
    ProgVar @[1] {
     name="input_data";
     var_type=T_Object;
     object_type=DataTable;
     object_val=$10$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK;
     desc="datatable with training patterns -- not used by this program, but passed to train program";
    };
   };
   vars {
    name=;
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="train";
     var_type=T_Object;
     object_type=Program;
     object_val=$9$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK;
     desc="set this to point to your train process";
    };
    ProgVar @[1] {
     name="batch";
     var_type=T_Object;
     object_type=Program;
     object_val=$11$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK;
     desc="set this to point to your batch process";
    };
    ProgVar @[2] {
     name="tag";
     var_type=T_String;
     string_val=;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK;
     desc=;
    };
    ProgVar @[3] {
     name="log_dir";
     var_type=T_String;
     string_val=;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK;
     desc="log file directory";
    };
    ProgVar @[4] {
     name="log_file_nm";
     var_type=T_String;
     string_val="/Users/oreilly/svn_sims/leabra/ft/ft_ct.epc.dat";
     objs_ptr=0;
     flags=NULL_CHECK;
     desc="name of log file";
    };
    ProgVar @[5] {
     name="hidden_size";
     var_type=T_Int;
     int_val=100;
     objs_ptr=0;
     flags=NULL_CHECK;
     desc="hidden size arg";
    };
    ProgVar @[6] {
     name="EpochOutputData";
     var_type=T_Object;
     object_type=DataTable;
     object_val=$12$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK;
     desc=;
    };
    ProgVar @[7] {
     name="TrialOutputData";
     var_type=T_Object;
     object_type=DataTable;
     object_val=$13$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK;
     desc=;
    };
    ProgVar @[8] {
     name="con_spec";
     var_type=T_Object;
     object_type=CtLeabraConSpec;
     object_val=$1$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK;
     desc=;
    };
    ProgVar @[9] {
     name="FmInput_Output";
     var_type=T_Object;
     object_type=CtLeabraConSpec;
     object_val=$2$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK;
     desc=;
    };
    ProgVar @[10] {
     name="settle";
     var_type=T_Object;
     object_type=Program;
     object_val=$14$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK;
     desc=;
    };
    ProgVar @[11] {
     name="unit_spec";
     var_type=T_Object;
     object_type=CtLeabraUnitSpec;
     object_val=$3$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK;
     desc=;
    };
    ProgVar @[12] {
     name="bias_spec";
     var_type=T_Object;
     object_type=CtLeabraBiasSpec;
     object_val=$15$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK;
     desc=;
    };
    ProgVar @[13] {
     name="layer_spec";
     var_type=T_Object;
     object_type=CtLeabraLayerSpec;
     object_val=$4$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK;
     desc=;
    };
   };
   functions {
    name=;
    el_typ=Function;
    el_def=0;
   };
   load_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
   init_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
   prog_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
    IfReturn @[0] {
     desc="don't run if running in the gui!";
     flags=;
     cond {
      expr="taMisc::gui_active";
     };
    };
    Comment @[1] {
     desc="add our special args from command line";
     flags=;
    };
    MiscCall @[2] {
     desc=;
     flags=;
     result_var=NULL;
     object_type=taMisc;
     method=taMisc::AddArgName;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="flag";
       required=0;
       def_val="\"\"";
       expr {
	expr="\"tag=\"";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="name";
       required=0;
       def_val="\"\"";
       expr {
	expr="\"FileTag\"";
       };
      };
     };
    };
    MiscCall @[3] {
     desc=;
     flags=;
     result_var=NULL;
     object_type=taMisc;
     method=taMisc::AddArgName;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="flag";
       required=0;
       def_val="\"\"";
       expr {
	expr="\"logdir=\"";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="name";
       required=0;
       def_val="\"\"";
       expr {
	expr="\"LogDir\"";
       };
      };
     };
    };
    MiscCall @[4] {
     desc=;
     flags=;
     result_var=NULL;
     object_type=taMisc;
     method=taMisc::AddArgName;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="flag";
       required=0;
       def_val="\"\"";
       expr {
	expr="\"epochs=\"";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="name";
       required=0;
       def_val="\"\"";
       expr {
	expr="\"EpochMax\"";
       };
      };
     };
    };
    MiscCall @[5] {
     desc=;
     flags=;
     result_var=NULL;
     object_type=taMisc;
     method=taMisc::AddArgName;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="flag";
       required=0;
       def_val="\"\"";
       expr {
	expr="\"batches=\"";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="name";
       required=0;
       def_val="\"\"";
       expr {
	expr="\"BatchMax\"";
       };
      };
     };
    };
    MiscCall @[6] {
     desc=;
     flags=;
     result_var=NULL;
     object_type=taMisc;
     method=taMisc::AddArgName;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="flag";
       required=0;
       def_val="\"\"";
       expr {
	expr="\"hiddens=\"";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="name";
       required=0;
       def_val="\"\"";
       expr {
	expr="\"HiddenSize\"";
       };
      };
     };
    };
    RegisterArgs @[7] {
     desc=;
     flags=;
    };
    Comment @[8] {
     desc="Initialize and set variables from args";
     flags=;
    };
    PrintExpr @[9] {
     desc=;
     flags=;
     expr {
      expr="\"Loaded project: \" << .projects[0].file_name";
     };
    };
    MethodCall @[10] {
     desc=;
     flags=;
     result_var=NULL;
     obj=.projects[0].programs[1].vars[1]$33$;
     method=Program::Init;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
     };
    };
    MiscCall @[11] {
     desc=;
     flags=;
     result_var=.projects[0].programs[1].vars[2]$34$;
     object_type=taMisc;
     method=taMisc::FindArgByName;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="nm";
       required=0;
       def_val="\"\"";
       expr {
	expr="\"FileTag\"";
       };
      };
     };
    };
    MiscCall @[12] {
     desc=;
     flags=;
     result_var=.projects[0].programs[1].vars[3]$35$;
     object_type=taMisc;
     method=taMisc::FindArgByName;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="nm";
       required=0;
       def_val="\"\"";
       expr {
	expr="\"LogDir\"";
       };
      };
     };
    };
    MethodCall @[13] {
     desc=;
     flags=;
     result_var=NULL;
     obj=.projects[0].programs[1].vars[0]$36$;
     method=Program::SetVarFmArg;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="arg_nm";
       required=1;
       def_val=;
       expr {
	expr="\"EpochMax\"";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="var_nm";
       required=1;
       def_val=;
       expr {
	expr="\"max_epoch\"";
       };
      };
      ProgArg @[2] {
       arg_type=bool;
       type="bool";
       name="quiet";
       required=0;
       def_val="false";
       expr {
	expr="false";
       };
      };
     };
    };
    MethodCall @[14] {
     desc=;
     flags=;
     result_var=NULL;
     obj=$33$;
     method=Program::SetVarFmArg;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="arg_nm";
       required=1;
       def_val=;
       expr {
	expr="\"BatchMax\"";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="var_nm";
       required=1;
       def_val=;
       expr {
	expr="\"max_batch\"";
       };
      };
      ProgArg @[2] {
       arg_type=bool;
       type="bool";
       name="quiet";
       required=0;
       def_val="false";
       expr {
	expr="false";
       };
      };
     };
    };
    MemberFmArg @[15] {
     desc=;
     flags=;
     obj=.projects[0].programs[1].args[0]$37$;
     path="ct_time.minus";
     arg_name="minus";
     update_after=1;
     quiet=0;
    };
    MemberFmArg @[16] {
     desc=;
     flags=;
     obj=$37$;
     path="ct_time.plus";
     arg_name="plus";
     update_after=1;
     quiet=0;
    };
    MemberFmArg @[17] {
     desc=;
     flags=;
     obj=$37$;
     path="ct_time.inhib";
     arg_name="inhib";
     update_after=1;
     quiet=0;
    };
    MemberFmArg @[18] {
     desc=;
     flags=;
     obj=$37$;
     path="ct_time.syndep_int";
     arg_name="syndep_int";
     update_after=1;
     quiet=0;
    };
    MemberFmArg @[19] {
     desc=;
     flags=;
     obj=$37$;
     path="ct_fin_i.start";
     arg_name="fin_start";
     update_after=1;
     quiet=0;
    };
    MemberFmArg @[20] {
     desc=;
     flags=;
     obj=$37$;
     path="ct_fin_i.end";
     arg_name="fin_end";
     update_after=1;
     quiet=0;
    };
    MemberFmArg @[21] {
     desc=;
     flags=;
     obj=$37$;
     path="ct_fin_i.inhib_i";
     arg_name="inhib_i";
     update_after=1;
     quiet=0;
    };
    MemberFmArg @[22] {
     desc=;
     flags=;
     obj=$37$;
     path="ct_sin_i.start";
     arg_name="sin_start";
     update_after=1;
     quiet=0;
    };
    MemberFmArg @[23] {
     desc=;
     flags=;
     obj=$37$;
     path="ct_sin_i.duration";
     arg_name="sin_dur";
     update_after=1;
     quiet=0;
    };
    MemberFmArg @[24] {
     desc=;
     flags=;
     obj=$37$;
     path="ct_sin_i.burst_only";
     arg_name="sin_burst_only";
     update_after=1;
     quiet=0;
    };
    MemberFmArg @[25] {
     desc=;
     flags=;
     obj=$37$;
     path="ct_sin_i.burst_i";
     arg_name="sin_burst_i";
     update_after=1;
     quiet=0;
    };
    MemberFmArg @[26] {
     desc=;
     flags=;
     obj=$37$;
     path="ct_sin_i.trough_i";
     arg_name="sin_trough_i";
     update_after=1;
     quiet=0;
    };
    MemberFmArg @[27] {
     desc=;
     flags=;
     obj=$37$;
     path="ct_sravg.start";
     arg_name="sravg_start";
     update_after=1;
     quiet=0;
    };
    MemberFmArg @[28] {
     desc=;
     flags=;
     obj=$37$;
     path="ct_sravg.end";
     arg_name="sravg_end";
     update_after=1;
     quiet=0;
    };
    MemberFmArg @[29] {
     desc=;
     flags=;
     obj=$37$;
     path="ct_sravg.min_da_thr";
     arg_name="min_da_thr";
     update_after=1;
     quiet=0;
    };
    MemberFmArg @[30] {
     desc=;
     flags=;
     obj=$37$;
     path="ct_sravg.max_da_thr";
     arg_name="max_da_thr";
     update_after=1;
     quiet=0;
    };
    MemberFmArg @[31] {
     desc=;
     flags=;
     obj=$37$;
     path="phase_order";
     arg_name="phase_order";
     update_after=1;
     quiet=0;
    };
    MemberFmArg @[32] {
     desc=;
     flags=;
     obj=$37$;
     path="phase_order";
     arg_name="phase_order";
     update_after=1;
     quiet=0;
    };
    ProgVarFmArg @[33] {
     desc=;
     flags=;
     prog=$21$;
     var_name="init_sd";
     arg_name="trial_init_sd";
    };
    ProgVarFmArg @[34] {
     desc=;
     flags=;
     prog=$22$;
     var_name="sep_test";
     arg_name="sep_test";
    };
    MemberFmArg @[35] {
     desc=;
     flags=;
     obj=.projects[0].programs[1].vars[13]$38$;
     path="decay.event";
     arg_name="event_decay";
     update_after=1;
     quiet=0;
    };
    MemberFmArg @[36] {
     desc=;
     flags=;
     obj=.projects[0].programs[1].vars[8]$39$;
     path="lrate";
     arg_name="lrate";
     update_after=1;
     quiet=0;
    };
    MemberFmArg @[37] {
     desc=;
     flags=;
     obj=$39$;
     path="lrate_sched[1].start_ctr";
     arg_name="lrs_start";
     update_after=1;
     quiet=0;
    };
    MemberFmArg @[38] {
     desc=;
     flags=;
     obj=$39$;
     path="lmix.hebb";
     arg_name="hebb";
     update_after=1;
     quiet=0;
    };
    MemberFmArg @[39] {
     desc=;
     flags=;
     obj=$39$;
     path="savg_cor.cor";
     arg_name="savg_cor";
     update_after=1;
     quiet=0;
    };
    MemberFmArg @[40] {
     desc=;
     flags=;
     obj=$39$;
     path="ca_dep.intwt_dt";
     arg_name="intwt_dt";
     update_after=1;
     quiet=0;
    };
    MemberFmArg @[41] {
     desc=;
     flags=;
     obj=$39$;
     path="ca_dep.ca_inc";
     arg_name="ca_inc";
     update_after=1;
     quiet=0;
    };
    MemberFmArg @[42] {
     desc=;
     flags=;
     obj=$39$;
     path="ca_dep.ca_dec";
     arg_name="ca_dec";
     update_after=1;
     quiet=0;
    };
    MemberFmArg @[43] {
     desc=;
     flags=;
     obj=$39$;
     path="ca_dep.sd_ca_thr";
     arg_name="sd_ca_thr";
     update_after=1;
     quiet=0;
    };
    MemberFmArg @[44] {
     desc=;
     flags=;
     obj=$39$;
     path="ca_dep.sd_ca_gain";
     arg_name="sd_ca_gain";
     update_after=1;
     quiet=0;
    };
    MemberFmArg @[45] {
     desc=;
     flags=;
     obj=$39$;
     path="dwt_norm.on";
     arg_name="dwt_norm";
     update_after=1;
     quiet=0;
    };
    MemberFmArg @[46] {
     desc=;
     flags=;
     obj=.projects[0].programs[1].vars[9]$40$;
     path="wt_scale.rel";
     arg_name="fm_io";
     update_after=1;
     quiet=0;
    };
    MemberFmArg @[47] {
     desc=;
     flags=;
     obj=.projects[0].programs[1].vars[11]$41$;
     path="dt.vm";
     arg_name="vm_dt";
     update_after=1;
     quiet=0;
    };
    MemberFmArg @[48] {
     desc=;
     flags=;
     obj=.projects[0].programs[1].vars[12]$42$;
     path="dwt_thresh";
     arg_name="bias_thr";
     update_after=1;
     quiet=0;
    };
    MiscCall @[49] {
     desc=;
     flags=;
     result_var=.projects[0].programs[1].vars[5]$43$;
     object_type=taMisc;
     method=taMisc::FindArgByName;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="nm";
       required=0;
       def_val="\"\"";
       expr {
	expr="\"HiddenSize\"";
       };
      };
     };
    };
    If @[50] {
     desc=;
     flags=;
     cond {
      expr="hidden_size >= 25";
     };
     true_code {
      name=;
      el_typ=ProgEl;
      el_def=0;
      UserScript @[0] {
       desc=;
       flags=;
       script {
	expr="network.layers.Agent_Code.un_geom.SetXY(1,1);
network.layers.Agent_Code.un_geom.FitN(hidden_size);

";
       };
      };
      UserScript @[1] {
       desc=;
       flags=;
       script {
	expr="network.layers.Relation_Code.un_geom.SetXY(1,1);
network.layers.Relation_Code.un_geom.FitN(hidden_size);
";
       };
      };
      UserScript @[2] {
       desc=;
       flags=;
       script {
	expr="network.layers.Hidden.un_geom.SetXY(1,1);
network.layers.Hidden.un_geom.FitN(hidden_size);
";
       };
      };
      UserScript @[3] {
       desc=;
       flags=;
       script {
	expr="network.layers.Patient_Code.un_geom.SetXY(1,1);
network.layers.Patient_Code.un_geom.FitN(hidden_size);
";
       };
      };
      MethodCall @[4] {
       desc=;
       flags=;
       result_var=NULL;
       obj=$37$;
       method=Network::Build;
       meth_args {
	name=;
	el_typ=ProgArg;
	el_def=0;
       };
      };
      MethodCall @[5] {
       desc="note: needed after rebuild!";
       flags=;
       result_var=NULL;
       obj=$33$;
       method=Program::Init;
       meth_args {
	name=;
	el_typ=ProgArg;
	el_def=0;
       };
      };
      PrintVar @[6] {
       desc=;
       flags=;
       message=;
       print_var=$43$;
       print_var2=NULL;
       print_var3=NULL;
       print_var4=NULL;
       print_var5=NULL;
       print_var6=NULL;
      };
     };
    };
    Comment @[51] {
     desc="Set log files";
     flags=;
    };
    MethodCall @[52] {
     desc="last arg is to include dmem proc number";
     flags=;
     result_var=.projects[0].programs[1].vars[4]$44$;
     obj=.projects[0].programs[1].vars[6]$45$;
     method=taBase::GetFileNameFmProject;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="ext";
       required=1;
       def_val=;
       expr {
	expr="\".epc.dat\"";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="tag";
       required=0;
       def_val="\"\"";
       expr {
	expr="tag";
       };
      };
      ProgArg @[2] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="subdir";
       required=0;
       def_val="\"\"";
       expr {
	expr="log_dir";
       };
      };
      ProgArg @[3] {
       arg_type=bool;
       type="bool";
       name="dmem_proc_no";
       required=0;
       def_val="false";
       expr {
	expr="false";
       };
      };
     };
    };
    MethodCall @[53] {
     desc="last arg is to restrict log to dmem_proc = 0";
     flags=;
     result_var=NULL;
     obj=$45$;
     method=DataTable::SaveDataLog;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="fname";
       required=0;
       def_val="\"\"";
       expr {
	expr="log_file_nm";
       };
      };
      ProgArg @[1] {
       arg_type=bool;
       type="bool";
       name="append";
       required=0;
       def_val="false";
       expr {
	expr="false";
       };
      };
      ProgArg @[2] {
       arg_type=bool;
       type="bool";
       name="dmem_proc_0";
       required=0;
       def_val="true";
       expr {
	expr="true";
       };
      };
     };
    };
    MethodCall @[54] {
     desc="last arg is to include dmem proc number";
     flags=OFF;
     result_var=$44$;
     obj=.projects[0].programs[1].vars[7]$46$;
     method=taBase::GetFileNameFmProject;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="ext";
       required=1;
       def_val=;
       expr {
	expr="\".trl.dat\"";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="tag";
       required=0;
       def_val="\"\"";
       expr {
	expr="tag";
       };
      };
      ProgArg @[2] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="subdir";
       required=0;
       def_val="\"\"";
       expr {
	expr="log_dir";
       };
      };
      ProgArg @[3] {
       arg_type=bool;
       type="bool";
       name="dmem_proc_no";
       required=0;
       def_val="false";
       expr {
	expr="true";
       };
      };
     };
    };
    MethodCall @[55] {
     desc="last arg is to restrict log to dmem_proc = 0";
     flags=OFF;
     result_var=NULL;
     obj=$46$;
     method=DataTable::SaveDataLog;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="fname";
       required=0;
       def_val="\"\"";
       expr {
	expr="log_file_nm";
       };
      };
      ProgArg @[1] {
       arg_type=bool;
       type="bool";
       name="append";
       required=0;
       def_val="false";
       expr {
	expr="false";
       };
      };
      ProgArg @[2] {
       arg_type=bool;
       type="bool";
       name="dmem_proc_0";
       required=0;
       def_val="true";
       expr {
	expr="false";
       };
      };
     };
    };
    OtherProgramVar @[56] {
     desc=;
     flags=;
     other_prog=$32$;
     set_other=1;
     var_1=$34$;
     var_2=NULL;
     var_3=NULL;
     var_4=NULL;
    };
    PrintExpr @[57] {
     desc=;
     flags=;
     expr {
      expr="\"Running: \" << batch.name";
     };
    };
    ProgramCall @[58] {
     desc=;
     flags=;
     target=$11$;
     targ_ld_init="*LeabraBatch*";
     prog_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=CtLeabraNetwork;
       type="CtLeabraNetwork*";
       name="network";
       required=1;
       def_val=;
       expr {
	expr="network";
       };
      };
      ProgArg @[1] {
       arg_type=DataTable;
       type="DataTable*";
       name="input_data";
       required=1;
       def_val=;
       expr {
	expr="input_data";
       };
      };
     };
    };
   };
  };
  Program @[2] {
   name="gptest";
   tags=;
   desc=;
   flags=;
   objs {
    name=;
    el_typ=DataTable;
    el_def=0;
    DataTable @[0] {
     name="gpout";
     desc=;
     data {
      name="data";
      el_typ=DataColTp;
      el_def=0;
      String_Data @[0] {
       name="trial_name_first";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [1] ;       };
      };
      float_Data @[1] {
       name="Hidden_act_m_mean";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=1;
       cell_geom{ 8;8;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [8 8 1] 0.011756129;0.038793512;0.055936366;0.24409842;0.016927222;0.031955816;0.14292973;0.011144659;0.013913341;0.016090002;0.0018148291;0.00049044355;0.0011885335;0.38262397;0.0014144054;0.046818536;0.0006254235;0.0054856692;0.12332923;0.50645053;0.076592259;0.0874018;0.012701457;0.35247266;0.064798705;0.018505404;0.015571075;0.33783045;0.011072221;0.041056521;0.44887778;0.0050638923;0.059569005;0.038246013;0.013197973;0.14193147;0.012765051;0.03168235;0.44451892;0.00052830705;0.055195302;0.54641855;0.15132749;0.083577968;0.0016586391;0.63292533;0.05734909;0.073155269;0.029824333;0.0010441554;0.19993417;0.004968557;0.0055800481;0.24847129;0.015721062;0.04432594;0.74261868;0.01015711;0.097568281;0.0092291143;0.18025908;0.79080617;0.065150313;0.22010827;       };
      };
     };
     data_flags=SAVE_ROWS|AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     keygen 4 0=0;
    };
    DataTable @[1] {
     name="selectout";
     desc=;
     data {
      name="data";
      el_typ=DataColTp;
      el_def=0;
      int_Data @[0] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	};
       };
       name="batch";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [4] 0;0;0;0;       };
      };
      int_Data @[1] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	};
       };
       name="epoch";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [4] 0;0;0;0;       };
      };
      int_Data @[2] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	};
       };
       name="trial";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [4] 28;62;78;89;       };
      };
      String_Data @[3] {
       name="trial_name";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [4] "Alf.Aunt.GinAng";"Colin.Aunt.MarJen";"Sophia.Aunt.GinAng";"Charlot.Aunt.MarJen";       };
      };
      String_Data @[4] {
       name="group_name";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [4] ;;;;       };
      };
      int_Data @[5] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	};
       };
       name="phase_no";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [4] 3;3;3;3;       };
      };
      float_Data @[6] {
       name="minus_cycles";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [4] 50;50;50;50;       };
      };
      float_Data @[7] {
       name="sse";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [4] 2.5691373;2.808125;2.7470543;3.4977489;       };
      };
      float_Data @[8] {
       name="ext_rew";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [4] 0;0;0;0;       };
      };
      float_Data @[9] {
       name="mean_Agent_act_dif";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [4] 0;0;0;0;       };
      };
      float_Data @[10] {
       name="mean_Agent__act_dif";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [4] 0.046120577;0.026651494;0.036385912;0.044123441;       };
      };
      float_Data @[11] {
       name="mean_Relati_act_dif";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [4] 0.063803732;0.02411709;0.05208895;0.022940241;       };
      };
      float_Data @[12] {
       name="mean_Patien_act_dif";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [4] 0.17808001;0.094888471;0.16062973;0.21892901;       };
      };
      float_Data @[13] {
       name="mean_Hidden_act_dif";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [4] 0.088909894;0.043230753;0.081590384;0.077750303;       };
      };
      float_Data @[14] {
       name="pat_code_st_maxda";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [4] 0.078290641;0.13639826;0.058996677;0.13115233;       };
      };
      float_Data @[15] {
       name="hidden_st_maxda";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [4] 0.037468433;0.027600408;0.02451849;0.068789631;       };
      };
      float_Data @[16] {
       name="ag_code_st_maxda";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [4] 0.019478381;0.018664479;0.0068710446;0.011548758;       };
      };
      float_Data @[17] {
       name="rel_code_st_maxda";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [4] 0.031878561;0.021980703;0.011525601;0.012971401;       };
      };
      float_Data @[18] {
       name="Hidden_act_m";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=1;
       cell_geom{ 8;8;       };
       calc_expr {
	expr=;
       };
       ar {
	name=;
	      [8 8 4] 0.037576277;0.0010384182;0.0022168411;0.096152551;0.040363427;0.026564458;0.54779351;0.019712098;0.0007988991;0.02026163;3.9538986e-06;0.0017878964;0.0011764662;0.3142401;0.0014859803;0.050259199;0.00010868547;0.0012243758;8.1409482e-05;0.15354535;0.040691901;0.15194021;0.01782638;0.7956109;0.014697686;0.0026709454;0.0068925708;0.75235343;0.0015749161;0.041290462;0.12013645;0.0010014208;0.024630357;0.0069705462;0.012051318;0.16011508;0.012070782;0.010227758;0.5991115;0.00011535984;0.032009024;0.83153003;0.0024918513;0.17771269;0.00057978858;0.7204327;0.025326291;0.00075375737;0.004781194;0.0019583083;0.092434548;0.0069011636;0.0045907432;0.38746443;0.018070593;0.17072046;0.63923138;0.012138669;0.018122105;0.008604371;0.21932527;0.68235856;0.041177392;0.0056600901;0.0025186902;0.058087308;0.011616124;0.17432912;0.0083218915;0.074983321;0.0005447134;0.0067743245;0.021892916;0.0092572821;0.0060568308;2.0265911e-06;0.0030778362;0.12892301;0.0036292507;0.085302874;6.9815847e-05;0.0033443859;0.42262861;0.79882175;0.046848655;0.00584182;0.0059813559;0.0016716691;0.11390464;0.0040641497;3.3106575e-05;0.010382755;0.0357779;0.0053155469;0.70108855;0.010320756;0.18613499;0.00012001343;0.013156245;0.23549259;0.012267353;0.073598936;0.053373389;7.402437e-05;0.072108403;0.024971753;0.070067622;0.00099556614;6.1158193e-05;0.73873824;0.028221186;0.1807729;0.035872854;0.001025593;0.41945371;9.1014328e-05;0.0013093408;0.017175283;0.00058280549;0.0019325468;0.80410475;0.00091051427;0.16723415;0.00017609884;0.33036476;0.86073852;0.15142213;0.61889589;0.0021171861;0.01015915;0.20131317;0.033426926;0.013551427;0.011857872;0.0091061294;0.010272333;0.010271132;0.0078418115;7.5510601e-05;1.8379698e-05;2.9033557e-05;0.58925503;0.00048444798;0.0011931752;1.9244426e-05;0.011000821;0.0061644325;0.36982107;0.090357736;0.17130284;0.026071236;0.60719377;0.033356465;8.1792554e-05;0.055290498;0.56868225;0.0012714884;0.050635651;0.25816646;0.0014743435;0.0020454787;0.14576975;0.016769862;0.16784692;0.00044562004;3.363036e-05;0.69130951;0.00023164182;0.063998356;0.76722497;0.0029823319;0.13971004;0.0040494651;0.51806319;0.17443809;0.0055129877;0.038230538;0.00096835068;0.076332659;0.0092974138;0.015946435;0.53815448;0.00028073016;0.0043672039;0.72518039;0.013570051;0.029449761;0.027804501;0.074248314;0.79891664;0.059658445;0.002016929;0.0048123589;0.085889176;0.0085993251;0.67248511;0.0054721399;0.014417609;0.014274627;0.0078198807;0.022690415;0.026999287;0.0011230209;0.00015347172;0.00047079811;0.49807775;5.794251e-05;0.050518889;0.0023039484;0.0063730949;0.064442463;0.70361406;0.12847075;0.020522319;0.00092686096;0.0054142992;0.097236045;0.067204729;6.8123751e-05;0.019903339;0.0056645786;0.066984423;0.71611965;0.00745905;0.025465187;0.00012375502;0.010814464;0.0042713373;0.026276451;0.042869076;0.43428135;0.0016922022;0.052665424;0.56194741;0.52976817;0.015893567;0.0019441443;0.5544672;0.0014107974;0.10558144;0.040412746;0.00022436985;0.21151571;0.0035846357;0.00047367401;0.051090948;0.043950118;0.00028355702;0.80195796;0.014009209;0.1754671;0.00033148483;0.097098008;0.82121098;0.0083432794;0.25386018;       };
      };
     };
     data_flags=SAVE_ROWS|AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     keygen 4 0=0;
    };
   };
   types {
    name=;
    el_typ=ProgType;
    el_def=0;
   };
   args {
    name=;
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="network";
     var_type=T_Object;
     object_type=CtLeabraNetwork;
     object_val=$5$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK;
     desc="network to operate on -- updates batch counter on network and passes it to train program";
    };
   };
   vars {
    name=;
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="TrialOutputData";
     var_type=T_Object;
     object_type=DataTable;
     object_val=$13$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK;
     desc=;
    };
    ProgVar @[1] {
     name="gpout";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.projects[0].programs[2].objs[0]$47$;
     objs_ptr=1;
     flags=CTRL_PANEL|NULL_CHECK;
     desc=;
    };
    ProgVar @[2] {
     name="selectout";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.projects[0].programs[2].objs[1]$48$;
     objs_ptr=1;
     flags=CTRL_PANEL|NULL_CHECK;
     desc=;
    };
    ProgVar @[3] {
     name="SelectContains";
     var_type=T_String;
     string_val="Aunt";
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK;
     desc=;
    };
    ProgVar @[4] {
     name="FmInput_Output";
     var_type=T_Object;
     object_type=CtLeabraConSpec;
     object_val=$2$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK;
     desc=;
    };
    ProgVar @[5] {
     name="unit_spec";
     var_type=T_Object;
     object_type=CtLeabraUnitSpec;
     object_val=$3$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK;
     desc=;
    };
    ProgVar @[6] {
     name="bias_spec";
     var_type=T_Object;
     object_type=CtLeabraBiasSpec;
     object_val=$15$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK;
     desc=;
    };
    ProgVar @[7] {
     name="con_spec";
     var_type=T_Object;
     object_type=CtLeabraConSpec;
     object_val=$1$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK;
     desc=;
    };
   };
   functions {
    name=;
    el_typ=Function;
    el_def=0;
   };
   load_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
   init_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
    MemberFmArg @[0] {
     desc=;
     flags=;
     obj=NULL;
     path="ct_time.minus";
     arg_name="minus";
     update_after=1;
     quiet=0;
    };
    MemberFmArg @[1] {
     desc=;
     flags=;
     obj=.projects[0].programs[2].vars[4]$49$;
     path="wt_scale.rel";
     arg_name="fm_io";
     update_after=1;
     quiet=0;
    };
    MemberFmArg @[2] {
     desc=;
     flags=;
     obj=.projects[0].programs[2].vars[5]$50$;
     path="dt.vm";
     arg_name="vm_dt";
     update_after=1;
     quiet=0;
    };
    MemberFmArg @[3] {
     desc=;
     flags=;
     obj=.projects[0].programs[2].vars[6]$51$;
     path="dwt_thresh";
     arg_name="bias_thr";
     update_after=1;
     quiet=0;
    };
    MemberFmArg @[4] {
     desc=;
     flags=;
     obj=.projects[0].programs[2].vars[7]$52$;
     path="lrate";
     arg_name="lrate";
     update_after=1;
     quiet=0;
    };
    MemberFmArg @[5] {
     desc=;
     flags=;
     obj=$52$;
     path="lrate_sched[1].start_ctr";
     arg_name="lrs_start";
     update_after=1;
     quiet=0;
    };
   };
   prog_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
    DataSelectRowsProg @[0] {
     desc=;
     flags=;
     src_data_var=.projects[0].programs[2].vars[0]$53$;
     dest_data_var=.projects[0].programs[2].vars[2]$54$;
     select_spec {
      name="select_spec";
      ops {
       name=;
       el_typ=DataSelectEl;
       el_def=0;
       DataSelectEl @[0] {
	col_name="trial_name";
	rel=CONTAINS;
	use_var=1;
	cmp 9 0="Aunt";
	var=.projects[0].programs[2].vars[3]$55$;
       };
      };
      comb_op=AND;
     };
    };
    DataGroupProg @[1] {
     desc=;
     flags=;
     src_data_var=$54$;
     dest_data_var=.projects[0].programs[2].vars[1]$56$;
     group_spec {
      name="group_spec";
      ops {
       name=;
       el_typ=DataGroupEl;
       el_def=0;
       DataGroupEl @[0] {
	col_name="trial_name";
	agg {name="Aggregate": op=FIRST: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
       };
       DataGroupEl @[1] {
	col_name="Hidden_act_m";
	agg {name="Aggregate": op=MEAN: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
       };
      };
     };
    };
   };
  };
  Program @[3] {
   name="Program_20";
   tags=;
   desc=;
   flags=;
   objs {
    name=;
    el_typ=taNBase;
    el_def=0;
   };
   types {
    name=;
    el_typ=ProgType;
    el_def=0;
   };
   args {
    name=;
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="network";
     var_type=T_Object;
     object_type=CtLeabraNetwork;
     object_val=$5$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK;
     desc="network to operate on -- updates batch counter on network and passes it to train program";
    };
   };
   vars {
    name=;
    el_typ=ProgVar;
    el_def=0;
   };
   functions {
    name=;
    el_typ=Function;
    el_def=0;
   };
   load_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
   init_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
   prog_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
  };
  Program @[4] {
   name=;
   tags=;
   desc=;
   flags=;
   objs {
    name=;
    el_typ=taNBase;
    el_def=0;
   };
   types {
    name=;
    el_typ=ProgType;
    el_def=0;
   };
   args {
    name=;
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="network";
     var_type=T_Object;
     object_type=CtLeabraNetwork;
     object_val=$5$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK;
     desc="network to operate on -- updates batch counter on network and passes it to train program";
    };
   };
   vars {
    name=;
    el_typ=ProgVar;
    el_def=0;
   };
   functions {
    name=;
    el_typ=Function;
    el_def=0;
   };
   load_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
   init_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
   prog_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
  };
  Program_Group @.gp[0] {
   name="LeabraAll_Std";
   el_typ=Program;
   el_def=0;
   step_prog=$22$;
   tags="Leabra, Std, All";
   desc="The full set of programs for training a standard Leabra network";
   Program @[0] {
    name="LeabraBatch";
    tags="Leabra, Std";
    desc="Iterate over training runs (a batch of training runs) -- just a simple loop that calls training program";
    flags=SHOW_STEP;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=CtLeabraNetwork;
      object_val=$5$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc="network to operate on -- updates batch counter on network and passes it to train program";
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$10$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc="datatable with training patterns -- not used by this program, but passed to train program";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="batch";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK;
      desc="batch counter";
     };
     ProgVar @[1] {
      name="max_batch";
      var_type=T_Int;
      int_val=10;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc="maximum number of batch runs to perform";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initializes local batch counter and batch field on network";
      flags=;
      network_var=.projects[0].programs.gp[0][0].args[0]$57$;
      local_ctr_var=.projects[0].programs.gp[0][0].vars[0]$58$;
      counter=Network::batch;
     };
    };
    prog_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
     NetCounterInit @[0] {
      desc="initializes local batch counter and batch field on network";
      flags=;
      network_var=$57$;
      local_ctr_var=$58$;
      counter=Network::batch;
     };
     WhileLoop @[1] {
      desc="the main loop over training runs";
      flags=;
      loop_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       ProgramCall @[0] {
	desc="run the training program -- sets the network and input_data args";
	flags=;
	target=$9$;
	targ_ld_init="*LeabraTrain*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=CtLeabraNetwork;
	  type="CtLeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=bool;
	  type="bool";
	  name="no_prompts";
	  required=1;
	  def_val=;
	  expr {
	   expr="true";
	  };
	 };
	};
       };
       NetCounterIncr @[1] {
	desc="increment the local batch counter and copy to network";
	flags=;
	network_var=$57$;
	local_ctr_var=$58$;
	counter=Network::batch;
       };
      };
      test {
       expr="batch < max_batch";
      };
     };
    };
   };
   Program @[1] {
    name="LeabraTrainBatchSeedList";
    tags="Leabra, RndSeedList";
    desc="A complete training run of a Leabra network: iterating over epochs until the network has learned the task has a list of random seeds that are tied to the network batch counter, providing consistent runs regardless of what happens in the training of each network, or where it is run (e.g., on different processors)";
    flags=SHOW_STEP;
    objs {
     name=;
     el_typ=RndSeed;
     el_def=0;
     RndSeed_List @[0] {
      name="rnd_seeds";
      seeds {
       name=;
       el_typ=RndSeed;
       el_def=0;
       RndSeed @[0] {
	name="RndSeed_1";
	seed{ 709250592;-261360991;-1713542164;-1902120215;-1501062725;-2066569470;-1283792122;2014622875;1560783562;502924576;1145185706;2146328450;-356660805;1373375909;-1634064958;423929039;-1980707653;-291584498;50075699;1137563442;1321546291;319262671;-795180095;1875299745;-1663451080;593355003;1011684897;-1842846688;1551086470;1097470816;115314275;35334190;-562464698;757882970;747122084;-509426217;-102596408;-153717956;-520016127;-2001887759;-1414833145;251460386;-2111682924;-446292135;-75003730;2102952302;792229881;759862892;1977689292;2082486802;-766503759;2106158189;-1724804400;-1814081777;2109941079;1515372837;1677621100;-515280070;1664284343;-266552311;2017298990;-92034104;-1552979371;-1220639854;419559440;1945595537;-256266478;1298737912;189543809;540681514;-1862655016;47566665;21485845;-1072176494;-274531201;-70256329;1708533200;-59718462;-1089476237;-213151004;-423652237;-552238975;-523287140;-1721659634;-1302406128;-1078954641;1097902423;90953029;-913305199;-1304686349;-1722111889;-1679701924;1994414962;-73818180;1817329081;260166135;-1990851117;-1933302570;-219939834;-705422500;-544365601;1251369521;-684692138;-1443848208;1227201762;184639736;1530395202;232298458;2125304686;-1167420872;199408464;-438192385;-841085476;-2095001492;1719605720;-1242999792;-2021012082;-416152399;874323120;749109735;-1165566053;1846417622;1488706637;-1592355209;497088933;1168034710;-1212472815;-1802134274;1257098220;1634617858;-1070346575;1290522301;-2117129040;1720050879;-2089882244;-565305027;-1789965314;-1143548171;697171709;392560476;-1670775848;1217267599;-1091176044;347520701;-346593759;-1039041029;-15176854;-235105792;-455199037;-1237820843;955593705;1759784068;-780419567;-1459118157;-833701265;801593655;753246799;1587433672;254832875;620187734;1776990350;-968337396;-1374435955;-43026162;1880995781;-647142151;-1912037048;1220426969;1267046880;1815486318;1479921269;769820783;-462668937;-1699706511;-950417907;63611445;-1154261863;1141865688;433808207;-1495501346;-653181824;-926680220;1789742937;557737583;595120515;-1520515992;208025740;879442935;-383330257;1060558361;-1343956581;1558952732;703486001;764544278;-1964062608;748165053;1591771989;-1675115287;1786737789;-1190964813;-1394740067;-1076651388;-1378374232;2041413341;576375192;-958668347;-721614356;-1951476966;-1869012664;541113603;-842650111;1474115997;1902131040;-1472216294;-164114098;941803832;-470787088;-1766960456;2015505980;-1343888404;271535042;-1669220761;-1031011401;-1188771101;876442789;1278104314;25956585;1403936208;280419673;235468290;-415358544;-344909946;701986145;-243713746;-1331190613;903964824;-552624924;443647760;-1585325506;2108241563;-1741621838;916201313;-536196297;-457539465;2139013816;-2109287182;1618375590;271646938;-1698692870;1963793105;-1389042422;1202169123;-663660186;458379990;1638479212;-2024510976;1326900682;1636781336;-713372449;1528336335;-330826934;1759458770;1352869957;-356038693;1559884096;1971255470;-285817579;40798393;-438963447;163528191;1989799337;-1971213225;-1665827943;-1208174536;1457633780;-2059043908;1305772298;-1724723860;-1493374084;-733915187;73851742;-1411972305;-289253669;-1290937261;1100367377;-164088467;382137220;-848578509;-94282736;1798602656;-848657241;-595715625;-1637964344;-493452329;-54888502;-1842686860;768801206;-1747391497;-829540909;-778597317;1079790404;-208363418;-1573104121;-1040605656;-1806865625;2061833162;1116042057;810550427;1715848539;228198327;904330089;210461348;1833152492;542457530;-1891022180;1932197777;799728908;-1772893447;-1752405691;-1012037310;1051848933;677484698;1298243588;1112133692;356175445;1492248014;672428785;-1842654372;-901303458;-1944122886;-899897310;-244383920;-1498208245;-1990550054;539025286;-381622483;2090128502;-810777788;-868103339;-1558167487;-1544407357;958653562;2009362296;2021047572;429643681;1380465886;-584295339;-834374327;1892475278;-1535932984;-1800215536;991927929;-1600698339;1579224220;1729429587;-2102197315;198881983;774487488;-1119642074;1581951387;-1016179414;-969307242;-1384525773;-19898944;-558409125;-1776828891;-1825446447;326277294;-1800578026;1664616789;-748313706;548882492;1201380640;-1084053382;-1990414130;-1312625165;-1596663155;-1428569372;1300298808;-1939012360;1501741598;-1387123016;461634272;-663495713;962755404;-957721987;1242168120;2012258304;-476665111;-800151081;1555527210;566993790;-263720898;-1717735782;24378242;1558760917;1321970224;1740988386;-194752227;-87093147;1044516814;1093106647;-2135727360;1406149469;999174368;1835084277;1014309594;1976789913;-1306145648;-1285433037;-1087575313;-554924516;1173390039;700589579;239199989;-1857274552;82233810;-1915944069;-854777505;-1500748049;-1527483867;2023287304;-1680725965;-1228728836;1135516894;-2081407836;1321649448;604879832;-707152412;1317954768;534290723;-1431810178;-480986724;790385772;-1638982578;-1586571345;-471749131;937183683;901215909;979574224;-1530981176;185159531;-1508271631;-182335078;-630821863;-419917313;1947563562;-1478384714;1720511428;1848144762;673145929;722248592;-126576236;1397975384;-256363805;1879438375;386640582;-1989650457;276249635;-1221691750;-2131483708;165745899;275514757;-1942660024;-1653144318;-190711087;-1495246676;-1162208135;-267906725;-1646333555;-2027694527;-1633524410;-216049236;-98170140;-852955651;-2106272495;-710656677;-66564715;1206248460;488173568;1665577440;-918775642;-1692694533;-1318066144;-1789998770;-1562175263;1042239093;-997616880;864105319;1380739212;-1275873653;898979576;272501188;-1878015935;-907036835;-1605982203;-1745024077;1609455558;-1066196363;1142407297;-689736588;-464411672;1683714221;739475923;1693525303;-1400400313;-657704909;-1678517013;1590549225;1840613253;-759161582;-321875276;1137627955;1308432059;1293517668;1176823260;-258148555;2025025619;1344615520;-497248948;1133982003;72887491;1678968313;1937446115;1474965814;-1875059776;1407944600;1756127852;967453713;841973190;796235568;161306627;-1421715901;-652488006;1523459603;-936203983;-790199086;-1782759026;915589718;-427041783;171256846;-1745886813;1758080931;816873225;-287510099;2118351303;-919338176;-1843845486;-411088652;-1509623144;-62305560;-227585058;-1059562151;1690828971;-2014757060;1418732449;-112283572;-1634805672;-493254736;-904505650;-1965099503;-634633552;437067217;1222155944;1291717601;666210709;-1398919425;-965152504;1107492495;-2092274113;1627858251;1473008237;-861121832;-1605311068;-631606596;1146125978;-507516825;1322268085;-322009530;-1153898372;-716101126;-901066110;129177643;-1362850242;1464744948;1336329970;-1578530007;-825561790;399402481;1318269794;-230145187;-1037966235;23311502;-1076347817;-353612581;1581378443;534038982;2069402483;821571664;905306599;-2127052421;668473366;1304381704;-708008984;2095214867;592920695;-1708318639;-530633186;-200951599;-68661445;2140420986;766332138;-1779526474;-710868631;875383608;-2119719041;808582073;-1317186714;-1882297122;-21581513;190103536;1387736093;-1381800582;1493975751;	};
	mti=624;
       };
       RndSeed @[1] {
	name="RndSeed_2";
	seed{ 709250593;1551072262;-1625248315;-111866234;1693902717;-1683050511;1002010085;-1517940640;-682170190;-2136504610;-381161258;-82378476;457817375;2049324104;-586370597;-32062905;1825376484;-2132144278;1785642010;-921196102;-1338444015;-935877228;11740073;1784775364;-690551599;-1910028045;-970997713;-107848329;1223553760;-1392362526;-1760788610;344696843;341061495;-1830917868;529939408;1056434483;1744849987;515598383;402276785;-625302532;1029647043;-1815922152;1423169132;-1370558932;-304310702;749709090;-1951653224;597954801;-10311611;-1344022065;-988896493;-914758269;-9892940;-2118676888;92793352;-1323983521;-129443095;-1504995189;137592647;979318334;-1622567758;-1989551699;-1542813367;-1062318634;1228845641;-1289953623;1480219833;866979035;-1121696341;1010167026;800193984;38067463;-1096486133;-295521322;-1509887917;-1120851648;-330852010;-1767834666;-418132238;421961316;465306052;1249547941;1266103046;-377036522;1413352093;-1972655135;-1297331227;971608442;1247195002;1752764128;1423984671;602309169;-1057712463;1006810775;-756426511;1643780569;1416153752;2012401598;-2043531843;-1602206786;553538960;923914805;1593396303;-531441363;791367054;-814180497;395348486;-200430903;2102426654;-66678872;52834789;-1475855160;-1790044638;-863642863;-393604980;1765674974;1058249327;1835685184;-749048805;-617775633;-758515052;-823415540;-771666331;-1170045767;-1704758973;-1516341214;-290552546;1877084656;219604373;-1913106102;2138020330;1507032378;-284034101;877551213;611227271;-1612668214;506806640;1964491193;-720181726;1686336656;1563793089;-1827587507;707348665;-1018973556;2049767931;-1822725581;-1573118233;-1568424468;941641082;76209079;1348378313;264613247;1431268019;726424275;1904197849;-1954370093;-431330031;1127852727;-719994772;-862366870;1509956109;1447998301;-494075922;-770585052;2137666823;376513027;-1746204971;-1706835334;286650880;438991529;-1257908649;1129581876;1135448981;276917777;-177306013;656696463;-15387621;-1998166487;1052791465;1018957408;2122517652;1065530494;412787820;-2047562925;-1536364371;-1802396476;1539494104;-1215330472;-427454146;571929294;1184893444;-459038280;372826759;1532796676;298281659;-1964494966;-1144878740;1498289963;1616551512;1659706084;1127426593;-1952792727;1147848961;-1565372981;-2005384679;1703905396;-119901193;837374995;-544123057;1864572365;-2074022322;-1378307889;-558467403;-1971438429;-962128549;2143257743;1818315486;-208870956;1548888493;409697719;-860845809;173112985;-1323969477;1706966108;-723085679;462129787;948336233;-884348592;659257763;-61589196;1683620505;-183607585;-948753996;-1446812388;-150604864;-1826519078;-724225756;-612678576;1903648941;-611766069;-1112324136;-1205533709;1028491271;1502833334;1514539559;1746556915;-1424804496;1414273265;-370260056;-385234320;995715929;-1071055848;131263139;607964748;-1971842822;-113546537;2087230116;-427142886;-1113104161;1206549812;-1527266323;-584829616;420967877;-928324416;623746295;-1832903300;-1408888384;1915999381;188879728;-1786209219;-197370647;-336600223;100804794;465280115;585319793;-169156696;-116800885;732727485;157948071;-1633805830;-2045904912;1020351891;1617391385;-1930777197;443552849;592338450;146849848;2087833399;1933879150;-1615235348;-313308408;-430801030;-1928131359;-123825740;579562841;-940194236;-888915413;-756917519;-359177052;-953608690;-1503811251;-1212672936;-2063977808;-692763799;1182618626;1904001376;-1084476041;-1439713956;1249107274;305165004;1310750642;-54327850;467880769;515472094;1711294672;-1899260752;1908600182;-448962512;1863794781;-668884597;258900968;-1232522295;2137396057;-1962427653;636159617;1438358314;-1690616771;727022882;-1667264078;1807461305;1106786530;798289370;-234782130;1433312942;307839833;1706112108;1592984913;1760094689;-299030862;-597950936;1115507531;-1883287673;1621855695;-1154207331;964602899;831852504;-466495086;-737120112;-1900013989;1177383802;253256677;1498937272;626376285;239001874;79654780;-1366009521;829190597;-1056026338;1205438167;-1177241131;-247307717;88652161;2138978895;1512226865;-1444969380;-375945085;-61514770;-1151722768;-141155094;1448886878;1451493357;-1849135729;1099869973;1921566809;-40491986;1590910008;390915317;-158305502;-1501489537;526501324;755054328;-2001901227;1328226257;-289808753;-851330372;-686299684;59443581;-866540332;-831121065;-915278935;-687792744;-1618632018;1987787620;-315982494;-1467784753;-205042580;-1064202153;1106699953;-1230162690;-2037070597;619313357;269475698;150285196;-35906609;-984931056;352439572;1275174522;332421918;2009662062;-1180410268;-785918504;321295362;393967718;-1443948581;839289659;-273382682;1552364281;-530197127;1438745796;583651420;1017410032;1265263957;-427823158;-1035260684;1366945307;-532882453;-318116814;-173577728;-1394774053;1327973194;-1198673595;1891037618;2137729103;-1610963337;707480283;1042332954;735282934;-160962877;549112694;953052485;-87160079;-1681664717;-1045342449;-1008679561;-410715008;-1372668820;1246312228;-1687646120;804724546;-553146165;349216938;-118464811;-1183845838;-250200395;-2075122284;1725307893;-619012852;1324744628;651739443;525174250;933630238;-209727325;-1401753362;-1296344341;-1880059715;278418476;-296172754;-609020012;-563536025;218228809;1292810147;-1534974271;-512972857;1543640621;-1780200138;1557089119;1152388082;662619068;367449866;1181561553;1559649776;-1022358794;870609291;2024878266;-1441182037;431192978;703521920;-1559713689;726367937;1592085774;-1776455723;-1118293826;-1962682344;-941609425;-1487157942;-390045865;-768241132;1290925060;-1624312597;-319401248;1472147587;452048703;-1826159407;364827702;1230283078;-1784438276;825350448;1177903595;-1445208754;-901776135;1819712160;1777478788;-1174290567;1921409160;-2006161137;844654884;1025622328;390083869;948730743;297821946;1088056490;-1761516416;-370918572;-1104283042;1268974680;-1089250774;351927254;960488317;-1151490207;1648101152;-10061033;1759003895;-990585566;-1227298534;-1208364914;167654739;1964603095;1535011463;831241976;773657075;-1044897285;-2053431051;-711380335;998184889;786784029;372247954;1865842364;1031677876;-873398232;-1806100964;1993198076;1110710264;-1288652699;1136189900;1365429515;-822394595;-1899249406;-1481890003;774676153;2073731628;-267971855;411827627;-1381459543;359540138;641914950;1342622675;1618988560;1177184236;869521337;-1022025930;2071703331;175328421;-2012967851;-1555632240;-2043696936;136333889;-264169755;1194926335;-1155271560;979026021;1971779357;708934737;1234462523;-1117731287;275264575;1053513252;575554174;1676127233;426958412;-1487117751;-870716187;-397701363;-423628586;862913370;-1022525740;1494555686;-1435108169;-1447259458;890274434;787026337;-1547034659;-1125782444;1351239240;2116668968;351357321;843798122;1037947952;744646991;1649923467;-592176173;-123647118;622411512;2121306684;-598255242;2072570511;1416399469;-1109759228;1067217351;-502438675;-2066861487;579684395;1518960228;1571155271;-1017441011;	};
	mti=624;
       };
       RndSeed @[2] {
	name="RndSeed_3";
	seed{ 709250594;-931461781;-196752886;182879888;417736404;2103494057;-2004032690;-1941087997;-1708349843;431493332;-1939073106;1963221735;1072831178;-1100960833;1178003103;191203941;987932393;1662880510;1258507693;210940143;555267423;1365796240;-276714677;-238412929;-1646906364;-612123529;838823390;346302129;-1202782991;1798100732;-458672401;-711264453;-1762098888;-1916205565;445441927;707762022;1217810786;311498548;-1961559126;-611569297;-1900655676;1994578759;-708642616;513657666;-321551562;-1511579370;2087698706;837769134;-1759791658;-620154667;-207828320;1405234562;2022445027;1257256543;1114620236;-911968104;1118537823;2084117327;960922624;-243919813;-1578110380;884253227;154795573;-60905432;-159097801;-1929628475;-47164987;-2076362399;1167236947;-581321313;1512327890;203518086;1242766118;-1524460116;679554032;-1895184901;530341001;2046088026;1311774261;541497043;-1504351089;-895072014;-1690648473;-1914243796;-1315546758;-1736801107;773914721;-891285604;1947943187;-1005498765;48095882;1233926861;-1151443240;-51112353;-657977686;1231370764;861658241;-540669882;-1720635237;-52884032;-1907046061;879150682;287861736;973716207;191473587;626193672;840168594;-1212178427;1601102383;-1794385261;1268503715;1639159385;-474519256;47284584;-1530874246;-1091160629;1584056769;-363243211;2121799876;-200920272;-2109899113;-1659654590;1153695674;-414451646;513456929;-350782078;754290019;-952122482;-1867932639;-529640112;-260696767;2093266317;-2053665600;-2140382449;-1596661337;675369888;-1595498840;-192179301;1446351746;-72790470;339172873;-110499046;256451179;1077073862;1677304083;137178795;-763761399;-46473339;243459698;739634575;-206487295;-1614366623;818461351;967181180;-20923258;-359625196;2108907183;-1808697021;-1372610493;55837508;213954164;-628299675;79709920;904517379;-1905823789;-1000540390;-2036801917;1793708684;-1916238007;-1752071104;570327220;288693167;-879914057;215128753;-1430863485;-567320172;1661751363;-1264780101;977122991;-739919170;1639764549;199317897;-2020498237;1525172700;1849125353;-387845823;1007583684;-1316546801;1929186781;-79350647;-751725264;1942825182;-1393985605;2067611070;-1452436451;-1655109634;1095369520;541031450;254533896;-17493777;-1020134940;180697068;-500146970;1158558756;-511352731;83861259;-1035754715;1426633933;918847820;1573695437;1785301070;-2084696322;1759823424;-1474166406;846974254;803705341;-1922564439;-1946288816;-1392257996;-460480471;264022894;1160741187;414732776;-2115667609;-79498567;275074627;380550225;-940661288;-2065259701;526351794;47110688;1161244551;-1411483962;-877674435;-739637408;-788666886;-1441989335;449373668;-1920616478;-330798001;10184428;-942151667;-1547694984;818427669;-1039468227;1718125675;-1392576312;-1186839895;-2088840849;1964439034;428826625;-604476832;1722152203;987891695;1022691657;1000586188;1504527484;-1234310318;-75782254;627881528;-1930437348;-1412871205;519114403;1617232470;-629441445;-827643967;270238356;365410671;1611763927;-1958040709;-1501009717;1566828892;-304556095;-1605242213;1230477423;1663304313;332345964;-1548832335;1894377397;-13385957;-1168753264;-235442765;539064202;317916301;590037437;-1905650258;489134586;1608288961;-1551663392;-1309277621;-1186531089;-558756956;-368314105;1041785785;1393318435;789168785;1173380445;-1756425611;-1202390755;380690790;-835550102;1302949786;-1043334059;-210594531;433316870;1506422159;-972621768;-1993047174;1952126860;-932855594;-1507192257;1309071432;678520581;-1845341390;1606386474;-34749390;1982046609;-663433459;2051420100;933512952;1855109400;-1063229154;-212533581;-1281053517;1698290713;189050557;-1228466473;597098576;-1678905128;1757065547;1267633532;-1285506916;1011312034;486329399;-2105081343;292317054;-543603706;889291850;-1888826236;-599758799;1317658382;841812288;645392278;-178805371;-1043135178;-427987902;1882292223;1761111697;589213740;-1466495303;-1516772315;1326900162;-230672305;-1953832099;-1391293219;600697950;1917751418;-72493844;-116266319;1569250209;-1511569528;1716393179;-1343429268;-582982703;311477574;-1181070325;-1395666437;791353772;-260952500;-1879208548;119828168;-1205813669;-348669039;1499210767;1963440380;418800200;-1010479136;-942800632;-1105048111;-2081185606;1965613588;615608518;214267292;-1122245621;-1857500659;541245548;1178843166;320421054;-609704326;-2081460158;1112115910;1102659850;2100465119;-68171745;7663766;-1627573575;-2128078765;1074524802;-1894528451;633570154;-681798558;2106946774;1834953061;1701698055;1278098418;-201870476;-335184247;-1129789431;-571354897;1068087989;1775536131;229686373;-1102093707;1984203152;1168105683;-987621767;433072578;-1849209557;-1811192881;-1216211324;705337986;1416399087;-1969527412;-2020994899;-1523630669;-813821570;-1971073797;-713023256;-677920413;251374733;-864187825;-1264697941;-317929891;1891930823;998498256;-327311677;-557554828;-386470232;-1177375187;-1499537086;-335929352;-1196887360;-1075865020;481383769;437407449;-916832678;-60343333;-1767295497;-732600215;226028947;-1965135935;-375698254;187104409;-1212249310;-998177434;1418538912;597161293;-1907032534;1990438802;948892106;-1538228098;-1142354247;653386901;-321524328;-808733961;-758239211;464437376;-1267305389;-248365367;-67968633;1008639722;730197545;-1486231291;229552284;-2035078298;1722065999;17076898;867470791;-628330399;-868562295;-883178414;-512045354;838244587;9247130;1704232358;-1431299128;-1864363368;-1936604503;-312716705;503561269;1487183827;154694085;277500325;1673954566;833895601;1701686468;-1960994647;168673384;1983681274;-110407174;537172529;-72609718;-1650950205;-1278234084;-1642768946;837355381;-165638109;-119931237;-311899148;-2025805456;-1320231432;-1296146527;-943785905;-615734275;754033464;573988635;-1776944469;544167858;-541467328;210905206;277552790;408639799;592028605;-1965506404;-1293250974;-2124706323;-1113790375;-2051186442;-1287268780;1050384383;-1280085843;-706601442;1931372677;1015669289;663563587;-1463764858;1919119916;1955668698;15136129;386393856;-1581439716;-1269910285;-528916941;1452923663;1716513958;264158980;865501878;1095694833;494538196;-1017517367;-727335464;754654350;-784579538;-1501692694;-429592142;855774720;-677859284;1791994808;82035499;1266353446;895216019;-1538796496;641956844;694497871;822223455;2127915184;-938473205;576772703;1907097779;35228275;-867160935;-1279916803;108360151;925039376;379101070;-595856571;-2130611490;-1609691379;1761868333;-156810849;1834836176;-262271558;-1769837245;-1766595092;1820858158;476204756;1724157934;-2145602922;955230896;-1548318275;-1628139095;-1205928506;-630979420;1149515572;-1473763525;-211551024;1988406419;313539055;403752097;-1002520868;1291822931;1554376627;-1001345644;333139438;-1145299134;-1733192035;2047116825;1513341399;-570359346;-1460179646;265641122;1311653965;1790708832;24628650;150610040;-380171841;934311316;244750797;173303115;-1500636158;-2029187476;299995603;-976390739;-1647604203;	};
	mti=624;
       };
       RndSeed @[3] {
	name="RndSeed_4";
	seed{ 709250595;880971472;1033873426;-244518627;-858378534;1132567714;191563605;-679911024;-1491064313;1750089986;629752121;396180616;2116397492;-325004938;-2118303689;-1803963912;169345458;-130093749;2059871610;-302146406;1913366897;509004101;114709839;257945410;-894322910;17099038;260245232;-1376244533;2019572841;-2061271771;1695235969;-1628729953;-587013103;-1833984709;855345311;-1984758306;-562240528;1558706692;-1099607777;1618773400;-405891451;-1464264441;1787661347;-154895467;717359194;-411339345;761428234;568728353;775183669;687678234;-1856126092;-1479392319;-628287709;-588628011;-1955678812;1097695413;-553641156;1549301524;-466339709;-2041132357;164232249;-432405574;116422971;-1570936954;-1881441452;-571298001;-894326626;-476148940;-1467065353;-1894554386;639442274;-1008465423;-1343721790;-784829943;378689596;-224859145;-263804016;1387813964;1312595887;354491893;1019997945;-1272477298;252260494;360588889;-1782988175;1350451892;-2106184001;-1160866328;320954282;-1107117973;-1029573945;-936662097;-1714567368;-1201429441;1272934767;81632965;-120975079;-1164596829;1144657383;-1578321375;1828137779;-1979724513;779842007;931199290;869817930;181980571;1355682193;1671626299;-185510066;-1442142514;1762327274;1376371238;1506900179;1862995275;1316935844;1652475532;-1642018027;826306440;1456720158;738783410;-717997902;1221072718;-1030522459;198366457;1559644089;261342229;1909365191;859283869;-1581594511;-1021599520;-315296495;948523677;1236180341;-1034734775;-800336200;-2030908594;-878059132;1650997708;-1431796885;1722681848;-137416503;861952575;-519548311;893992545;-655456811;747918335;-680420563;1914689465;-1760979924;743838907;69943645;-795439288;1830988847;-1173058369;-23614421;839930979;-1873852757;-1766436278;-1477509370;-790642381;-1359353712;-1173560261;-1765307361;1468058900;-349952275;-1768244597;513665459;2118319942;-1711491413;1226015318;-1982596099;1249305414;729393839;-1038025032;443782005;-1380594984;1446884018;1910393936;633501095;-1572877674;547365144;-1735727315;-1429316287;-1540839642;1199060460;-54256582;2114495543;-1631342583;-793290733;-1629073651;1855273129;-389463289;291542356;273735397;1802731035;-1648186619;210057607;-1022758392;-2017369571;-811119102;63393837;1422243722;-368587359;2039337909;-1792288048;-433735769;832845954;-610935271;-525169902;743700358;-1186898256;-1051353331;1514684250;1743106748;-1989039513;1389053872;359137965;707961882;880978204;332444903;-394789121;934311497;1877654699;-1489409551;486463679;1405270844;481461491;37322690;-61064594;-2136841498;-1959196454;-786164193;1037415924;-1386455507;992039029;-1218028524;-280749158;634570058;1422029088;-2094511116;726048510;1592043815;1992692464;215970568;770681628;-538673407;-299094336;667537126;1654765494;-1356895444;1040377888;-566315621;1427373556;-1853993050;1559244978;230163102;-1655597226;1316530469;1478164534;1799718326;1660793143;1919340883;2043902048;1921083468;-1007002519;-1943981861;-299145305;923969727;-404501657;611566465;433269747;-361078034;-1313546863;-101443824;-483703151;1322580653;2128671472;-1051077846;1821393219;-1465642463;-1721441305;1510373234;-1029788551;-499296451;-1600808302;1689062381;924516666;-1310357759;-102506417;-1140577507;-1433298083;-1959713634;121564848;1348492437;1067170698;-929834855;628416490;710316667;-303522127;-929964187;1441053290;-2014457756;-1608265876;1814345109;-1229727596;-2013873569;43928803;-1647390270;-1390902796;-1108218557;1362191579;829125945;1102037429;887931197;-1719868597;1726397960;318426057;310376586;-867898960;1613103070;1476741947;367966499;1010288401;956343288;-255301092;984970880;-2088615482;334616475;-1811348369;1441273162;1359121121;-1636652117;-558224391;751969519;-80381287;216779281;-90123515;1066105007;-698006179;1436921193;302125916;-1900945247;1708776613;-24915445;329262720;-2142653991;1312710593;-568752101;579832532;-1346815231;1438508173;-1022486373;1273040216;1230890622;333375613;952606644;-1994041496;862533687;1427742233;-1151452961;581285273;-591493178;-533266653;1578813707;762162270;-65711997;268256238;466103381;671480825;-301749330;-1945284173;1238365512;-363931583;1688511871;2146941484;580487736;957579664;1073229641;624409159;-1919058306;-315145112;760758964;-495933822;-1726760092;467437246;-649144201;-920814778;-1703112516;-1177761158;258874077;-86253641;-1318938741;-1346561131;-25119972;1115374533;-1136549409;244261565;121297694;-11697564;959353650;-1702635958;-1079503879;-2214247;1410987605;1063068856;2037249581;206810354;1999552273;52490984;1649803041;1263913274;103151842;-447077178;-677318570;-1586540505;265383224;-308604744;322874984;-941066070;-538374832;1884860003;-453164977;-1318646878;-197118009;-242620932;-176802236;-1969198419;1227538358;813143007;1013493672;-1998178570;-1494727693;-1382692667;368817972;1405492534;323811174;-1718799630;-913864091;-598461964;-1917458646;1938857088;-1353332322;1761675334;684147902;-1013330254;-836614510;-985632269;-1393138321;-612869439;1381737035;805741300;-461447161;-603158696;-1663165524;-365753492;-615847022;966167293;-776913766;-930493657;-1710265601;-1321100131;1745675144;-140961829;1678836231;720700462;-1758902793;-9717637;377487659;-1924302133;1573258274;-666149211;1240280917;-734813700;1544118900;1654093571;226494373;-1457696011;-491197360;-474830435;-1114342603;-737800813;43346865;-1720961097;1400166732;-494996923;1940327811;1035003952;-1671607081;-1799336207;1187263176;437558327;-885255522;318004957;356037662;1284841412;-13043800;397491047;1166512276;-890320453;-30339189;1466100380;266311398;323068084;215006459;-765860865;-1537421211;-1426695779;-796887882;-1911166363;-1511548000;1579752;-1941911673;-1862801799;226673544;133361322;1664558357;455431912;-241863795;1538234124;-1049129176;1576435967;-1405430721;-126524645;-1375735165;-1404520463;1858510828;1533931407;1551139605;-643207948;-1175900540;-259058960;-2110028046;759344836;36821353;-924649085;-1953369705;-1578103071;-2015208280;9145132;1119647351;888792234;-1701039313;-113358881;1896552427;-393041038;-1682694474;-1721076954;-728124585;2028451400;2079784434;-1946272251;-256820758;-1354200043;-2093443524;1366062752;1437464752;1620105473;-1941528787;1364588217;1996148935;1746425422;-940353956;-1932333907;-1129706946;104081376;-217408107;681538660;-1158778453;-1031451931;670409975;-269269331;848298721;75664897;-209219166;-1999462461;2094944868;445747481;-440163810;45841587;1452867554;-830311981;621754709;839065039;-1965585422;880650232;742326049;290083663;873539446;-1793279526;1756490885;-1386154398;-2017814993;2117490449;24636321;516956631;723151654;449683026;-1994958161;209214871;-1733050902;-2132601120;1493498755;-2111975772;-136093735;301366622;350799475;-1020340035;682308437;-313081879;122942387;-9506047;-1545604051;38895599;-618175824;-1052721659;-1637470011;2010955755;1680995259;1698280652;1059130444;-38631320;-2124539996;307309804;1971652491;	};
	mti=624;
       };
       RndSeed @[4] {
	name="RndSeed_5";
	seed{ 709250596;-1601562571;452066485;1722323052;-1530507259;1195528648;-1553083053;1119126012;884125145;-1233733722;-1164363842;1936365879;-1920575398;1169158853;-89019550;-1737062828;-1996421634;327104637;232205923;-1502787550;-1651075916;-1695018525;1318549211;1213369881;-1186666608;-451248461;1209019274;-361000718;1172842545;728337165;-446115521;-1560827701;1049110637;-1605023710;1579062466;-721286126;-1564812327;-1705119604;-1464998356;1342991949;1342320676;-1448883262;669590250;789577853;-520219011;-2084942365;-1185602829;1323352644;-762932631;-866615805;1817687602;780217682;1333117838;201764512;-1737063082;-1452765605;987548245;-977907518;862725471;1128502710;13238383;1089901320;1731646411;310290673;1593352277;1479554405;1028887734;-980872687;1614660446;1904536512;-907916181;-1207710385;-1149684567;1756252864;168544111;-1939270122;-1395496400;-919164921;-359240222;-78789868;-860469405;-1011054287;-148118772;-1975739330;-1893089280;-347614433;-652982686;1464905116;-1693940663;-80390928;2099613497;67008883;-1735821893;38433626;-560943904;-1177636626;1370364284;-742460494;278322743;-1879958762;-2003934392;39175831;-180410119;632222985;-26771979;-84453257;-1122502098;-695517241;-1737749312;650304247;-1026583839;1303242137;480374120;1372017273;-804404790;-1969158720;-571860994;941415494;590241300;-1271934373;-86073707;-1160980569;-742694509;991137355;1307199251;-1493914473;1660343367;2028287517;-1490594420;1043316615;1191628741;154918103;1806577751;1307646067;-1991137408;1281992913;246868632;1004398209;409860719;728905046;-781958;519284298;1579431360;1767145140;-1726489863;192329880;986197130;-1063949051;1970682354;-1236473740;939056420;2139325387;-2098194102;926515713;-1974873089;-1719793556;-1539427838;1934342813;-301851606;419827148;-1923506660;-1261735817;-1566245941;609544176;1563357780;1602754862;175445809;401760252;400669460;-960986227;-1508579920;352903653;-693654267;-1360430581;380303163;375332342;1414101182;1943264012;-1943379501;-741838552;248621483;-734956500;804847169;-1928062628;-1005367090;1668781722;-1073455391;145646053;141765909;270796550;1596128284;1652817200;417930773;1134894090;1953690649;1117988411;493428646;-1041018045;55384326;-956754395;1881805766;1134579020;280474923;10190274;-1141673898;-260815375;418126664;1320700983;-1929840610;1942282205;-142799202;863226308;2013560616;-2014175998;-16092714;786228960;-2066417864;-1695968069;1003335383;647498414;1249203586;-979183476;1594685513;-1695253177;-2107483623;-305987448;-788096327;-1283549627;-1622259225;1622259006;-925615679;988912753;-2128465283;888988676;703076990;-1607343455;-596859333;1197051141;-1645754494;-894093713;9586060;2009161005;-698724530;-1926463660;1175274466;1539654788;-1037945233;-208452205;-1874558264;1619768491;-2089598452;1093963393;-1082214020;-1732928077;1826746579;214066649;1713524893;-1393472883;-1174277523;-494203442;-1478875163;-2084741592;-1673485928;-1624167223;-51621857;1088329749;1338029294;1583630934;-1514478497;-511910210;-1667103073;-339631616;1429047103;-754414969;1310411558;-301103498;830319165;710529062;2128442900;-1474046880;-1451672126;1864441305;-2114887854;-882086997;419127908;1133598353;-1919272978;2100911419;521917186;-957066517;1662705322;-1250927206;1720927772;1869295510;1390581433;-1256853569;2032057273;-40007487;-224081996;-1813726370;-1324996488;-1234353329;-986004593;-1414982805;150395549;-626178526;-674540233;943551159;1772302951;1814395251;585428272;59786535;-184670053;-400073423;1288013812;325304804;-2040888272;668134135;917889969;-764178668;2093728851;1051875227;-159677335;-1350698731;715232855;462807192;1534784830;763001378;731669170;-1335741565;-120234961;1874127527;1451059914;-852572572;-596482319;450371785;-229670499;1494069927;1636586192;73762504;547829308;698516225;1715485115;-1034858055;-488126022;544577622;793059656;-301094205;-419094756;-796532840;1790454917;-1843907213;-1170370571;-1877607212;-824883248;-1202044254;1537469060;1708111070;1490465889;1641843527;-109745658;1127383650;-546738823;109345933;1556584973;-1299958743;-1086285467;-1402624494;-1268181568;-630691589;-1977212086;1088779483;-1878669962;1058929721;-463600397;-867408857;1756809132;-1833738822;234058514;-2028009067;-494823153;-144912583;1696189792;1002303940;-2068953132;-603070737;-432455522;2020967540;1702027437;893563233;2044978635;-1922513863;485883855;1704768820;1145035891;961084549;-1399730427;-1165857200;-21141016;-405369274;1236013001;-204717191;-804721996;2015464134;401686807;161808040;-252157474;-412556600;1162682031;-610649537;346494790;-1135958471;-1408882205;1006563426;82266696;502847495;-621151389;-1949921663;-1859168687;-47940766;-1324181527;454014044;-751081998;-1785449796;-573459298;-374388582;-2010085625;-2138442844;995817514;-1697094593;1588540095;-1468484443;1960683155;-543892661;1040977178;1098520309;-1138777096;454196567;-1262484471;-768049906;311446745;838693974;-761598552;-1543681742;2137559468;837947390;-687784204;1794181170;-337606433;-958940019;-152607800;-1673591846;-1730994692;1078576379;-1302691224;375795609;1593354789;1646552573;1288968758;-1120483202;-1018464584;-1838355308;-810574084;-648465558;814971709;835601890;1257604604;1568490404;1629617901;206168305;891140587;379985550;-1815736866;2073179557;-1495273586;1247768599;-1019412342;2082048234;-2100967019;-1475651214;291978000;2043010865;1238482898;-1574069470;568481156;-2069142791;-1468833299;-1233679310;209715416;-1797525727;-1145825863;-372594766;-225909823;70430583;-936973599;-1891918055;677919383;110816900;-1168064506;1057613703;1954584887;-1053533629;-1246503626;-305980549;-1745547184;598299731;36942265;1888493816;2102478137;1940080917;1897106146;-1572976498;1664716092;-1963630574;-2086176686;-1700443757;-1500798663;-1157877428;-50056244;-787793486;-1155236387;-505740796;1370394061;-1806426233;-2102288763;-409285552;-776992307;475340373;1797486233;-1650646007;-409592471;970807013;1142347629;-1975530575;-988599627;-177913371;-696182826;964847138;-1677164668;541263865;-578459559;-1661970529;721459215;-989526262;1761515949;1885581053;-925046898;1206702532;-183225891;-2068218693;368850979;-209591562;627485137;-2095523170;-804274762;246331284;-1070029936;-1561905620;-461832108;-1689472126;970085296;-392939871;-366722532;-1433817234;1395065808;-165258070;2035810787;1575531105;-186400232;863570400;-634796134;1870373528;603589017;-805852006;-599524453;1235131703;36695694;-243982777;1950570262;-36852394;-851779123;-1884006773;1580496723;432797601;107273677;219756842;-223278628;-684048826;-449806203;1821666603;-115307040;1526429662;-747264949;1078745785;1437877482;1332606474;-1923418197;-2062800638;515714902;-229460667;1519254774;-718930228;-1190964987;-270747362;217092045;1115190078;1777021241;-1616288393;-950819191;770085075;2034045089;2002596227;701570222;-1734643445;1209035763;1138563809;1438481608;1896402614;706379677;-2079694756;-264481406;-736704686;2094923363;1566953753;	};
	mti=624;
       };
       RndSeed @[5] {
	name="RndSeed_6";
	seed{ 709250597;210870682;1210461124;853455292;1797110576;-163638438;-72596701;-792552537;-208786500;-222725788;-889846611;1146287793;1502577532;2003289438;506049929;-77991908;-254454965;-726441095;458787124;-607717993;1442256760;-698678318;-1918215541;1416104228;-705468239;-1595043757;-1104393969;904644412;910735048;-1275517691;1296915169;-515458433;605548300;-1515013155;1025996317;-1248715116;-216115374;-1226191846;-48341602;-396430312;-1898593841;-2019087606;-2009906606;-1159333445;-1351710935;857626404;-107567774;-2003359628;-1417405250;2007233117;1625676414;-904516786;1124485781;1232117913;-1014451154;915811064;-1291473904;-154106541;1556900042;-2109277358;28243660;464423609;724089915;-580200826;-2120822855;1741162504;41352399;-471497490;1546340037;625856409;-1795503965;1689669836;-20539863;-1646544677;2005602023;85980937;-1374730279;880315572;-3680430;-347517884;397285203;695181072;781799842;43706173;-74981275;511450771;1297726293;418569339;-1154756641;898713482;241177548;-1324090409;1299863653;-1521589295;-367112803;1557147061;914578532;-2063534123;2028263221;-69223449;1846420824;-1895801470;732849126;1385005093;-60632420;1275932708;-50672637;-1709278101;-780515623;-48325009;617630986;1387183969;-553918128;-231059152;-2099555183;1422920050;-1857600045;-1976408854;540669950;-1400388179;-165370493;1065798649;-752502089;-1984365185;976845;-762762914;-724887761;-709185317;825449912;376664601;1313498463;556485785;-431875615;1159473327;-626840788;-1765461742;444459992;1775019201;-1020805046;1385492056;1488890537;-1759167275;-316600223;176023865;-234126067;874642711;1635461541;-1302580665;824820429;-1907060618;1272386138;-383127170;-969724951;-2146005525;-935940473;-1231847761;1773572061;654802537;695865611;-879452938;-2141975991;-2034814152;256327812;-1673586505;1913691405;1072521825;-554386965;-480083665;-2060352764;684779527;851987053;1037349548;-1422095736;-154369249;916305594;1779999249;954368256;795207089;787896455;-1136513802;-623488776;583091900;1681884386;-245241530;509212145;-2085420594;-567680458;-1677222748;-228613062;1479363642;21473029;-2033610056;-2011009502;-1520135327;-549248559;-2024555875;1631631487;884357243;-1082450867;-2015268110;-1492858504;1863043051;1292376604;-1393110212;1126139458;1243534396;1198088671;-419075227;57079310;330207831;-460239835;203252177;1504145737;1940339261;113776258;915043361;-1246987555;1793511892;1278133987;-552506875;-1043985606;-911020198;1830686715;188684417;1267250373;-1761069515;-1430137963;-1781183882;992638120;549842733;1632727719;637997669;-429568063;603277939;29551433;1020257720;670898820;-1549264127;-1998830563;-801867734;-836740579;-1043358521;-1960198586;572945863;983889783;1673875944;2131624675;205526561;-1475910403;-1762635628;-1542843864;1389864333;-1384104648;955396831;-1931449863;1998464006;274527939;940619504;1359912370;-1592917086;-1546121436;-1235005181;-1097891989;-1045727628;-1672712965;-1756938170;1113374686;610208518;193957994;248689887;-1576684535;-1981354906;-1554462588;-117386257;170977582;-94921159;1943304182;-490240888;-2106413331;1936059490;1298939687;998916375;-167641555;2064770881;1972469084;-402113586;299585023;507264442;1390601602;-1427330864;1265958396;251632372;-512706712;1804443996;-540643369;-101805109;-1297197296;-992019133;-297718934;1540379288;-2087487351;-998378748;-2047827471;-1874857714;-930248980;1637164156;197741443;-1268193566;554760084;1429987993;-16007378;523010808;1399743760;-300221970;836726971;966299138;389880326;473070491;-380782491;-1239263363;886603099;-2047071960;-1498826540;-356879439;-1520965506;-226683343;1335395584;358679468;66158628;2094453629;1347603766;-788633858;644286493;-1094141506;347792506;-380145807;-29295798;-1055115746;-1974333;-216332269;1500168100;1093659246;-1721375199;475105318;-1894707626;1722915965;674568774;-2014522119;356997987;-658240916;-1946778071;-180554922;-493388055;-1458156109;1899454775;-1101446735;759478275;-290769516;-195365639;1070756361;-1219702795;1348091100;-466138725;-1017486749;-1578225332;-1669450957;1501981891;327859193;606301101;609489330;-427737428;-1504550018;-1105027744;797936415;1995340721;773324263;1806224539;1598891067;1466455644;-353576660;871684103;1667627840;360246051;1618968910;732581035;-1713060872;-134734556;-594648858;2018101469;1067318353;-1215109509;1671082052;37714369;-1686482002;-1480716186;-2021786369;-2013055395;-235516920;-47520539;548759117;1131123441;1872980545;1729440978;1042062290;-1419059858;1872505137;-84479610;-514820080;1099336727;-140047289;542391406;-460015871;-1649784986;2015277073;1623459822;555682282;-1426905870;-750648239;1671010300;1641700724;1633517005;-221720799;1107356688;690568540;-861965580;1747946524;-1651978725;-1946963320;-1149809634;-1299184455;-1971916171;502290850;993595546;1402730611;1469843628;1240400628;-2070656675;-1084372176;1478291056;1880853836;1385690649;-1018236623;-40440716;2086140846;-634391353;541357841;-869133197;734134767;-132338677;1335372009;-750498486;-800223088;-1459767613;-567450390;21529267;1718771046;-1595147669;-352649674;1451469235;1403008773;-322774432;1819551196;924923647;-1685968022;325962200;272448521;-1651998113;19543428;853983976;-944697507;-1650040852;1132214461;-142409724;-1243364452;-1478640336;689531029;-2012151387;1210648512;261970435;408231950;-266394266;152031162;796753988;402915511;-688441065;480328393;-74398669;1449859287;1583699030;2055067452;1249939963;-1464966259;-318910377;1995187985;495123262;-1009561755;-1952060626;-511420851;260558008;103431819;1676677579;-1681776473;-678285297;-1464376653;318876365;-1951720998;-2143433678;2146910443;1286592590;-1706319832;1907534992;1573826612;-867507223;-1595267245;178445815;-1597258890;-1003932984;2013048604;-1775067785;40812080;-1396131080;739741867;442800257;-690735632;1346196971;-1936514721;1483862207;-1678005499;-637388077;-1878358495;-454776607;-1564109507;-1651795217;376960662;375689540;1346811371;883294570;1579567851;1738066540;680997916;726568232;-610264347;416920796;296884459;486971863;-456146188;-32564075;1650233169;40262836;854255913;2039738451;1295496321;907196584;1187824753;586773082;1662142893;1935154952;1335824826;-363064331;280791101;-185243839;-1545465541;670518959;410432574;1123830954;-1354840916;-2084128548;208125901;623797017;-1073447914;1757361027;-426908027;-1140610278;-240493899;-977587700;-485635798;-1053405075;-428172377;-47829514;-329563924;-1337358449;392688102;-2118088700;2045436581;795947260;-238865995;-73988840;-1676838670;1436100860;-1756916962;-759494566;28372588;1868160748;456968914;1799645484;-897477100;219383911;-880479752;-221262499;1182094957;-2072058124;1214564199;-96320616;1871683970;-1884367349;-423344918;1118757707;1437091985;-1775652048;-1917356261;-439525313;-2077551089;1244113541;-712840071;1015715976;-1710819313;-1009134455;-545999141;-1093812830;285635211;-257649085;555190701;1722935471;2121788693;	};
	mti=624;
       };
       RndSeed @[6] {
	name="RndSeed_7";
	seed{ 709250598;2023303935;-513678280;1885314634;2038208155;-1326066489;1295867583;270274301;-2080223527;-585543824;1990583145;-1375903725;165085121;1526214706;-1961144531;2104452250;1040622647;-1207879484;1430740016;114595944;-2109224676;-121280789;2051785118;702184146;1655363314;-1089218312;1757963452;304341932;649322232;1074900981;2110783330;-1301234386;2011901564;756366450;-438838500;1145440862;-943198561;651599793;939112955;-1276464338;196033668;-1155431363;-172497915;515779721;-358882503;-1431261169;843541071;1245329498;1604185879;266082783;-725119955;-100602791;-1890621002;-573437895;-1680193256;1173602681;-167998320;266543416;1508578130;-765785350;261723513;2061810170;-576605371;1755721949;1606091532;1791306082;-2002497711;109819650;857556494;-1486085685;-1539512941;-707253380;-771153821;579675689;-2110062729;1278174836;-1782904459;-1591973056;-1939168424;-420242223;1590116650;-223758008;1177304553;-303196965;894128524;-1607526255;381705557;1428836320;1503128861;-224884635;435578520;155570771;-899717605;-806477867;-1630136884;-1128015707;-1463363261;1568571398;161301029;1584653820;1337532981;1724142313;-1070932498;-819436568;936718111;2066493092;535278723;-912698598;1755654729;885143253;466263927;-158819998;2074111157;-1989986443;85234021;-1733334452;-314921158;-696540430;-376356213;346163231;656329651;928024;-650375438;-314057072;763132795;-728855804;-439051967;2075314569;1578847016;370972846;-1681958104;275673621;-1858912307;-922291152;970105765;-1624187488;1548821362;1411418088;-1661972361;353459124;198738576;-600140963;-343182684;619748210;-1371842934;1013967929;1059173391;839979390;-2054531766;1815031293;-2145582846;402285975;-246881237;1358130273;-1414978950;-831204877;-167754676;1691499208;-1343896853;-78407796;1560236811;-781050477;1120385650;-658957566;-1182650103;-672580356;1067616321;1003588428;-1672765020;-1763533529;-1249653437;782156880;2044871740;-965439042;1713808703;-1470144475;-1926836461;1251396454;606691157;-542500292;-1847520625;-23804074;1588732479;-934498003;1364559326;-1736759116;-161843576;2095982738;-575558213;-317128107;1165488812;938234880;-718199616;-1369121616;-389786372;-840236962;1064561269;-697885202;-1825725369;399359232;-1454337592;525639547;-434585775;-647733723;369458122;971960703;-386187543;-802091743;391078202;-839948621;1815589954;-1287194046;-1901265900;163658627;648713861;-981626800;319511703;-735488148;203613861;1639337204;-1831961979;-1195796704;-1391996088;1932457745;355404336;257078737;1940231511;-1701252655;2022069283;351495247;-1763845359;1095342694;-763622773;374010001;-1505393889;-1637728164;2076685314;-449535716;332802345;-609997028;-489214165;-784727111;704119636;-806533865;1444935128;1511792786;-2104719883;-1830614422;-1661156352;1756129219;1037681284;-241278193;-606961480;-905060924;664338305;-392177692;-1393832413;-113312506;308576507;1971992330;2085198683;-1532791417;-1056666753;-1244371725;-714617571;42662879;1488500485;-1947379297;-387686147;-386649277;-24807090;-1515318928;388031754;903002115;1286681921;-1943452845;1686432009;-2007156419;-719106575;893535121;2118402637;947705109;-958705821;2107683323;-444923202;757742254;1842496964;-542182184;-150155641;-1473372363;392675541;-470543828;-531671889;-732924671;-580240144;1680676870;1138178795;1188526459;224081996;-1338907865;138439621;-914754842;6054535;987635570;211053354;168673987;-335727839;1496342429;-2138819136;-985921345;2122321762;-1602810298;427230732;-125448203;550482760;1608205475;1638582054;-754617696;301233805;-1564525600;-2018733206;-909061815;1349070196;-1660580500;836938666;1710339415;-809397708;-1038147590;707977093;408116674;-1637953324;923069369;-718929335;-1220640129;216621471;-1129669622;1627904120;1916807694;-465854403;2113497033;1650981692;321176934;-1460701036;1646058117;-806429844;-1330382044;-294425256;982309186;1118046822;-786810112;1778574477;-1354295141;1801819837;736302477;-369428733;1597142115;366894606;460495595;-1987321059;1788162978;318020535;-673751140;461230629;-1994606844;-9409334;-1223590470;-1506405626;-1197562365;-1284175659;1623756100;2073864875;-20295547;-2037154734;736550149;92266863;-1725867710;-1280608328;1674495963;2021557372;-1707332660;667977666;-600153337;-2027801070;-639769137;219797244;807579373;1371986435;2083329613;-892569216;105385268;1441401610;378290142;1519714846;-1648005436;1989585832;1760439352;489747721;917602074;46272720;658502559;1928607307;-1083373885;2045244599;-1284312223;-1135672669;-1845808102;-1817942258;475403603;-660285865;-66616131;1043533456;48222315;-1077707053;-357178606;1371385939;762344441;1396507613;1764180845;-410622146;-739155532;-1417183785;2073994158;-117949263;-750176799;1525036498;-1939461912;-426156036;1121671238;548983983;2005307832;874676395;-1322956762;5028836;-2112936283;-298147691;153854689;1485352313;1896458765;2065990770;1131335190;1034067915;1530507216;-678414289;1395242775;1812595562;934583796;-462035198;-131420636;-149252573;1387551841;758633378;-659148115;-876405142;-266325454;48695323;1698277230;845313939;-606348856;-36204063;-666074635;-1653215782;-591958011;-679712212;1412566362;-1033766473;-483075627;692549952;-640280557;-322432988;1621377080;-725952173;-1657565593;491666609;-1020285778;972207899;645706370;-1538784986;-1862223599;-1411829411;1974817626;631412679;-154115484;162591621;1237664348;-1209928299;-474696328;1707568749;1991925379;27843890;710740131;-2134334151;-1741503182;-606175780;1430061544;-1602849829;1772738444;-180911727;-1774501237;-1715760385;-912956220;810566519;268848872;-1156625538;1557276131;1985799714;2026145992;1547471431;432801177;262936665;2119974426;1314780581;453160883;1778065055;-1312316329;1426609291;-1991428491;786247159;1352487800;1410118083;-1468992111;-1560178681;835944706;931789268;82708143;1447382039;2074660027;809390448;-600108225;1463661756;507278754;-667149060;-634066514;-945239979;-618196477;-586408938;1365332832;1688981597;751727205;-445763341;322552011;1736619315;-706264873;1538918850;1207187214;-365313525;-2631863;-1922790316;-1239456239;1988653731;1134292495;-1991480404;1787337677;1977197988;470198594;402856756;-785083985;929466120;-890335147;-172557796;-941340822;1193697181;143799997;-601505853;1287809267;1232792494;191407424;91780214;-1777132859;508498363;-1513352192;71760132;710894799;-633434393;-1386060239;1609080669;2140347787;379552690;-62441093;-668801382;-849617504;38776467;1474399556;1501145983;1111038205;-1379288652;1626516759;569971192;-810954461;113877996;-1581581719;-608890491;-1753570771;-1485429285;-523431442;-386209325;1456378211;486199294;-2144010357;-1167580061;825574812;-1551305500;-1973307625;-1055229277;896664443;372585699;1921014508;1439151839;1622799861;1470734244;1440631674;-881484567;952509621;-859546931;1102189483;2037235320;-460723932;-868229685;861571665;-1426789025;1060334876;1081215608;-907549398;1379884187;-607914703;	};
	mti=624;
       };
       RndSeed @[7] {
	name="RndSeed_8";
	seed{ 709250599;-459230108;-1765586011;-2078656538;-579006216;-1421146612;-851910260;-418413454;-1038698083;2006894943;1425719328;-458852848;-1990082421;-1822865638;-85138298;560223624;-1793882440;1793306995;-135724020;-226254594;1107355877;356115977;1915851427;-277509119;224087778;-1570041533;1161861055;836930577;-338863151;149330935;1681110929;-90997777;-1124782020;1027552919;810047669;-1929978740;-1454439894;57360877;-1995188313;884891968;1508351592;218542230;-734138024;-535368686;1305951201;135626637;-1432827953;63867152;-2025479296;-209185669;384584586;-932403291;-702547278;513646858;245687080;448136959;-1199031853;1969662126;-1299237819;2003476286;453151511;-2045694128;-94859880;1811206502;-914899741;980509857;1778244807;1035472993;956915593;-309198254;437207867;765270414;-1400237234;-1914615483;2131355725;-699575737;-580658912;2072864284;1899613887;1789148997;1669618212;712531434;1965377444;-1131441812;-1686487366;433272557;-1254850345;-126103200;-912484505;-1417134387;-1576628475;1280453918;1718248599;1609037195;-407848496;351288222;469832630;-235721425;1683054270;1258789054;1811315391;52435803;-1916043699;-1609950062;355882296;1720883073;258557418;207146941;-798942467;313758883;1339678653;-2016091749;988209869;2081566802;89029681;700725448;1782935388;1569240358;2012370905;-1970847569;-910943815;568897755;560986593;-552730816;-1124757269;969792874;-1080289968;1295731673;1726186680;114908798;-993675720;1344501962;-1959769189;1605481698;-1860249323;1727657370;-2142578257;-1681885494;301458802;515213445;458295813;-2022137466;463691170;1006478201;-337887155;-1770971817;-1935273957;1490074480;-1967100631;-662432372;110037249;-850979076;1028885043;844091832;-322881998;-175006992;-1895617157;1776661082;-124841595;-1552113539;696797627;978791016;-1293065302;999635435;390831451;1502070924;-188705465;1689798779;-824974646;-42661130;1253929043;-2011745531;1957093743;-428028141;595411454;-22153243;1670833262;500205436;1613418654;-1562220946;-921291440;-1315867276;-461799868;-1871457862;1425356368;1728497582;-1873645627;281581886;1373152306;1002247132;473797258;1367124785;-870565200;-1049496480;-1066178863;390853533;-1147067723;1764205048;740305155;28822006;1448170710;-1705080676;-491096800;875885210;-1997659762;1891313929;570718454;-415670307;889364838;-1003273201;-1007139442;-1861818764;-28830878;1484099354;498329981;509215784;584387744;-1708155911;1998511585;353004091;-1416463069;1839794146;-1273128851;-448164950;-278885491;-727183897;1727561686;-816480330;1745240141;888408801;-1237207893;1312405652;-1465872207;-307371384;-1448885055;926809306;-642028306;716689262;1284027732;743245944;-1892380600;-889550813;1620104594;1987374834;1554469331;-309679409;-1464823950;914065447;-945121445;1421070001;-1956856726;-1555956221;402571361;-81997758;-1684540509;1237010564;1750452857;1014700633;35260191;132998974;664529530;-229323481;-918997958;2048072836;1198550657;1610488201;-308159566;222586592;657094508;27126441;-595523909;-628613209;505364676;291074661;1933914091;-2007621019;1194701495;2144135395;-895036352;1295948422;672544603;-1679783168;1325984484;-58967436;-443694833;-997157159;96218912;-1034504001;1916239692;-1172279422;-688423262;-1529864280;-55281354;-192663538;37284679;-1186016470;-248399888;1337171720;-1221029705;-541788780;-2064403265;-1928694594;-1094931622;126464743;39990611;-124946960;-2121034479;830864562;1056306542;-1788628069;-1063141997;2100419335;-1744068458;160534429;-711741653;-166165501;-766503620;-38790632;1865400549;-498262221;-1469186256;1666544123;-2138389788;1431698433;-1832358588;-1334340637;-1804090869;-1001037868;2027544603;1603884427;1426823868;-1165085988;-1083907870;625252781;-1710671985;-1254596368;1774043850;1017740904;-128153510;-941068944;-1016415565;-1848387387;-922220839;-1010081959;-1464219174;-1556530287;-1417990823;878418242;-1242183066;201613009;-668056877;-1615745681;-790379935;-175102965;1633583242;618666810;-1315780282;-847590087;-572718264;-1979551490;676425940;55507213;-590661493;-920250605;533637820;554432921;-780444725;-1941881001;-671778055;1736396819;-1080935796;1474894201;-1075821108;-1988572741;1890228339;33630321;808480525;1944372890;-104312927;1142103653;462062320;-767026643;-1414073436;1495005181;933409772;-2131867235;2059543613;-1583322833;2026739013;1926842713;-1184757442;725795379;-1633097049;79290786;-628901772;-219121794;-1992553763;-1499815288;633601024;-1406243441;1103933233;-1982738559;-1737950399;1924595202;1714869187;1296195359;1105761900;-1841385576;65712986;84536859;873751873;-1492992704;1613430438;1573836928;201291139;-331253426;215618049;-1347246842;518406198;-223462159;-1074163938;80704433;-1063690373;1289872383;-1676418338;1011105397;1569473235;1675018373;1146919360;655881170;-2136173176;1860426529;772379984;534755905;-776452521;-1214073641;1405769405;107140577;781896827;-1243774658;590420580;305852205;1098543995;-42870051;-1877071534;-516809139;1730131076;-1296013512;-943929950;648291142;-1802739104;-994622355;-152117462;-1479934478;2099683702;-1427675974;-1556531616;-665130893;-1655593478;-321899357;-894540564;-514147560;-123058571;-266537891;-1866155802;-1563756603;-1826733483;-1059996378;419130989;1782966230;1636272297;-1624058849;190592585;476937638;1190816344;2015664120;798177305;-1563851590;1385158262;-1647948334;1066468592;309027985;-1457043433;-1767526612;1281342730;759003708;1733253010;-1590674970;742251740;1771954357;1031142638;-1234556463;-251040469;3832501;430983255;665066306;220402938;-1633645;-519478078;-51967208;500553371;2004066332;-1642548633;335114448;880333832;-1990463199;-1052319799;-2059442515;583019527;-1248714816;-1946985592;734394737;-1246763883;-1009057644;819530901;-1586448948;-479921590;1690751442;-377506491;-196150107;-1729591930;432821021;132272507;1480718994;-14317301;-547595723;-886014116;-1377494646;1220861112;618207246;1206386072;7139440;1253494340;241520718;1339100;-815301917;280321144;-850283151;-915105260;-870835154;768750813;1078207054;359060041;68749804;-643549124;-576919044;1645923005;-432760241;1097305632;131186218;1068139192;-1857942337;-1123340871;-1258348560;-396484956;1444575502;-962343913;190986769;-783612957;1389062543;1352639798;-152592412;826652501;-1628384324;-2004469206;690772989;1000714759;114687482;-1590820902;1408797297;741642346;1022080525;-1547253155;-1672236872;-1011989088;578467470;738068038;8253919;1228523069;-1970973713;1207890885;845550233;-1872217693;1063053260;508010948;1680914589;1984451542;1581786398;-433242489;1810518113;-1424680914;41293739;-185672761;674536101;-637119893;-2022691493;1089832817;-93757051;1668166196;-288674240;2042633671;824489847;1105990477;-276083881;-1936675200;-2147062361;-1900441225;-197066104;-573610441;1005660389;1867166139;900377285;1226559261;865252465;1988668411;332047881;-1743956747;-1501841700;-1950484992;1554457397;-432817680;445672012;-1141858710;529279351;	};
	mti=624;
       };
       RndSeed @[8] {
	name="RndSeed_9";
	seed{ 709250600;1353203145;-337090582;-1783910416;-712840066;-2136919466;-741093590;-494097356;-1825939269;1854548486;-1489939507;-84355146;1905260405;-1922714415;749355597;146955632;1186975040;-1756707914;-47805930;581744476;-272067744;-1128849116;1694984724;-1773856928;1047768002;349935011;-1725217687;-1734590126;1573491884;-304923298;-910624049;2143690395;1036025058;569653067;1040053177;313403680;848845252;-1568584071;1499515309;584097027;-278295209;1049802317;-1416879733;1660587064;57856937;-449711398;1469706443;-1088546335;-68177473;-674055331;-1275381176;1146460517;647497896;-1288351107;313033553;1308174380;789049081;1641253238;-1018762451;-719820959;1302477798;-1973337760;-972407320;1922707702;1170899123;-2069755781;1371871487;-1810576775;-101927477;-1608269779;1698494929;661577559;-1281053541;1149565350;2040651309;1073099687;-615006161;1353342377;1861082006;-1015254558;-1036953835;-1364450817;-1308307933;1562115160;679817329;1116706282;1464723725;-1832362477;-505727475;-842280481;-776173530;-113212428;-1395376177;8184126;1451297748;1594992744;-604593459;554727847;-1540661691;-2105462426;706937048;-2127893091;-2106403039;-1838834634;1478128876;427685610;-264526660;-940886330;1535052069;-2063671391;-1078888771;1825116362;-1629666425;185651434;-875190588;1157385206;-2081282073;1495681742;164449057;-1256567428;-850722514;645106746;1329028444;-1420190932;883414946;-703871641;1426285810;-1576935586;-691446836;1446772780;520038211;495081714;-324756994;1698965078;751349721;1815577124;-1852889567;-673724584;2035178097;-2090885445;1673109641;1927093813;1775419154;-974418418;-2091974479;-1636822480;324137036;453016207;-1766858241;2101317222;-971420103;1315891065;1072204528;-1247198903;-1396382159;1480924602;-2075472285;-895724062;-557167773;-1211753089;291276785;-1042768970;62671883;-162995206;1955672801;-1784483067;-695623319;1838442873;709285120;1760496041;1980872690;-1676435830;-917744556;1184945664;906098707;688786222;1825048534;-503437436;891148277;822825308;1904563712;-358057958;-1855208557;-1876704788;-1234837090;1999798085;937663118;-60557119;-1193347258;-1255738735;-164405315;1723036853;-1355980860;-1953382433;-1959200781;-574567464;-1591369429;1798735602;-1352644187;804810410;-1629314086;-1811858175;-46617095;1984786029;-1315414680;-520055393;-57703590;-1789365268;-713942090;1691077690;1313875737;-63748789;893771324;-870135167;-1985513440;-1890936767;-507580857;1907516845;-1417729610;-899102497;1020853160;-505400795;2136219612;1548277776;2027247765;-1264638139;1975549669;555095255;616450231;-2063753192;-1955326680;1883624569;428411968;-1067444695;-1528088196;-1392239199;166784315;1000287284;-639613582;-1933844604;-1251481906;-1944765587;355982013;-96243068;-359174345;-1834109831;-1485109123;-1165012462;1273360712;1691829190;-895206019;-1373195855;-901650533;-2045200395;1576322161;-1379831505;656260289;-301612506;-399612261;1566429947;1220675494;875980008;1473116302;-30369678;567778973;1346279930;1123488785;-240682149;2004730564;-516143674;578876615;1162875538;-1198718961;-1056769230;1223775335;1143661393;-809402460;1983429880;944951379;1080925398;302969067;-650129200;-1766633639;-105708798;-784156287;791135079;-1374472255;-1061069810;-2031663295;892795280;-47282446;640235320;1062715964;-1808417071;2014852453;-69495397;400055840;1167868873;1365559058;-2133805398;1655699828;1243613526;1493450625;556306095;-2077953221;-1689487442;116016142;-583378759;1721142422;-1765587000;721186280;-306149953;-861249436;60827868;303160326;1005913497;2061047705;1785636917;-1088933438;-1284808193;-1430712559;-778494272;-1103855823;556628834;631709934;-1710138069;-338447501;2107423863;1592492502;-1136178660;496782624;-271544597;35293908;1150302961;419541502;-874633083;-167791570;-829871086;1160412423;-103445839;-1151927410;1724066705;-297778906;-969309712;216027447;-1938326772;-1587541024;-1133599867;-103103329;-691335447;-1988223568;-1534854503;-949234809;-631760779;-1122841104;1648346077;234685232;1104606037;424801674;-930956583;629695338;1005122619;-549916751;798676133;275067781;623018470;-1284810964;88278165;-319320775;1289012051;464909004;21755887;-969885249;-1463622495;-441159483;-839617131;-1820742746;760708397;498891067;-858167102;1948032673;-158452067;-2019025964;-2028829971;-1696034613;1421586894;282980141;-221678780;-1289979001;1694099966;-1899247071;-1333232554;-2035416404;-1126683089;1899712075;-984514883;355250306;-257607977;1263671090;-869108818;-1249232431;826260688;1944113058;2017798114;1356216611;1896201727;65201356;1183412755;415474866;288439763;-683126567;-792555107;537068274;1784786199;1103368524;-726136320;-200503345;8186141;-1512866029;1088961624;375026113;-1059705910;-1335043853;1973522876;-1746426311;1442261488;25986751;331768326;769909770;-2076683361;-733805665;-2069697989;-147985619;-298096425;374722902;-1103323487;-1723542781;2115619354;2014458205;1159444227;-236107902;-832028514;973112491;-304030670;-521922031;443542743;-2117566063;276286398;1434325430;-499585548;1838158645;-896898745;-1949504104;1245129095;2007374244;1740926176;-185966707;-1837321521;-427998805;-1557802733;2118424193;-1558584755;-1216638471;1723657430;-785808989;-954284559;-2001691572;-1619694951;228393979;1710286556;-1348314105;-831521584;1312861207;2016783495;1714079928;-1118096424;-424599330;-259834354;1314353663;-93132523;-173228658;158482306;1922933292;-13233500;-1763590969;-1703417698;1225671538;-790746810;-2002831583;1632075192;529243367;-413300722;-1978620915;818266840;-2026669786;1662980387;-1956972966;-2061481303;-60818839;2143717317;240612936;314979421;616787879;-1720947238;-1351094224;322602931;580605593;-1294987944;951087230;88199603;-1944745827;-1695219782;-578134632;1726735144;1505792559;-562672599;-527136618;-1346068018;264110978;-697960879;2068451938;-1933230568;-1027380148;-1237777354;1965719184;-1720284606;-1014969010;684340848;200895552;706082641;1262218759;-886038415;-428355314;1065382198;-1430482332;1334336085;1097767228;-313582550;124194631;1908869150;-1279799977;-1111916122;-603132974;1510139028;730525161;1417711630;1748623117;1082551775;250030266;722771335;1243637609;1240954415;1075986510;-1206474668;-1553960424;684912749;-1931595219;-1345456712;-992444784;-13918930;1267538417;1193061857;-1468171374;-1047408125;636083252;294106809;-1771890125;-1049325428;-62746205;-1584261543;-317290719;-1574796123;-2060667105;-1234319954;-1345582310;-82298185;-1830453436;-929976609;-1341015282;560740863;1152735967;1296017883;687451976;-196628049;705832740;-1843939459;-318284187;305583753;842069849;1361000810;1828252805;1550055011;116959482;-379685133;544956162;1200787485;1823856992;314224282;156061464;1417416399;142612382;880730543;-1667320987;342878462;2059984018;-78728356;1067687385;-2013959684;125682070;-732911473;-1713803874;-575357713;-337848448;1712006164;289897391;1210938738;-2014387257;-813216734;1225110639;869339089;-307685151;1211483543;-217170788;1063781418;	};
	mti=624;
       };
       RndSeed @[9] {
	name="RndSeed_10";
	seed{ 709250601;-1129330898;-2061229986;-1894383537;-1208855707;-49412440;-1429789571;-2037228254;2004147624;123331766;181838296;-1338871229;248700081;1713556194;981632669;-640409344;-1586454209;476332578;31476092;389306879;902428847;-275921888;-2116412187;852887098;995852026;1390600891;-907084420;325843510;301636970;1006884079;1627384169;2058862119;-95790306;1138980754;-859776991;1018001293;-2042257467;-1905620824;-1479482056;-1129547255;-1213658753;-365976710;1737900007;230902761;1359717401;-787442267;2066407596;-1428014736;639413290;-828873021;-530757134;586622280;1936539036;-346205146;-1227030577;-458186472;-1952185633;759719530;558178828;500357879;-870346065;10938905;-2016363237;37485596;-1336315060;-2128528377;2069781307;564267045;-800324643;-1625205541;2088606435;-375452303;-1072672702;522810094;106804784;-456617669;828392292;113711809;1629869939;-1873280439;-1073739033;1108627525;-757854426;-1345861908;466147898;-493018313;1715582938;-296829762;222075881;934818886;-2054154760;-546212355;1104837522;1280928860;751863311;1147923274;-762578953;-1332320347;1918911557;845108023;1571111959;-2009226477;1577873179;-1005404247;1503500410;-1054606352;-592678327;-1321684579;835005223;-923605552;-1852336211;-1966833798;67470024;2090967385;881115178;-1134802171;-1245619913;-92762274;2111067431;-1570705803;-1457732501;-933974298;-1086026285;849857776;-1552921812;164317091;1610514125;-1730727173;-402825795;-699225481;1694585926;-779010170;1106197757;99216369;-1541075045;-1859712796;1853069638;-1785497460;580161168;-891859109;-1949276604;64868395;269952133;-682650104;1207899623;-1952073137;1563473395;-416003315;690887450;-1587045417;1058568351;1569566290;-2089471401;-780183262;702010271;-541092522;-1093441499;-1187645696;-1937209752;-424557967;-1907443302;2039058841;-1386690150;-1961762405;653779713;-1454434038;802302158;1533171693;-1504838460;-898322233;-671178242;-1508815236;357000802;-1079781545;154366519;2095873890;422526399;2078774284;1492344531;-2055156851;2108217119;2022567307;987992616;-468184449;-1329092700;889649975;-1162703763;-526266490;8916277;-1120824410;1712194674;1728990494;2143487227;1618002275;94879340;-989205153;1517609488;-1752216966;598383134;1033559197;1920208825;1379642465;-1754635606;1046271251;539769931;-1480266396;428294156;1140240779;-400759230;-1033461386;1696092411;-1799111307;-740331577;-397214423;-1235264408;989474985;-916544379;537698231;-126553331;697852769;-1711988959;-1990982484;-1385629820;-477471043;-1854074922;849064837;1327694171;-167857307;1263033890;-991764556;1765552921;1103102303;1661851902;9442436;-1821459202;-390632361;1604497936;-688760158;-427496589;-998255585;-1951028228;866765351;977051989;-1315625860;131126442;1608049159;-1750047916;1025128421;1183095633;-929097847;656614508;-833672297;1687840352;173755970;-290114808;790300502;-2014254098;-1815977699;226683197;-2145211628;282478258;1463625535;1607641724;-255514280;107480303;674683476;-1597564882;867178087;-1320749393;-1514346418;-437497078;1072403612;717037212;-1203597155;1510024909;1070300047;-984594561;324112641;-1462845573;-2041033516;-1546725498;-426988499;1525058880;-2024504128;414331814;-1921239141;1559351675;1188556865;344197728;-1975158527;1312840273;-2014809421;-756221447;1461414599;2103383876;417012832;1463915272;1439552694;101440605;-31017252;289177127;326215056;-1000316162;2146137088;285232789;-515916038;1076402799;-1414804327;-1484542629;-668531118;-2114070485;1458780772;-1392961519;950905784;-1619904302;1445444427;-1746043026;366482137;1346671067;1376859713;311601280;1804139457;-1643834366;-1682643645;-304792343;1428177815;-83889804;-848038854;-704586555;1978077543;-1371310968;1103156669;1268379768;-725900790;-1845706789;-1504587028;-1800693962;-1911980843;997085477;1341510124;-758208299;-1447222333;-1777834629;-2115187948;-793450746;-1809591470;627585002;-1960500563;-1946200217;-515536586;860848199;1072995426;-1042274806;1208538094;-999324243;1045159177;74909425;1380169594;-1706739731;1137113522;-1861857273;-462208926;2106806447;-32639983;-140710266;1311918310;892035985;392028836;-657444828;-1191649324;-1865165088;-1178551651;-1690191569;2034378038;1971593001;-874204097;324221220;-379203411;-1365609440;268698853;913800405;-1262141818;1172459410;-538701442;-1732129583;-1730692160;-1159338228;-21190647;1184999286;682017400;958722782;-1650548451;-1884804669;1006093230;37376816;-1646820485;1068605769;1701033050;-1369973643;149334914;2102935002;-1041785864;-1699291495;1636026298;1493033307;456725527;-1981399639;1921243406;9874307;-774912184;263046449;1047332592;1783246412;1646689022;1106902841;1807657655;-24198802;433104546;-1091800692;-554709847;-1714898250;587726505;1544481619;1427094273;390580392;-162786319;-2041683420;-1501753175;904927267;832127612;-1217423206;1675136423;801618478;1001460695;-1889803131;-264345098;1896279133;-1833140735;2044875749;-1335091541;-1716548763;-676519844;-1271292363;2011683950;1048207495;-1147054592;-1883503992;-1672553423;1750674655;-968653993;1630979558;-2016037658;391799736;-267464355;91613660;1991246227;-1488600478;606802345;420506231;-910904898;-543996323;-1705700637;-623780461;1934523295;-2022681306;282975493;-1980571189;1613145888;479697625;832387698;1751978704;1104234316;1708415033;-645609487;1879139924;-1734091164;125130266;253027359;1915459865;-1345765289;-1406738327;6082328;-1726378406;413811355;252591115;-687041220;1015978689;-597993204;-1776538669;-1421400994;1946850870;-1039027042;921651421;-193919458;1403514975;460727557;781142505;1584716766;-455206931;904909017;-531593071;-321256049;1439702578;-1834338538;-433229604;1265492212;309321635;105281610;-1305276114;-1433775015;37027045;-1065265832;-483302937;-317020939;411352336;-1594087085;-1026578439;212341159;-548251671;1273949017;1620898752;849704494;717766704;212534523;-1946137581;-1521869374;-1335263538;-1777453941;158797085;164082562;2070439516;-1753011772;-1534823630;808854533;382067983;2064738306;-90397113;-257687827;346223616;81675803;770907587;1345133324;-23026881;861897931;-1471346377;1019543818;-1500658412;1073842641;-1744064204;-554904973;-1323501482;-1684082869;-893289739;-1378014409;2127850259;1016652357;88814693;1618524934;-1125545231;-735781106;54851409;566685222;1408781616;-895701112;982492939;811519116;2024907122;-1683996778;1430997916;1064754218;1658673356;1601486876;-1599450451;-1606727608;588849520;1977557871;1258347174;2062198052;821491419;-1618503254;-1789752948;-1072741045;923918254;-796696595;-1716700882;1965300901;-2096164098;-1694540873;-1396306507;-1149543808;1286097304;-587797332;-1629615525;1435678830;647965981;-474197052;-527200553;-378351623;-1284580872;-1959212039;-898707617;-1506538075;1097385021;-1929541113;822551381;-49516570;688698551;599408018;174812922;463246595;127559569;-1571915880;1143774246;2117827784;-658583885;-2035040809;1649665137;795415193;-40420921;1055895743;-2090863417;-63176410;1145848583;522103245;	};
	mti=624;
       };
       RndSeed @[10] {
	name="RndSeed_11";
	seed{ 709250602;683102355;1651930369;1884891395;19742670;1419864651;-443119304;-932071602;1863353961;910864145;1486760639;-294089983;1023470038;995739515;-829847915;190996285;2037528609;318325937;1861341927;-74495279;-1840191762;-437033167;-442533680;1096324694;13164395;247294032;-943917142;-4839736;288158003;-264997828;-1734306823;375960870;-599077346;-795093358;-1119469481;-478683476;-817921489;-538187903;-1014699920;586825862;82651910;-1832767609;984476835;1991677818;-1787324749;-1029034750;-2042606957;-1791228828;634540654;588866455;-596567611;-1143725743;-1916038925;-2072500150;183397534;-2004653939;1588971427;1929082147;2060609700;-2021222828;-488155606;-109056150;-1099455061;8047852;311502172;-708445811;76182344;1766392747;1852468310;777538968;-914033346;425551448;-368674560;1583700344;-114487801;2103618527;-1594254110;-510737235;760657652;1003143827;1864658767;1276291095;-538306816;-2101301374;-2140095020;2062314435;-817932832;-970433050;-177235791;-761495405;477874474;-1281107987;1237063847;1961922523;-958764192;190404974;622732998;1594835583;-1525896680;-2084763995;-994836665;-1719985607;171437229;1785984424;299261205;687208114;-1595042140;-907721239;-79376450;1602034430;-255386103;-1746389919;1700439679;894377511;-1502952235;-514344890;-14966611;1000702747;355675421;941642216;-1913816832;998297667;1595606505;86670595;1975446955;-651575665;1246042554;-534431162;247589561;271424638;976235576;-1842124133;-1467748383;1789075476;454682063;702313010;-1267478462;-572298807;1524356924;496406684;68061720;1212896261;-775271902;-111023980;-650472669;-1833423823;733330353;1308345960;979532033;1990346490;2061456541;514317859;-988782745;1312696077;1119802454;-145926674;1241103389;-906611799;-1855038288;285463769;559553341;-607427406;-50826377;-604331673;-2080624360;1484540391;2044673636;-566580352;126076503;-1669148676;-1730347552;-600040235;553641754;1096357871;-2055811180;839986397;1741945057;-1259269871;-524031951;-169124243;-127459302;-1651766382;727752838;-1095693419;3039819;955509584;811181898;-655648019;1331658402;-1511575028;1952595524;1308131064;1137465853;-508863187;-1313119768;-877011947;599104370;-1628154177;-1812177321;-513821360;470873479;-792257012;336454581;-297159628;-1777956481;781394974;-1020047708;317089714;-1337775094;289974265;1465747215;512673625;1987201009;455463557;-784843697;1502115539;841696178;-467011565;46100266;1244288621;-672668296;1923702116;160425655;1262417426;537674079;292201052;813255470;2136492041;-728189940;-654044720;1290400805;1760597787;1098811434;1794620640;-570888529;-509331769;376733760;-1235690963;1226456185;687739975;-1492582413;1662776326;-1345321291;330012198;-1189702670;1722011301;-21869654;1148472228;-337631727;-1504925677;1722181807;-764515423;1721248230;-2117720032;-1349121944;-2087187247;-1482753217;-791165678;1829624247;737364945;-918109319;400386599;1127924073;562493199;-1981841165;868604190;-435046432;194709658;-1074081842;-1245960055;616260325;371036776;1843162136;-830535698;-1495861613;-960896696;-1376516437;-1284107582;-2132924714;976799419;-1377993761;-1095359414;356440450;-826252443;1189269082;1617370628;635602455;-1966983374;1886942992;1152783318;-883629067;-1439262927;81326915;-291777132;334107833;-1115672796;-1361579738;1396336733;-1033344650;-774620844;-1597296769;889102974;-958559516;1158573394;-126382609;1938967373;35086894;1845910361;1858872044;-441082442;2113935007;141917069;307442905;-1073021994;1676499267;-1170830779;1668648511;842157491;1565684701;-326339829;36744040;2026260809;610955946;805451861;-2024228915;990334192;-1935815690;1880296587;-117453382;-837604282;-500931197;2033028299;1087809278;-1727571224;-2081154656;-1133260743;-373441641;1380529845;336915030;-838698175;-776014754;-609800442;-2042479793;-2064081992;998374330;1679088571;535247804;1196830343;294654522;-13747137;1629348106;428191158;598601774;577397127;551205541;-1162808964;461223450;297976743;169644361;201614388;-993567252;-1183451212;-619371976;-1840966222;-2052276260;384270851;-1073813603;-1830913494;943561528;115816073;-1087973761;-863599164;1260079095;-83883133;1571556086;-2021686294;775828480;-195132039;487519388;-133038329;699318800;104669645;-1781527457;71149360;2098964336;1755023894;-52114539;273783217;-79143591;1660420103;1275410916;-78748192;-1482051817;-1707650606;1867225242;-306501198;-1006752415;-281060553;-1170616046;-517927713;-1410346916;-2035186521;1619567531;1730448805;1354016584;-473230750;-124048677;1796047055;-471592738;-1475613238;-1888691838;-925413093;-822028268;-1147498064;-808337704;-656375546;1489081753;-728342887;-433471900;-835829946;-285350691;330832699;-254651667;1037965197;1679081801;1083689745;83799802;-2064329651;-1671492649;-1113085514;551766450;-1208330519;313855847;645805140;-1743283498;1324845911;-1198194526;343859413;-30166337;674243043;1314184007;-675481001;-2016298786;-1347441529;658849589;-1550299482;1672006770;-1037617634;1278795825;-474340175;-1896759812;503244025;-1930913535;-2068055308;-1674466604;668921397;-404661839;-1597593853;-1161400785;-528839028;1619904311;839221275;-1837695115;-1477805374;376647568;-1932143199;-1691974111;1123068066;-1817787101;-802066214;987015283;590414390;-201406682;-1441111950;487849482;1444713933;1845839704;-1162688262;1960706998;966092818;488747770;-471242621;-1350386590;-603737149;-1293439836;1364587875;619266960;-31475273;1087478252;-276000406;36016471;-1594169282;1927921048;668840010;1741957408;-1935809292;76348670;1375060007;584263408;229953187;-1788886205;-250817638;1283153491;1583618641;1203975048;-78206970;1027471603;-1504557862;-1489714380;1388506187;-1520380624;-39198535;-1705036446;-792694559;-964461268;-265843570;1034742437;-447880674;-1870218121;-1556743888;788862146;-1368718189;1637967935;-416722815;1525700438;-1762589088;238024888;-1307600217;1886212649;-80686119;-23510764;-236126426;-586254163;-1442005829;487880723;-1176859498;-1870615428;-1098547761;-2020058885;-2121835176;282263710;988139123;1632305277;-650277109;-267601848;833739448;1681900730;-225594646;-1224390383;213254564;-1507103782;-557832609;-1831182220;956380855;-691828899;-1171802047;18648987;173776212;-626849710;-402873564;-1542635629;-1187664026;-926500698;934946892;-971598800;-845363884;500591753;1231889732;-2115722383;-1764619880;590820860;982526631;-532335329;-931270071;1482699632;1838335700;321089865;1771750670;887998509;-1758785276;-1354502238;-1905644443;-1401444887;-1066648834;791653657;1763749414;774411949;157354380;-197610872;934794788;1746715266;218487550;1785943686;176186516;176612534;1620550689;1065935604;1998725273;1209022030;-341920126;1322257469;340062725;-1629803693;1373467216;448951633;12035154;-1516128072;1774153153;713166624;1229462017;895239266;-1532137715;642046543;1042770576;1199840566;-347932646;-52411067;913820935;690857261;748831276;-794711608;473080452;1519305858;-988633826;	};
	mti=624;
       };
       RndSeed @[11] {
	name="RndSeed_12";
	seed{ 709250603;-1799431688;1070123428;1369199031;-564092206;318313850;-686177496;550044414;-1093002178;449658805;-2080047245;1791180960;1292216465;-966749987;-1884162652;-1388986227;-1305837701;-1857352754;-562048114;1971317684;-1634804867;-1773367248;1321051600;1128678540;-2126282567;-2002592544;1923356484;-904651948;-269395857;-847401287;-1808959104;-159022487;-27447822;636492086;-307111824;1663365250;-1176633645;1168794010;-1179552435;-1007448238;-1107237859;-1052272796;689298125;1599211532;906437197;-1907966578;1009562730;1360390145;248285232;1155754785;1340957650;1373195634;928192915;58573364;-319327558;420758580;-1964327748;-1093655249;-1405173765;-716374408;887962051;-1378474708;-1683732124;1558350717;40526892;818483613;-1861486541;383919256;754305084;247733233;904527707;-562662866;1125130505;1581404273;541437050;874534509;939355725;924760494;-1405132812;1192591965;-289166692;-1478858740;-616789032;481845434;496481206;-1912582877;927733595;-1862145474;-205552124;1199218716;1876668619;-1060185587;-1565555230;1191489981;-1273250934;1728365831;494662078;-1166602665;-2013846293;899760464;-37579532;-2042759976;-932166552;735396254;-560827970;114296058;-1651392244;1513335025;442111772;229448313;-842714325;-45770953;1019968500;894008245;388279259;-663944998;1248098065;516590021;1778763823;-844457827;1145881806;-1119523548;-673749384;523256322;-949281466;-389056074;-1846550041;-1127568168;-1536369534;678657793;-1450203929;-483550244;1619121791;-1804267973;-1504043517;430137324;-1153555292;699091975;611696205;359025132;-1000442200;1769166084;-1037879161;-1396707165;1608980757;-1574659723;-187548795;1098265201;-1246767420;800699059;-1681241035;52068682;699112650;-920455605;747614978;948679269;-1906806923;-1127503472;-1256781512;2124197505;-1833740000;-1553769205;-96696785;1491237887;-777528870;196940866;926830768;-1718352361;-717577231;360526115;-1784340871;550623794;1340987494;813072464;-879005634;1359932864;-463005995;801016095;-1587105555;1287435774;-774748849;1142883249;-754604762;1721627984;-439278931;-237777569;788152838;-868531431;402678782;-1852022285;2092146131;990946969;1357421597;2081723341;298482750;-284019911;-298958682;425381598;-375755684;-662398654;-14991251;1715292719;-1843207440;-1613427643;1552996303;-683384045;-59857378;-1789391040;1320572890;1844567352;-396441265;-130869297;-92762032;1293048980;-1612888929;-1739647032;1232436618;-296293456;-2108503687;517558626;167284358;1627386299;1366092096;898814084;404678900;1569226021;-1915902954;-344166201;1171087928;791102050;-978214000;-1935395610;-11345188;1597364708;-216169149;1538577195;1904134782;-1092822008;-1154864416;-322707943;1171819314;-1018022128;-1804736911;819230546;-756287922;-1241357738;903594010;305575225;1998586229;445884349;-751807605;-679690845;1964077340;-650828178;746815231;-70217062;-2048083875;-1549232772;133523896;-43110757;1502591740;431041494;1849021044;1712301616;-613168291;-1005155553;186310422;613862073;-1190527735;-391595676;-1684388431;1594837934;-1772977125;-1611759634;-889076434;1785913556;2071441949;1934508577;-1373423690;44060443;1632741823;-448747761;-1388620586;-627446593;1737425736;1194155498;295031253;-1237727448;-91812174;821855734;-385122000;638797122;309896750;-842387637;252326030;-1629280467;635411891;1887634376;1731596407;-497179207;1824058766;-1358937704;-244626192;1244162062;235542043;-292803368;-1085544807;-912789670;-277409711;1005802383;2074116001;-1476461737;2003609281;-765818119;-1225875492;-423304751;759462678;662525675;744754933;-735181592;-1657359113;-1675656470;-371929398;-1759631472;1863368670;459475776;500740486;539541797;1668547041;-555376983;-517565348;-1674026554;720140192;1085264749;-176736534;1892310076;215878241;466551446;455625856;1599516627;1745404206;-685809696;216420581;711686320;-858992952;-1291502992;510988884;-1689571201;-1861744723;-1911508888;-2048633552;1896570905;1888600792;1253507582;205406717;-1345622220;205572018;239799455;968233761;-1493617044;594893006;527714479;1955550581;-143406033;-1104733496;-431379169;-730248838;-897925332;-1593403909;866807214;-21928680;-1831512038;-1560765716;-75464869;-1723836626;-683871789;-450643832;883372880;1738346506;47855826;238997078;663580523;2069510581;2003179907;1232905162;-798932072;-2134204247;-929437702;-441727039;-654662897;1098367298;2004950006;900217083;-1531326576;-1302198236;403934857;-1463972199;1314338740;1999362295;841105565;476218497;-145862282;296796603;-1031371942;-557091663;278285775;1872329537;-1992105513;-82765919;819070595;435007049;-49687192;302282707;-894946596;1873701529;1896048535;-2048842290;1738675997;320150446;-52032695;1775439830;-694136712;-1884383955;100664370;-1784779934;1050066569;1596948151;931554681;-1499280535;-1862040092;-900338836;317541242;-44494126;1324173094;-2067664107;-2059585338;-1847309560;8386215;-536039271;-71690119;182121434;400023739;-124993919;1862843653;1454749776;-1416883534;1729335598;-273452982;1994481549;803250173;891848083;1400725442;-351591245;-220746955;-1339001836;-438856587;-474301866;-1162476974;-516179110;2135067880;-116831559;-1128397009;1460333455;-2009076011;871058339;1019483168;-184479118;1768014184;2045870401;-483180523;421400708;592390635;-1793634673;-317295494;-914377065;1176780351;-313672110;-1698926382;-1167600658;1993599483;665328514;882470443;61504473;-1653014656;-1241030098;61294913;1677373835;-1380915367;-367526961;600474981;-1039355965;659495083;-1491779485;-109227726;1664828227;-1943151367;-935885833;1060152629;-686977829;312486699;1652034795;715936839;1359495417;-909222961;-1608620684;-24891513;607151374;-661758335;239918406;1537721499;1235025088;1668940580;1020595353;-402990242;15225523;1993305506;-1527284141;678768890;2085101224;-1015313484;1132728379;962556651;-7005247;1006421909;1117551829;-531188303;-112200888;1892360614;-1799903245;955006246;-1778943984;2053243693;1653722736;1008201130;-1152991192;-1192866647;1854981263;1613728799;-510634000;682147834;287738302;1344079891;-180104392;-1167463578;-629250924;1272152244;-79321461;1448181195;1392360662;1712034296;2105399907;758357201;-369116771;-410268801;175154710;971853529;-1916715319;-1285199036;-2074752308;-1828502667;-878358749;2037406161;1041482050;822448957;363445829;-1297219474;802420946;-1266184431;-1299079241;467591586;-920864476;997977502;-245346414;512425842;-2086089672;1417256737;1141107168;1054585094;-1114435680;1137762093;856332960;-1974557851;-1840670487;1816926718;-1108821277;-2131024370;1690726662;-501490;-805430931;618522803;771333101;-144221232;1924147087;-2121491625;1995229147;290751829;-1828316707;240750160;984479718;261547541;238880161;1501389790;939769941;968581348;-469548976;2029637148;1218894031;-914634331;1212835550;981528412;1887088046;-1692258450;1540457472;1632935882;-1301041027;-1198417022;-30811160;-727611104;-636233671;169958221;-736084787;-2098971213;619123267;-70970914;	};
	mti=624;
       };
       RndSeed @[12] {
	name="RndSeed_13";
	seed{ 709250604;13001565;1828518067;1170432061;104403888;-908200843;-476145516;-1923349862;886595072;900404745;562659991;407131294;479195234;924600503;303275841;1757322676;26023289;-1082770994;1931934094;1893137534;225088815;1026294432;1109698870;-1954139702;-1727157248;1065348835;-796542295;-1471307987;521729191;-1000938240;2112615757;-1183747301;-1844852227;-185653060;1348618877;-1442332913;-274246331;-158262589;-1445966362;-904282341;-585876320;2044995448;1349669863;1061892073;-793995239;-768349073;-1091169590;-358977257;-1124183788;693421023;442277421;1181449460;351955421;1786644838;747820249;-2017125676;268049574;-141810761;-1823380930;-392362521;659969840;1544099373;1470581658;-1850488986;1432235700;-1206236502;-1628742518;-1894233621;-981345743;2036193279;714024316;-1142086093;-984135011;1152450207;1885930144;-1975700784;1175809830;-1660831312;166495624;-2072086793;-1874785287;-252703400;1196947513;-1559042453;211949761;-730198662;-1884548589;1862613516;-1417945991;-600256544;-1126203415;-1022412014;-451582191;1058557047;818076241;-1477674156;1973923662;1193439628;372654595;-556751214;1265389721;218440797;503848471;-1209061766;1988332992;1963603598;1982008789;788982031;-203687337;923580305;-1221065309;1468293620;1767490329;259641577;1312496991;-174332791;-879426330;-810779698;468225367;130306762;-1672952790;-691614655;-1920210812;-1689488551;-1167968669;-2139071038;-183452354;-1920250224;587211290;-939303229;1313415746;973430770;2081774846;-2111100896;-462485520;1186213478;180121131;981039744;1845220618;-1599409950;-193402644;1524944344;2069714987;-1054325983;-289558790;-2008528434;-2003351026;-257645745;-1821632112;1314076975;1756442044;462172456;481676640;-1136498823;-2014271711;-1051153302;-1088473335;1091738356;972505159;-438084702;-870100955;-1461914209;-773264237;-1351719565;-1125220551;-1966357012;-1596754548;-1137156179;-549754957;-222488295;-1631596052;1854419345;-1724801412;2077685347;-94918824;-1532904810;179556628;-1688129131;1610833989;28663687;1298067447;-1399237949;-720506917;851589359;1503747587;570894723;-1465942935;1802394098;1783728283;1216040831;-358429836;1969092018;-764167329;-428791795;2037795912;478030480;-1401037932;-1320883981;-613424933;-1201713665;-1673450855;331334384;-24487558;-188346744;-1715920733;-1998124718;-1470988962;-886722021;1356209224;194722462;-387010776;-1877598262;-298544452;-1266737872;556025744;848055463;-1829724741;426064854;483402312;275648323;275505483;53347956;-3628894;-1736144540;-476328930;-42070702;17996503;1360340662;-1844365801;760124462;1653544204;-2079177720;-169594150;304951686;1040138440;886544339;1679020587;-1905236609;-619515841;1923933339;-54355022;-873453882;635550123;-166214550;2052829025;-1566141995;10787273;1471954500;712671025;1992058958;-632262875;1061236985;985437241;826801274;1457121056;512743940;-1333188460;1894730287;207414056;-1404172341;-1083005871;1685078212;-1806304321;667907992;553814016;415738121;192578199;1566135710;241819591;1794623888;2107121731;-1340732135;91463607;-1726483644;1720545712;-277048088;1581614283;1057193671;648709273;-1368706444;1468403622;668306684;714570886;-820914183;-1636499266;1991370569;-1142044538;-1866809037;-9932171;-1833939025;1676543331;1266127565;-682616928;951357300;-600986134;1568034580;898789745;1200831422;1044957829;750523556;230418912;-529783155;1630483764;1804360728;-1671907315;-2048285156;300325128;118991195;2071233819;-1410765193;543699551;11122610;874626162;-565814221;510136362;-656745523;-1734609022;1903961789;-1780882070;-527160505;-998738156;-253539244;2011737749;172365223;-1697780953;1343722462;1451798337;343303559;700206731;119562528;1268806378;-63300862;-999870031;707583623;-1334113391;-826131122;-1366596175;-1034884112;-271113423;-803953139;-1754987814;-45631347;1123143516;-1192585720;-786526902;-2086088666;704209806;-1500690847;18661739;1103598484;-1496647641;-773671688;-131548313;68580309;-1481920149;781005008;42177396;1610498601;-1613790418;1078283715;1782743282;-1914442680;-1570384740;155677121;1834429329;-1163640515;-428771767;387401377;1801586677;-73746251;-438417600;-609617438;1643118649;-1252651123;1513139169;-733040425;628701468;136807813;548330483;5690202;1490193918;789085720;-1401120522;-642847293;-8417728;944372976;-132301774;-636093992;106874859;-674323396;-869956255;-1663233231;1021566887;-1977049748;-196609040;1306555242;591318467;1748601468;1866172895;743912485;844259625;-459388994;-1727957981;1033862040;708320396;-2025967407;-43044907;340879109;-2124262511;-141974120;1043024577;693946560;1984558428;822580302;1551712868;-222936968;-238664409;-1841984299;-446652043;1740757809;-333960300;-100793544;-1953572115;1393510642;1974916231;-1601728377;-243911901;1792953675;1981225438;-1123119704;-130818112;294364318;-813530618;1614084778;1303996969;-1425126533;1062635889;-1161251766;1738648094;564901618;1178906930;-665635368;-1113361375;999853706;1161697326;163165000;2116896038;1508845858;1549006735;159230663;-1637228219;1178984902;1071027271;116621512;-210446162;2110329608;-1933355691;454900764;-864570154;-1999415596;-1129067974;-777076251;-1795123316;658033365;1170670809;1258586889;-132187142;1759554576;2100297097;1632948349;-848519486;-266932996;215546227;-2059536584;-178874948;-846901962;-463743803;-1769805317;-492072421;1569160535;501316302;-1202736345;-531399557;903107899;385824043;1045495516;-1235465550;-1590580905;-1450619535;-3990712;-1264457343;-1871888998;1077389028;1250453318;772194289;-1325878012;1714004814;1643886364;-1692875421;-1005729224;642211387;-1020083652;280189905;1100813420;2111989241;1017902289;-745377425;-2123526761;1813027525;1891366225;-2053137778;1803609915;808404450;-1875212757;805429551;-293011314;-315380059;207929219;1322363829;-276294645;1067462960;1825970681;-635045662;491953104;-911619300;260684872;1561449078;921352706;909407962;-1371303917;87552455;-1880693610;108487800;-785982099;-958972804;-574367950;-624680595;-1756950401;-431527829;-874259677;-553019972;-870036104;-98146651;345986973;168531985;2137725398;-17415435;-38268111;977491678;236983739;979806189;-1915152472;-2114563526;-139040191;430129204;741354159;882999351;-422181152;-1873464131;-1877931894;-1878972456;2109629747;1554231532;-121723724;-564269721;-1395315031;-1329467731;-536357822;-848000803;-766849073;-1085527626;1330235967;1963588274;-486623780;-353691079;-1352637151;1327277071;-293979705;-1015107434;-1651611124;777213898;2137177847;450953044;1857335915;-106225638;-2124411610;-35031682;258359708;1740136664;-914269974;1929103163;92907057;278252709;-366932886;-1316153153;-132978204;-671880841;223752473;1190576691;1956995601;-181779800;1309070032;1597638607;-1095478111;-756702805;1672720805;-1955472366;-1222613841;1382240161;1412107393;-1775472414;-1643091261;2095212937;-1299878643;627707985;600492892;89815476;-876651923;-1427796528;-1103865787;1809175919;949425363;-1014684499;-857040619;	};
	mti=624;
       };
       RndSeed @[13] {
	name="RndSeed_14";
	seed{ 709250605;1825434818;-565722127;-1916088195;-1039058657;673154065;2056467387;81261161;1724634229;1648944589;575722886;718468073;-1054807047;-1139022929;1502832719;-65280811;-296628610;791829602;1895621820;-413506652;-745623561;-1826554023;338260477;-62562840;1544409295;1406377823;1448685104;-1170312592;520104214;-1197016117;-450959509;585102375;-1122684285;-1091897850;2054632374;-1179298218;470418248;-491990131;-1672973012;193845581;-446959479;2093334683;1246586604;-1994821460;823694034;553799431;1600449777;1613621983;-1730119738;1728259205;40111174;1509182929;464978756;-1496338935;1516277133;1118553203;-1325169870;-1914211799;462818865;1059246736;224142092;-1720762375;-1241607867;-165719998;2048160485;1875466293;873439430;-727817119;-1125905170;2069325153;-1269080282;-671953541;1627932832;-1618358066;2008059078;-2123429426;-777975352;-883720092;-562444303;-2119539511;-1112053913;1869862954;76565577;-406836704;810703651;1698213924;-1297855505;1995360728;-953564171;286455399;321476093;-1002548692;-639986713;664624465;-1858262445;1560152916;-811731479;-481149005;-1319612206;818360947;-1111788861;-1163620470;7629070;1099428077;-1056679548;-514747988;1542332789;-1895413969;-1211356627;-1050096648;-614544011;-1365953027;-927152885;-81591143;-360891596;1520028710;369060567;-36489656;1282379533;-723198925;-1116696728;-1643229365;-82683577;14589007;329446055;162929504;-1994445474;-703127093;615275624;474750345;-2137720689;-1146845916;-1087119742;1191790853;-1378290918;1985462527;366547646;1960711039;-1535238336;390768533;-1791632555;1677859040;776682067;573140558;-1836956842;-893877067;583778912;-1777790861;712439337;1909067714;-1183018107;-708152358;1741542965;-415017187;1359113584;-325212368;-820886853;-353318091;-465956116;2006212586;1481349975;-749777009;212881118;735439929;1214231585;839332165;186080735;-2037555038;-488849464;-2042081600;-1409620684;723539193;-1341536279;1262855012;179143815;-1508734734;1864922976;-1300167946;2082914038;607946534;1782491314;-1813685676;-684807516;-45239398;-101466859;-2131468185;-423422573;-932081013;1039243364;362456113;1899495699;1126764249;816120;2059499929;1804554682;1113936522;1358099611;-1661539449;-1642587841;-1313957160;-1095253302;1228202417;-1703658694;1645499875;1160369398;-1288030912;692409816;-600606969;1545279844;621482666;-989767708;1289965046;1344795207;676596851;-1091078859;769437322;792639306;1859840779;-1989339700;425122081;1432179681;1792342077;948046986;1942670673;-1810706064;1335928027;-594561820;1389559558;-2065015385;135741438;-1973604836;1598243005;-1471076588;797520535;1129629053;-1534769449;122679285;-1784231530;1069136978;1213017929;2142842968;1566487822;-861178147;1783936137;-1749024100;1517918027;519392040;1779896255;-927472402;-661969030;123032759;335633454;-1944060638;-755695971;-180550828;859627858;-1932015526;-1514069063;-1620103991;1130516506;-949678421;105820493;-284612249;-2021664389;-551448891;1829718823;1279917320;1759094424;-231367575;1052864735;1909579785;-1192645577;315379449;-173184434;526984819;993310578;-1374264562;1865056465;-530308314;-1336693840;566427730;1197015923;-116105452;2039338030;2093670055;-340087141;-834782442;633245032;-1682803928;-886117709;-269825902;-185746600;1586208523;-1770513897;904562799;1469332466;154514183;942629356;-1014173882;965301348;-1340878688;518390551;302483521;1252690900;1760635193;918305865;-964306177;1105478303;-1593387126;1975701981;1160743170;-1087853978;116833964;-1843968235;-1109697459;639284070;1112825466;-885646652;-803335999;-2145226807;-1376338089;-971965750;-496532593;1628492671;1027858426;377104615;-798571671;1191498777;-2028960064;-1460601389;-1147142721;1360282076;-582466947;-225858813;164853838;1039283733;1712559257;-261686967;-49351292;-2097340778;1766213048;404259922;-692447312;2013210102;549202635;1823508080;-1297185553;-2106046500;1996237298;-1919641284;-1168857900;-1720348723;-1207925493;1319456494;2063535277;-316928705;1003116048;-112032331;-149477324;774458906;1808645034;-414806304;-1383932935;1681333874;1647284171;1463604767;2087225668;-476637528;1751807463;1818401583;775215256;-1897214613;-194036511;-106563425;-322268414;1168017884;1348381353;-381338175;-1632882428;-1621782823;-231632669;-1976170019;-877445767;1878232225;-642245472;-110393136;-1251285055;1669975154;518796771;-650330348;618378393;-1702681884;531881030;1354850087;-96476792;-1179361182;-295868564;-1354942632;1631322640;-1270944956;-1079686610;-1474572051;-1068345635;-116714199;2077807910;783218936;2098000750;-1066699934;2127196125;985587557;178139507;-1224405254;-221666956;1328964752;1212041171;1673509241;-1490197000;-2108553405;-284842169;-1768266889;508943309;1763405446;531225577;-1273858668;1800383446;1615191164;570024955;1114982066;1845473611;1288146399;-1632057276;-2080474291;-158535973;1498666217;-849663686;-90847696;-208830765;123754949;158390639;-471125630;-1882221923;-390794892;1927083181;-791636585;-1989986016;900120103;228386337;-1930070588;-1186435362;-1259636083;325509933;-379209852;2097785095;-1485969629;485743307;-1948715298;-658955628;984512092;-1867517930;1030778287;1003941591;-578925664;-826076131;764215205;116599529;1480958142;263693357;-209003372;569825383;-553418376;1258941021;567850019;64671399;-1199839044;-1650294064;1423835317;1055038688;-545536451;-56727980;-274468558;-1944558795;1027118484;-160745146;1188464412;-1363356331;-2012431304;458706632;169025231;1622208659;42667395;229405081;1426240584;-1232391239;-776503884;-1817408991;603208894;-1257265434;-1883709979;671165717;-2127951812;-709857174;430148706;-766191968;80407366;1927367318;-1578221940;5942784;1826924539;1676743070;-1897288;-1283384635;-1732963966;-1605539456;1720661067;-1082049228;741936721;-1956445959;-462243828;-500455695;1076781441;-822478456;-436741920;269422233;1458546024;1576039801;-1794928027;680715185;-2086367260;-130490930;-373475086;-1246268889;-1736910932;551237562;1164281975;978321060;-145670965;369886464;1147861785;1010625170;1603186613;-851531744;-559410452;586834281;-1060593268;746997387;-24692232;1128150313;638935787;1355598811;81402151;-980234871;1504703385;1424979232;-938548946;144371179;-203447582;1166847473;-1155132963;-961649111;983616193;624445781;-1413059142;-1777810486;-1665972197;1224725777;1231331717;-373334198;159230724;1547017932;-423731686;136676119;-1818949298;1289378104;-1468811590;24613078;-829903699;-1055440666;36317594;-2044996092;816752801;898478793;-1525408622;1814583062;1478929754;-1685775825;1237347082;-1551884127;-1149690470;-1228470460;1515476715;-567310688;-1975362658;1618518748;1321961602;32504065;1794492600;1148335185;1295873509;-963475126;1346845988;332852977;239222894;1067469760;-184048357;1728445652;-1619148954;-1547368238;203672687;1569722667;858538483;828772929;147914504;-1406670708;-1961574293;-1996022573;-739165732;1597845091;-308035309;1801239994;289206322;317949990;-1896149141;2083211227;360514929;	};
	mti=624;
       };
       RndSeed @[14] {
	name="RndSeed_15";
	seed{ 709250606;-657099225;862773302;2003524433;-798435692;-430671720;-1004828627;1006589997;-1222058295;-572028640;-122563111;445712653;-731150547;1946546995;-1277381432;1012493761;390829621;463970298;1972692916;-978172036;-267244497;906164593;1690362539;-468949207;641740202;1734868523;506577068;1584467959;-69209558;588348234;-941212080;-847904290;2140733777;37835953;-688905481;874405479;-648979001;-2002525575;-1304875603;-37049038;-225923;751714527;-399511771;-739332055;-493356354;1380979134;1666135945;2008068311;-449688930;-1659865822;2047628754;496027506;-1325878738;1487656849;-1760027642;-140693045;-1927238624;921705379;-1325784439;1157170194;-1712208197;-1697945542;1720587862;-798728302;-1212854923;-750960844;209674229;340654316;460161376;1980787493;2077002106;-207482674;-880191959;-546211621;1331185026;-1248098310;971529508;-293534847;341111960;1284626503;-1271805458;-769132947;1906775992;-189964976;-526631661;-1514035291;296780857;452307924;1051541244;2045949381;-1469867346;-2017062345;1817611333;-1794000079;-275634563;-256598507;980821262;903027943;1964181125;1016739447;557722711;1302531512;1337682787;152490001;-1479528419;62690212;-1645935586;-950953097;2140105008;-1623803454;775883054;-1559609963;824253443;572696736;541730706;426557197;-276802155;-896988509;153145750;758511269;298556561;1880448686;316867205;495725556;-813765696;2140364652;-885982337;-1857252245;-1451114771;1541880780;534138211;548111250;-569242850;-824449034;-6840017;-196664605;-438656280;1222576704;-800926417;1386653415;1666903882;201100324;-425816382;708484020;945734292;-1248855819;-1328912123;-448712874;2086611485;-170354271;1947881344;2071226236;-1866876439;-1221452464;2108978164;-1309483708;-1037712582;820938522;-1642186784;1828847305;1788513672;1870080174;-1349405523;49737902;1325142858;986955836;420410450;702826241;236358925;-138634294;-1152972809;2046509396;996820021;-1998567786;1682771218;770331694;969004246;-1640399073;-410997725;1723926867;-1318875122;1152532849;-1989623322;-1017936981;989846016;681247417;413930679;-1745150994;-1418243880;-1370648385;-130400177;-310900037;-652168360;1969190568;-272022929;-1343815329;1265192821;943549833;-627472173;-428193065;-602473876;-836815468;824112221;-595120516;850415591;-39639568;-296614739;1939797877;1683010964;-1743298150;1335613898;1754763498;2059858059;-1292058297;1175006735;-1247368611;-1735979181;196240590;-1091173344;1949553733;317137840;1629111629;1401357274;-1269712570;-1589674828;-926704977;-1381625154;900727055;-1167428913;587858118;-1161411324;911438405;1391854369;-124035959;-107520676;457748070;1976263978;982511076;-766255134;-384975436;-1326200541;-1296563210;140715062;586690625;1535431577;432788461;156201591;-2049255190;-1144800128;-743902653;-1962159046;-1648053485;-1813659727;253783452;565689226;-106964879;167995386;366137507;-431453103;469057373;1043711413;368565870;-841637780;-1087589422;59589144;-306058111;-459152812;-1168122786;-1421660840;-1170468977;-2032166737;128373328;-879900000;2128031328;1667118679;1671001857;-1388645356;-646179901;-1094349866;1049665467;1453791455;-229794129;155035382;-60389847;-714774098;1447774046;1551761561;271553815;-1590681037;-174016650;1254686539;1156666197;270128456;1649192589;-1484928414;1854814471;-775244154;1514811554;1807838329;-1650195325;-2086285039;1758701740;964764271;-1872167430;-1155666936;-2107278557;181747255;1273887718;-1476132265;1529309630;-2040729455;1466865206;-58346517;-111205439;519696068;817764495;-166905689;-486334991;618615736;-101613353;-804960028;1483367268;619529499;-749422614;171393329;235336346;-624418296;-42315106;-171729351;1903196203;-220994596;-2119942330;1988385568;14917202;365255080;-2022750057;-724410087;749550227;-222967727;472509357;-110849643;2041624451;1903884704;1417848540;249764745;-166383770;1417396531;-275448811;1833516042;-1756130124;1200165676;378709792;1965822208;-1300021306;423890358;-1960193999;2102358147;-551881041;-1034330302;-2013044980;-124452882;-885403926;300438615;1747769022;-1948913209;1647169830;1829922001;1642403711;90616870;217541231;1117480509;-1935052001;-1891634971;-965301352;-471553891;-1950018099;-1978244317;399033982;1776402224;2075699408;1810461937;-180382675;1034163620;-389198029;582020976;738289841;-1502869417;-1889023988;2120445194;-1310594596;559617052;1131801747;-920749790;-473992050;-71077333;-347376813;480923676;1960089753;699501958;-562852499;-532108298;1885664826;-13125159;-1872232811;1248281127;1949134995;-752251600;-329645642;-765490431;-970724509;1422016122;-43025630;-272154975;1217292679;1095915900;97268976;1148539984;1184931478;-597794251;-347756815;-1049599714;1494865686;-1863439175;-1056654738;-1013128279;341953979;-439599247;-878244955;397242410;-241583041;218587482;-1200057295;-532233009;-858729939;-1239446568;-2025858891;-1473548057;1255217422;1850796961;-983197737;-702456740;-265205196;1605023853;-1241477033;-372674491;-1552366757;43955419;1298370342;770988835;673362320;27664274;40736861;38921077;1362844654;673656337;1033062268;1623232948;-1847174350;-1795249222;1684486499;-1004726410;-247799818;700938871;-914488894;1710095349;1717959957;1446547126;1672560390;-589717865;1573176889;1480469998;749078562;147417410;-107423005;-1030734790;-1531886248;-1249671074;-1956509143;-531888171;-1391812787;-1550114037;1395893614;-789467731;-317872759;-1832965290;-756543991;-11082280;-347610034;111495497;-529728330;590320211;1532503978;1890528099;-1157525097;1973038775;-137505347;-339082266;-636741558;-171726913;-1860646113;1296410981;-1780589975;-1140199123;-297316222;-876687907;-947582833;887311670;1719230025;1431223396;-1918541098;-2014350430;1874411551;-1606919210;1378660517;1520793270;-1026504906;1701639917;-1533691615;-484784171;-1386455179;-1530307845;1307518790;-1034911731;648807825;-1546662591;-1230382980;156228036;208064611;1623864351;2054987751;1812409808;-485429624;-819756565;652176029;209590023;-45951270;474474165;1304945794;750535881;345355880;445030692;458611025;-681437165;-519827345;-161986372;16510076;-61428978;420901700;-1066999816;-95374548;-1409033551;1819547078;1977948331;-2110015685;1697369255;-78211671;1323763774;-1840711160;-757071328;-428174082;1459826433;1365806385;773744162;-1718321251;-1589939473;-1922027850;221037370;-172420583;1936330874;-1559800384;1863821764;1049848308;1770546048;-996782814;108665155;-628763474;-1571258495;700214256;-2136340494;954504179;1426091043;267836847;1288773457;-747426601;-1187371540;-1547741393;1583315979;-246199235;123487426;25228503;13150753;1159580244;-1705291047;1834739128;-1488935601;-1777176908;-511764958;-2132646310;-293635314;713065336;-1017702224;-562459656;-1984262303;-586444950;-1657944119;-1652000652;1116253932;704961248;-1456718656;-330969877;210371050;-1830879819;1807878807;-313363053;-1184730058;-244076821;-745133072;-1888918456;-247059044;309532966;-1746385814;-99178635;650656252;1508556507;	};
	mti=624;
       };
       RndSeed @[15] {
	name="RndSeed_16";
	seed{ 709250607;1155334028;-389134429;-1290345949;32628745;563164306;-76947552;-1159170474;-782916820;-1251571564;1957046584;506250376;-1668394572;-237329701;5232454;1151231149;655475692;-682649555;471443512;179131947;2024604171;2023696391;1667235956;-195966144;-52360057;1008243757;-432436517;-1947639981;-565447663;-1642926793;1457255175;654251901;1184967025;2127710545;1398979762;1775582658;-746342125;-1066298507;-2064428108;-1111069451;1046097051;2007993424;747681055;232655974;-1408796054;407696181;-956935913;-132271853;1592290176;801207062;-880595488;-2088462910;-273492748;1279734952;-270190621;1467345815;1437808742;-1212850212;-772890416;-251961734;973735673;-2139160198;1412222102;2068481746;978525311;-662489764;753722813;-2070689580;715309746;1464210047;-1745044996;1949323133;771536948;1555333325;-1044906810;-381737212;-687987441;-412349943;-1656401856;773454937;-1967443859;265192220;644331102;1276461417;238777948;2085678753;1644283254;933271370;1045973642;444547787;109116785;849114864;871456012;1146692121;-1190048810;-936157437;320568160;511577409;1167721479;-2045457215;-451009453;1149445109;564577194;-1759040391;-1264623633;682733034;-1651386436;1160825953;-2143288756;-761354445;-765417890;-2118883296;-388675622;-2105050610;1712821038;-1084606210;-1510254624;-1117806945;1961269607;-1059316811;1805997382;1003398268;-34520730;-1309615532;1496853098;-1899429964;-1407235764;-1883985339;-44552829;1654879233;-1886337918;2093352707;1022285390;-1626584245;790807891;-1651096250;741783644;-1799096107;324877405;1805751868;-942543971;1178305507;-2109932872;1465021937;238417984;1189425617;-1127942238;664425139;-49714125;351100805;40361231;-407880062;-612191619;-1786258865;646403579;-565887070;1774601249;848167229;-1252318545;1094599648;-687132315;916722655;-59298147;1363800825;-369388420;-1775071808;136101936;394363799;-492455365;-745377599;-999534796;-744443810;-1957537187;-1770815704;1556391488;-833265324;1982330627;-1711110533;-700133521;-1743084977;796409365;-1573078018;-160168158;1904114108;-2043204279;1544487504;-1772076113;-1376958212;-1046496526;-1482245422;980485326;-1815403515;-174197117;767344961;-1012201369;615765047;-1190844041;1080817902;-715514351;-786202655;1503618802;-23025240;937194561;-1644714128;-2022763834;322522145;1077916371;-342757463;1333496034;-97288864;1981772769;445356083;-622110733;-126279035;1424905652;-1042764224;2006162503;-104325513;1768691870;824954518;-974075894;927645034;-1245678160;63484441;1345103293;1584594957;-558272098;1950472404;-455636499;-816068149;-760568626;1830795976;-268877003;-1328977097;-733369901;-1851764741;2061160233;457712565;-1266355113;-376904840;-2128899209;368954138;76024884;-576674441;-552051784;1943028924;-1021361017;1184673035;-1481596950;-308658303;-563764924;2119737598;1108933783;-1558057429;1408624683;-899083375;938204058;1103695555;-863591028;-1700669074;556373152;-430881755;1083324932;1826656768;-1933368211;-897202220;-1449465891;994890502;-815302550;-903761030;-1129934645;1387376988;-846151743;-1492616549;1445150831;73747065;102769617;-997196918;1193905955;-1829983359;-1816279353;1688328658;1244781657;452921299;1553138267;985143455;1881657049;1431188567;943107342;328254887;225794821;-1239050468;-997872134;-525933214;608201067;-876553378;-737783335;1027733035;1458578209;1164573899;1017042654;1941542083;-501120072;-1529541386;1453896052;-1380408998;-510148374;-914698720;-1665593341;-1164256614;-1740925138;-1516424813;-41801619;788451999;-1080479499;493191598;-550221598;-188208382;1258520995;1546639401;-1029328632;-227885672;1456587369;-1297916853;953514769;881633274;288952552;-1410870065;821275433;-1327859338;-212008946;1158871916;1157990477;-80514231;50665344;-1894398257;110503217;-1552226650;-1016675322;-1902836660;104493594;-757796969;524597946;-1323223367;193047583;-1205960556;-1024261496;-1408670414;-349463220;-1064478584;-1410116811;-1995881198;-1441935184;1224776091;1252394276;205772284;1311459792;843839962;1302675048;292999636;-1493746164;-903677201;-460764026;-675193116;-1486548593;404710158;-305753100;1414041826;-799037953;1064589789;-32916829;152453779;1433268339;892002415;-485559231;460042625;-1174269347;322902004;-211679042;1971689740;-2013767523;213978936;1675098774;-2022593006;-932168240;-635219776;1870412145;1221565107;646925246;541299067;-1042269683;-85301491;688072718;-552579825;-436350138;1981237444;646194245;57556422;-1846061396;-1162194379;-721231805;-1243301167;1258136017;2119772323;72989566;86992971;-393131475;-247012419;-2096461426;697840085;344565667;511336426;-620621074;74272286;146792820;1032259683;-2005382225;1169191394;-859542735;-314962339;-1238762822;-792435651;1557314588;-962937320;-1048152753;-1813646171;-1908939123;-1470529770;970774672;-1342799235;2106619081;1777671319;169512670;-1023333049;2106343814;1444420342;-827206617;-1280575511;-705522579;-1322946787;169177075;117651352;573393074;-861736459;1434459594;-1073060396;-780452207;-400960679;599887426;1816949707;111594100;1532097927;577017250;-718226257;-370770526;-57558196;367341299;372282024;-1573009902;1003337243;224021875;976755500;1289831978;-224742458;-2019533943;2014216872;4521855;-1737701906;1380541424;621242602;695705640;-1577084513;576168393;-1431935194;1658124046;195396038;1059662586;-1743536001;-1858545617;-1671929696;-150809654;-1913446098;-1780440002;656992655;252358223;-1096282608;575877376;1728796391;558129318;1681717607;122682664;2099333811;1375321126;-1773593520;-918679480;-1304325498;484668420;-85005435;-721968176;186945330;-127122770;-1054874314;-474886945;1707839683;-417992574;-387715618;-1723654357;-1991819736;-1266285938;303034169;1037952123;1261304198;173912899;1723569776;-1264855657;1507525324;931320293;1110662750;1147016321;-510224249;1940181532;-817664902;-571109689;-1834731169;-1962383171;-879195032;-247354555;-1971647827;-1710497765;-833893138;-1962037101;802899016;1996782204;1874606694;-581620807;-1860776839;-322338401;-1658806107;1281999613;1677118343;-1678572550;1338526453;-1496438686;-1114550273;2047735281;-1716553263;-483263135;-1459590195;763711951;-552988720;-734712987;1694349157;-755375972;774092772;-2000907490;-1293678537;835623957;1486738294;1756372769;-402363953;-621810772;194094396;1451708126;-927959250;-610198539;1782624323;866573888;-1048186505;-1841604356;184290415;1663127813;-677634865;1972669112;-1192837574;1113392726;-679931502;1948354933;1979076869;1118117078;628388374;2123942642;-947314908;1758866345;192160655;-121466701;2030127033;48940514;-1951136139;-692240833;43756537;373431435;-1792497626;1677827204;-1257705526;592487482;206165813;-1681897667;-541731536;-365270411;1564420325;-452384692;-1319620476;91020600;316555635;-1327800389;-690632870;695552379;99996390;-1272754914;-504010131;-859185720;-2015156614;-646158404;-875354176;-991228587;540625749;1262368753;-1022655463;-1309472084;-128166127;1619328646;710913200;-470199330;-431333984;	};
	mti=624;
       };
       RndSeed @[16] {
	name="RndSeed_17";
	seed{ 709250608;-1327200015;1511592673;-81898909;229367780;-1361291015;996830733;-465739736;-1445268481;-1746950182;1391972418;1343096186;550763667;1372737804;-2001408209;1234989520;207143045;-1112661622;1348272826;1917134554;-1961851013;1985229778;767122773;-1503178848;1976442114;-689107640;-1464835663;566515386;1005961598;-1628191533;-1204322413;169930068;-1957980604;203931583;-477831811;342216921;-891386175;-1489568593;1252345191;-752748699;1167470950;-1568498484;890510192;-1280457893;-997739703;1199724127;-80322236;-747347918;29043845;760135082;-348729788;-1191943882;1490759096;-1509946574;307304998;1611114293;2112605116;742033098;-1396750356;-461914335;-898262362;-1498722218;299869538;-1704218135;-1876888329;-1899314710;85698762;-1497124363;-1758239305;1286077870;-388842159;1739821985;-1925587352;2093054491;291706508;-1862479481;1451349701;746889121;-752409645;-78941857;1844573596;-802034622;-1125646601;61584380;-1846288704;112899295;-1735543983;-266065130;585514145;-1884351266;-1002375386;-1880666380;-2143433366;690401893;1853845303;-1656437075;490670699;-1285595240;1677730340;290866684;1013020880;164362869;1001745807;-115425070;805891037;1758024602;-1033310319;10069765;606311013;-400306362;-2031111257;154676616;1379909400;1444529742;-2089515875;-330667474;-278333131;977418435;1037418597;-1475480240;319335378;1897737299;192437972;-116859361;-501179000;-1644524716;2143551340;1140857728;256500581;1721418842;278997865;1269846512;570510745;-935756062;666662987;2009635102;-537984829;1173490761;-687251214;774584480;1689974700;-1911927602;-1229096694;767428791;799301571;-1519508608;100832476;-1565362337;836033861;-1136117298;-1811875310;-2136655641;1457848305;350251593;157941863;-405125058;-9296467;1307900995;-1703618392;481457585;-1220859787;1111467668;-1655343509;1475668240;1339100505;-620340131;-8208452;-1720984062;1398576808;-624500138;-873871053;1345786011;-1982728338;288582217;19464315;1305216054;826284387;831848384;1256630130;348232722;-1452919346;280061489;-50033909;1852449503;-124088242;978265114;1346447612;1670353292;-1822170531;-551147720;1806241285;72264787;-2021169025;-2034098414;-1499082222;-79269613;-1396954092;1450126195;-533059904;-385571146;1459594033;-679472455;-1969033684;-822044943;882970694;-282402197;1609366486;1109814178;1580708639;-2002339417;-761033749;1404918619;-686934698;-998733730;-82668921;-1336380693;1489176517;1249244461;-990755018;-1440451132;1674800634;1847769060;-1419830473;-1668802104;-2080028782;-1638839119;-1794896255;-1611475566;-1509403980;8784051;-1334953339;645945130;-110240134;1438025638;-1456675635;1523715478;1363553407;-34538333;-1884992498;1178430891;1301430018;-612337632;1726947777;-2119691853;1084077257;896490461;1814266919;1355119093;-774327748;899353300;-624772450;-620976660;-133996729;-231998767;-2007869480;947278849;1370140261;-2073669003;1942042869;-1855845049;1303128637;1059767985;-351527461;682123071;1411337187;1529013043;-289970748;272869262;473831954;-1359877081;-1915422553;1452893992;1624876349;-2081468995;-767695763;-1196687751;-1066911077;1789032205;1428317394;-1001671850;-1205256543;893383272;-1144239070;20392379;137726691;1957185452;108715359;1888104090;62019399;1023569700;-1720967594;-1473319865;148317533;-513047594;-271908561;-689175677;830268072;1848202609;722970202;751881389;10770029;-1945014482;831744394;-1922466143;2044277375;-668443929;-1932795610;-1566617;106636456;690708349;-861826425;-456953013;1623590048;855702974;-1084175568;-196350475;1309116746;914312916;959811298;2076594793;405810248;-391380567;-1670995116;1631680561;-243917772;1915982328;-1320822397;-1334060500;1205973870;-518311148;2008250461;1606138263;-1770291334;-1841790043;-61779663;1625738249;-1300838280;-310615181;995765378;-1141693795;1254932751;1165666779;-1421824424;-364317479;600261978;-1624143909;-1825785097;2036719876;-1379895979;1964694448;1090610995;1344633369;600311000;1785299609;615243610;-2050209307;-1770600313;-2050012450;-1780726222;751264343;-1028956997;-1421734399;-1868291175;1158480018;997516907;1968909476;-329258105;-1216507773;-161084075;2025867871;1010542216;-1654686437;676183377;-634188950;52277987;-945287162;1107558513;1927290281;-236806974;1771184800;-1181297663;803244;-273746342;2051789724;-646675599;-714219653;-1120377894;-1349124677;-2029773695;-2089395148;-2105194284;409617397;-1208095183;-2096281944;1974721692;-179236740;843610791;1858913392;1459682083;263604217;-1019369523;-2067631145;2005381531;-1714782891;727188455;-1021236552;-888082339;1759716525;-2131655308;-1913663705;-1686468557;1334900208;1566966449;-1015070451;-362337756;1263763970;983230415;-1345045172;-2001932440;-1136643979;646172567;490321720;224019134;-1920596835;-1028527261;-154648951;1950255132;1213086236;918647837;-1975429602;-1382025542;2049757255;1762501454;-1980778788;1552020808;-1937188736;1902706430;2078020432;1465973163;-360416311;118092394;1921867659;-1364357844;256398049;-334881407;810956807;-1305420927;-1219184786;1049176924;332814605;1955862755;1173144813;1044381408;1187344421;-706444294;1435980804;684577985;2102868718;-1837291243;-1711307042;16773784;536219589;-723015801;1017560291;387121759;1801308236;-2108932813;-1926602968;-1328871578;-892702647;-1577326328;1331645641;-903326528;-325399096;1975637489;1250351499;-1134252210;278714073;-389421445;-783931593;504647012;153685589;-701421973;-1144401685;432742097;-463994022;-739052285;1459071719;-1904900954;-388687203;1235488832;-1204538224;-1531387514;-935551231;-1575956552;367165521;-2025915675;1617927700;-164258501;-1059978997;-593513956;1949097776;-1619244725;1010826436;-1663066292;-744711745;-818789082;634984084;700915296;1601199581;714327498;-2119424847;-848083041;-2062434675;-1998342291;-1224030258;-2101280384;-1031656369;-1390139390;-1062483449;687790492;1380210837;-462804882;75450892;-80960312;576366884;-498794174;-1481881164;644185310;-2014375001;-1202122965;442428992;-1196146348;1735315203;-1668431904;919251009;398863549;1682689450;-425350767;-501675339;-1382637078;1718291109;728299730;-1286566151;-1473659353;2117915578;158047721;-329908208;1216165027;1660844047;1829166508;-1139667864;-357981702;-697685402;760596739;-1904219302;1020392420;899039009;838243123;896753742;1597030134;288262308;-1695043866;-1467218393;898317261;-1047900394;1702261375;-1267557395;-1640796541;1643422750;573725045;1039133284;1825767344;-2081711086;652813454;107834437;704620153;-79531778;-2103903469;1848518904;1458728321;146716101;-1763236353;40985624;-2114627648;-804228141;-819461286;-939330200;1483610243;1377517463;-18784644;1408581994;1303516295;199741743;1303425245;-614496993;514818656;413389365;2140360255;1974406861;-1802500908;423784647;-1895694371;-1865331626;-1430776960;1033782951;1708278081;2040463519;-1084109130;1881203557;1046887638;1186891985;1578323060;-457520754;845741063;-360959958;-1780223083;2104224764;1825145403;-909677235;978247730;1886861351;-1122009236;1554065109;	};
	mti=624;
       };
       RndSeed @[17] {
	name="RndSeed_18";
	seed{ 709250609;485233238;-2024979984;-1620867459;1723270943;1389812955;-1393832952;897505785;-8306619;1129173415;-160461688;1745212898;-956768869;-571620091;-1201082004;-325247371;209988254;2101698151;682415184;402559907;-2115536285;1702375770;408038397;-2115977240;2076569962;-2127068592;-673035148;-1837835762;1461613272;1516794042;-2002416411;-804702654;-378392379;328283199;1861768189;1221525135;1573284906;1213771804;235405463;-1986393414;-1534414144;-542091085;1289301402;777253202;1686181766;1429636976;756410563;613036062;1461127686;-358239244;1617964965;-1824682009;-1802612083;1547573664;1067337147;-1730177538;1633552548;-1791183278;448052682;-1419379987;-485562489;-1822229679;30511869;-1606196464;-1743210406;1724895993;749532186;-745260923;-547093726;-1442257590;2100166062;-1011827374;591530557;1144237914;-1061625295;1096548357;-1251334688;-1034623881;1223439890;-1398374194;-835584820;1470924028;1227283747;211447997;1886298085;510794057;-1886713053;1152847196;-1410725111;76299952;-810488886;-579168344;1177901523;1289474615;2108872108;530768544;1491798400;-1957181114;624151606;-1020102735;1658157982;-1296376544;-402755376;-880251226;-225643391;-1476130381;1654557759;-1085504799;-1016062213;-1802047419;-334247055;1674397289;125988728;1885680329;1133646170;-1318613926;1583183660;2111969846;-1782790359;-1338140818;843680276;1752444509;1999210182;-537678850;840450125;-65694754;1202690991;-329610715;-2102339714;1736073325;-2083137762;624941711;739295727;2079222480;-1812922885;1405973700;1357872961;-1806273335;-1607878751;1295036122;-1379586061;285926306;512459128;-543470361;-1633199484;690122095;2033095773;-1689664289;1551888581;1001316841;-1673276797;535828092;52771716;2066096045;1790020470;535803278;-1063411806;-1576786910;-1613274818;1269201227;2023519442;-2046557472;1900942796;-1844162684;893130370;-1639025681;-1736928729;1221228096;-1192201907;279509972;1413205838;1018368470;-1945399270;-2125155803;-1395513071;-898998226;1722484593;2089082849;-614779886;-229661592;-615112213;1853393213;665010530;588529249;1292207613;1371912485;1393709038;-1769377530;-1194280112;1440139799;-1635942036;-1547047131;-1380435421;-1548642106;2100177430;-228726058;697082829;-1631562330;389189242;-1836613399;-35610497;317042101;2055628339;655692933;1592739397;484253089;1937693267;69207337;864287485;-1924240478;686364402;-1713663923;2047031039;-2069585653;-1570743709;84447772;1633067492;-854299342;2144685615;557872897;1260748097;579971869;-2116679601;2046655552;-1706569851;-317382620;748392261;-538020836;907110431;-1838175200;-1776608176;421007169;-1653682547;1663764052;783285619;204900938;25963038;1839770819;424541048;933195591;1130686195;-16474005;1501753850;-435827718;2051062577;1040616165;1630296655;1928683453;-1725013468;-119730185;-596844482;413146636;1234454456;1676758522;-1765009403;1402092226;427330287;795981900;-1382915330;-694293905;666192288;843885861;954998175;-1269119038;855019464;1555088113;-1096853062;-1880498525;-238026863;1272117159;-1639085172;-1389818347;1616764707;-1285538949;-249939761;-984509041;-1458836144;687047791;-319051807;458174273;-582062403;2020040719;1536320672;620944800;-1306783428;-352387949;-743262738;509123744;757558336;-549718431;1043376076;965894303;-993118497;1354457585;250025174;1697365909;13945484;-835922331;993471848;32084787;1263689547;-1618726049;1378879967;256750533;-1522574615;-1173118232;408191364;222477895;454693431;1485414376;1077856547;-900297311;1566544930;-839832056;941100689;-1824499344;308235574;610622859;-841331691;1718733805;1954201948;729026546;-923742788;1498768542;-974992641;1308553905;407236790;1583570709;1956788268;1498103818;-465360735;1940634421;-1738821424;-1685379545;2085804775;1746891789;634861068;-1540833267;658820669;-1339095964;-760130670;2057671306;-1534315219;1007690722;-1463805054;587356889;444266999;1275776718;-996581369;-184482063;2126332120;-1706182660;-1475180906;1465929157;-755461194;-1458494260;-904411990;540936466;-1026410624;624558870;421789462;1884318487;-1901918440;-1361790803;-1316256393;-1196800618;1366665426;-1131837522;1100059724;1357363410;-15083599;2004769965;-584671920;1001553460;1986109434;922645118;656055086;1355602079;353371600;-887186293;747670308;-310826319;-880469064;762840390;-669610978;1655426546;77876577;-874352184;1607043483;1616688455;511704100;-1687568453;845260421;-867770110;426201071;1393717718;1981020767;-948955485;-910913874;391241936;-364051552;-2067158048;1538966460;966418468;676803528;1603630973;1196261762;1786262854;-1092549221;1844778998;1732683021;545688407;1493666287;1447807619;-53184280;-420054698;863984937;1379513294;-1868121779;-1340382002;-179047904;430457972;-80668822;1338273556;2105872881;2041152857;2108011874;-98071366;-1057454167;-1873968705;-1322428865;1102359744;-1040026923;1178981919;-1678407288;-381673691;956408242;-519368977;-1395838766;298030023;-1431318981;474472246;-2125924344;248330157;729648637;-143627378;902030687;1705137978;1079508743;-77867745;-200601138;763346084;-1479200136;678835687;650962153;-2085223756;960264598;-1928904713;-1597416845;1441671520;1757560337;-1169617379;238693129;-1220948644;2118604262;-865172236;-1551653307;1994234582;1831610279;-785548205;78175590;1256517909;417518268;1197982213;-1327517330;-400044681;1926440096;944676450;-160108408;145378230;1739474606;-295793684;1270423085;1415738687;1481142618;381382092;1447591778;377175798;1410039542;-63158180;-719559067;466288169;-667338471;1977119535;-498396908;-1620832510;-679416592;55609552;-441627646;-619542696;1882987483;764717303;1557387881;-665922305;-1443306140;-1883236041;-1866837789;-252619840;-1017222933;1488686469;-279545070;1047636148;51111172;-2074312555;-244282219;-1665286351;546552867;-756222252;2071426009;-301511105;1164180404;538520946;2036265476;1813850884;-1934972923;1601244112;-1516010365;-420261388;-962754685;1579808657;553303522;-1145512387;-1499961361;490330006;-1454680508;-3243595;-1008888602;-1990374030;2119204682;149839282;-1106429098;524574273;-332334397;1086566367;-1117506890;-1432987867;-1744485499;-1746410138;2113668760;1311079810;-1752522283;456059642;-1172799286;1846401297;-2079312518;-582331773;1442385580;-1764204178;-1988805174;164194839;1088302147;-1960523205;692800431;2080277822;1500662543;1772362939;-1036721768;2060842846;-815435341;2024606889;1889790082;-944908054;185222953;423757418;828458000;624716943;1389911467;-1054674861;932422098;-208258019;-851195878;1182946594;-1460644843;1148354138;524783407;1629791956;1552994643;1449490853;-409091072;1866003068;-1196977505;-975315136;735638207;-1648820564;-1727423752;965734645;-1334824963;-1981060880;1537731536;-1523981108;-1097103970;-450874139;474871576;-978954541;516264556;1883411193;-1884113354;1081063651;-1674386038;-2086512375;-469694791;672609221;-1036067811;-211097541;956012670;1934662173;-1475753100;-503747081;-1796474962;1582810439;505236746;-485506721;490047418;1507268817;	};
	mti=624;
       };
       RndSeed @[18] {
	name="RndSeed_19";
	seed{ 709250610;-1997300805;-1266585345;1333000404;314452237;-1000790234;-618512737;1313353619;1760421538;-927057576;-180661263;-470638459;-1303704854;-1396083307;-427150431;-1416228615;1546126871;967191743;2042289773;-1397388113;547624277;561637278;1868427116;-1121203432;-1750201510;1797558737;-1809459414;1965705955;1072725318;-506076485;1656679094;-1074820782;1798110384;-254711050;1569673163;29594837;1252177197;156894849;2005309963;-1630527463;1309154767;-641138577;276494022;-1778560439;-1576494397;796743506;-882092664;911352582;-531626098;75001810;-568754164;436243742;294566666;-1532091097;-895978289;-969195341;-271665752;1467166640;516852239;-909672666;1958934229;-1764829727;-851059251;1491452037;-95971244;-316233324;-1742489643;-564488426;841668749;547742950;-214145788;1415946;230982970;-1234527701;-2018655369;962247284;935306256;-908572003;345374372;-1964033277;-537079627;661241375;1783601549;-848854897;24421264;930912293;1452725231;342752061;-2055027607;715243920;1834446378;346061394;-184277834;1060788422;552664188;764803403;-1281262089;416403210;-203880108;1342258870;638496151;1372670968;1762278051;-589835183;134522562;241278195;-1205471415;1600041986;2127011995;904578863;813808889;-937439316;2088408955;1405357459;-291865332;-1891017122;804615872;-2019255755;100222761;9241764;-6645460;-1740531964;-723727400;456237282;131820454;2142719739;493613856;-2037183457;1514818801;-1123235023;-2127595871;1621887442;2112277443;-1721289201;-1207940953;1468004000;-1428195571;-1773535116;-1330948840;-1344700979;-1983157705;2089436278;879866497;-689342860;734162051;-1956910272;1928864668;1547702916;1288928269;-249143983;-783174672;-1104278922;-454151076;1318748436;362556131;163931946;155004462;236705475;-1707141491;-1881182710;-1220496952;3227475;764831585;961589992;-1863533012;2054137547;-707467176;198533006;1614000558;1313128884;1421691411;1506794437;1576638720;1096935186;-2050075091;1708140602;-1908116745;1127839834;-174968935;1666986613;-611582856;1404399676;-313463353;545764107;-39352561;2075243637;-975550850;-2008959732;-952963774;-1059691422;2062844931;-785700983;-353012686;-413396714;-536216821;-125873429;1374805580;1417603622;477249833;1913759476;1610808433;-1588229895;267017937;2011972160;-76419727;-1037913913;-1381719518;-1953032337;-1910467631;-1866777072;-1735057428;1215166393;-755223444;2023298976;326270043;-1154169922;-1028336124;1712533660;450966475;773722866;-425788330;-736752794;1687063735;-1769674067;-1026474261;1871706729;-911772694;-1552454448;-115846722;1115776374;1989851097;-1101717217;-904292775;-2113635221;1698187095;1220226009;792126756;1967434785;957680014;-229915659;1199372030;1769269900;310443923;1454342386;702868435;-2142636492;-1251276220;-1415281515;385752971;-1846487600;-416301356;-1361552690;1334247288;-1488352070;-715457130;-1448228408;-1357662286;-437999247;-872227588;-1537300322;-304610672;-2053197820;-67589788;-1852574294;896455760;-225930087;-811660340;-1380290378;1439353872;548314306;2014686104;915445100;-1930051412;-841735241;-1514575082;-100600841;-1063660456;-2116912132;1750587980;-1567140232;-128816838;-10353258;968618467;-1127355734;-93749916;562796992;630942174;-1895132235;1446655827;1204860539;2085964100;-826354084;-1566807137;177765142;1839290068;-739098576;-2007785401;128330082;1784792788;-1748078540;939076730;493999951;-1051968935;-1631375183;-252247345;1703364525;-110210034;1004347220;1062031704;-1284427539;-1990117759;-82076186;-962078319;-1096418861;182675887;-1223665082;564003344;-1595842163;352978345;496676332;-963777700;-863193924;-2055829603;-542074370;-1258281195;1134279768;-1230245533;-1683348084;1729876046;-1768130700;870533336;948917891;-1485947397;-881347190;421523803;-12522186;1275196473;1442796393;-1187606182;1605857547;1042543686;-137177357;-1144701434;85826795;1276488975;1099679199;-1172643856;101768661;1479639909;311778257;-238611501;936714863;-611516885;-440684759;-1779460364;1208628849;-1606849644;710195603;566354789;-403520192;388870103;453079100;-834312938;604774324;-2085890192;-449445017;-1646535710;1938333903;9941174;107224895;-1997403059;977150878;-588931894;486370754;-402185984;-2037407066;-1758400468;-803642977;713293830;-230606375;145194622;-1439148237;1564123347;636474969;-1178324067;-949914052;-1586208931;-1450411778;-1341220624;-1942365441;32492631;1649880794;544583919;1957148372;-1563025261;-438340672;-1267660677;-177202614;1464496475;1484645393;1160219616;832346710;-507843712;-883095742;-1554208967;2141818588;1063560135;1288379930;905729343;1055218292;-149895842;348628044;-1748729960;2114306911;-848993356;962480082;-1520453254;726492665;1458208223;-521045959;-1171162490;-105776199;486857736;1893931215;-1484715794;-232598843;1978867656;1332550904;-1856196375;-290680476;-239698351;316127753;-1008060355;1429430311;-993835344;-1798983342;387106372;1113497225;-2015144610;1793256195;-531051646;74929310;-1750142448;-1374739243;2089916815;729846979;1319898541;216429211;-260232217;1092310709;-1608807738;1669113111;-1071650446;-291793830;3418595;-399244458;1705037649;-1835819943;2103862449;1175972667;1525143982;-1195341096;-1304726576;-449964631;1684834274;784275808;-409377614;-482446168;1757449291;1829827847;1442505524;-1039793472;456029127;-1279644068;2010553072;153951216;-967870580;1564390472;305607595;1209722710;-540289485;2086351569;31219186;1406506077;1043121712;688513749;-1961001745;284696680;1041527536;-735851879;1539398316;596270380;765939784;519124565;-1550782857;-117591272;1252925079;-1020634849;-383179266;-931437628;-813375881;-6039111;-146836904;79155934;-1468989042;155028021;-1213143581;1492589760;-1926716639;-1437918772;-49123772;-1388674302;1026601216;166647553;156327527;1097883558;102178279;191917352;-1981973810;1454153859;-812718254;-597516802;-950027301;657700419;1673905531;302724399;1714103449;-2050831865;-1508285687;2001860712;136721535;-1398558930;260483696;442970181;292420175;-410973630;405591741;600235946;1624128044;565840604;-96860440;453345236;-1990204222;-981466657;1233353196;-1365642846;1617622594;1204946322;-438509533;-2064281915;-1178937943;1052496286;-1499905154;-403112427;-3143976;-725948014;-2085371551;907954492;-540540198;-211926324;-1650842405;964144334;1498639736;-305204240;-1026012141;1954190469;1299398218;-1831159602;449058484;242174781;198661707;-382717742;1272585649;-1228871507;-2023066039;1180422358;1323136531;1947023707;1717488836;-731956996;-502598177;-1796620783;225782469;1249922816;-1544702291;-1235895212;1073174072;-1790902685;-1955772527;1987045964;-2103072849;-1009664368;-1161700017;-150632782;-988160217;-442806393;-1871706776;-855777497;110055306;-1394524727;326895215;275313444;2038576014;1524555974;967454687;920403032;1201072406;350766962;-1711393702;1505083673;280168666;-1672140187;-568599545;1037562873;-1349352285;976191212;1746755972;-1821726494;1536459466;-752664702;1382750545;1174195965;-530151462;-1441416180;	};
	mti=624;
       };
       RndSeed @[19] {
	name="RndSeed_20";
	seed{ 709250611;-184867552;-706059823;412088797;-829433547;846764115;-1587706939;1138457738;1191937503;-2092851553;2031130875;1279272109;-106789912;891539140;2015590242;1754731806;-977146805;-1561542535;566674329;-1756951440;600763150;835664539;-1956900291;1422911986;-1545644041;-253570878;-1938119361;1333515820;2025100509;619476713;-1454597365;-747635796;245887787;1938944792;-446936577;920980623;-402687089;-1312970143;213398581;1645213200;561130973;-912106150;-1972210361;818753892;-1709244256;-1040190953;-1861011950;-1091378049;1300630145;-1694456655;-2075540015;415102834;1216127534;-1891621952;-1447105088;2111741889;714262264;1764440081;-411193718;683421000;1668375972;1319462742;317740177;-1844840844;2014143182;-1898855700;1452623400;1116708720;655646937;-2066917662;681649830;1540167109;1089174172;936404282;-939918804;1472977878;1928645407;-1860619997;-31323309;-1968421153;334445185;-382198218;985745467;2072384154;1645693563;-1419662217;-167336065;-2069532605;1545540349;-833660475;-658284168;-1566750494;-768761668;1346347704;910111835;208755526;-1719961346;1079613389;-1943466018;-2068578769;-1656464091;-1578917944;1171727640;1080755268;-379282271;-1930265005;24915807;1794213862;-1638515313;-909001202;-1932529521;-442475248;-107420689;381630605;1452262675;313352845;1442862869;-297267367;-165988104;488164990;-1900222930;1122524117;-1315131618;-2041900409;-970294283;382963339;-1030971307;-1381808019;-1304954037;-259050162;2099330275;702543789;581127365;1139128126;1332413281;833008999;933933355;1263856000;-134403729;67118119;410526447;-1163874344;1719077776;-1625347644;554725806;1544878135;513070048;20609011;-1847107981;-1561740246;1627432030;802205970;-74023246;-284969618;982051227;608509378;-192966618;1199221814;-1022336687;-87472135;415510594;-318219093;1719301866;1549905498;-514490997;1973440333;1841493410;517219574;2083797942;-896434468;1415931301;-2032017825;1739030621;-615849735;902204752;371560767;1682310539;1734150691;823079452;-1416379969;-870017723;-1153737901;1300258987;-1543037495;-95591217;-49417931;-1391455992;-1883565139;807431111;1021904192;-528592130;757801872;-1594025840;973001819;1940618153;-1452494325;-1385689263;-1987676284;78503588;725261179;-1884214449;741165866;1899897436;443700348;1035317688;282236517;240411559;-30363470;-660901979;-1180900529;-475733197;-2081271101;1814753273;-685480531;-1954005892;-997110643;1328362206;-450401836;420598189;620252956;1913729768;-446249014;-990485461;770108583;-1655587389;1813194502;-392026715;-1649888927;405862387;195550916;919455802;-1326642743;-1873837825;-1102034502;-1322742142;2126690667;32694718;332644067;535219069;1700736576;-1642788459;-1752196988;1475404752;44809064;-186410756;765777040;-944181818;1603746992;-84104243;-666695873;-1275791450;229144751;-1395243769;-627316490;1776354983;1759540861;224074732;1515671837;1721695502;-779100434;-1064646267;1195653347;-2037816272;1882278593;-1347207480;769122491;-1500725807;1004654666;1653917758;-1852458776;1449996128;-1089103020;2063683582;-11728980;-62279651;1898220265;-568789348;-835885872;1755493205;-1317751493;2023096725;1427297405;-1014484474;-2119996908;-942104118;-7641494;-2069063285;-1258166996;430377542;1397785791;-1090515432;-1119388827;-1039216697;-614212231;-2042450872;-1803053991;-1705034737;-15685814;-367586825;560048751;-322525705;853216881;1547578563;-1144423495;802284791;-1474787932;549228976;271362979;-1091636349;1226644506;-1790735651;-384818638;822130573;945676506;-1739300548;302419121;582433809;-1847145230;-297055250;1590807232;-1517467547;1531818212;194271387;-986781334;-1807071055;-1021609244;2129534313;797328207;-987310477;-1373336711;-143860783;2052332837;1120126080;-420703950;1499431587;1241857337;1314660456;1720712126;-88044883;720360953;804302225;-1580329846;251847422;-728793715;-38827938;-54160630;1189205223;-1403906535;-386650877;-815087011;-273351052;-1747511982;1467169264;1812911734;-1545515691;195564470;-573166030;328168378;513618888;-13404337;-1925595548;-612977241;1149660958;408580006;385344490;-1406458177;-806588673;-393173285;-633115480;1315857384;207887711;1490054894;1914875071;2001852011;1944998728;1519906372;-1403588687;-1770496488;1385106364;769837068;-2401736;-1334759996;-158333284;-1665747654;798521496;-874975879;2046950564;-1216349284;1819792602;573386476;-2107387742;275181735;-1745399189;-594758154;-1500059597;-2128423456;-933079626;1654435574;-1103874047;-928467522;670882337;-94062186;-1608452517;424006576;1621472772;-437485938;937583671;628357706;-407282998;-449485850;1472788467;244864533;2126394597;1838474129;-495593106;1473584800;1994407973;-641166379;-1776690416;-1544678979;614807807;61404480;-1851259930;-1399157093;1098458373;1555480637;-224529066;-772847308;370627423;-1905607384;863903040;-1691825169;-1682617551;103413712;1792874178;1572689826;2031013891;943137919;1136811729;404535751;-349057989;-1502114863;2109937401;1175112083;-2095142314;1015818465;-279737469;-232944833;1942948972;-783204926;727754727;-498213146;-1455128803;-35209216;752901621;-1266667408;1000218818;-499597229;-1585532582;2102137219;1995406358;780486112;370766638;-454029067;176445662;265805671;1451902069;-228911209;1922728760;-1984018350;-420128410;2036749232;-1644183635;1162103012;2033602867;876596373;901412261;-821511946;-1004595321;1484123379;-1796079782;1619515289;-853514022;-1345027968;1932150574;-703644048;-711708603;1798734725;-1048606468;-358972028;-618860755;-525599471;835156998;1362961995;178501408;1366778255;-1708098314;581689909;894541275;1806335066;-2125675301;110152850;1150867856;-72126164;1101451395;-1208756413;1613543327;-1925578415;-807603525;-2095563627;220051601;1282829364;-602664983;-1210809517;72690167;-1563443338;-1785225528;-1202601545;551439215;-769971246;-840817539;1731319231;1648231424;2057510768;910549665;-297692014;1415067715;-558397927;-1209936814;-186149471;-35668740;-1537013330;-1359749392;-1188791921;1598778295;-1352669467;1203288635;-1222605573;1439480151;-1035065591;-989871346;1772415806;-223442695;1560270529;2048687072;-1162917146;-1300721130;1581930503;-325455230;-922044406;-503943501;1313201559;-1673546666;451877709;-787678069;-1258525741;-1677695839;1182265724;1408839039;-518429979;557522158;-246429161;-567578602;-760121476;-244310449;629580337;-163497845;-88860705;-1059706876;-1139110916;1733700464;-1101685040;-645657322;-1280546682;-1299193262;1662065615;-398247802;1130855354;1059579401;1528272080;-861367879;1754532519;-828044348;551298762;253979130;1250270187;-494092388;91009798;-1126508118;1953155477;118341042;1791892361;-1866160392;1674030323;200458188;-302130737;-1018618928;-226433132;-1309921303;188787982;-1333606690;-536333531;883263064;647699219;-30155813;772036245;-1273042905;-1888459272;-4126718;-663243834;2094095387;-979811675;-726916126;-297495766;99484307;-867389082;452201537;-23158514;1008763275;1291026754;2031344859;1744621167;1580749268;1758873720;	};
	mti=624;
       };
       RndSeed @[20] {
	name="RndSeed_21";
	seed{ 709250612;1627565701;722435606;36734129;553521881;205688994;-1038630416;466587622;70245318;-840389849;-1638020802;2085978295;479669722;1747239183;-248338284;-1789504862;-542754512;1167449136;1481447527;-884787631;1037324398;-1630496389;-2000859693;-1911845748;-123178466;-1705932150;-1358532670;-1919428901;-1966021447;-1276161820;1308623068;142711888;-1107723344;-260173989;-480631334;-2050945088;1558710702;-326928080;-2145379259;1975396138;1831368479;-1568142081;93029627;1628621362;1711542603;501312607;2005375145;-976674185;-1929991180;454196799;-1684765171;-608179426;290801573;192909646;-1355214340;1377240941;2046998996;-1990635966;517742458;1309062493;624413064;1821657829;1859227698;1413361502;-478443589;828769241;-1136810529;119584116;925805320;-869744019;354653100;-87797981;-1481943064;-133437029;-1076002494;-984662389;1450341364;-488055562;-1965995529;651774712;1235307560;-1081868930;1881038398;-1541151186;-745841744;267581684;281201818;1821319961;-2081902384;-13884109;-1868473270;1342435523;447991526;1928574747;-1059444832;-1363353938;-1436424644;277415127;-1350109131;2023120150;1254426999;-66657805;-1959750634;1710563403;-2113710182;-1705384095;436290937;-486725080;1419748963;-1212868841;-513845065;1308775283;1706094186;2001884072;-1210092769;-2121404444;-1448362958;1036447589;-44269489;138103411;-2023691561;-1900305534;856097274;1739100701;-361324152;202252116;-1683861342;-124817505;-1332378356;982777095;771527493;1918437308;-1267780843;-875071592;1681990573;-209838237;-349388440;706187968;1008051786;244200893;218650909;1204203006;-92725975;646577185;-582671723;-2048726081;1893345059;-1359961347;-719075793;928955377;1519067051;-1032095575;-756050518;-751010490;1053448659;-2001970214;-871443244;-140375952;681042173;775825776;-456963632;-866972704;626338865;815245560;-1811258756;-801093029;-1181848226;993747443;1467854983;599284615;896031725;1792612908;165964141;25423278;453043284;-807990829;415707072;-1385982095;1551649809;-701590781;1913323444;992067614;1290984076;-928993448;1421468319;-1041303793;919659638;1910982985;393179684;839470321;2121225427;1611585945;-344575560;1717285512;578273743;1352679022;430639503;1065438512;-1667095370;-2104963125;833326101;389579282;-1922763804;-2103160695;1371220643;-350845769;1574088658;-1761850866;-1417829492;1174046167;-1638902720;-1734962979;-788037681;166565969;1735881163;311099273;2086019813;1256442061;-1612458;1826125924;-1332179531;1678235920;-977683053;1470749359;-557030010;731593562;-562588316;1307775366;1140337191;-830408733;-995578810;-1398807264;1218615634;-512169560;829273185;276239408;102279132;9631417;-1424795413;-1818901028;1913446278;-211521484;204387749;1629878284;-367733995;-1933046109;-316084357;-1516915889;-736169127;-538497669;-338548398;-818043152;-699405861;-694953163;-1893768372;-492245819;-725262050;1990383218;1411852129;-1155208733;-404705335;-1069648457;1838007562;514761054;-1596786402;-95402731;-499251016;-1774025262;1250630684;-608658050;-2037839777;-535489856;1991230207;1604574535;33211312;-1804049021;878253561;-105452206;325253899;531820398;935089534;1166027215;244432224;1803032571;-888389442;732278958;548262852;1698984307;-959134438;1058743550;-1754036392;1064931749;-1318403011;333325568;-1150182874;642454875;1133125903;1620150703;668692688;-22883525;-3256764;1815732784;-2009499773;807874580;-1195594476;-559214369;-1417190402;751849375;1780777455;1601282587;-565518472;-981467202;629607369;840251526;826868760;-1045989709;-2073688916;1568864227;444710760;7810375;657513795;-310040656;-1850968607;-1051328814;1879204537;-892507171;-1932042788;189126621;-165777287;-276190357;-1109178030;1310178779;-1393716658;1830380873;-953123146;1558436792;-1534414259;1481482620;-2005427037;241825240;1028036492;684177297;687801995;2028665134;408385507;1960823016;-1456605625;802166676;1321435840;-1285365630;-744025122;-1315496816;1323723002;837992296;-1190384278;-1544383637;-747218223;-670418881;-1916515054;-685770569;-1197378452;-704393521;817873894;1053319465;-181647463;1509927727;1790716052;-972635848;-357576521;1392094325;16195382;1135425473;-328417228;-280607192;292795245;-1314512776;1497504666;-1122510688;-1580913820;-1899120967;1360014403;-1327576697;-1604276233;805472808;-200807608;-1760036584;947532484;-1061360425;252896552;858706509;2082418407;-122644411;1360235302;-1270954260;-1917068432;-1951688827;125503695;1558856248;-513039605;1592695735;795989598;674488999;1196739701;218808151;-721154585;-951811959;43422216;-138025281;1219667396;-309013166;1662485391;781182625;-1684461535;920425068;1079349818;279004646;-816665762;-186817966;-248765289;906601479;-356092057;1240309785;-703266018;113230104;-1348138976;778332435;-312630999;-514453187;-1763640030;1511653197;-2131401046;-480679433;1638294260;-1572001446;-1795593878;27738043;-902547077;-341580275;-534166724;-268615534;644813805;586658618;-1187397220;-273091823;-880113194;306077638;-1169768228;1228072789;-500352540;2032498916;-1010941669;-225605573;-918243364;1234953152;497690091;-271009154;1907980825;-1758722751;-1677463495;515529746;-146147610;-2121140442;768919298;1015060377;1628156461;-81077971;1583566584;-1757385968;-1422597650;-1774686223;198326197;196270400;1150482456;158352566;1997177768;2100978824;865467625;-723223862;1800995883;-763420559;262328538;-84471325;959115074;-355944211;-2102766134;1838408141;-1681767582;-1051527481;455491900;1201986197;-418418098;157175628;1706620648;712711386;1727598064;-162563324;123947699;-1676982896;397121164;1477923631;-352751334;-710999598;-1737780629;11138660;614841196;-693911659;-717496792;1638968306;1314776027;1559269631;-2022497228;-733466291;-1543490618;-366718379;1488880624;1063061784;691695740;-307970319;1020057984;-1883811449;613832833;-1137379858;-504081370;-814743132;1201932271;-1418231565;-859973085;-679333713;-1759690260;2085970679;1012904736;1853738419;-1567331506;-1861352687;-743349355;1952551493;-777970964;2088929636;1489650675;969364117;-1796713499;-740246720;1052098189;-1299667776;-379398998;342579662;-569659800;-1008724646;1413746497;365119077;-1619405569;-1393070344;685282506;1318637531;1887153452;1219717612;-1812749907;7238456;230977350;553017037;-309715439;202604875;1626351561;981580827;194423771;1265042076;777326375;-1430529126;97123632;-1921018327;1507869745;-1756849877;96100457;-285262678;-691510805;-2033464633;-447910151;1757844707;104051052;-2041852449;1780383605;-1670815991;1455187101;-1703989293;-383010627;-1722838209;-723796389;-403229949;869409100;-557002423;1943350912;2055562292;-759961543;970435379;1863964785;-719956349;1671078612;1559838046;-775548975;-933649871;-1970814446;1557799593;825464482;2070225477;1847126832;-536279630;192018995;-566099074;-665565263;-2122543717;689553599;-662158146;-138983947;-2122759565;1987883515;-800652279;-2123107238;-286621407;-1584519468;666360537;-1751745783;1468297412;-1728254681;-826974456;	};
	mti=624;
       };
       RndSeed @[21] {
	name="RndSeed_22";
	seed{ 709250613;-854968342;810729455;1826988110;-1886681553;-199949114;-918860097;-1733514189;94185565;-1473924678;-16607838;25112976;-1012621860;-1383620600;-1553105408;1555024089;1102959944;671626974;1487696808;-1148316992;1650800798;-1651151408;-1133005328;2100775569;-945325336;-431472176;1451287385;1911278035;1036386806;736455723;831762453;1158853992;-2057976947;761704076;-1296053922;2045816175;247876234;870662807;-1338567495;1961902318;1343391091;1054255139;127930617;772469608;-1905479628;-190289029;943562374;131023117;1106222929;1526442689;1055596018;-1889054035;-171162049;-2033069599;-78689851;556601685;-1973333055;1015965480;-881124606;1376530592;624711873;-711635614;871854211;1131052782;-478479477;-791083799;1671834260;1131121164;1755933797;479545273;743853379;238704310;-60449770;355520914;-815279900;-1928197522;681961704;292621269;-1883133865;-791681320;1485719479;-763580129;1841159262;24103118;-919439462;874057906;-2068785008;-2119592975;2008640055;628608423;-119307715;-1440247599;1205997211;-1271517921;-1890627121;-1246954688;-159157398;243186126;-2045735768;1349810549;1428094760;1910938770;-1513393819;-691741430;-315357707;1584463991;-2029103880;-1091088115;1029505623;-1068270656;880815965;-680102624;1583411775;-443236121;-1524228506;-1828093465;1116130509;207354097;-1827065717;-1549240444;-2045256106;833727389;-1657095573;-624116504;843926579;-810853476;939277625;-875124484;2132419611;391653571;-991072143;-302489731;-1836442822;395687325;-1618170761;1308469168;-978853283;-1410163297;945566843;-405567470;-1900230591;360439292;630092026;-1702994639;-1541402449;1515071954;-1644336175;-361466414;934696201;-1380950494;-69975242;623436160;-1269925864;1643203803;-666239844;-373636522;1426139429;2020966353;-1502495314;1226105211;-1539489854;1367861089;-1190090366;-1865916381;-412707159;146828215;-1819250983;-280236018;415738569;413856502;-1540259400;1242216717;311848552;-1152960587;-1175786783;1100425022;1801204619;1404776483;-561369060;622760942;1975303066;-115804196;2123965105;415948839;-284143845;1433079089;-1717902166;-1626202365;-1178286815;-1072266612;-1163326935;-2041641290;1722808772;-1602553734;-1966850022;-1503518149;613876289;-1148211862;-2125196594;-1748068541;37385837;1668026058;421100001;-898793584;-142737205;2023315381;-94703918;593826372;1031969188;-1942265211;-1059512555;1759906433;-941578924;1300089640;-1099359997;254764860;2123814788;-1417923246;1438177642;-734721262;-1789888623;1103223004;-661400305;1923775131;-887830110;-1367230874;1887730262;1444795446;-237557353;573545545;157989555;1944745094;1468873003;1718945915;-1056201972;759389398;-1172560038;-1315856731;-957614127;561391817;1492166973;-769138275;348885576;-2054078629;-1264345071;968708980;1367802298;1515045566;622792019;-1532580424;1624315228;-394841172;-1082586105;-1034720266;-1620920921;1219098648;-175946787;-1624402537;622576075;1865816346;-410756181;-1914891699;455967025;1198404188;-1007115079;1515620459;1711967452;-40445636;1266642407;73429707;520678949;620413608;-72174248;1242317048;-1737890737;-2029041548;973651362;442270719;421301169;-1394878740;558050046;1718871375;-1634584864;-1489200571;-1788223969;-378722418;320213183;1608766330;1835811751;-42694753;-523240018;-326390940;900054983;276244904;1206278254;-499299342;-815140803;1074722719;-1245888384;-1765931403;-1951449825;-878533986;242953759;-115291542;-1423897187;-1481803796;-1407143912;802776437;1514382685;632453761;679501595;-1421346338;-1121955580;-1471795561;347152131;277796970;-1659757298;-2063277319;826466629;2127810168;341719037;-1190298350;1706027154;-1578996158;253083780;-1959290535;1132344621;796100515;94355351;-1498454308;424830176;1469951403;1791721310;-1727260472;-1064312064;1918250110;88639083;-1233564536;932646340;-716024921;-1313225464;604182599;2066191449;-211247089;1984008724;-1717641054;1178878074;-422820638;765105953;-960148894;-179617117;1605954175;1256452886;-492357516;-1468926123;-374004298;-1986478387;-1828122608;-458556800;-719719914;1885126833;2089170649;-1808450398;517115019;1377097539;1144602743;424646140;-41023013;1899396008;-2142553058;1436398718;-1337381234;211569328;-395204379;780450356;1768901627;-1268267750;957520881;1768063119;-1232423039;-1987804373;228045226;512955280;242141519;-795233109;1592405961;1953424234;-1553924678;-317484260;474850240;830692422;-484516059;1118003590;1482144460;1697605995;-452701603;-1822765406;-507042131;503800372;1810076691;-8057174;-1225376962;-478380994;-2142983516;217328402;-1931501137;-1451532329;1590218144;1722501917;176856997;1369655987;-1153188907;-132109201;-479505351;-285129088;735178318;243057766;-484568097;243438446;174852617;4048945;1306080762;1383243949;-739675773;-1554560728;-541238981;-1426379582;424372587;1545067491;1967371223;-1311933668;583443077;-1829090007;809072296;-440157702;-2037538320;1730766894;-1990180032;1707531456;148857564;-1878147452;-301210985;-386033122;374494252;-1162165480;-338828033;-894814934;-877073428;-1648296437;1129712718;1202856941;703953375;1428843967;1990851515;584899624;-670284401;-991732220;-516499060;2080005685;1771896911;-1707286894;1125048477;1599478618;-719749194;-1839578823;-1222553320;1145170708;2120416796;97962053;-724766194;-1128303113;-2091079552;-582349022;1178051294;37067477;-1495984924;1955223194;-987095036;687039393;230586724;-589796780;-1901361868;-2140178896;-1516739171;-1092931425;701052118;-477994924;-564161734;-200435611;-1028278233;1245244446;1202372902;1674384719;-1653463117;-149003325;2090802351;-2115932010;1732026453;-16500970;1001847356;-1564551264;-1809922337;-1801733081;-1172043376;-1806374254;553098441;-1709740473;1965322292;618636261;1379154006;-1625175215;1902748862;1561409627;1902733187;-746034612;-1310770642;-899186336;-1932981996;-1463329356;-1614257963;-1614658085;1945481638;-1953335315;-1904133546;1769929008;248154978;1647210936;-1086463732;-1606661482;-172055947;845234336;810819891;-2091227597;-1431204758;319295262;-468252947;-397599746;1783722474;-913983791;-1470790411;78030479;-422887544;872314613;1304497608;705299309;96710946;804132492;13882207;-1958134369;287921686;-2030387500;-253242731;625106262;209443607;-423771843;100232609;-1032164431;1204601191;957474156;-305507893;-1290908136;1730591859;-1405133524;-769694887;1644388022;1141198696;628524963;-1345404794;-181102004;1887316580;-1422276333;635268848;-1186253076;1133775907;-1865089624;-949088175;-1620683622;382515769;-1308820545;967997652;64954856;-1115321651;1554091249;448335095;565399227;1274881296;-1557349633;698494236;1122224728;1603762282;891340677;290973384;-1851320520;-51366349;320148290;762113373;-259298043;126106547;-519873803;-692417691;1677498262;2028511212;-1932005413;997966840;-1350825164;-1268099925;-1310664181;1151588588;-1372164895;-1712098576;1110302172;-186724460;975222775;-1390623272;322026344;801217135;-2146412749;1400021438;1157761477;1164165311;800242530;-277257705;-1897109422;-2125989377;	};
	mti=624;
       };
       RndSeed @[22] {
	name="RndSeed_23";
	seed{ 709250614;957464911;-1583510739;-1259532146;-1019841728;-1828760460;-1171687276;939448629;-969142543;-632330365;1949783434;1902715618;-1168425317;-1666280598;630902806;-1475748163;1062344811;-1184766648;73011268;202952423;684998711;-1482963768;373997000;1535436799;-1148684978;1219490581;-334718210;-657093908;1948432231;1906438491;277045920;100501823;1613946107;-1356269373;1099984199;-1386245439;-745258477;1598595189;-927899158;348148244;-900131316;1885125396;-297333645;-1631594405;-1025049527;-1607785633;2054994143;-936002107;2016204110;-1862242468;609697352;448273051;790393435;1407766812;-1500641881;2056292176;-1834566611;264660420;-568849778;1123851996;851047021;588511806;-2021726028;-2070596083;-147498197;1944936201;-1111898518;-1840189621;1627093265;-428846187;-1742323596;181441749;-775703215;192768931;1552593561;-1099706813;752363761;700981346;-805881608;-857420202;-922491687;-1644694445;-557204153;-1195569113;490613741;-24892970;626687583;-1293045038;1881726056;1894917830;700107741;1020703628;-543243624;-435897724;1432409761;-529511041;338292300;-114970531;-237837448;1615696618;-1431848421;-1183658686;920795814;1529739749;-1726309540;-1942578561;2141378747;-430896179;2012014258;-355348468;-242737831;-404832527;-5318678;-1528438690;105300158;-1002325655;1678631238;66707576;234735566;-1280372035;-1403806509;832550894;2096361312;1325357760;-1181280351;2109181644;946998367;-1204373254;-1520717224;672499715;1381844145;-1990309389;1499211161;-1197396611;-345445727;-933018511;636027778;-1738738477;-1184403457;1286116444;-1066185155;-301003517;1424302478;1548010746;2070481559;2033546175;-1086760824;-976762619;-107969038;592040362;-520506712;1775108366;1480618627;1212334051;-768366908;370297886;1019614834;-1320690281;1375873383;-1395921955;-725129573;-1766141287;-1733883191;-1908742726;-1976296900;1212909851;-1444806168;-1097401351;-968376913;1585635717;787389886;-1363088735;1579339259;-573829553;691818666;2023542209;540601712;-342450719;907558108;-903495809;-2134775648;1181579935;1646391052;-441694760;458670879;-1585474828;-910908984;1332115666;2077988603;-96183457;-1587525622;-1983859737;9406233;1167830686;-1590166403;212833758;-1182011558;-1028422019;-1187021188;-1372563843;-1999300637;-1727998578;-1234162426;-311105697;1651737624;-772571222;-301871237;721818407;867593779;-1890073104;137206604;-248647217;1780126288;1090524106;-567512339;-41109827;2105657294;-1026909052;-2090532579;4983062;1450597514;-1610225996;1640328364;784823840;-305611904;-1591732592;-205845892;518134782;471988762;385193767;316244553;847804596;895218668;2118420741;-310824066;-1312147908;-8350366;-1621960398;1647993054;-1191669782;-831787144;-1541714056;10790420;1482832599;1410841954;-747850748;1986774713;1961222031;674640382;1679075375;-1956054752;1437302117;813628784;1170927149;901350490;276521601;-1511266587;2029304100;1537530267;1270039749;1591936600;-1503255774;-990380890;-259130592;-2057383721;-302161390;1491716799;-454120447;-1740312618;-162065487;1807943752;-379562276;362323467;672611944;-697743334;1942868976;1312266281;-1519095587;-1049567215;1911556657;-260590072;-1913407888;-2098725356;119211465;943774313;727145866;-1588804976;-1587091783;-231728153;1059325461;923444331;203235930;1196865702;244922888;-1195758002;-665915101;-1374731576;-498502437;-395660702;-1741338000;-1292148186;61799777;-213261965;-270867873;-989688964;2065760588;-1026377325;1969309443;661591806;-887881365;-1115867330;-1751521309;1878451709;-413099611;920679864;-1651119405;-24740175;-205832329;167845378;898492937;1165699021;2021056701;-1706080402;-764151073;-989481456;-935984700;-458017847;-1007646215;1167276778;-32832768;2013908089;-778967901;-2109156244;-1754485069;1513399843;-1499742535;799101975;558333284;17497542;-1014032783;1872027214;417136000;22643926;1514270661;598703532;-30301643;282977960;-1768691293;-540453151;-1038337401;-99632270;-543461900;-1678994733;1319028438;552502069;-1799085492;2145339434;233012572;1985655474;-1571861242;1151109116;1249054010;840289457;-1308918720;193288566;582382331;1583395189;-985065421;-585614240;-1651126400;-592088644;-575792946;-896499883;42026083;-850528379;98787157;2014059265;-1808160647;-716813055;-1224706747;-1696447105;-723496754;-1185376417;-394297808;-331671905;1085106445;1089855294;-466432930;166946613;1572214382;-605994415;-1264906783;1624241943;-2032057545;-162930061;644106171;-1441767085;-1312702590;225185550;1897033749;-87233164;1345282180;-1124383989;-1488960224;-1656194562;2093219329;239155094;1402222021;1922767852;-123806950;-1550068873;349637572;1350535664;1958373042;560288061;1511895984;146317173;-161511478;-707123985;-1354309953;-413923531;914145267;93702021;-327096800;1492682871;-1638990281;178760083;-1796566102;858335988;1407617009;1883444062;-882016982;-1840491555;-266834004;-1355695939;1538595854;853613215;1483184496;806618187;1883166286;430167523;1749999432;1134242439;1738768025;-127382604;397135856;950041454;23106085;-732792999;568214083;1643839793;1140468147;-304040194;-662660970;1148645775;756305101;1001849769;-439819146;-977813261;-565211013;-587450076;774466864;-1642674754;1190240507;726683250;1304950475;-1434683004;-1160861263;1950269555;-857935665;-1248055726;1066866535;166943867;-1797369504;1190236036;1270795860;2131093093;-1034196143;566115128;1548113655;889452270;842517447;847373925;1515123900;1330296181;700492969;-1710648941;195299612;1885050356;-854243182;1966226463;1808779201;824152236;-896261687;1460433056;9804404;1943668148;-435871910;-449117937;455792559;1595719935;1485968427;1670541448;-2034321148;-781371562;1913017218;-339406935;-1614337523;427729127;-1386079200;95505768;523777031;-986363965;1202393281;1203002818;-1532273934;1742033588;-1084260242;-1352959838;-284935897;1329254716;819541018;-414614964;1050315318;-160862374;1000247594;291815840;-1816197585;-1410955567;-471916976;646341585;86457480;261598140;1407344449;-670509482;-1367142752;-1158186494;-1980947431;-1281444927;-98219766;1879745449;1063222117;360168951;-223861870;-598367403;-2121500401;344897859;-766970734;-576645031;1225574311;644652196;-1054240037;-1729853088;-1185044525;58265759;-1325291546;2143044384;-417716430;-358502013;-196572753;-2046861556;151060663;1338521957;1651583655;-1727878222;-1111560539;77367577;-489719276;-1898808245;797776902;-1831516520;-148683011;2061169266;-918145892;2134170617;492471063;1316882771;1140101531;-1533092348;-1851207519;1203146131;1942421215;-872849956;-1850252734;1353581960;-396524970;603384531;-1009085814;191243097;-1415211670;1260428374;300498850;-108933318;-1632942898;855069390;-1568281703;-1624708741;509927442;-1305212048;-1866037167;462239255;-1622562708;1177834432;1774081664;1575627841;-1798195299;190483225;1222132796;327324529;1199744758;-425258795;633744593;1524795865;-66257763;-190694724;-2069207358;1467436072;-1158545514;-1337193522;-1562061337;805499589;1148729126;1325573073;-798690433;	};
	mti=624;
       };
       RndSeed @[23] {
	name="RndSeed_24";
	seed{ 709250615;-1525069132;2129649616;-1105123720;1174501414;619857512;136015630;-761049459;-1923482610;-524886843;364187688;-953366573;-1035393764;-476955576;1426255013;-1018748733;14068688;-1454106335;1133946337;1381257587;-319282162;-1047777738;8099839;286486194;1103490642;1743155672;-104395849;1387721247;-795765774;-382576846;-2318477;-1620191409;229189249;1658731014;2028708837;2062069015;101126098;788439039;-1039296831;-866628431;280986722;269855955;-1345381783;247836514;-1031298090;-1392271306;-2070542158;380083615;114575083;1612758504;-269771233;-497656513;1620829408;-1188776454;1252360974;-271008734;-1374232003;-1311507948;-1206816536;-1028340083;-445230014;-1802696990;-999188834;-1531612880;1166502650;-1215657912;2124242804;610223724;-751135520;-2046871340;1224078004;1725865648;-1147644643;-260035452;-1508454259;-997863498;786812853;-2033856586;-1507965358;1774357983;1623181030;-1318315916;1274465504;-1842725352;-258184554;1758644766;-1003661935;-1750342415;-1694736585;720891202;-157880988;6867198;-472302958;-352144238;1185535635;986958329;510914717;-540216494;-850831273;411094407;729765287;430189128;-2141374770;380488419;1146717943;1497752951;-1365660168;1519545869;721278760;-1872606411;-745989087;-233550887;1771018098;634932176;-2120730238;710160371;-1803225517;-1468168342;987042942;-176520147;1867826334;-1107056076;1560481224;-2129395256;-429928658;-806956482;138319759;951472874;-290197294;982834166;-1842647408;-2025012707;-670814785;105097137;-280632741;488334655;2109122915;1399080499;-1820429244;-1828235735;1848574595;-1972269097;798604439;-373999838;-1662621291;-863340508;-1979758859;863121158;945865714;2057818383;-763889380;562028754;1686246770;1592918520;307759319;1264028782;1052430183;-662506688;1789777165;15497819;-1488717433;1291624218;1317878089;-2108218869;-942260431;1370927455;-2087630660;-848207459;239800830;1982924767;-1113593536;-1665574475;-1373350689;-1278557986;-2043161734;1014605575;2073208179;-645707605;-280653062;-1293337104;835318574;-971862053;590698734;1193637021;494042692;127546765;2035979867;1873378365;1996365928;544865066;-1381002672;332438809;1292852381;-136116659;1595095944;976342736;84142292;-537898903;-541166440;-959974162;493975369;1704534422;-1484451747;-740602554;717384197;-342654522;-1979211641;160203336;-434114760;1346172440;-1905296977;701732628;1306546104;-29854254;-401975989;-928043457;-2139137404;-614830665;-548496162;-1308546804;-523259550;-1652234974;132941438;-1984135531;1631437171;-872327973;-1529474534;919338075;319046603;1199792892;-138775625;-1637418261;-1018777643;-170465705;-1151871986;-965405273;-1136505184;1084995799;-1081838756;1083233029;1865180548;-2122630294;-2008999686;-422341941;-1367477796;-2093859957;292343555;130762790;-572928522;333012898;509504996;-1253285905;32681597;629849422;606957252;1301256275;879295322;-1285270141;987678183;1327346726;2100425575;-809460157;1601089606;-1460499446;-1462138832;-653033789;-1966751030;1220207091;-96229498;-1577433722;1837961762;-95296546;206253121;-1239531594;-1208846570;99528695;387423367;-87686824;1414872317;-567808893;2060504984;1823066486;1913531405;-646066729;848603584;666810845;281123407;-1004590774;-94217235;1468179463;1954278784;830848520;-1364311476;-463607829;-1853904978;-573819901;895780136;1610805745;1379067098;1351253650;1583717419;-1680926785;-1366064193;668868544;2011187184;-174891962;1634162027;-933204475;857120658;944773071;251669729;691871484;597038756;718320621;2082198203;366325405;-99947987;1289945955;1108199656;978581036;1024568476;362583757;-283757277;705763043;573735891;624881284;-1793802406;1191024383;13402494;1953334783;1574751360;890550576;1486340412;787735390;-361233564;1190950898;-378446033;-270722643;280707320;913136427;-1592001461;1007459106;99379136;-1341476841;-653936991;74170691;-171631671;1831408141;-1708094440;-1663618657;-1581344433;2102899136;-1442813051;812035236;-211688938;1915646124;-145093979;415435491;905693173;-569703920;-1862730265;-10569278;-233925745;1703551911;-31594518;-431541926;-655484277;467353879;-822673789;-886773263;1684066284;351461108;1171164088;-246275470;-957542133;819790239;-1402422221;-480282162;-1653291941;-2037114472;89621822;-1098399501;-999876205;474687311;-925316437;-1399595575;-325769831;657277253;-1851019587;-1267127840;-2006615632;-1979234623;-1928181897;-1062809678;-1597199521;-469802436;-485590169;-461687807;1467914328;-85410388;-1893826917;-889793298;-103819245;1913704419;118486974;1125346699;319755016;2069482431;1923617166;-56789500;477778269;660070476;-1094177896;-1920688289;1713808975;1885428837;664205588;-1452803451;1221138405;744190615;1183319607;-1837671693;-782705733;-945018561;1503748692;1184778802;495817417;1005026296;-2022464892;1279448715;-252411872;771639934;1822610278;993036372;2103885526;1636522886;-2069406473;-847656098;174916199;-132377766;-52607787;1459400743;1694488248;-1377322568;719770142;-631966317;299824014;-298903867;1395520478;666668988;-730574098;1388351044;-1308749827;868534368;-1233227866;-417541765;-188752352;344481944;-643336766;559726576;1272916860;1237126942;-1031303159;1943482305;716413072;-512736607;794885564;-651052801;-1417619136;1726483167;-1150346900;-2123175875;2119719347;-1397119213;1025377423;-1590602426;66324912;-1404631987;1803287561;100841735;-683097949;-1557552895;1370235665;220030771;1060701187;-726060524;461378553;-66640860;-1304746933;-1044421706;-221170349;-146679173;1680698180;-550092506;2101838471;-876988723;1869471542;290357668;-1831474266;184335783;986067927;1624343752;-1070074301;-2070124233;1115021537;-201745831;92934524;-583515161;1858326256;-778657774;-661831245;330439791;-1316642613;-1102904754;213816830;1198005561;1346273564;-544442506;-24395729;137256803;1795989271;-1632138313;102825331;-2067035286;29403668;-493629455;1178046088;552701724;-22580196;1443785036;119849587;1387611250;105549427;-892682124;-96559095;-694124535;1243471882;-17020560;586975097;-1301269032;-468915426;-1934210674;605745754;1120520609;1508060736;-1171715386;1682974070;-1309902570;2124643080;-1667867214;256256150;-159364267;1078509846;1202356028;-1157178821;2014026664;545316057;1593197770;-947467963;-489824051;-1238765194;-621848331;-1379679936;1903530813;97662176;-1134903659;-907214135;-863619607;-1254915702;-128195359;-1007926940;-116986146;-1180990355;-414996216;-1233807723;-1139000622;-1370716592;-61807973;659865658;-1729830107;2045673383;1123169475;1360569552;-593239620;-2135930461;207304654;528237712;-1935139045;-592992215;407491807;-31107767;-865779071;2115555738;657696632;1346915498;-1707424566;234270012;-1851033855;-1066692219;-33873355;1356687270;-1386002884;-1670125872;-1476496075;-593514481;1619714841;-1074040106;-495729661;-1483712928;249202955;853276345;-1830790560;-745530098;-557683322;167011551;-1920981662;-315678392;1500923904;-63310897;1089035751;412886058;-98909953;-1799814694;-605924185;	};
	mti=624;
       };
       RndSeed @[24] {
	name="RndSeed_25";
	seed{ 709250616;287364121;-1406923041;-633789900;-816124233;-276135671;1610171128;587050308;-55918628;1663371780;1377607939;-159148075;486960506;1517648687;1434924852;-111729416;-385291753;-1940582923;2009641349;868855079;-1941164169;-945334722;1775676199;1498602517;168003580;-552697211;-566414088;-966968798;-1446340575;1431159020;-2040073569;-54608624;-101399649;-1014781779;-1661424952;-452494379;135487890;-774201153;-2140535214;1399147959;92802806;795446583;1102587357;1391307767;1686470202;1893032052;-1275024553;-347662920;1506387447;-1474748353;1641372995;753147197;1380986437;1447077129;-2096470946;-783100797;-1192864072;241156507;-1717545631;-2086098102;1143806884;1729770838;-582772079;1264721369;815160952;-651592295;1221326852;-1000962244;188551967;-1205001600;-1697370224;-2010519839;961319639;1303117340;-559692101;-1963073821;-1231661039;-352851252;539060985;-2009238132;-1022730410;-143713830;1419334639;569015097;1208164049;-1402439579;-1401446407;1403810142;2035126739;-211686861;323294538;1605107853;-553966696;-1134559356;910722620;907481611;-770768457;-473890715;791002784;-2092444285;2132821321;-1312367155;-187545071;-1088889983;-153307625;-317683123;296505136;-1716785573;-1278104951;1942596676;1839522983;-923464723;663884630;-1739282593;914476323;1475521090;2075133923;-1881600353;-1950365337;-483098032;1371199031;-556570169;-1587634482;-1260137737;1786402853;342624945;-684723885;-415365873;-1619039684;751966455;16845045;-1914264020;1580215978;1554574588;744744279;-226096422;1117743397;-1473986627;-749347355;1844093513;-1100837132;-1944187493;1213284075;1931414753;-482085648;1049276272;-257284158;-2068907848;1094298614;-2138503160;2074314376;-1002281564;841579131;977675808;317991738;-871556995;1454905426;1777009756;-375816625;-767983461;1521030296;1558839806;-2057486019;-496077442;1692352501;-184954903;-1103543816;-155463095;-743861798;-907891642;-964565789;-1764020981;-690907591;2108379023;1460363700;1991928344;218250637;2142092882;-1834253711;-1147206894;-204487164;-1071390600;145122365;-285920824;2129610959;134215679;2142064469;-1172291361;-1283793683;1849561608;6483787;1210354774;-1880691181;167380598;-1303137456;-1522884067;331189759;-1329627808;-78386576;-38270170;-2120862879;-1384693288;121677260;231708231;-1706866225;1604703150;410921945;-299012500;554629531;1169780216;-875453169;777882255;2012688959;639369547;-1295341971;1577980322;-495832793;-78272499;-2145596320;-479521403;644756666;214456383;1073580217;-1237257508;-173367178;-77403126;1586950511;448995145;-1581749839;-432570492;-136998871;-1165075591;763095919;-2031400268;-120987464;973520306;-938796506;811736710;-155860532;991313562;-444785230;-82349882;-855905365;35185211;947901755;1814606908;506380807;813255866;-1694445478;1765362609;2129399146;-398684366;-1629702063;-637655876;-1742227623;-1337455898;-1770237708;-451307505;1305176510;84996190;1256399898;2058138284;-1334045625;-1313870528;-1792086510;995786073;-784919001;-795803329;998414776;852631205;-238066393;1475292227;-1109800678;322056073;-2030300385;-377941884;1313654103;-1489051133;1019786363;924977310;-614730386;1939483162;-1491595071;-2033452790;-2047440572;312778683;-1232398107;-1752861886;1494464864;-1331425946;161467798;942367569;1148946713;12775325;1752076055;-1882506539;-846444805;-1155876607;1906481753;841481699;-438655301;-511426619;95952972;-1123980501;-1912129187;-1943635284;-1516796456;207583797;-1383820003;-1862963856;-1635503824;-1193726991;-573021417;2029046813;-117472186;-1266999948;-1383020854;-1007192539;31847484;-854492949;1878056136;-441602674;-901714205;-1819009117;1204069577;1849429037;-2056758622;1963680359;-34575994;-688599102;-334806673;-2140693273;35288229;-916499610;1509946663;943132493;-1945878607;-978784784;1755442481;-1407105725;133635321;969846930;-687354640;560392246;1633191078;-612714948;-760570059;-1895909463;-462030125;-512408211;57557956;-417291853;1379335120;-349490218;765161835;1811088282;554393739;1744075580;-200063625;1911651371;1289648122;-1915245968;560677476;-1768638753;982739869;772504414;1461648260;-260675096;1188269607;328428655;1765421117;1231627551;-416631734;-934071486;1644692251;76031161;-1301512331;625343084;-1869374954;-1371766945;-711850451;-80932957;595839902;-1001855787;-49098770;-1792221438;-150274942;-1409439384;-190606762;-366265842;-1753621081;-1506492256;1783935858;-1281861400;-1995026468;-576892383;921934582;281266843;1390994357;-2119619693;218483397;-466653622;951752031;1696974606;-455634561;-263470207;-1978485280;-840583743;-97285854;-157367138;-534341493;-1567426749;-116107455;1652998311;1221384476;-2066927856;346174906;-489308669;318896034;-1430624627;1045823247;-355096176;-1525640283;2082447754;-189063041;-442880363;-1495488296;-2124330579;-208029001;1803353777;-2090029794;-1907865157;-502785875;-1758929833;1666935867;-1919762795;1292173895;-1457824429;368257963;553369390;1592003806;-386569036;1828902125;-393982249;573476704;-759631203;1730168852;-891113720;-932645865;1486029221;-648254602;-2094332948;1217719466;-233446340;193054113;1348281164;-4316119;1552203867;-976875700;-998354186;-1058088587;-1428819109;420652267;-2062953082;1187046116;-204926166;-1682669057;1370664868;1157733101;-503419663;1682734928;696751564;440158036;-12576259;-534433520;-1317762726;1105349012;-155531610;1451339255;284969453;-1198259871;-724072208;-1812458303;-112095790;248041049;2081819650;1496668693;-1513275445;-878985931;-1590849993;931559891;939851050;1771658622;-553395192;-1248545467;564102642;1681677418;-2077050072;609440644;-449996537;-1325628280;-833345945;-1401246870;1106790911;343941422;-124733665;1423588358;-597004354;-1242219379;51539304;-257305594;-1113959176;808669858;367414763;687637177;-324823552;1172753459;-994880577;749971250;1907931841;-720212024;-1599684576;931791220;-1100633905;-1626583059;1512796760;2143600683;-1399042911;-1692239521;890742978;284387484;-1622686817;-733334523;1799863923;89597712;-1866859673;481050097;-625906898;613769179;1647838850;757837515;-1638687948;998646892;-732025669;136191672;-916809543;-1852846716;-1990013439;-95427501;-2132548171;1272549977;2089801439;-1496410690;-976834219;2107965208;1682704392;1183514297;-835782459;-787210676;1766932058;535383831;1342211396;-1737915541;2094205856;1843642809;697231309;-1308021993;792673920;837167800;-1481419567;2011849849;512089491;-1050077125;-705394603;1221186092;1951728384;-450053467;2098363327;-961183176;-68487542;-1419667631;-20897532;-1206925047;874395294;-512222050;1073631546;157554732;2124486567;-658494262;1632124570;624863349;823268728;1072149160;-140679527;-1288181996;961737729;441831353;169080658;75069360;1254714055;-1090185098;-1304118243;1453576597;81126847;1016061367;644508304;-990700242;-1765631456;774964170;-958162157;1127727026;477785858;-1564221394;-1150091327;-1047313067;1552900949;1745233548;-555111158;-2029381641;-1316973804;604688410;-1437071697;2064136623;-320937451;	};
	mti=624;
       };
      };
     };
    };
    types {
     name=;
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=CtLeabraNetwork;
      object_val=$5$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc=;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$10$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc=;
     };
     ProgVar @[2] {
      name="no_prompts";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=NULL_CHECK;
      desc="If train is called by other programs (e.g., Batch), they should set this to true -- otherwise it is reset to false in Init";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="max_epoch";
      var_type=T_Int;
      int_val=500;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc=;
     };
     ProgVar @[1] {
      name="epoch";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK;
      desc=;
     };
     ProgVar @[2] {
      name="train_mode";
      var_type=T_HardEnum;
      int_val=1;
      hard_enum_type=Network::TrainMode;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc=;
     };
     ProgVar @[3] {
      name="err_stopcrit";
      var_type=T_Real;
      real_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc=;
     };
     ProgVar @[4] {
      name="rnd_seeds";
      var_type=T_Object;
      object_type=RndSeed_List;
      object_val=.projects[0].programs.gp[0][1].objs[0]$59$;
      objs_ptr=1;
      flags=NULL_CHECK;
      desc=;
     };
     ProgVar @[5] {
      name="train_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=.projects[0].networks[0].train_time$60$;
      objs_ptr=0;
      flags=NULL_CHECK;
      desc=;
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     AssignExpr @[0] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[0][1].args[2]$61$;
      expr {
       expr="false";
      };
     };
     MethodCall @[1] {
      desc=;
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][1].args[0]$62$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     AssignExpr @[2] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[0][1].vars[5]$63$;
      expr {
       expr="network.train_time";
      };
     };
     MethodCall @[3] {
      desc="restore previous random seed (all runs produce same results); change to NewSeed to have new random numbers each time";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][1].vars[4]$64$;
      method=RndSeed_List::UseSeed;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=int;
	type="int";
	name="idx";
	required=0;
	def_val=;
	expr {
	 expr="network.batch";
	};
       };
      };
     };
     IfGuiPrompt @[4] {
      desc="don't initialize weights without checking";
      flags=;
      prompt="Do you want to Initialize Network Weights";
      yes_label="Yes";
      no_label="No";
      yes_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="initialize network weights: could also load pre-set weights or something else here";
	flags=;
	result_var=NULL;
	obj=$62$;
	method=Network::Init_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
       PrintExpr @[1] {
	desc=;
	flags=;
	expr {
	 expr="network.name << \" Weights Initialized\"";
	};
       };
      };
     };
     AssignExpr @[5] {
      desc="grab the official network epoch counter: will be initialized if needed by now";
      flags=;
      result_var=.projects[0].programs.gp[0][1].vars[1]$65$;
      expr {
       expr="network.epoch";
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MemberAssign @[0] {
      desc="set back to training mode";
      flags=NEW_EL;
      obj=$62$;
      path="train_mode";
      expr {
       expr="Network::TRAIN";
      };
      update_after=0;
     };
     MemberAssign @[1] {
      desc=;
      flags=NEW_EL;
      obj=$62$;
      path="layers.Patient.layer_type";
      expr {
       expr="Layer::TARGET";
      };
      update_after=0;
     };
     AssignExpr @[2] {
      desc=;
      flags=;
      result_var=$63$;
      expr {
       expr="network.train_time";
      };
     };
     MethodCall @[3] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$63$;
      method=TimeUsed::StartTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	expr {
	 expr="true";
	};
       };
      };
     };
     MemberAssign @[4] {
      desc="set network's training mode to our local value";
      flags=;
      obj=$62$;
      path="train_mode";
      expr {
       expr="train_mode";
      };
      update_after=0;
     };
     MethodCall @[5] {
      desc="restore previous random seed (all runs produce same results); change to NewSeed to have new random numbers each time";
      flags=;
      result_var=NULL;
      obj=$64$;
      method=RndSeed_List::UseSeed;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=int;
	type="int";
	name="idx";
	required=0;
	def_val=;
	expr {
	 expr="network.batch";
	};
       };
      };
     };
     IfElse @[6] {
      desc=;
      flags=;
      cond {
       expr="no_prompts";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="initialize network weights: could also load pre-set weights or something else here";
	flags=;
	result_var=NULL;
	obj=$62$;
	method=Network::Init_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
       PrintExpr @[1] {
	desc=;
	flags=;
	expr {
	 expr="network.name << \" Weights Initialized\"";
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
      };
     };
     AssignExpr @[7] {
      desc="grab the official network epoch counter: will be initialized if needed by now";
      flags=;
      result_var=$65$;
      expr {
       expr="network.epoch";
      };
     };
     WhileLoop @[8] {
      desc=;
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       ProgramCall @[0] {
	desc=;
	flags=;
	target=$22$;
	targ_ld_init="*LeabraEpoch*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=CtLeabraNetwork;
	  type="CtLeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
       };
       NetCounterIncr @[1] {
	desc="increment the epoch counter";
	flags=;
	network_var=$62$;
	local_ctr_var=$65$;
	counter=Network::epoch;
       };
       IfBreak @[2] {
	desc="stop if errors go below stopping criterion (note: could use sse or avg_sse here too)";
	flags=;
	cond {
	 expr="network.cnt_err <= err_stopcrit";
	};
       };
      };
      test {
       expr="epoch < max_epoch";
      };
     };
     MethodCall @[9] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$63$;
      method=TimeUsed::EndTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
    };
   };
   Program @[2] {
    name="LeabraEpoch";
    tags="Leabra, Std";
    desc="iterates over all of the items in a data table and calls LeabraTrial process on them";
    flags=SHOW_STEP;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=CtLeabraNetwork;
      object_val=$5$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc="network to operate on";
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$10$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc="table of patterns to present to the network, one row at a time";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="data_loop_order";
      var_type=T_HardEnum;
      int_val=1;
      hard_enum_type=DataLoop::Order;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc="controls the order in which events (rows of the input data datatable) are presented to the network
(SEQUENTIAL, PERMUTED, RANDOM)";
     };
     ProgVar @[1] {
      name="trial";
      var_type=T_Int;
      int_val=99;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK;
      desc="current trial (event) within the epoch -- increments automatically";
     };
     ProgVar @[2] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$13$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc="trial-level output data -- we reset it every epoch by default, so it just contains last epoch of data";
     };
     ProgVar @[3] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=.projects[0].networks[0].epoch_time$66$;
      objs_ptr=0;
      flags=NULL_CHECK;
      desc="timer to record time required to perform one epoch of processing (object is on network -- this is a pointer to it)";
     };
     ProgVar @[4] {
      name="data_loop_index";
      var_type=T_Int;
      int_val=100;
      objs_ptr=0;
      flags=NULL_CHECK;
      desc="index counter for the looping over items in the input_data datatable (not always the same as trial counter, depending on distributed memory computation)";
     };
     ProgVar @[5] {
      name="sep_test";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc="whether to run separate testing programs or not";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize trial counter (local variable and in the network)";
      flags=;
      network_var=.projects[0].programs.gp[0][2].args[0]$67$;
      local_ctr_var=.projects[0].programs.gp[0][2].vars[1]$68$;
      counter=Network::trial;
     };
     AssignExpr @[1] {
      desc="get pointer to epoch timer object on network";
      flags=;
      result_var=.projects[0].programs.gp[0][2].vars[3]$69$;
      expr {
       expr="network.epoch_time";
      };
     };
    };
    prog_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize trial counter (local variable and in the network)";
      flags=;
      network_var=$67$;
      local_ctr_var=$68$;
      counter=Network::trial;
     };
     AssignExpr @[1] {
      desc="get pointer to epoch timer object on network";
      flags=;
      result_var=$69$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[2] {
      desc="start the epoch timer to record computation time per epoch";
      flags=;
      result_var=NULL;
      obj=$69$;
      method=TimeUsed::StartTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	expr {
	 expr="true";
	};
       };
      };
     };
     MethodCall @[3] {
      desc="reset trial-level monitor data every epoch, so it reflects only the most recent epoch's worth of data (turn flags OFF to accumulate trial data across entire training run)";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][2].vars[2]$70$;
      method=DataTable::ResetData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     NetDataLoop @[4] {
      desc="iterates over the events/rows of input_data, according to data_loop_order variable";
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       ProgramCall @[0] {
	desc="run the trial program, passing network and input_data";
	flags=;
	target=$21$;
	targ_ld_init="*LeabraTrial*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=CtLeabraNetwork;
	  type="CtLeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
       };
       IfElse @[1] {
	desc="test if it is time to update the weight values from delta weights (dWt) computed over trials";
	flags=;
	cond {
	 expr="network.Compute_Weights_Test(trial+1)";
	};
	true_code {
	 name=;
	 el_typ=MethodCall;
	 el_def=0;
	 MethodCall @[0] {
	  desc="update the weight values based on changes computed by trial program";
	  flags=;
	  result_var=NULL;
	  obj=$67$;
	  method=Network::Compute_Weights;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	  };
	 };
	};
	false_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	};
       };
      };
      data_var=.projects[0].programs.gp[0][2].args[1]$71$;
      index_var=.projects[0].programs.gp[0][2].vars[4]$72$;
      order_var=.projects[0].programs.gp[0][2].vars[0]$73$;
      order=PERMUTED;
      item_idx_list{ 3;95;63;45;12;2;65;79;35;58;8;66;15;0;19;17;1;42;13;14;90;64;38;93;53;26;92;52;97;56;10;71;31;28;68;22;23;94;46;69;51;5;82;75;81;29;7;96;77;30;99;84;78;34;24;89;33;39;36;32;72;43;74;47;80;9;60;87;16;55;83;62;50;40;6;86;59;61;91;20;27;37;11;21;4;18;49;57;98;85;70;41;73;54;48;76;88;44;25;67;      };
      dmem_nprocs=1;
      dmem_this_proc=0;
     };
     IfElse @[5] {
      desc="if full batch mode, update only at end of epoch";
      flags=;
      cond {
       expr="network.wt_update == Network::BATCH";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="final update of weights based on accumulated changes";
	flags=;
	result_var=NULL;
	obj=$67$;
	method=Network::Compute_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
      };
     };
     MethodCall @[6] {
      desc="network accumulates some core statistics over the epoch -- this finalizes that process and computes summary stats";
      flags=;
      result_var=NULL;
      obj=$67$;
      method=LeabraNetwork::Compute_EpochStats;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[7] {
      desc="done with the computation in the epoch -- record time it took";
      flags=;
      result_var=NULL;
      obj=$69$;
      method=TimeUsed::EndTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     IfElse @[8] {
      desc=;
      flags=;
      cond {
       expr="sep_test";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       ProgramCall @[0] {
	desc="call testing program";
	flags=NEW_EL;
	target=.projects[0].programs.gp[1][0]$74$;
	targ_ld_init="*LeabraEpochTest*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="CtLeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       ProgramCall @[0] {
	desc="run program that records data from network and possibly other sources about the epoch";
	flags=;
	target=.projects[0].programs.gp[0][8]$75$;
	targ_ld_init="*LeabraEpochMonitor*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=Network;
	  type="CtLeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	};
       };
      };
     };
    };
   };
   Program @[3] {
    name="LeabraTrial";
    tags="Leabra, Std";
    desc="Leabra processing of a single input/toutput event or external information: typically runs a minus and a plus phase, then learns (unless testing)";
    flags=SHOW_STEP;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=CtLeabraNetwork;
      object_val=$5$;
      objs_ptr=0;
      flags=NULL_CHECK;
      desc="network to operate on -- typically set by higher-level calling programs";
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$10$;
      objs_ptr=0;
      flags=NULL_CHECK;
      desc="datatable containing training input/output patterns";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="phase_no";
      var_type=T_Int;
      int_val=3;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK;
      desc="local phase counting variable (0 is typically minus phase, 1 is typically plus -- depends on network settings)";
     };
     ProgVar @[1] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc="determines whether to update any network view displays after trial is completed";
     };
     ProgVar @[2] {
      name="init_sd";
      var_type=T_Bool;
      bool_val=1;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc="init synaptic depression at start of trial?";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize the local phase_no counter, and corresponding network one";
      flags=;
      network_var=.projects[0].programs.gp[0][3].args[0]$76$;
      local_ctr_var=.projects[0].programs.gp[0][3].vars[0]$77$;
      counter=LeabraNetwork::phase_no;
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     If @[0] {
      desc=;
      flags=NON_STD;
      cond {
       expr="init_sd";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc=;
	flags=;
	result_var=NULL;
	obj=$76$;
	method=CtLeabraNetwork::Init_SdEffWt;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
     NetCounterInit @[1] {
      desc="initialize the local phase_no counter, and corresponding network one";
      flags=;
      network_var=$76$;
      local_ctr_var=$77$;
      counter=LeabraNetwork::phase_no;
     };
     MethodCall @[2] {
      desc="initializes various counters at start of trial";
      flags=;
      result_var=NULL;
      obj=$76$;
      method=LeabraNetwork::Trial_Init;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     WhileLoop @[3] {
      desc="loop over phases of settling in the network";
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       ProgramCall @[0] {
	desc="run the settle program (which iterates over cyles of network activation updating) for each phase";
	flags=;
	target=$14$;
	targ_ld_init="*LeabraSettle*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="CtLeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
       };
       NetCounterIncr @[1] {
	desc="increment the phase number (also on network)";
	flags=;
	network_var=$76$;
	local_ctr_var=$77$;
	counter=LeabraNetwork::phase_no;
       };
       MethodCall @[2] {
	desc="increments other phase state information to prepare for the next phase of settling";
	flags=;
	result_var=NULL;
	obj=$76$;
	method=LeabraNetwork::Trial_UpdatePhase;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      test {
       expr="phase_no < network.phase_max";
      };
     };
     MethodCall @[4] {
      desc="after the trial is over, do final computations: Compute_dWt (learn weights), compute stats";
      flags=;
      result_var=NULL;
      obj=$76$;
      method=LeabraNetwork::Trial_Final;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     ProgramCall @[5] {
      desc="records data about the trial-level processing to a datatable for graphing/processing";
      flags=;
      target=.projects[0].programs.gp[0][7]$78$;
      targ_ld_init="*LeabraTrialMonitor*";
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="CtLeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     NetUpdateView @[6] {
      desc="update the network view(s) (only if update_net_view is true)";
      flags=;
      network_var=$76$;
      update_var=.projects[0].programs.gp[0][3].vars[1]$79$;
     };
    };
   };
   Program @[4] {
    name="CtLeabraSettle";
    tags="Leabra, Ct";
    desc="iterates over cycles of updating until network has settled into a stable state, or output activations have exceeded a threshold, continuous time version";
    flags=;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$5$;
      objs_ptr=0;
      flags=NULL_CHECK;
      desc=;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$10$;
      objs_ptr=0;
      flags=NULL_CHECK;
      desc=;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="cycle";
      var_type=T_Int;
      int_val=20;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK;
      desc="current cycle of settling (local loop counter)";
     };
     ProgVar @[1] {
      name="min_cycles";
      var_type=T_Int;
      int_val=35;
      objs_ptr=0;
      flags=NULL_CHECK;
      desc="IMPORTANT: this value is obtained from the network min_cycles and min_cycles_phase2 -- change the value on the network object, not here in this program!
sets the minimum number of cycles to settle for, regardless of network state changes, etc";
     };
     ProgVar @[2] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc="if true, will update network views at end of settling";
     };
     ProgVar @[3] {
      name="phase_no";
      var_type=T_Int;
      int_val=2;
      objs_ptr=0;
      flags=CTRL_READ_ONLY|NULL_CHECK;
      desc=;
     };
     ProgVar @[4] {
      name="pat_code_st_maxda";
      var_type=T_Real;
      real_val=0.06968227028846741;
      objs_ptr=0;
      flags=CTRL_READ_ONLY|NULL_CHECK;
      desc="maxda value at start of sravg computation";
     };
     ProgVar @[5] {
      name="hidden_st_maxda";
      var_type=T_Real;
      real_val=0.03777259588241577;
      objs_ptr=0;
      flags=CTRL_READ_ONLY|NULL_CHECK;
      desc="maxda value at start of sravg computation";
     };
     ProgVar @[6] {
      name="ag_code_st_maxda";
      var_type=T_Real;
      real_val=0.03012484312057495;
      objs_ptr=0;
      flags=CTRL_READ_ONLY|NULL_CHECK;
      desc="maxda value at start of sravg computation";
     };
     ProgVar @[7] {
      name="rel_code_st_maxda";
      var_type=T_Real;
      real_val=0.01814556121826172;
      objs_ptr=0;
      flags=CTRL_READ_ONLY|NULL_CHECK;
      desc="maxda value at start of sravg computation";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize local cycle counter and corresponding counter on network";
      flags=;
      network_var=.projects[0].programs.gp[0][4].args[0]$80$;
      local_ctr_var=.projects[0].programs.gp[0][4].vars[0]$81$;
      counter=Network::cycle;
     };
    };
    prog_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize local cycle counter and corresponding counter on network";
      flags=;
      network_var=$80$;
      local_ctr_var=$81$;
      counter=Network::cycle;
     };
     MethodCall @[1] {
      desc="resets input data, before getting new external inputs data from apply inputs call";
      flags=;
      result_var=NULL;
      obj=$80$;
      method=Network::Init_InputData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     ProgramCall @[2] {
      desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
      flags=;
      target=.projects[0].programs.gp[0][6]$82$;
      targ_ld_init="*ApplyInputs*";
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="CtLeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
       ProgArg @[1] {
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	expr {
	 expr="input_data";
	};
       };
      };
     };
     MethodCall @[3] {
      desc="initializes various counters at start of settling";
      flags=;
      result_var=NULL;
      obj=$80$;
      method=LeabraNetwork::Settle_Init;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     AssignExpr @[4] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[0][4].vars[3]$83$;
      expr {
       expr="network.phase_no";
      };
     };
     Switch @[5] {
      desc="do cycles per phase from network settings";
      flags=;
      switch_var=$83$;
      cases {
       name=;
       el_typ=CaseBlock;
       el_def=0;
       CaseBlock @[0] {
	desc="minus";
	flags=;
	prog_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 MemberAssign @[0] {
	  desc=;
	  flags=;
	  obj=$80$;
	  path="cycle_max";
	  expr {
	   expr="network->ct_time.minus";
	  };
	  update_after=0;
	 };
	};
	case_val {
	 expr="0";
	};
       };
       CaseBlock @[1] {
	desc="plus";
	flags=;
	prog_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 MemberAssign @[0] {
	  desc=;
	  flags=;
	  obj=$80$;
	  path="cycle_max";
	  expr {
	   expr="network->ct_time.plus";
	  };
	  update_after=0;
	 };
	};
	case_val {
	 expr="1";
	};
       };
       CaseBlock @[2] {
	desc="inhib";
	flags=;
	prog_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 MemberAssign @[0] {
	  desc=;
	  flags=;
	  obj=$80$;
	  path="cycle_max";
	  expr {
	   expr="network->ct_time.inhib";
	  };
	  update_after=0;
	 };
	};
	case_val {
	 expr="2";
	};
       };
      };
     };
     IfElse @[6] {
      desc="get appropriate min_cycles value depending on which phase we're in";
      flags=;
      cond {
       expr="network.phase_no <= 1";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       AssignExpr @[0] {
	desc="get minimum number of cycles from parameter on network (which is where you should change this value!)";
	flags=;
	result_var=.projects[0].programs.gp[0][4].vars[1]$84$;
	expr {
	 expr="network.min_cycles";
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       AssignExpr @[0] {
	desc="get minimum number of cycles from parameter on network (which is where you should change this value!)";
	flags=;
	result_var=$84$;
	expr {
	 expr="network.min_cycles_phase2";
	};
       };
      };
     };
     WhileLoop @[7] {
      desc="the main loop over cycles of updating";
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       ProgramCall @[0] {
	desc="run the cycle program, which computes one cycle of activations";
	flags=;
	target=.projects[0].programs.gp[0][5]$85$;
	targ_ld_init="*LeabraCycle*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=CtLeabraNetwork;
	  type="CtLeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	};
       };
       If @[1] {
	desc=;
	flags=;
	cond {
	 expr="network->ct_cycle == network->ct_sravg.start";
	};
	true_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 AssignExpr @[0] {
	  desc=;
	  flags=;
	  result_var=.projects[0].programs.gp[0][4].vars[4]$86$;
	  expr {
	   expr="network->layers.Patient_Code.maxda";
	  };
	 };
	 AssignExpr @[1] {
	  desc=;
	  flags=;
	  result_var=.projects[0].programs.gp[0][4].vars[5]$87$;
	  expr {
	   expr="network->layers.Hidden.maxda";
	  };
	 };
	 AssignExpr @[2] {
	  desc=;
	  flags=;
	  result_var=.projects[0].programs.gp[0][4].vars[6]$88$;
	  expr {
	   expr="network->layers.Agent_Code.maxda";
	  };
	 };
	 AssignExpr @[3] {
	  desc=;
	  flags=;
	  result_var=.projects[0].programs.gp[0][4].vars[7]$89$;
	  expr {
	   expr="network->layers.Relation_Code.maxda";
	  };
	 };
	};
       };
       NetCounterIncr @[2] {
	desc="increment cycle counter (also on network)";
	flags=;
	network_var=$80$;
	local_ctr_var=$81$;
	counter=Network::cycle;
       };
       IfContinue @[3] {
	desc="avoid subsequent stopping criteria if below min_cycles";
	flags=;
	cond {
	 expr="cycle < min_cycles";
	};
       };
       IfBreak @[4] {
	desc="stopping criterion for settling: based either on maximum change in activation (maxda) or on the maximum activation value in the network getting over threshold (which ever comes first).  Set either parmeter to values that are always false (e.g., trg_max_act_stopcrit = -1) to eliminate associated source of criterion for stopping settling.";
	flags=;
	cond {
	 expr="(network.maxda < network.maxda_stopcrit) ||
 (network.trg_max_act > network.trg_max_act_stopcrit)";
	};
       };
      };
      test {
       expr="cycle < network.cycle_max";
      };
     };
     MethodCall @[8] {
      desc="perform final operations at end of settling (storing final activations, etc)";
      flags=;
      result_var=NULL;
      obj=$80$;
      method=LeabraNetwork::Settle_Final;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     IfElse @[9] {
      desc="only run trial-level statistics in minus phase (otherwise network may have correct answer clamped on!).  IMPORTANT: this assumes that you've got target activation values for output layers already
presented in the minus phase -- if this is not the case (values are computed on the fly), you may want to run this instead at the start of the plus phase, after ApplyInputs";
      flags=;
      cond {
       expr="network.phase_no == 0";
      };
      true_code {
       name=;
       el_typ=MethodCall;
       el_def=0;
       MethodCall @[0] {
	desc="compute trial-level statistics";
	flags=;
	result_var=NULL;
	obj=$80$;
	method=LeabraNetwork::Compute_TrialStats;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
      };
     };
     IfElse @[10] {
      desc="this stat must be called in plus phase when reward information is avail";
      flags=;
      cond {
       expr="network.phase_no == 1";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="get external reward information";
	flags=;
	result_var=NULL;
	obj=$80$;
	method=LeabraNetwork::Compute_ExtRew;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
      };
     };
     NetUpdateView @[11] {
      desc="update network views, if update_net_view == true";
      flags=;
      network_var=$80$;
      update_var=.projects[0].programs.gp[0][4].vars[2]$90$;
     };
    };
   };
   Program @[5] {
    name="LeabraCycle";
    tags="Leabra, Std";
    desc="runs one cycle of leabra processing (updating net inputs and activations)";
    flags=;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=CtLeabraNetwork;
      object_val=$5$;
      objs_ptr=0;
      flags=NULL_CHECK;
      desc=;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc="determines whether network views will be updated on a cycle-by-cycle basis (slow, but often quite useful for seeing how processing is proceeding)";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="this does all the standard leabra processing for one cycle of activation updating";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][5].args[0]$91$;
      method=CtLeabraNetwork::Cycle_Run;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     NetUpdateView @[1] {
      desc="update network views if update_net_view == true";
      flags=;
      network_var=$91$;
      update_var=$0$;
     };
    };
   };
   Program @[6] {
    name="ApplyInputs";
    tags="Network, InputData, Apply";
    desc="apply the current input data to the network as external input and target values";
    flags=;
    objs {
     name=;
     el_typ=LayerWriter;
     el_def=0;
     LayerWriter @[0] {
      name="LayerWriter_0";
      data=$10$;
      network=$5$;
      layer_data {
       name=;
       el_typ=LayerWriterEl;
       el_def=0;
       LayerWriterEl @[0] {
	chan_name="Agent";
	net_target=LAYER;
	layer_name="Agent";
	offset {x=0: y=0: };
	use_layer_type=1;
	ext_flags=EXT;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[1] {
	chan_name="Relation";
	net_target=LAYER;
	layer_name="Relation";
	offset {x=0: y=0: };
	use_layer_type=1;
	ext_flags=EXT;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[2] {
	chan_name="Patient";
	net_target=LAYER;
	layer_name="Patient";
	offset {x=0: y=0: };
	use_layer_type=1;
	ext_flags=TARG;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[3] {
	chan_name="Name";
	net_target=TRIAL_NAME;
	layer_name="Name";
	offset {x=0: y=0: };
	use_layer_type=1;
	ext_flags=;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
      };
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$5$;
      objs_ptr=0;
      flags=NULL_CHECK;
      desc="network to apply inputs to -- typically set by calling program";
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$10$;
      objs_ptr=0;
      flags=NULL_CHECK;
      desc="input datatable containing input/output patterns";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="LayerWriter_0";
      var_type=T_Object;
      object_type=LayerWriter;
      object_val=.projects[0].programs.gp[0][6].objs[0]$92$;
      objs_ptr=1;
      flags=NULL_CHECK;
      desc="this is a pointer to the LayerWriter object in objs -- edit that object to determine how information is presented to the network";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="sets the datatable and network for the layer writer, so it knows what to write to";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][6].vars[0]$93$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataBlock_ptr;
	type="DataBlock*";
	name="db";
	required=0;
	def_val=;
	expr {
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=0;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[1] {
      desc="check the configuration of the layer writer -- will emit warnings and errors for missing or misconfigured items";
      flags=;
      result_var=NULL;
      obj=$93$;
      method=taList_impl::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="apply inputs to the network!  layer writer has all the key specs";
      flags=;
      result_var=NULL;
      obj=$93$;
      method=LayerWriter::ApplyInputData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
    };
   };
   Program @[7] {
    name="LeabraTrialMonitor";
    tags="Leabra, Std, Monitor";
    desc="monitor trial-level data from the network (and potentially other sources) -- stores results in datatable (TrialOutputData typically) that can be used for graph/grid views and further analysis ";
    flags=;
    objs {
     name=;
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @[0] {
      name="trial_netmon";
      items {
       name=;
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @[0] {
	name="batch";
	computed=0;
	object_type=CtLeabraNetwork;
	object=$5$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[1] {
	name="epoch";
	computed=0;
	object_type=CtLeabraNetwork;
	object=$5$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[2] {
	name="trial";
	computed=0;
	object_type=CtLeabraNetwork;
	object=$5$;
	variable="trial";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[3] {
	name="trial_name";
	computed=0;
	object_type=CtLeabraNetwork;
	object=$5$;
	variable="trial_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[4] {
	name="group_name";
	computed=0;
	object_type=CtLeabraNetwork;
	object=$5$;
	variable="group_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[5] {
	name="phase_no";
	computed=0;
	object_type=CtLeabraNetwork;
	object=$5$;
	variable="phase_no";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[6] {
	name="cycle";
	computed=0;
	object_type=CtLeabraNetwork;
	object=$5$;
	variable="minus_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[7] {
	name="sse";
	computed=0;
	object_type=CtLeabraNetwork;
	object=$5$;
	variable="sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[8] {
	name="ext_rew";
	computed=0;
	object_type=CtLeabraNetwork;
	object=$5$;
	variable="ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[9] {
	name="mean_act_dif";
	computed=0;
	object_type=CtLeabraNetwork;
	object=$5$;
	variable="act_dif";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=MEAN: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=ABS: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[10] {
	name="pat_code_st_maxda";
	computed=1;
	object_type=CtLeabraNetwork;
	object=NULL;
	variable="act_dif";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=MEAN: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=ABS: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[11] {
	name="hidden_st_maxda";
	computed=1;
	object_type=CtLeabraNetwork;
	object=NULL;
	variable="act_dif";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=MEAN: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=ABS: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[12] {
	name="ag_code_st_maxda";
	computed=1;
	object_type=CtLeabraNetwork;
	object=NULL;
	variable="act_dif";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=MEAN: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=ABS: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[13] {
	name="rel_code_st_maxda";
	computed=1;
	object_type=CtLeabraNetwork;
	object=NULL;
	variable="act_dif";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=MEAN: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=ABS: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[14] {
	name="Hidden_act_m";
	computed=0;
	object_type=CtLeabraLayer;
	object=.projects[0].networks[0].layers[6]$94$;
	variable="act_m";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$5$;
      data=$13$;
      rmv_orphan_cols=1;
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$5$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc="network to record data from";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$13$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc="data table to record trial-level data to (this program writes new data to this table!)";
     };
     ProgVar @[1] {
      name="trial_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects[0].programs.gp[0][7].objs[0]$95$;
      objs_ptr=1;
      flags=NULL_CHECK;
      desc="pointer to the NetMonitor object in objs secton of this program that contains configuration for what to record and where to get it";
     };
     ProgVar @[2] {
      name="pat_code_st_maxda";
      var_type=T_Real;
      real_val=0.06968227028846741;
      objs_ptr=0;
      flags=CTRL_READ_ONLY|NULL_CHECK;
      desc="maxda value at start of sravg computation";
     };
     ProgVar @[3] {
      name="hidden_st_maxda";
      var_type=T_Real;
      real_val=0.03777259588241577;
      objs_ptr=0;
      flags=CTRL_READ_ONLY|NULL_CHECK;
      desc="maxda value at start of sravg computation";
     };
     ProgVar @[4] {
      name="ag_code_st_maxda";
      var_type=T_Real;
      real_val=0.03012484312057495;
      objs_ptr=0;
      flags=CTRL_READ_ONLY|NULL_CHECK;
      desc="maxda value at start of sravg computation";
     };
     ProgVar @[5] {
      name="rel_code_st_maxda";
      var_type=T_Real;
      real_val=0.01814556121826172;
      objs_ptr=0;
      flags=CTRL_READ_ONLY|NULL_CHECK;
      desc="maxda value at start of sravg computation";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="set the network and datatable for the NetMonitor";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][7].vars[1]$96$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=0;
	def_val=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=0;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[1] {
      desc="check the configuration of the network monitor -- will emit warnings and errors for misconfigurations";
      flags=;
      result_var=NULL;
      obj=$96$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     MethodCall @[2] {
      desc="update the monitor items and data schema based on current settings of the NetMonitor object";
      flags=;
      result_var=NULL;
      obj=$96$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	expr {
	 expr="true";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="add a new blank row to the data";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][7].vars[0]$97$;
      method=DataTable::AddBlankRow;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[1] {
      desc="get the new monitor data from the network and other sources -- this does the main work";
      flags=;
      result_var=NULL;
      obj=$96$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     OtherProgramVar @[2] {
      desc=;
      flags=;
      other_prog=$14$;
      set_other=0;
      var_1=.projects[0].programs.gp[0][7].vars[4]$98$;
      var_2=.projects[0].programs.gp[0][7].vars[3]$99$;
      var_3=.projects[0].programs.gp[0][7].vars[2]$100$;
      var_4=.projects[0].programs.gp[0][7].vars[5]$101$;
     };
     DataVarProg @[3] {
      desc=;
      flags=;
      data_var=$97$;
      set_data=1;
      row_spec=CUR_ROW;
      row_var=NULL;
      var_1=$98$;
      var_2=$99$;
      var_3=$100$;
      var_4=$101$;
     };
     MethodCall @[4] {
      desc="update views and other things after writing new data to monitor data table";
      flags=;
      result_var=NULL;
      obj=$97$;
      method=DataBlock::WriteClose;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[5] {
      desc="only functional for dmem projects: synchronizes trial data across processes so that all distributed memory processors have the same trial-level data, despite having run only a subset of them each";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][7].args[0]$102$;
      method=Network::DMem_ShareTrialData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="n_rows";
	required=0;
	def_val="1";
	expr {
	 expr="1";
	};
       };
      };
     };
    };
   };
   Program @[8] {
    name="LeabraEpochMonitor";
    tags="Leabra, Std, Monitor";
    desc="monitor epoch-level data from the network to a datatable (EpochOutputData typically) for use in graphing and viewing and further analysis";
    flags=;
    objs {
     name=;
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @[0] {
      name="epoch_netmon";
      items {
       name=;
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @[0] {
	name="batch";
	computed=0;
	object_type=CtLeabraNetwork;
	object=$5$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[1] {
	name="epoch";
	computed=0;
	object_type=CtLeabraNetwork;
	object=$5$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[2] {
	name="avg_sse";
	computed=0;
	object_type=CtLeabraNetwork;
	object=$5$;
	variable="avg_sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[3] {
	name="cnt_err";
	computed=0;
	object_type=CtLeabraNetwork;
	object=$5$;
	variable="cnt_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[4] {
	name="avg_ext_rew";
	computed=0;
	object_type=CtLeabraNetwork;
	object=$5$;
	variable="avg_ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[5] {
	name="avg_cycles";
	computed=0;
	object_type=CtLeabraNetwork;
	object=$5$;
	variable="avg_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[6] {
	name="epoch_time_tot";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[7] {
	name="epoch_time_usr";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[8] {
	name="mean_Hidden_act_dif";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=1;
	data_src=$13$;
	agg_col {
	 col_name="mean_Hidden_act_dif";
	};
	agg {name="Aggregate": op=MEAN: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[9] {
	name="pat_code_st_maxda_mean";
	computed=1;
	object_type=CtLeabraNetwork;
	object=NULL;
	variable="act_dif";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=1;
	data_src=$13$;
	agg_col {
	 col_name="pat_code_st_maxda";
	};
	agg {name="Aggregate": op=MEAN: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=ABS: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[10] {
	name="hidden_st_maxda_mean";
	computed=1;
	object_type=CtLeabraNetwork;
	object=NULL;
	variable="act_dif";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=1;
	data_src=$13$;
	agg_col {
	 col_name="hidden_st_maxda";
	};
	agg {name="Aggregate": op=MEAN: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=ABS: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[11] {
	name="ag_code_st_maxda_mean";
	computed=1;
	object_type=CtLeabraNetwork;
	object=NULL;
	variable="act_dif";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=1;
	data_src=$13$;
	agg_col {
	 col_name="ag_code_st_maxda";
	};
	agg {name="Aggregate": op=MEAN: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=ABS: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[12] {
	name="rel_code_st_maxda_mean";
	computed=1;
	object_type=CtLeabraNetwork;
	object=NULL;
	variable="act_dif";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=1;
	data_src=$13$;
	agg_col {
	 col_name="rel_code_st_maxda";
	};
	agg {name="Aggregate": op=MEAN: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=ABS: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[13] {
	name="hidden_acts";
	computed=1;
	object_type=CtLeabraNetwork;
	object=NULL;
	variable="act_dif";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=1;
	matrix_geom{ 8;8;	};
	data_agg=1;
	data_src=$13$;
	agg_col {
	 col_name="Hidden_act_m";
	};
	agg {name="Aggregate": op=MEAN: rel={name="Relation": rel=GREATERTHAN: val=0.5: use_var=0: var=NULL: }: };
	select_rows=1;
	select_spec {
	 col_name="trial_name";
	 rel=CONTAINS;
	 use_var=0;
	 cmp 9 0="Mar";
	 var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=ABS: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$5$;
      data=$12$;
      rmv_orphan_cols=1;
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$5$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc="network to get data from";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="epoch_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$12$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc="data table to write the epoch data to";
     };
     ProgVar @[1] {
      name="epoch_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects[0].programs.gp[0][8].objs[0]$103$;
      objs_ptr=1;
      flags=NULL_CHECK;
      desc="network monitor object that contains full specs for what to record and where to get it";
     };
     ProgVar @[2] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=$66$;
      objs_ptr=0;
      flags=NULL_CHECK;
      desc="pointer to the network's epoch-level timer, to record how long it took to process an epoch";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=AssignExpr;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     AssignExpr @[0] {
      desc="get the epoch timer from current network";
      flags=;
      result_var=.projects[0].programs.gp[0][8].vars[2]$104$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[1] {
      desc="set data and network on NetMonitor object";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][8].vars[1]$105$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=0;
	def_val=;
	expr {
	 expr="epoch_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=0;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[2] {
      desc="check configuration and emit errors/warnings for problems";
      flags=;
      result_var=NULL;
      obj=$105$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     MethodCall @[3] {
      desc="update the monitor items and data schema based on current settings of NetMonitor";
      flags=;
      result_var=NULL;
      obj=$105$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	expr {
	 expr="true";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="add a new blank row to the data";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][8].vars[0]$106$;
      method=DataTable::AddBlankRow;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[1] {
      desc="get the new monitor data and stor it into the data table -- this does the main job here";
      flags=;
      result_var=NULL;
      obj=$105$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     AssignExpr @[2] {
      desc="get the epoch timer from current network";
      flags=;
      result_var=$104$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[3] {
      desc="set the total time to compute the epoch (epoch_time_tot -- wall clock time) to time used data from network timer";
      flags=;
      result_var=NULL;
      obj=$106$;
      method=DataTable::SetValColName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="const Variant&";
	name="val";
	required=0;
	def_val=;
	expr {
	 expr="epoch_timer.used.GetTotSecs()";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_name";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"epoch_time_tot\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=0;
	def_val=;
	expr {
	 expr="-1";
	};
       };
      };
     };
     MethodCall @[4] {
      desc="set the user process time (cpu time for this process, epoch_time_usr) to time used data from network timer";
      flags=;
      result_var=NULL;
      obj=$106$;
      method=DataTable::SetValColName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="const Variant&";
	name="val";
	required=0;
	def_val=;
	expr {
	 expr="epoch_timer.used.GetUsrSecs()";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_name";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"epoch_time_usr\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=0;
	def_val=;
	expr {
	 expr="-1";
	};
       };
      };
     };
     MethodCall @[5] {
      desc="update after writing new data to monitor data table";
      flags=;
      result_var=NULL;
      obj=$106$;
      method=DataBlock::WriteClose;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
    };
   };
   Program @[9] {
    name="SaveWeights";
    tags="Network, Weights";
    desc="save network's current weight values to file using WriteWeights function, with file name based on project name + batch + epoch values";
    flags=;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$5$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc=;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="tag";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc="user-provided tag (startup script will set this!)";
     };
     ProgVar @[1] {
      name="wts_subdir";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc="user-provided subdirectory to save weights in";
     };
     ProgVar @[2] {
      name="fname";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK;
      desc="final generated file name -- do not edit!";
     };
     ProgVar @[3] {
      name="epoch_str";
      var_type=T_String;
      string_val="0036";
      objs_ptr=0;
      flags=NULL_CHECK;
      desc="string rep of epoch with leading zeros";
     };
     ProgVar @[4] {
      name="batch_str";
      var_type=T_String;
      string_val="03";
      objs_ptr=0;
      flags=NULL_CHECK;
      desc="string rep of batch with leading zeros";
     };
     ProgVar @[5] {
      name="final_tag";
      var_type=T_String;
      string_val=".03_0036";
      objs_ptr=0;
      flags=NULL_CHECK;
      desc="batch + epoch";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     IfReturn @[0] {
      desc="do not save if not the first dmem process (only relevant for dmem = distributed memory processing)";
      flags=;
      cond {
       expr="taMisc::dmem_proc > 0";
      };
     };
     MiscCall @[1] {
      desc="get current batch counter for file name, with leading zeros to length 3";
      flags=;
      result_var=.projects[0].programs.gp[0][9].vars[4]$107$;
      object_type=taMisc;
      method=taMisc::LeadingZeros;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=int;
	type="int";
	name="num";
	required=0;
	def_val=;
	expr {
	 expr="network.batch";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="len";
	required=0;
	def_val=;
	expr {
	 expr="2";
	};
       };
      };
     };
     MiscCall @[2] {
      desc="get current epoch counter with leading zeros to length 4";
      flags=;
      result_var=.projects[0].programs.gp[0][9].vars[3]$108$;
      object_type=taMisc;
      method=taMisc::LeadingZeros;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=int;
	type="int";
	name="num";
	required=0;
	def_val=;
	expr {
	 expr="network.epoch";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="len";
	required=0;
	def_val=;
	expr {
	 expr="4";
	};
       };
      };
     };
     AssignExpr @[3] {
      desc="string 'tag' to identify the batch, epoch, and other user id info for the weights";
      flags=;
      result_var=.projects[0].programs.gp[0][9].vars[5]$109$;
      expr {
       expr="tag + \".\" + batch_str + \"_\" + epoch_str";
      };
     };
     MethodCall @[4] {
      desc="get a file name based on the project's current file name, for saving the weights";
      flags=;
      result_var=.projects[0].programs.gp[0][9].vars[2]$110$;
      obj=.projects[0].programs.gp[0][9].args[0]$111$;
      method=taBase::GetFileNameFmProject;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="ext";
	required=1;
	def_val=;
	expr {
	 expr="\".wts.gz\"";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="tag";
	required=0;
	def_val="\"\"";
	expr {
	 expr="final_tag";
	};
       };
       ProgArg @[2] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="subdir";
	required=0;
	def_val="\"\"";
	expr {
	 expr="wts_subdir";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="dmem_proc_no";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     MethodCall @[5] {
      desc="save the weights to that file name";
      flags=;
      result_var=NULL;
      obj=$111$;
      method=Network::SaveWeights;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="fname";
	required=0;
	def_val="\"\"";
	expr {
	 expr="fname";
	};
       };
       ProgArg @[1] {
	arg_type=Network::WtSaveFormat;
	type="Network::WtSaveFormat";
	name="fmt";
	required=0;
	def_val="Network::NET_FMT";
	expr {
	 expr="Network::NET_FMT";
	};
       };
      };
     };
    };
   };
  };
  Program_Group @.gp[1] {
   name="LeabraAll_Test";
   el_typ=Program;
   el_def=0;
   step_prog=.projects[0].programs.gp[1][2]$112$;
   tags="Leabra, Std, All, Test";
   desc="The full set of programs for testing a standard Leabra network (starting with Epoch)";
   Program @[0] {
    name="LeabraEpochTest";
    tags="Leabra, Std, Test";
    desc="sets testing flag, iterates over all of the items in a data table and calls LeabraTestTrial process on them";
    flags=SHOW_STEP;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$5$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc="network to operate on";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$10$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc="table of patterns to present to the network, one row at a time";
     };
     ProgVar @[1] {
      name="data_loop_order";
      var_type=T_HardEnum;
      int_val=0;
      hard_enum_type=DataLoop::Order;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc="controls the order in which events (rows of the input data datatable) are presented to the network
(SEQUENTIAL, PERMUTED, RANDOM)";
     };
     ProgVar @[2] {
      name="trial";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK;
      desc="current trial (event) within the epoch -- increments automatically";
     };
     ProgVar @[3] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].data.gp[1][2]$113$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc="trial-level output data -- we reset it every epoch by default, so it just contains last epoch of data";
     };
     ProgVar @[4] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=$66$;
      objs_ptr=0;
      flags=NULL_CHECK;
      desc="timer to record time required to perform one epoch of processing (object is on network -- this is a pointer to it)";
     };
     ProgVar @[5] {
      name="data_loop_index";
      var_type=T_Int;
      int_val=100;
      objs_ptr=0;
      flags=NULL_CHECK;
      desc="index counter for the looping over items in the input_data datatable (not always the same as trial counter, depending on distributed memory computation)";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize trial counter (local variable and in the network)";
      flags=;
      network_var=.projects[0].programs.gp[1][0].args[0]$114$;
      local_ctr_var=.projects[0].programs.gp[1][0].vars[2]$115$;
      counter=Network::trial;
     };
     AssignExpr @[1] {
      desc="get pointer to epoch timer object on network";
      flags=;
      result_var=.projects[0].programs.gp[1][0].vars[4]$116$;
      expr {
       expr="network.epoch_time";
      };
     };
    };
    prog_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize trial counter (local variable and in the network)";
      flags=;
      network_var=$114$;
      local_ctr_var=$115$;
      counter=Network::trial;
     };
     MemberAssign @[1] {
      desc="set to testing mode";
      flags=NEW_EL;
      obj=$114$;
      path="train_mode";
      expr {
       expr="Network::TEST";
      };
      update_after=0;
     };
     MemberAssign @[2] {
      desc=;
      flags=NEW_EL;
      obj=$114$;
      path="layers.Patient.layer_type";
      expr {
       expr="Layer::OUTPUT";
      };
      update_after=0;
     };
     AssignExpr @[3] {
      desc="get pointer to epoch timer object on network";
      flags=;
      result_var=$116$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[4] {
      desc="start the epoch timer to record computation time per epoch";
      flags=;
      result_var=NULL;
      obj=$116$;
      method=TimeUsed::StartTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	expr {
	 expr="true";
	};
       };
      };
     };
     MethodCall @[5] {
      desc="reset trial-level monitor data every epoch, so it reflects only the most recent epoch's worth of data (turn flags OFF to accumulate trial data across entire training run)";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[1][0].vars[3]$117$;
      method=DataTable::ResetData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     NetDataLoop @[6] {
      desc="iterates over the events/rows of input_data, according to data_loop_order variable";
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       ProgramCall @[0] {
	desc="run the trial program, passing network and input_data";
	flags=;
	target=.projects[0].programs.gp[1][1]$118$;
	targ_ld_init="*LeabraTrial*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="CtLeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
       };
       IfElse @[1] {
	desc="test if it is time to update the weight values from delta weights (dWt) computed over trials";
	flags=;
	cond {
	 expr="network.Compute_Weights_Test(trial+1)";
	};
	true_code {
	 name=;
	 el_typ=MethodCall;
	 el_def=0;
	 MethodCall @[0] {
	  desc="update the weight values based on changes computed by trial program";
	  flags=;
	  result_var=NULL;
	  obj=$114$;
	  method=Network::Compute_Weights;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	  };
	 };
	};
	false_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	};
       };
      };
      data_var=.projects[0].programs.gp[1][0].vars[0]$119$;
      index_var=.projects[0].programs.gp[1][0].vars[5]$120$;
      order_var=.projects[0].programs.gp[1][0].vars[1]$121$;
      order=SEQUENTIAL;
      item_idx_list{ 0;1;2;3;4;5;6;7;8;9;10;11;12;13;14;15;16;17;18;19;20;21;22;23;24;25;26;27;28;29;30;31;32;33;34;35;36;37;38;39;40;41;42;43;44;45;46;47;48;49;50;51;52;53;54;55;56;57;58;59;60;61;62;63;64;65;66;67;68;69;70;71;72;73;74;75;76;77;78;79;80;81;82;83;84;85;86;87;88;89;90;91;92;93;94;95;96;97;98;99;      };
      dmem_nprocs=1;
      dmem_this_proc=0;
     };
     IfElse @[7] {
      desc="if full batch mode, update only at end of epoch";
      flags=;
      cond {
       expr="network.wt_update == Network::BATCH";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="final update of weights based on accumulated changes";
	flags=;
	result_var=NULL;
	obj=$114$;
	method=Network::Compute_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
      };
     };
     MethodCall @[8] {
      desc="network accumulates some core statistics over the epoch -- this finalizes that process and computes summary stats";
      flags=;
      result_var=NULL;
      obj=$114$;
      method=LeabraNetwork::Compute_EpochStats;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[9] {
      desc="done with the computation in the epoch -- record time it took";
      flags=;
      result_var=NULL;
      obj=$116$;
      method=TimeUsed::EndTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     ProgramCall @[10] {
      desc="run program that records data from network and possibly other sources about the epoch";
      flags=;
      target=.projects[0].programs.gp[1][6]$122$;
      targ_ld_init="*LeabraEpochMonitor*";
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="CtLeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MemberAssign @[11] {
      desc=;
      flags=NEW_EL;
      obj=$114$;
      path="layers.Patient.layer_type";
      expr {
       expr="Layer::TARGET";
      };
      update_after=0;
     };
     MemberAssign @[12] {
      desc="set back to training mode";
      flags=NEW_EL;
      obj=$114$;
      path="train_mode";
      expr {
       expr="Network::TRAIN";
      };
      update_after=0;
     };
    };
   };
   Program @[1] {
    name="LeabraTrialTest";
    tags="Leabra, Std";
    desc="Leabra processing of a single input/toutput event or external information: typically runs a minus and a plus phase, then learns (unless testing)";
    flags=SHOW_STEP;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$5$;
      objs_ptr=0;
      flags=NULL_CHECK;
      desc="network to operate on -- typically set by higher-level calling programs";
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$10$;
      objs_ptr=0;
      flags=NULL_CHECK;
      desc="datatable containing training input/output patterns";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="phase_no";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK;
      desc="local phase counting variable (0 is typically minus phase, 1 is typically plus -- depends on network settings)";
     };
     ProgVar @[1] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc="determines whether to update any network view displays after trial is completed";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize the local phase_no counter, and corresponding network one";
      flags=;
      network_var=.projects[0].programs.gp[1][1].args[0]$123$;
      local_ctr_var=.projects[0].programs.gp[1][1].vars[0]$124$;
      counter=LeabraNetwork::phase_no;
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$123$;
      method=CtLeabraNetwork::Init_SdEffWt;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     NetCounterInit @[1] {
      desc="initialize the local phase_no counter, and corresponding network one";
      flags=;
      network_var=$123$;
      local_ctr_var=$124$;
      counter=LeabraNetwork::phase_no;
     };
     MethodCall @[2] {
      desc="initializes various counters at start of trial";
      flags=;
      result_var=NULL;
      obj=$123$;
      method=LeabraNetwork::Trial_Init;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     WhileLoop @[3] {
      desc="loop over phases of settling in the network";
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       ProgramCall @[0] {
	desc="run the settle program (which iterates over cyles of network activation updating) for each phase";
	flags=;
	target=$112$;
	targ_ld_init="*LeabraSettle*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="CtLeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
       };
       NetCounterIncr @[1] {
	desc="increment the phase number (also on network)";
	flags=;
	network_var=$123$;
	local_ctr_var=$124$;
	counter=LeabraNetwork::phase_no;
       };
       MethodCall @[2] {
	desc="increments other phase state information to prepare for the next phase of settling";
	flags=;
	result_var=NULL;
	obj=$123$;
	method=LeabraNetwork::Trial_UpdatePhase;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      test {
       expr="phase_no < network.phase_max";
      };
     };
     MethodCall @[4] {
      desc="after the trial is over, do final computations: Compute_dWt (learn weights), compute stats";
      flags=;
      result_var=NULL;
      obj=$123$;
      method=LeabraNetwork::Trial_Final;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     ProgramCall @[5] {
      desc="records data about the trial-level processing to a datatable for graphing/processing";
      flags=;
      target=.projects[0].programs.gp[1][5]$125$;
      targ_ld_init="*LeabraTrialMonitor*";
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="CtLeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     NetUpdateView @[6] {
      desc="update the network view(s) (only if update_net_view is true)";
      flags=;
      network_var=$123$;
      update_var=.projects[0].programs.gp[1][1].vars[1]$126$;
     };
    };
   };
   Program @[2] {
    name="CtLeabraSettleTest";
    tags="Leabra, Ct";
    desc="iterates over cycles of updating until network has settled into a stable state, or output activations have exceeded a threshold, continuous time version";
    flags=;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$5$;
      objs_ptr=0;
      flags=NULL_CHECK;
      desc=;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$10$;
      objs_ptr=0;
      flags=NULL_CHECK;
      desc=;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="cycle";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK;
      desc="current cycle of settling (local loop counter)";
     };
     ProgVar @[1] {
      name="min_cycles";
      var_type=T_Int;
      int_val=35;
      objs_ptr=0;
      flags=NULL_CHECK;
      desc="IMPORTANT: this value is obtained from the network min_cycles and min_cycles_phase2 -- change the value on the network object, not here in this program!
sets the minimum number of cycles to settle for, regardless of network state changes, etc";
     };
     ProgVar @[2] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc="if true, will update network views at end of settling";
     };
     ProgVar @[3] {
      name="phase_no";
      var_type=T_Int;
      int_val=2;
      objs_ptr=0;
      flags=CTRL_READ_ONLY|NULL_CHECK;
      desc=;
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize local cycle counter and corresponding counter on network";
      flags=;
      network_var=.projects[0].programs.gp[1][2].args[0]$127$;
      local_ctr_var=.projects[0].programs.gp[1][2].vars[0]$128$;
      counter=Network::cycle;
     };
    };
    prog_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize local cycle counter and corresponding counter on network";
      flags=;
      network_var=$127$;
      local_ctr_var=$128$;
      counter=Network::cycle;
     };
     MethodCall @[1] {
      desc="resets input data, before getting new external inputs data from apply inputs call";
      flags=;
      result_var=NULL;
      obj=$127$;
      method=Network::Init_InputData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     ProgramCall @[2] {
      desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
      flags=;
      target=.projects[0].programs.gp[1][4]$129$;
      targ_ld_init="*ApplyInputs*";
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="CtLeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
       ProgArg @[1] {
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	expr {
	 expr="input_data";
	};
       };
      };
     };
     MethodCall @[3] {
      desc="initializes various counters at start of settling";
      flags=;
      result_var=NULL;
      obj=$127$;
      method=LeabraNetwork::Settle_Init;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     AssignExpr @[4] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[1][2].vars[3]$130$;
      expr {
       expr="network.phase_no";
      };
     };
     Switch @[5] {
      desc="do cycles per phase from network settings";
      flags=;
      switch_var=$130$;
      cases {
       name=;
       el_typ=CaseBlock;
       el_def=0;
       CaseBlock @[0] {
	desc="minus";
	flags=;
	prog_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 MemberAssign @[0] {
	  desc=;
	  flags=;
	  obj=$127$;
	  path="cycle_max";
	  expr {
	   expr="network->ct_time.minus";
	  };
	  update_after=0;
	 };
	};
	case_val {
	 expr="0";
	};
       };
       CaseBlock @[1] {
	desc="plus";
	flags=;
	prog_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 MemberAssign @[0] {
	  desc=;
	  flags=;
	  obj=$127$;
	  path="cycle_max";
	  expr {
	   expr="network->ct_time.plus";
	  };
	  update_after=0;
	 };
	 MemberAssign @[1] {
	  desc="treat plus as another minus phase regardless";
	  flags=NON_STD;
	  obj=$127$;
	  path="phase";
	  expr {
	   expr="LeabraNetwork::MINUS_PHASE";
	  };
	  update_after=0;
	 };
	};
	case_val {
	 expr="1";
	};
       };
       CaseBlock @[2] {
	desc="inhib";
	flags=;
	prog_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 MemberAssign @[0] {
	  desc=;
	  flags=;
	  obj=$127$;
	  path="cycle_max";
	  expr {
	   expr="network->ct_time.inhib";
	  };
	  update_after=0;
	 };
	};
	case_val {
	 expr="2";
	};
       };
      };
     };
     IfElse @[6] {
      desc="get appropriate min_cycles value depending on which phase we're in";
      flags=;
      cond {
       expr="network.phase_no <= 1";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       AssignExpr @[0] {
	desc="get minimum number of cycles from parameter on network (which is where you should change this value!)";
	flags=;
	result_var=.projects[0].programs.gp[1][2].vars[1]$131$;
	expr {
	 expr="network.min_cycles";
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       AssignExpr @[0] {
	desc="get minimum number of cycles from parameter on network (which is where you should change this value!)";
	flags=;
	result_var=$131$;
	expr {
	 expr="network.min_cycles_phase2";
	};
       };
      };
     };
     WhileLoop @[7] {
      desc="the main loop over cycles of updating";
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       ProgramCall @[0] {
	desc="run the cycle program, which computes one cycle of activations";
	flags=;
	target=.projects[0].programs.gp[1][3]$132$;
	targ_ld_init="*LeabraCycle*";
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="CtLeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	};
       };
       NetCounterIncr @[1] {
	desc="increment cycle counter (also on network)";
	flags=;
	network_var=$127$;
	local_ctr_var=$128$;
	counter=Network::cycle;
       };
       IfContinue @[2] {
	desc="avoid subsequent stopping criteria if below min_cycles";
	flags=;
	cond {
	 expr="cycle < min_cycles";
	};
       };
       IfBreak @[3] {
	desc="stopping criterion for settling: based either on maximum change in activation (maxda) or on the maximum activation value in the network getting over threshold (which ever comes first).  Set either parmeter to values that are always false (e.g., trg_max_act_stopcrit = -1) to eliminate associated source of criterion for stopping settling.";
	flags=;
	cond {
	 expr="(network.maxda < network.maxda_stopcrit) ||
 (network.trg_max_act > network.trg_max_act_stopcrit)";
	};
       };
      };
      test {
       expr="cycle < network.cycle_max";
      };
     };
     MethodCall @[8] {
      desc="perform final operations at end of settling (storing final activations, etc)";
      flags=;
      result_var=NULL;
      obj=$127$;
      method=LeabraNetwork::Settle_Final;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     IfElse @[9] {
      desc="only run trial-level statistics in minus phase (otherwise network may have correct answer clamped on!).  IMPORTANT: this assumes that you've got target activation values for output layers already
presented in the minus phase -- if this is not the case (values are computed on the fly), you may want to run this instead at the start of the plus phase, after ApplyInputs";
      flags=;
      cond {
       expr="network.phase_no == 1";
      };
      true_code {
       name=;
       el_typ=MethodCall;
       el_def=0;
       MethodCall @[0] {
	desc="compute trial-level statistics";
	flags=;
	result_var=NULL;
	obj=$127$;
	method=LeabraNetwork::Compute_TrialStats;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
      };
     };
     IfElse @[10] {
      desc="this stat must be called in plus phase when reward information is avail";
      flags=;
      cond {
       expr="network.phase_no == 1";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="get external reward information";
	flags=;
	result_var=NULL;
	obj=$127$;
	method=LeabraNetwork::Compute_ExtRew;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
      };
     };
     NetUpdateView @[11] {
      desc="update network views, if update_net_view == true";
      flags=;
      network_var=$127$;
      update_var=.projects[0].programs.gp[1][2].vars[2]$133$;
     };
    };
   };
   Program @[3] {
    name="LeabraCycleTest";
    tags="Leabra, Std";
    desc="runs one cycle of leabra processing (updating net inputs and activations)";
    flags=;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$5$;
      objs_ptr=0;
      flags=NULL_CHECK;
      desc=;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc="determines whether network views will be updated on a cycle-by-cycle basis (slow, but often quite useful for seeing how processing is proceeding)";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="this does all the standard leabra processing for one cycle of activation updating";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[1][3].args[0]$134$;
      method=LeabraNetwork::Cycle_Run;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     NetUpdateView @[1] {
      desc="update network views if update_net_view == true";
      flags=;
      network_var=$134$;
      update_var=.projects[0].programs.gp[1][3].vars[0]$135$;
     };
    };
   };
   Program @[4] {
    name="ApplyInputsTest";
    tags="Network, InputData, Apply";
    desc="apply the current input data to the network as external input and target values";
    flags=;
    objs {
     name=;
     el_typ=LayerWriter;
     el_def=0;
     LayerWriter @[0] {
      name="LayerWriter_0";
      data=$10$;
      network=$5$;
      layer_data {
       name=;
       el_typ=LayerWriterEl;
       el_def=0;
       LayerWriterEl @[0] {
	chan_name="Agent";
	net_target=LAYER;
	layer_name="Agent";
	offset {x=0: y=0: };
	use_layer_type=1;
	ext_flags=EXT;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[1] {
	chan_name="Relation";
	net_target=LAYER;
	layer_name="Relation";
	offset {x=0: y=0: };
	use_layer_type=1;
	ext_flags=EXT;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[2] {
	chan_name="Patient";
	net_target=LAYER;
	layer_name="Patient";
	offset {x=0: y=0: };
	use_layer_type=1;
	ext_flags=COMP;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[3] {
	chan_name="Name";
	net_target=TRIAL_NAME;
	layer_name="Name";
	offset {x=0: y=0: };
	use_layer_type=1;
	ext_flags=;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
      };
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$5$;
      objs_ptr=0;
      flags=NULL_CHECK;
      desc="network to apply inputs to -- typically set by calling program";
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$10$;
      objs_ptr=0;
      flags=NULL_CHECK;
      desc="input datatable containing input/output patterns";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="LayerWriter_0";
      var_type=T_Object;
      object_type=LayerWriter;
      object_val=.projects[0].programs.gp[1][4].objs[0]$136$;
      objs_ptr=1;
      flags=NULL_CHECK;
      desc="this is a pointer to the LayerWriter object in objs -- edit that object to determine how information is presented to the network";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="sets the datatable and network for the layer writer, so it knows what to write to";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[1][4].vars[0]$137$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataBlock_ptr;
	type="DataBlock*";
	name="db";
	required=0;
	def_val=;
	expr {
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=0;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[1] {
      desc="check the configuration of the layer writer -- will emit warnings and errors for missing or misconfigured items";
      flags=;
      result_var=NULL;
      obj=$137$;
      method=taList_impl::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="apply inputs to the network!  layer writer has all the key specs";
      flags=;
      result_var=NULL;
      obj=$137$;
      method=LayerWriter::ApplyInputData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
    };
   };
   Program @[5] {
    name="LeabraTrialMonitorTest";
    tags="Leabra, Std, Monitor";
    desc="monitor trial-level data from the network (and potentially other sources) -- stores results in datatable (TrialOutputData typically) that can be used for graph/grid views and further analysis ";
    flags=;
    objs {
     name=;
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @[0] {
      name="trial_netmon";
      items {
       name=;
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @[0] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$5$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[1] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$5$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[2] {
	name="trial";
	computed=0;
	object_type=LeabraNetwork;
	object=$5$;
	variable="trial";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[3] {
	name="trial_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$5$;
	variable="trial_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[4] {
	name="group_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$5$;
	variable="group_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[5] {
	name="phase_no";
	computed=0;
	object_type=LeabraNetwork;
	object=$5$;
	variable="phase_no";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[6] {
	name="cycle";
	computed=0;
	object_type=LeabraNetwork;
	object=$5$;
	variable="minus_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[7] {
	name="sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$5$;
	variable="sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[8] {
	name="ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$5$;
	variable="ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$5$;
      data=$113$;
      rmv_orphan_cols=1;
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$5$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc="network to record data from";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$113$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc="data table to record trial-level data to (this program writes new data to this table!)";
     };
     ProgVar @[1] {
      name="trial_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects[0].programs.gp[1][5].objs[0]$138$;
      objs_ptr=1;
      flags=NULL_CHECK;
      desc="pointer to the NetMonitor object in objs secton of this program that contains configuration for what to record and where to get it";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="set the network and datatable for the NetMonitor";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[1][5].vars[1]$139$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=0;
	def_val=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=0;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[1] {
      desc="check the configuration of the network monitor -- will emit warnings and errors for misconfigurations";
      flags=;
      result_var=NULL;
      obj=$139$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     MethodCall @[2] {
      desc="update the monitor items and data schema based on current settings of the NetMonitor object";
      flags=;
      result_var=NULL;
      obj=$139$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	expr {
	 expr="true";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="add a new blank row to the data";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[1][5].vars[0]$140$;
      method=DataTable::AddBlankRow;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[1] {
      desc="get the new monitor data from the network and other sources -- this does the main work";
      flags=;
      result_var=NULL;
      obj=$139$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[2] {
      desc="update views and other things after writing new data to monitor data table";
      flags=;
      result_var=NULL;
      obj=$140$;
      method=DataBlock::WriteClose;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[3] {
      desc="only functional for dmem projects: synchronizes trial data across processes so that all distributed memory processors have the same trial-level data, despite having run only a subset of them each";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[1][5].args[0]$141$;
      method=Network::DMem_ShareTrialData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="n_rows";
	required=0;
	def_val="1";
	expr {
	 expr="1";
	};
       };
      };
     };
    };
   };
   Program @[6] {
    name="LeabraEpochMonitorTest";
    tags="Leabra, Std, Monitor";
    desc="monitor epoch-level data from the network to a datatable (EpochOutputData typically) for use in graphing and viewing and further analysis";
    flags=;
    objs {
     name=;
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @[0] {
      name="epoch_netmon";
      items {
       name=;
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @[0] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$5$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[1] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$5$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[2] {
	name="avg_sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$5$;
	variable="avg_sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[3] {
	name="cnt_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$5$;
	variable="cnt_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[4] {
	name="avg_ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$5$;
	variable="avg_ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[5] {
	name="avg_cycles";
	computed=0;
	object_type=LeabraNetwork;
	object=$5$;
	variable="avg_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[6] {
	name="epoch_time_tot";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[7] {
	name="epoch_time_usr";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$5$;
      data=$12$;
      rmv_orphan_cols=1;
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$5$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc="network to get data from";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="epoch_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$12$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc="data table to write the epoch data to";
     };
     ProgVar @[1] {
      name="epoch_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects[0].programs.gp[1][6].objs[0]$142$;
      objs_ptr=1;
      flags=NULL_CHECK;
      desc="network monitor object that contains full specs for what to record and where to get it";
     };
     ProgVar @[2] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=$66$;
      objs_ptr=0;
      flags=NULL_CHECK;
      desc="pointer to the network's epoch-level timer, to record how long it took to process an epoch";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=AssignExpr;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     AssignExpr @[0] {
      desc="get the epoch timer from current network";
      flags=;
      result_var=.projects[0].programs.gp[1][6].vars[2]$143$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[1] {
      desc="set data and network on NetMonitor object";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[1][6].vars[1]$144$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=0;
	def_val=;
	expr {
	 expr="epoch_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=0;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[2] {
      desc="check configuration and emit errors/warnings for problems";
      flags=;
      result_var=NULL;
      obj=$144$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     MethodCall @[3] {
      desc="update the monitor items and data schema based on current settings of NetMonitor";
      flags=;
      result_var=NULL;
      obj=$144$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	expr {
	 expr="true";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="add a new blank row to the data";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[1][6].vars[0]$145$;
      method=DataTable::AddBlankRow;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[1] {
      desc="get the new monitor data and stor it into the data table -- this does the main job here";
      flags=;
      result_var=NULL;
      obj=$144$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     AssignExpr @[2] {
      desc="get the epoch timer from current network";
      flags=;
      result_var=$143$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[3] {
      desc="set the total time to compute the epoch (epoch_time_tot -- wall clock time) to time used data from network timer";
      flags=;
      result_var=NULL;
      obj=$145$;
      method=DataTable::SetValColName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="const Variant&";
	name="val";
	required=0;
	def_val=;
	expr {
	 expr="epoch_timer.used.GetTotSecs()";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_name";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"epoch_time_tot\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=0;
	def_val=;
	expr {
	 expr="-1";
	};
       };
      };
     };
     MethodCall @[4] {
      desc="set the user process time (cpu time for this process, epoch_time_usr) to time used data from network timer";
      flags=;
      result_var=NULL;
      obj=$145$;
      method=DataTable::SetValColName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="const Variant&";
	name="val";
	required=0;
	def_val=;
	expr {
	 expr="epoch_timer.used.GetUsrSecs()";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_name";
	required=0;
	def_val="\"\"";
	expr {
	 expr="\"epoch_time_usr\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=0;
	def_val=;
	expr {
	 expr="-1";
	};
       };
      };
     };
     MethodCall @[5] {
      desc="update after writing new data to monitor data table";
      flags=;
      result_var=NULL;
      obj=$145$;
      method=DataBlock::WriteClose;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
    };
   };
  };
 };
 viewers {
  name=;
  el_typ=TopLevelViewer;
  el_def=0;
  MainWindowViewer @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItemBase;
    el_def=0;
    UserDataItem @[0] {
     name="view_win_lft";
     value 6 0=0;
    };
    UserDataItem @[1] {
     name="view_win_top";
     value 6 0=0;
    };
    UserDataItem @[2] {
     name="view_win_wd";
     value 6 0=1;
    };
    UserDataItem @[3] {
     name="view_win_ht";
     value 6 0=0.7996109127998352;
    };
    UserDataItem @[4] {
     name="view_win_iconified";
     value 1 0=0;
    };
    UserDataItem @[5] {
     name="view_splitter_state";
     value 9 0="AAAA/wAAAAAAAAADAAABEgAAAiAAAAK2AQAAAAYBAAAAAQ==";
    };
   };
   m_data=.projects[0]$146$;
   name="Browser3";
   visible=1;
   m_is_root=0;
   m_is_viewer_xor_browser=0;
   m_is_proj_viewer=1;
   m_is_dialog=0;
   toolbars {
    name=;
    el_typ=ToolBar;
    el_def=0;
    ToolBar @[0] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItemBase;
      el_def=0;
      UserDataItem @[0] {
       name="view_win_visible";
       value 1 0=1;
      };
     };
     m_data=NULL;
     name="Application";
     visible=0;
     lft=0;
     top=0;
     o=Horizontal;
    };
   };
   frames {
    name=;
    el_typ=FrameViewer;
    el_def=0;
    tabBrowseViewer @[0] {
     m_data=NULL;
     name="Tree";
     visible=1;
     root_typ=LeabraProject;
     root_md=NULL;
     m_root=$146$;
    };
    PanelViewer @[1] {
     m_data=NULL;
     name="Panels";
     visible=1;
    };
    T3DataViewer @[2] {
     m_data=NULL;
     name="T3Frames";
     visible=1;
     frames {
      name=;
      el_typ=T3DataViewFrame;
      el_def=0;
      T3DataViewFrame @[0] {
       m_data=NULL;
       name="family_trees";
       visible=1;
       root_view {
	m_data=NULL;
	m_transform=NULL;
	children {
	 name=;
	 el_typ=T3DataView;
	 el_def=0;
	 NetView @[0] {
	  m_data=$5$;
FloatTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  lay_disp_modes{ Agent=0;Agent_Code=0;Relation=0;Relation_Code=0;Patient=0;Patient_Code=0;Hidden=0;	  };
	  scale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=1;
	   zero=0;
	   spec=.colorspecs[0]$147$;
	   auto_scale=0;
	  };
	  scale_ranges {
	   name=;
	   el_typ=ScaleRange;
	   el_def=0;
	   ScaleRange @[0] {
	    name="act";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[1] {
	    name="ext";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[2] {
	    name="targ";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[3] {
	    name="bias.wt";
	    auto_scale=1;
	    min=-1.008001;
	    max=1.008001;
	   };
	   ScaleRange @[4] {
	    name="syndep_max";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[5] {
	    name="syndep_avg";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[6] {
	    name="net";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[7] {
	    name="r.wt";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[8] {
	    name="cai_max";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[9] {
	    name="r.intwt";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[10] {
	    name="act_m";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[11] {
	    name="act_p";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[12] {
	    name="act_dif";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[13] {
	    name="p_act_m";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[14] {
	    name="p_act_p";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[15] {
	    name="act_m2";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[16] {
	    name="act_p2";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	  };
	  display=1;
	  lay_mv=0;
	  ordered_uvg_list{ act;	  };
	  unit_disp_mode=UDM_BLOCK;
	  unit_text_disp=UTD_NONE;
	  max_size {x=32: y=9: z=3: };
	  font_sizes {
	   net_name=0.05;
	   net_vals=0.05;
	   layer=0.04;
	   layer_vals=0.03;
	   prjn=0.01;
	   unit=0.02;
	   un_nm_len=3;
	  };
	  view_params {
	   xy_square=0;
	   unit_spacing=0.05;
	   prjn_disp=L_R_B;
	   prjn_name=0;
	   prjn_width=0.002;
	   prjn_trans=0.5;
	   lay_trans=0.5;
	   unit_trans=0.6;
	  };
	  wt_line_disp=0;
	  wt_line_width=4;
	  wt_line_thr=0.7;
	  wt_line_swt=0;
	  wt_prjn_lay=.projects[0].networks[0].layers[4]$148$;
	  snap_bord_disp=0;
	  snap_bord_width=4;
	 };
	 GraphTableView @[1] {
	  m_data=$12$;
FloatTransform @*(.m_transform) {scale={x=0.397403: y=0.3974031: z=0.3974031: }: rotate={x=0.7253826: y=-0.6616285: z=-0.189924: rot=0.3000024: }: translate={x=0.859448: y=0.9597762: z=-0.05529875: }: };
	  children {
	   name=;
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @[0] {
	    m_data=.projects[0].data.gp[1][1].data[0]$149$;
	    m_transform=NULL;
	    name="batch";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[1] {
	    m_data=.projects[0].data.gp[1][1].data[1]$150$;
	    m_transform=NULL;
	    name="epoch";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[2] {
	    m_data=.projects[0].data.gp[1][1].data[2]$151$;
	    m_transform=NULL;
	    name="avg_sse";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[3] {
	    m_data=.projects[0].data.gp[1][1].data[3]$152$;
	    m_transform=NULL;
	    name="cnt_err";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[4] {
	    m_data=.projects[0].data.gp[1][1].data[4]$153$;
	    m_transform=NULL;
	    name="avg_ext_rew";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[5] {
	    m_data=.projects[0].data.gp[1][1].data[5]$154$;
	    m_transform=NULL;
	    name="avg_cycles";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[6] {
	    m_data=.projects[0].data.gp[1][1].data[6]$155$;
	    m_transform=NULL;
	    name="epoch_time_tot";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[7] {
	    m_data=.projects[0].data.gp[1][1].data[7]$156$;
	    m_transform=NULL;
	    name="epoch_time_usr";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[8] {
	    m_data=.projects[0].data.gp[1][1].data[8]$157$;
	    m_transform=NULL;
	    name="mean_Hidden_act_dif";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[9] {
	    m_data=.projects[0].data.gp[1][1].data[9]$158$;
	    m_transform=NULL;
	    name="pat_code_st_maxda_mean";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[10] {
	    m_data=.projects[0].data.gp[1][1].data[10]$159$;
	    m_transform=NULL;
	    name="hidden_st_maxda_mean";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[11] {
	    m_data=.projects[0].data.gp[1][1].data[11]$160$;
	    m_transform=NULL;
	    name="ag_code_st_maxda_mean";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[12] {
	    m_data=.projects[0].data.gp[1][1].data[12]$161$;
	    m_transform=NULL;
	    name="rel_code_st_maxda_mean";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[13] {
	    m_data=.projects[0].data.gp[1][1].data[13]$162$;
	    m_transform=NULL;
	    name="hidden_acts";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=0.397403: y=0.3974031: z=0.3974031: }: rotate={x=0.7253826: y=-0.6616285: z=-0.189924: rot=0.3000024: }: translate={x=0.859448: y=0.9597762: z=-0.05529875: }: };
	  view_rows=10000;
	  view_range {min=0: max=6: };
	  display_on=1;
	  manip_ctrl_on=1;
	  x_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="epoch";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=-6e-07: max=6e-07: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  z_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Z;
	   col_name="batch";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=-6e-07: max=6e-07: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  plot_1 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="cnt_err";
	   fixed_range {fix_min=1: min=0: fix_max=1: max=100: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=100: };
	   range {min=0: max=100: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	  };
	  plot_2 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name="avg_cycles";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="red": r=1: g=0: b=0: a=1: desc="": };
	   data_range {min=40: max=40: };
	   range {min=39.998: max=40.002: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=SQUARE;
	  };
	  plot_3 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	   color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	   data_range {min=0: max=1: };
	   range {min=0: max=1: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=DIAMOND;
	  };
	  plot_4 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	   color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	   data_range {min=0: max=1: };
	   range {min=0: max=1: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=TRIANGLE;
	  };
	  plot_5 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	   color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	   data_range {min=0: max=1: };
	   range {min=0: max=1: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=PLUS;
	  };
	  alt_y_2=0;
	  alt_y_3=0;
	  alt_y_4=0;
	  alt_y_5=0;
	  graph_type=XY;
	  plot_style=LINE;
	  line_width=2;
	  point_size=MEDIUM;
	  point_spacing=1;
	  bar_space=0.2;
	  color_mode=VALUE_COLOR;
	  negative_draw=0;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  label_spacing=-1;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  err_1 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	  };
	  err_2 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	  };
	  err_3 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	  };
	  err_4 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	  };
	  err_5 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	  };
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  colorscale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=0;
	   zero=0;
	   spec=$147$;
	   auto_scale=0;
	  };
	  raster_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  width=1;
	  depth=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	};
       };
       camera_pos {x=0.6281334: y=0.4516695: z=1.722614: };
       camera_orient {x=0.9999757: y=0: z=0: rot=0.01709687: };
       camera_focdist=2.001343;
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
      };
      T3DataViewFrame @[1] {
       m_data=NULL;
       name="EpochOutputData";
       visible=1;
       root_view {
	m_data=NULL;
	m_transform=NULL;
	children {
	 name=;
	 el_typ=T3DataView;
	 el_def=0;
	 GraphTableView @[0] {
	  m_data=$12$;
FloatTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name=;
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @[0] {
	    m_data=$149$;
	    m_transform=NULL;
	    name="batch";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[1] {
	    m_data=$150$;
	    m_transform=NULL;
	    name="epoch";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[2] {
	    m_data=$151$;
	    m_transform=NULL;
	    name="avg_sse";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[3] {
	    m_data=$152$;
	    m_transform=NULL;
	    name="cnt_err";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[4] {
	    m_data=$153$;
	    m_transform=NULL;
	    name="avg_ext_rew";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[5] {
	    m_data=$154$;
	    m_transform=NULL;
	    name="avg_cycles";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[6] {
	    m_data=$155$;
	    m_transform=NULL;
	    name="epoch_time_tot";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[7] {
	    m_data=$156$;
	    m_transform=NULL;
	    name="epoch_time_usr";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[8] {
	    m_data=$157$;
	    m_transform=NULL;
	    name="mean_Hidden_act_dif";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[9] {
	    m_data=$158$;
	    m_transform=NULL;
	    name="pat_code_st_maxda_mean";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[10] {
	    m_data=$159$;
	    m_transform=NULL;
	    name="hidden_st_maxda_mean";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[11] {
	    m_data=$160$;
	    m_transform=NULL;
	    name="ag_code_st_maxda_mean";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[12] {
	    m_data=$161$;
	    m_transform=NULL;
	    name="rel_code_st_maxda_mean";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[13] {
	    m_data=$162$;
	    m_transform=NULL;
	    name="hidden_acts";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  view_rows=10000;
	  view_range {min=0: max=6: };
	  display_on=1;
	  manip_ctrl_on=1;
	  x_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="epoch";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=-6e-07: max=6e-07: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  z_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name="batch";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=-6e-07: max=6e-07: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  plot_1 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="avg_sse";
	   fixed_range {fix_min=1: min=0: fix_max=0: max=1.639068: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=1.639068: };
	   range {min=0: max=1.639068: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	  };
	  plot_2 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="cnt_err";
	   fixed_range {fix_min=1: min=0: fix_max=0: max=96: };
	   color {name="red": r=1: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=96: };
	   range {min=0: max=96: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=SQUARE;
	  };
	  plot_3 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name="mean_act_dif";
	   fixed_range {fix_min=0: min=0.148386: fix_max=0: max=0.155069: };
	   color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	   data_range {min=0.1483858: max=0.1550692: };
	   range {min=0.1483858: max=0.1550692: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=DIAMOND;
	  };
	  plot_4 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	   data_range {min=0: max=1: };
	   range {min=0: max=1: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=TRIANGLE;
	  };
	  plot_5 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	   data_range {min=0: max=1: };
	   range {min=0: max=1: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=PLUS;
	  };
	  alt_y_2=1;
	  alt_y_3=0;
	  alt_y_4=0;
	  alt_y_5=0;
	  graph_type=XY;
	  plot_style=LINE;
	  line_width=2;
	  point_size=MEDIUM;
	  point_spacing=1;
	  bar_space=0.2;
	  color_mode=FIXED_COLOR;
	  negative_draw=0;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  label_spacing=-1;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  err_1 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	  };
	  err_2 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	  };
	  err_3 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	  };
	  err_4 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	  };
	  err_5 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	  };
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  colorscale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=0;
	   zero=0;
	   spec=$147$;
	   auto_scale=0;
	  };
	  raster_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  width=1;
	  depth=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	};
       };
       camera_pos {x=1.465: y=0.445: z=1.523924: };
       camera_orient {x=0: y=0: z=1: rot=0: };
       camera_focdist=2.033924;
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
      };
      T3DataViewFrame @[2] {
       m_data=NULL;
       name="family_trees_InhibMod";
       visible=1;
       root_view {
	m_data=NULL;
	m_transform=NULL;
	children {
	 name=;
	 el_typ=T3DataView;
	 el_def=0;
	 GraphTableView @[0] {
	  m_data=.projects[0].data.gp[2][0]$163$;
FloatTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name=;
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @[0] {
	    m_data=.projects[0].data.gp[2][0].data[0]$164$;
	    m_transform=NULL;
	    name="ct_cycle";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[1] {
	    m_data=.projects[0].data.gp[2][0].data[1]$165$;
	    m_transform=NULL;
	    name="inhib_mod";
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  view_rows=10000;
	  view_range {min=0: max=79: };
	  display_on=1;
	  manip_ctrl_on=1;
	  x_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="ct_cycle";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=79: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=79: };
	   range {min=0: max=79: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  z_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  plot_1 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="inhib_mod";
	   fixed_range {fix_min=0: min=-0.05: fix_max=0: max=0.05: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=-0.05: max=0.05: };
	   range {min=-0.05: max=0.05: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	  };
	  plot_2 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	   color {name="red": r=1: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=1: };
	   range {min=0: max=1: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=SQUARE;
	  };
	  plot_3 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	   color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	   data_range {min=0: max=1: };
	   range {min=0: max=1: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=DIAMOND;
	  };
	  plot_4 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	   color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	   data_range {min=0: max=1: };
	   range {min=0: max=1: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=TRIANGLE;
	  };
	  plot_5 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	   color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	   data_range {min=0: max=1: };
	   range {min=0: max=1: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=PLUS;
	  };
	  alt_y_2=0;
	  alt_y_3=0;
	  alt_y_4=0;
	  alt_y_5=0;
	  graph_type=XY;
	  plot_style=LINE;
	  line_width=2;
	  point_size=MEDIUM;
	  point_spacing=1;
	  bar_space=0.2;
	  color_mode=VALUE_COLOR;
	  negative_draw=0;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  label_spacing=-1;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  err_1 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	  };
	  err_2 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	  };
	  err_3 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	  };
	  err_4 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	  };
	  err_5 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	  };
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  colorscale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=0;
	   zero=0;
	   spec=$147$;
	   auto_scale=0;
	  };
	  raster_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  width=1;
	  depth=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	};
       };
       camera_pos {x=1.4275: y=0.445: z=1.624621: };
       camera_orient {x=0: y=0: z=1: rot=0: };
       camera_focdist=1.637121;
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
      };
      T3DataViewFrame @[3] {
       m_data=NULL;
       name="EpochOutputData";
       visible=1;
       root_view {
	m_data=NULL;
	m_transform=NULL;
	children {
	 name=;
	 el_typ=T3DataView;
	 el_def=0;
	 GridTableView @[0] {
	  m_data=$12$;
FloatTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name=;
	   el_typ=GridColView;
	   el_def=0;
	   GridColView @[0] {
	    m_data=$149$;
	    m_transform=NULL;
	    name="batch";
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[1] {
	    m_data=$150$;
	    m_transform=NULL;
	    name="epoch";
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[2] {
	    m_data=$151$;
	    m_transform=NULL;
	    name="avg_sse";
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[3] {
	    m_data=$152$;
	    m_transform=NULL;
	    name="cnt_err";
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[4] {
	    m_data=$153$;
	    m_transform=NULL;
	    name="avg_ext_rew";
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[5] {
	    m_data=$154$;
	    m_transform=NULL;
	    name="avg_cycles";
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[6] {
	    m_data=$155$;
	    m_transform=NULL;
	    name="epoch_time_tot";
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[7] {
	    m_data=$156$;
	    m_transform=NULL;
	    name="epoch_time_usr";
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[8] {
	    m_data=$157$;
	    m_transform=NULL;
	    name="mean_Hidden_act_dif";
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[9] {
	    m_data=$158$;
	    m_transform=NULL;
	    name="pat_code_st_maxda_mean";
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[10] {
	    m_data=$159$;
	    m_transform=NULL;
	    name="hidden_st_maxda_mean";
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[11] {
	    m_data=$160$;
	    m_transform=NULL;
	    name="ag_code_st_maxda_mean";
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[12] {
	    m_data=$161$;
	    m_transform=NULL;
	    name="rel_code_st_maxda_mean";
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[13] {
	    m_data=$162$;
	    m_transform=NULL;
	    name="hidden_acts";
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  view_rows=10;
	  view_range {min=0: max=6: };
	  display_on=1;
	  manip_ctrl_on=1;
	  col_n=5;
	  col_range {min=9: max=13: };
	  width=1;
	  grid_on=1;
	  header_on=1;
	  row_num_on=0;
	  two_d_font=0;
	  two_d_font_scale=350;
	  mat_val_text=0;
	  colorscale {
	   name="ColorScale";
	   chunks=133;
	   min=-0.7212762;
	   max=0.7212762;
	   range=0.7212762;
	   zero=0;
	   spec=$147$;
	   auto_scale=1;
	  };
	  grid_margin=0.01;
	  grid_line_size=0.005;
	  row_num_width=4;
	  mat_block_spc=0.1;
	  mat_block_height=0;
	  mat_rot=0;
	  mat_trans=0.6;
	  mat_size_range {min=4: max=16: };
	  text_size_range {min=0.02: max=0.05: };
	 };
	};
       };
       camera_pos {x=1.5325: y=0.5175: z=1.443747: };
       camera_orient {x=0: y=0: z=1: rot=0: };
       camera_focdist=1.453747;
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
      };
      T3DataViewFrame @[4] {
       m_data=NULL;
       name="TrialOutputData";
       visible=1;
       root_view {
	m_data=NULL;
	m_transform=NULL;
	children {
	 name=;
	 el_typ=T3DataView;
	 el_def=0;
	 GridTableView @[0] {
	  m_data=$13$;
FloatTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name=;
	   el_typ=GridColView;
	   el_def=0;
	   GridColView @[0] {
	    m_data=.projects[0].data.gp[1][0].data[0]$166$;
	    m_transform=NULL;
	    name="batch";
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[1] {
	    m_data=.projects[0].data.gp[1][0].data[1]$167$;
	    m_transform=NULL;
	    name="epoch";
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[2] {
	    m_data=.projects[0].data.gp[1][0].data[2]$168$;
	    m_transform=NULL;
	    name="trial";
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[3] {
	    m_data=.projects[0].data.gp[1][0].data[3]$169$;
	    m_transform=NULL;
	    name="trial_name";
	    visible=1;
	    text_width=16;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[4] {
	    m_data=.projects[0].data.gp[1][0].data[4]$170$;
	    m_transform=NULL;
	    name="group_name";
	    visible=1;
	    text_width=16;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[5] {
	    m_data=.projects[0].data.gp[1][0].data[5]$171$;
	    m_transform=NULL;
	    name="phase_no";
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[6] {
	    m_data=.projects[0].data.gp[1][0].data[6]$172$;
	    m_transform=NULL;
	    name="minus_cycles";
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[7] {
	    m_data=.projects[0].data.gp[1][0].data[7]$173$;
	    m_transform=NULL;
	    name="sse";
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[8] {
	    m_data=.projects[0].data.gp[1][0].data[8]$174$;
	    m_transform=NULL;
	    name="ext_rew";
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[9] {
	    m_data=.projects[0].data.gp[1][0].data[9]$175$;
	    m_transform=NULL;
	    name="mean_Agent_act_dif";
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[10] {
	    m_data=.projects[0].data.gp[1][0].data[10]$176$;
	    m_transform=NULL;
	    name="mean_Agent__act_dif";
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[11] {
	    m_data=.projects[0].data.gp[1][0].data[11]$177$;
	    m_transform=NULL;
	    name="mean_Relati_act_dif";
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[12] {
	    m_data=.projects[0].data.gp[1][0].data[12]$178$;
	    m_transform=NULL;
	    name="mean_Patien_act_dif";
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[13] {
	    m_data=.projects[0].data.gp[1][0].data[13]$179$;
	    m_transform=NULL;
	    name="mean_Hidden_act_dif";
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[14] {
	    m_data=.projects[0].data.gp[1][0].data[14]$180$;
	    m_transform=NULL;
	    name="pat_code_st_maxda";
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[15] {
	    m_data=.projects[0].data.gp[1][0].data[15]$181$;
	    m_transform=NULL;
	    name="hidden_st_maxda";
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[16] {
	    m_data=.projects[0].data.gp[1][0].data[16]$182$;
	    m_transform=NULL;
	    name="ag_code_st_maxda";
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[17] {
	    m_data=.projects[0].data.gp[1][0].data[17]$183$;
	    m_transform=NULL;
	    name="rel_code_st_maxda";
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[18] {
	    m_data=.projects[0].data.gp[1][0].data[18]$184$;
	    m_transform=NULL;
	    name="Hidden_act_m";
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  view_rows=10;
	  view_range {min=90: max=99: };
	  display_on=1;
	  manip_ctrl_on=1;
	  col_n=5;
	  col_range {min=14: max=18: };
	  width=1;
	  grid_on=1;
	  header_on=1;
	  row_num_on=0;
	  two_d_font=0;
	  two_d_font_scale=350;
	  mat_val_text=0;
	  colorscale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=1;
	   zero=0;
	   spec=$147$;
	   auto_scale=0;
	  };
	  grid_margin=0.01;
	  grid_line_size=0.005;
	  row_num_width=4;
	  mat_block_spc=0.1;
	  mat_block_height=0;
	  mat_rot=0;
	  mat_trans=0.6;
	  mat_size_range {min=4: max=16: };
	  text_size_range {min=0.02: max=0.05: };
	 };
	};
       };
       camera_pos {x=1.5325: y=0.5174999: z=1.443747: };
       camera_orient {x=0: y=0: z=1: rot=0: };
       camera_focdist=1.453747;
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
      };
      T3DataViewFrame @[5] {
       m_data=NULL;
       name="gpout";
       visible=1;
       root_view {
	m_data=NULL;
	m_transform=NULL;
	children {
	 name=;
	 el_typ=T3DataView;
	 el_def=0;
	 GridTableView @[0] {
	  m_data=$47$;
FloatTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name=;
	   el_typ=GridColView;
	   el_def=0;
	   GridColView @[0] {
	    m_data=.projects[0].programs[2].objs[0].data[0]$185$;
	    m_transform=NULL;
	    name="trial_name_first";
	    visible=1;
	    text_width=16;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[1] {
	    m_data=.projects[0].programs[2].objs[0].data[1]$186$;
	    m_transform=NULL;
	    name="Hidden_act_m_mean";
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  view_rows=10;
	  view_range {min=0: max=0: };
	  display_on=1;
	  manip_ctrl_on=1;
	  col_n=5;
	  col_range {min=0: max=1: };
	  width=1;
	  grid_on=1;
	  header_on=1;
	  row_num_on=0;
	  two_d_font=0;
	  two_d_font_scale=350;
	  mat_val_text=0;
	  colorscale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=1;
	   zero=0;
	   spec=$147$;
	   auto_scale=0;
	  };
	  grid_margin=0.01;
	  grid_line_size=0.005;
	  row_num_width=4;
	  mat_block_spc=0.1;
	  mat_block_height=0;
	  mat_rot=0;
	  mat_trans=0.6;
	  mat_size_range {min=4: max=16: };
	  text_size_range {min=0.02: max=0.05: };
	 };
	};
       };
       camera_pos {x=1.5325: y=0.5175: z=1.443747: };
       camera_orient {x=0: y=0: z=1: rot=0: };
       camera_focdist=1.453747;
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
      };
     };
    };
   };
   docks {
    name=;
    el_typ=DockViewer;
    el_def=0;
    ToolBoxDockViewer @[0] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItemBase;
      el_def=0;
      UserDataItem @[0] {
       name="view_win_lft";
       value 6 0=0;
      };
      UserDataItem @[1] {
       name="view_win_top";
       value 6 0=0.008754863403737545;
      };
      UserDataItem @[2] {
       name="view_win_wd";
       value 6 0=0.05961893126368523;
      };
      UserDataItem @[3] {
       name="view_win_ht";
       value 6 0=0.7285992503166199;
      };
      UserDataItem @[4] {
       name="view_win_iconified";
       value 1 0=0;
      };
      UserDataItem @[5] {
       name="view_visible";
       value 1 0=1;
      };
     };
     m_data=NULL;
     name="Tools";
     visible=1;
     dock_flags=DV_MOVABLE|DV_FLOATABLE;
     dock_area=1;
    };
   };
  };
 };
 use_change_log=1;
 last_change_desc="separate test programs";
 networks {
  name=;
  el_typ=CtLeabraNetwork;
  el_def=0;
  CtLeabraNetwork @[0] {
   name="family_trees";
   desc=;
   specs {
    name=;
    el_typ=BaseSpec;
    el_def=0;
    CtLeabraLayerSpec @[0] {
     name="Hidden";
     desc=;
     unique{      };
     children {
      name=;
      el_typ=CtLeabraLayerSpec;
      el_def=0;
      CtLeabraLayerSpec @[0] {
       name="Input_Output";
       desc=;
       unique{ kwta;compute_i;i_kwta_pt;inhib;       };
       children {
	name=;
	el_typ=CtLeabraLayerSpec;
	el_def=0;
       };
       inhib_group=ENTIRE_LAYER;
       inhib {
	type=KWTA_INHIB;
	kwta_pt=0.25;
	min_i=0;
	comp_thr=0.5;
	comp_gain=2;
	gp_pt=0.2;
       };
       kwta {k_from=USE_PAT_K: k=1: pct=0.23: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
       gp_kwta {k_from=USE_PCT: k=12: pct=0.23: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
       tie_brk {on=0: k_thr=1: diff_thr=0.2: };
       adapt_i {type=NONE: tol=0.05: p_dt=0: mx_d=0.2: l=0.2: a_dt=0.005: };
       clamp {hard=1: gain=0.5: d_gain=0: };
       decay {event=1: phase=0: phase2=0: clamp_phase2=0: };
       net_rescale {on=0: max_net=0.8: net_extra=0.2: };
       abs_net_adapt {
	on=0;
	trg_net=0.5;
	tol=0.1;
	abs_lrate=0.1;
       };
      };
     };
     inhib_group=ENTIRE_LAYER;
     inhib {
      type=KWTA_KV2K;
      kwta_pt=0.25;
      min_i=0;
      comp_thr=0.5;
      comp_gain=2;
      gp_pt=0.2;
     };
     kwta {k_from=USE_PCT: k=10: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
     gp_kwta {k_from=USE_PCT: k=12: pct=0.23: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
     tie_brk {on=0: k_thr=1: diff_thr=0.2: };
     adapt_i {type=NONE: tol=0.05: p_dt=0: mx_d=0.2: l=0.2: a_dt=0.005: };
     clamp {hard=1: gain=0.5: d_gain=0: };
     decay {event=1: phase=0: phase2=0: clamp_phase2=0: };
     net_rescale {on=0: max_net=0.8: net_extra=0.2: };
     abs_net_adapt {
      on=0;
      trg_net=0.5;
      tol=0.1;
      abs_lrate=0.1;
     };
    };
    CtLeabraConSpec @[1] {
     name="ConSpec";
     desc=;
     unique{      };
     children {
      name=;
      el_typ=CtLeabraConSpec;
      el_def=0;
      CtLeabraBiasSpec @[0] {
       name="CtLeabraBiasSpec_0";
       desc=;
       unique{ rnd;wt_limits;wt_scale;wt_scale_init;dwt_thresh;ct_lrate;       };
       children {
	name=;
	el_typ=LeabraBiasSpec;
	el_def=0;
       };
       rnd {name="": type=UNIFORM: mean=0: var=0: par=0.25: };
       wt_limits {type=NONE: min=-1: max=5: sym=0: };
       inhib=0;
       wt_scale {abs=1: rel=1: };
       wt_scale_init {init=0: abs=1: rel=1: };
       wt_sig {gain=6: off=1.25: };
       lrate=0.03;
       cur_lrate=0.03;
       lrs_value=EPOCH;
       lrate_sched {
	name=;
	el_typ=SchedItem;
	el_def=0;
	last_ctr=-1;
	default_val=1;
	interpolate=0;
	cur_val=0;
	SchedItem @[0] {
	 start_ctr=0;
	 start_val=1;
	 duration=200;
	 step=-0.0045;
	};
	SchedItem @[1] {
	 start_ctr=200;
	 start_val=0.1;
	 duration=1;
	 step=1;
	};
       };
       lmix {hebb=0: err=1: err_sb=1: };
       savg_cor {cor=0.4: thresh=0.001: norm_con_n=0: };
       rel_net_adapt {
	on=0;
	trg_fm_input=0.85;
	trg_fm_output=0.15;
	trg_lateral=0;
	trg_sum=1;
	tol_lg=0.05;
	tol_sm=0.2;
	rel_lrate=0.1;
       };
       dwt_thresh=0.1;
      };
      CtLeabraConSpec @[1] {
       name="FmInput_Output";
       desc=;
       unique{ wt_scale;       };
       children {
	name=;
	el_typ=CtLeabraConSpec;
	el_def=0;
       };
       rnd {name="": type=UNIFORM: mean=0.5: var=0.25: par=1: };
       wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
       inhib=0;
       wt_scale {abs=1: rel=0.3: };
       wt_scale_init {init=0: abs=1: rel=1: };
       wt_sig {gain=6: off=1.25: };
       lrate=0.03;
       cur_lrate=0.03;
       lrs_value=EPOCH;
       lrate_sched {
	name=;
	el_typ=SchedItem;
	el_def=0;
	last_ctr=-1;
	default_val=1;
	interpolate=0;
	cur_val=0;
	SchedItem @[0] {
	 start_ctr=0;
	 start_val=1;
	 duration=200;
	 step=-0.0045;
	};
	SchedItem @[1] {
	 start_ctr=200;
	 start_val=0.1;
	 duration=1;
	 step=1;
	};
       };
       lmix {hebb=0: err=1: err_sb=1: };
       savg_cor {cor=0.4: thresh=0.001: norm_con_n=0: };
       rel_net_adapt {
	on=0;
	trg_fm_input=0.85;
	trg_fm_output=0.15;
	trg_lateral=0;
	trg_sum=1;
	tol_lg=0.05;
	tol_sm=0.2;
	rel_lrate=0.1;
       };
       ca_dep {
	ca_inc=0.2;
	ca_dec=0.2;
	sd_ca_thr=0.2;
	sd_ca_gain=0.2;
	sd_ca_thr_rescale=0.25;
       };
       dwt_norm {
	on=1;
	norm_pct=1;
       };
      };
     };
     rnd {name="": type=UNIFORM: mean=0.5: var=0.25: par=1: };
     wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
     inhib=0;
     wt_scale {abs=1: rel=1: };
     wt_scale_init {init=0: abs=1: rel=1: };
     wt_sig {gain=6: off=1.25: };
     lrate=0.03;
     cur_lrate=0.03;
     lrs_value=EPOCH;
     lrate_sched {
      name=;
      el_typ=SchedItem;
      el_def=0;
      last_ctr=-1;
      default_val=1;
      interpolate=0;
      cur_val=0;
      SchedItem @[0] {
       start_ctr=0;
       start_val=1;
       duration=200;
       step=-0.0045;
      };
      SchedItem @[1] {
       start_ctr=200;
       start_val=0.1;
       duration=1;
       step=1;
      };
     };
     lmix {hebb=0: err=1: err_sb=1: };
     savg_cor {cor=0.4: thresh=0.001: norm_con_n=0: };
     rel_net_adapt {
      on=0;
      trg_fm_input=0.85;
      trg_fm_output=0.15;
      trg_lateral=0;
      trg_sum=1;
      tol_lg=0.05;
      tol_sm=0.2;
      rel_lrate=0.1;
     };
     ca_dep {
      ca_inc=0.2;
      ca_dec=0.2;
      sd_ca_thr=0.2;
      sd_ca_gain=0.2;
      sd_ca_thr_rescale=0.25;
     };
     dwt_norm {
      on=1;
      norm_pct=1;
     };
    };
    CtLeabraUnitSpec @[2] {
     name="UnitSpec";
     desc=;
     unique{      };
     children {
      name=;
      el_typ=CtLeabraUnitSpec;
      el_def=0;
      CtLeabraUnitSpec @[0] {
       name="Input_Codes";
       desc=;
       unique{        };
       children {
	name=;
	el_typ=CtLeabraUnitSpec;
	el_def=0;
       };
       act_range {min=0: max=1: range=1: scale=1: };
       bias_con_type=CtLeabraCon;
       bias_spec {type=CtLeabraBiasSpec: spec=$15$: };
       sse_tol=0.5;
       act_fun=NOISY_XX1;
       act {thr=0.25: gain=600: nvar=0.005: avg_dt=0.005: i_thr=STD: };
       spike {decay=0.05: v_m_r=0: eq_gain=10: eq_dt=0.02: hard_gain=0.4: };
       depress {p_spike=P_NXX1: rec=0.2: asymp_act=0.5: depl=0.2105263: max_amp=2: };
       opt_thresh {send=0.1: delta=0.005: learn=0.01: updt_wts=0: phase_dif=0: };
       clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
       vm_range {min=0: max=1: range=1: scale=1: };
       v_m_init {name="": type=UNIFORM: mean=0.15: var=0: par=1: };
       dt {vm=0.3: net=0.7: d_vm_max=0.025: vm_eq_cyc=0: vm_eq_dt=1: };
       g_bar {e=1: l=0.1: i=1: h=0.1: a=0.5: };
       e_rev {e=1: l=0.15: i=0.15: h=1: a=0: };
       hyst {on=0: b_inc_dt=0.01: b_dec_dt=0.05: a_thr=0.5: d_thr=0.1: g_dt=0.1: init=1: trl=0: };
       acc {on=0: b_inc_dt=0.01: b_dec_dt=0.01: a_thr=0.5: d_thr=0.1: g_dt=0.1: init=1: trl=0: };
       act_reg {on=0: bias_only=0: min=0.001: max=0.35: dec_wt=0.2: inc_wt=0.2: };
       maxda {val=INET_DA: inet_scale=1: lay_avg_thr=0.01: };
       noise_type=NO_NOISE;
       noise {name="": type=GAUSSIAN: mean=0: var=0.001: par=1: };
       noise_sched {
	name=;
	el_typ=SchedItem;
	el_def=0;
	last_ctr=-1;
	default_val=1;
	interpolate=1;
	cur_val=0;
       };
       da_mod {on=0: mod=PLUS_CONT: gain=0.1: neg_rec=0.2: p_dwt=0: };
      };
     };
     act_range {min=0: max=1: range=1: scale=1: };
     bias_con_type=CtLeabraCon;
     bias_spec {type=CtLeabraBiasSpec: spec=$15$: };
     sse_tol=0.5;
     act_fun=NOISY_XX1;
     act {thr=0.25: gain=600: nvar=0.005: avg_dt=0.005: i_thr=STD: };
     spike {decay=0.05: v_m_r=0: eq_gain=10: eq_dt=0.02: hard_gain=0.4: };
     depress {p_spike=P_NXX1: rec=0.2: asymp_act=0.5: depl=0.2105263: max_amp=2: };
     opt_thresh {send=0.1: delta=0.005: learn=0.01: updt_wts=0: phase_dif=0: };
     clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
     vm_range {min=0: max=1: range=1: scale=1: };
     v_m_init {name="": type=UNIFORM: mean=0.15: var=0: par=1: };
     dt {vm=0.3: net=0.7: d_vm_max=0.025: vm_eq_cyc=0: vm_eq_dt=1: };
     g_bar {e=1: l=0.1: i=1: h=0.1: a=0.5: };
     e_rev {e=1: l=0.15: i=0.15: h=1: a=0: };
     hyst {on=0: b_inc_dt=0.01: b_dec_dt=0.05: a_thr=0.5: d_thr=0.1: g_dt=0.1: init=1: trl=0: };
     acc {on=0: b_inc_dt=0.01: b_dec_dt=0.01: a_thr=0.5: d_thr=0.1: g_dt=0.1: init=1: trl=0: };
     act_reg {on=0: bias_only=0: min=0.001: max=0.35: dec_wt=0.2: inc_wt=0.2: };
     maxda {val=INET_DA: inet_scale=1: lay_avg_thr=0.01: };
     noise_type=NO_NOISE;
     noise {name="": type=GAUSSIAN: mean=0: var=0.001: par=1: };
     noise_sched {
      name=;
      el_typ=SchedItem;
      el_def=0;
      last_ctr=-1;
      default_val=1;
      interpolate=1;
      cur_val=0;
     };
     da_mod {on=0: mod=PLUS_CONT: gain=0.1: neg_rec=0.2: p_dwt=0: };
    };
    FullPrjnSpec @[3] {
     name="FullPrjnSpec";
     desc=;
     unique{      };
     children {
      name=;
      el_typ=FullPrjnSpec;
      el_def=0;
     };
     self_con=0;
     init_wts=0;
    };
   };
   layers {
    name=;
    el_typ=CtLeabraLayer;
    el_def=0;
    pos {x=0: y=0: z=0: };
    CtLeabraLayer @[0] {
     name="Agent";
     flags=PROJECT_WTS_NEXT|PROJECT_WTS_DONE;
     layer_type=INPUT;
     pos {x=0: y=0: z=0: };
     un_geom {x=6: y=4: n_not_xy=0: n=24: };
     unit_groups=0;
     gp_geom {x=0: y=0: n_not_xy=0: n=0: };
     gp_spc {x=0: y=0: };
     act_geom {x=6: y=4: n_not_xy=0: n=24: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_Agent_Code";
       from_type=CUSTOM;
       from=.projects[0].networks[0].layers[1]$187$;
       spec {type=FullPrjnSpec: spec=.projects[0].networks[0].specs[3]$188$: };
       con_type=CtLeabraCon;
       recvcons_type=CtLeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=CtLeabraConSpec: spec=$1$: };
       recv_idx=0;
       send_idx=1;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[1].projections[0];
     };
     units {
      name=;
      el_typ=CtLeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=6: y=4: n_not_xy=0: n=24: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=CtLeabraUnitSpec: spec=$3$: };
     ext_flag=COMP;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name=;
     sse=0;
     icon_value=0;
     netin {avg=0.2424129: max=0.341105: max_i=18: };
     i_thrs {avg=1.717952: max=2.458287: max_i=18: };
     acts {avg=0.03931003: max=0.9121807: max_i=18: };
     acts_p {avg=0.03958333: max=0.95: max_i=18: };
     acts_m {avg=0.03931003: max=0.9121807: max_i=18: };
     phase_dif_ratio=0.9930955;
     kwta {k=1: pct=0.04166667: pct_c=0.9583333: adth_k=1: k_ithr=2.458287: k1_ithr=1.868683: ithr_r=0.2742313: ithr_diff=0.2398437: tie_brk=0: };
     i_val {kwta=2.016084: g_i=2.016084: gp_g_i=0: g_i_orig=2.016084: };
     un_g_i {avg=2.016083: max=2.016084: max_i=0: };
     adapt_i {avg_avg=0.04084535: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
     maxda=0.0001406262;
     spec {type=CtLeabraLayerSpec: spec=.projects[0].networks[0].specs[0].children[0]$189$: };
     stm_gain=0.5;
     hard_clamped=0;
     dav=0;
     net_rescale=1;
     avg_netin {avg=0: max=0: max_i=-1: };
     avg_netin_sum {avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     da_updt=0;
     misc_iar{      };
     maxda_sum=0;
     sravg_sum=0;
     sravg_cyc=0;
     mean_cai_max=0.006621386;
    };
    CtLeabraLayer @[1] {
     name="Agent_Code";
     flags=PROJECT_WTS_NEXT|PROJECT_WTS_DONE;
     layer_type=HIDDEN;
     pos {x=0: y=1: z=1: };
     un_geom {x=8: y=8: n_not_xy=0: n=64: };
     unit_groups=0;
     gp_geom {x=3: y=3: n_not_xy=0: n=9: };
     gp_spc {x=0: y=0: };
     act_geom {x=8: y=8: n_not_xy=0: n=64: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_Agent";
       from_type=CUSTOM;
       from=.projects[0].networks[0].layers[0]$190$;
       spec {type=FullPrjnSpec: spec=$188$: };
       con_type=CtLeabraCon;
       recvcons_type=CtLeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=CtLeabraConSpec: spec=$2$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[1] {
       name="Fm_Hidden";
       from_type=CUSTOM;
       from=$94$;
       spec {type=FullPrjnSpec: spec=$188$: };
       con_type=CtLeabraCon;
       recvcons_type=CtLeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=CtLeabraConSpec: spec=$1$: };
       recv_idx=1;
       send_idx=2;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[6].projections[0];
	    Projection_Group @. = [1] = LeabraPrjn .projects[0].networks[0].layers[0].projections[0];
     };
     units {
      name=;
      el_typ=CtLeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=8: y=8: n_not_xy=0: n=64: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=CtLeabraUnitSpec: spec=.projects[0].networks[0].specs[2].children[0]$191$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name=;
     sse=0;
     icon_value=0;
     netin {avg=0.290576: max=0.3607822: max_i=52: };
     i_thrs {avg=2.079231: max=2.606515: max_i=52: };
     acts {avg=0.1301503: max=0.83881: max_i=52: };
     acts_p {avg=0.1310983: max=0.8654691: max_i=52: };
     acts_m {avg=0.1301503: max=0.83881: max_i=52: };
     phase_dif_ratio=0.9927687;
     kwta {k=16: pct=0.25: pct_c=0.75: adth_k=5: k_ithr=2.421719: k1_ithr=2.292743: ithr_r=0.0547286: ithr_diff=0.05325799: tie_brk=0: };
     i_val {kwta=2.324987: g_i=2.324987: gp_g_i=0: g_i_orig=2.324987: };
     un_g_i {avg=2.324987: max=2.324987: max_i=0: };
     adapt_i {avg_avg=0.1976756: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
     maxda=0.003930479;
     spec {type=CtLeabraLayerSpec: spec=$4$: };
     stm_gain=0.5;
     hard_clamped=0;
     dav=0;
     net_rescale=1;
     avg_netin {avg=0: max=0: max_i=-1: };
     avg_netin_sum {avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     da_updt=0;
     misc_iar{      };
     maxda_sum=0;
     sravg_sum=0;
     sravg_cyc=0;
     mean_cai_max=0.06034049;
    };
    CtLeabraLayer @[2] {
     name="Relation";
     flags=PROJECT_WTS_NEXT|PROJECT_WTS_DONE;
     layer_type=INPUT;
     pos {x=10: y=1: z=0: };
     un_geom {x=6: y=2: n_not_xy=0: n=12: };
     unit_groups=0;
     gp_geom {x=0: y=0: n_not_xy=0: n=0: };
     gp_spc {x=0: y=0: };
     act_geom {x=6: y=2: n_not_xy=0: n=12: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_Relation_Code";
       from_type=CUSTOM;
       from=.projects[0].networks[0].layers[3]$192$;
       spec {type=FullPrjnSpec: spec=$188$: };
       con_type=CtLeabraCon;
       recvcons_type=CtLeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=CtLeabraConSpec: spec=$1$: };
       recv_idx=0;
       send_idx=1;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[3].projections[0];
     };
     units {
      name=;
      el_typ=CtLeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=6: y=2: n_not_xy=0: n=12: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=CtLeabraUnitSpec: spec=$3$: };
     ext_flag=COMP;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name=;
     sse=0;
     icon_value=0;
     netin {avg=0.2902504: max=0.4030693: max_i=4: };
     i_thrs {avg=2.076797: max=2.92302: max_i=4: };
     acts {avg=0.07890221: max=0.9235163: max_i=4: };
     acts_p {avg=0.07916667: max=0.95: max_i=4: };
     acts_m {avg=0.07890221: max=0.9235163: max_i=4: };
     phase_dif_ratio=0.9966596;
     kwta {k=1: pct=0.08333334: pct_c=0.9166667: adth_k=1: k_ithr=2.92302: k1_ithr=2.138898: ithr_r=0.3123266: ithr_diff=0.2682574: tie_brk=0: };
     i_val {kwta=2.334929: g_i=2.334929: gp_g_i=0: g_i_orig=2.334929: };
     un_g_i {avg=2.334929: max=2.334929: max_i=0: };
     adapt_i {avg_avg=0.0816907: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
     maxda=0.0001824349;
     spec {type=CtLeabraLayerSpec: spec=$189$: };
     stm_gain=0.5;
     hard_clamped=0;
     dav=0;
     net_rescale=1;
     avg_netin {avg=0: max=0: max_i=-1: };
     avg_netin_sum {avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     da_updt=0;
     misc_iar{      };
     maxda_sum=0;
     sravg_sum=0;
     sravg_cyc=0;
     mean_cai_max=0.01289875;
    };
    CtLeabraLayer @[3] {
     name="Relation_Code";
     flags=PROJECT_WTS_NEXT|PROJECT_WTS_DONE;
     layer_type=HIDDEN;
     pos {x=12: y=1: z=1: };
     un_geom {x=8: y=8: n_not_xy=0: n=64: };
     unit_groups=0;
     gp_geom {x=3: y=3: n_not_xy=0: n=9: };
     gp_spc {x=0: y=0: };
     act_geom {x=8: y=8: n_not_xy=0: n=64: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_Relation";
       from_type=CUSTOM;
       from=.projects[0].networks[0].layers[2]$193$;
       spec {type=FullPrjnSpec: spec=$188$: };
       con_type=CtLeabraCon;
       recvcons_type=CtLeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=CtLeabraConSpec: spec=$2$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[1] {
       name="Fm_Hidden";
       from_type=CUSTOM;
       from=$94$;
       spec {type=FullPrjnSpec: spec=$188$: };
       con_type=CtLeabraCon;
       recvcons_type=CtLeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=CtLeabraConSpec: spec=$1$: };
       recv_idx=1;
       send_idx=1;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[6].projections[1];
	    Projection_Group @. = [1] = LeabraPrjn .projects[0].networks[0].layers[2].projections[0];
     };
     units {
      name=;
      el_typ=CtLeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=8: y=8: n_not_xy=0: n=64: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=CtLeabraUnitSpec: spec=$191$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name=;
     sse=0;
     icon_value=0;
     netin {avg=0.2938772: max=0.3662473: max_i=26: };
     i_thrs {avg=2.104087: max=2.648025: max_i=26: };
     acts {avg=0.1423156: max=0.8370948: max_i=26: };
     acts_p {avg=0.149625: max=0.832213: max_i=26: };
     acts_m {avg=0.1423156: max=0.8370948: max_i=26: };
     phase_dif_ratio=0.9511482;
     kwta {k=16: pct=0.25: pct_c=0.75: adth_k=5: k_ithr=2.474156: k1_ithr=2.327422: ithr_r=0.06113779: ithr_diff=0.05930641: tie_brk=0: };
     i_val {kwta=2.364106: g_i=2.364106: gp_g_i=0: g_i_orig=2.364106: };
     un_g_i {avg=2.364105: max=2.364106: max_i=0: };
     adapt_i {avg_avg=0.1998263: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
     maxda=0.004338264;
     spec {type=CtLeabraLayerSpec: spec=$4$: };
     stm_gain=0.5;
     hard_clamped=0;
     dav=0;
     net_rescale=1;
     avg_netin {avg=0: max=0: max_i=-1: };
     avg_netin_sum {avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     da_updt=0;
     misc_iar{      };
     maxda_sum=0;
     sravg_sum=0;
     sravg_cyc=0;
     mean_cai_max=0.0692196;
    };
    CtLeabraLayer @[4] {
     name="Patient";
     flags=PROJECT_WTS_NEXT|PROJECT_WTS_DONE;
     layer_type=TARGET;
     pos {x=21: y=0: z=0: };
     un_geom {x=6: y=4: n_not_xy=0: n=24: };
     unit_groups=0;
     gp_geom {x=0: y=0: n_not_xy=0: n=0: };
     gp_spc {x=0: y=0: };
     act_geom {x=6: y=4: n_not_xy=0: n=24: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_Patient_Code";
       from_type=CUSTOM;
       from=.projects[0].networks[0].layers[5]$194$;
       spec {type=FullPrjnSpec: spec=$188$: };
       con_type=CtLeabraCon;
       recvcons_type=CtLeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=CtLeabraConSpec: spec=$1$: };
       recv_idx=0;
       send_idx=1;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[5].projections[0];
     };
     units {
      name=;
      el_typ=CtLeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=6: y=4: n_not_xy=0: n=24: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=CtLeabraUnitSpec: spec=$3$: };
     ext_flag=COMP;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name=;
     sse=1.739555;
     icon_value=0;
     netin {avg=0.2644245: max=0.3732041: max_i=22: };
     i_thrs {avg=1.881855: max=2.696696: max_i=22: };
     acts {avg=0.0383113: max=0.8695111: max_i=22: };
     acts_p {avg=0.03958333: max=0.95: max_i=22: };
     acts_m {avg=0.0383113: max=0.8695111: max_i=22: };
     phase_dif_ratio=0.9678644;
     kwta {k=1: pct=0.04166667: pct_c=0.9583333: adth_k=1: k_ithr=2.696696: k1_ithr=2.239314: ithr_r=0.1858578: ithr_diff=0.1696084: tie_brk=0: };
     i_val {kwta=2.35366: g_i=2.35366: gp_g_i=0: g_i_orig=2.35366: };
     un_g_i {avg=2.35366: max=2.35366: max_i=0: };
     adapt_i {avg_avg=0.03935044: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
     maxda=0.0001844764;
     spec {type=CtLeabraLayerSpec: spec=$189$: };
     stm_gain=0.5;
     hard_clamped=0;
     dav=0;
     net_rescale=1;
     avg_netin {avg=0: max=0: max_i=-1: };
     avg_netin_sum {avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     da_updt=0;
     misc_iar{      };
     maxda_sum=0;
     sravg_sum=0;
     sravg_cyc=0;
     mean_cai_max=0.01172803;
    };
    CtLeabraLayer @[5] {
     name="Patient_Code";
     flags=PROJECT_WTS_NEXT|PROJECT_WTS_DONE;
     layer_type=HIDDEN;
     pos {x=24: y=1: z=1: };
     un_geom {x=8: y=8: n_not_xy=0: n=64: };
     unit_groups=0;
     gp_geom {x=3: y=3: n_not_xy=0: n=9: };
     gp_spc {x=0: y=0: };
     act_geom {x=8: y=8: n_not_xy=0: n=64: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_Patient";
       from_type=CUSTOM;
       from=$148$;
       spec {type=FullPrjnSpec: spec=$188$: };
       con_type=CtLeabraCon;
       recvcons_type=CtLeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=CtLeabraConSpec: spec=$2$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[1] {
       name="Fm_Hidden";
       from_type=CUSTOM;
       from=$94$;
       spec {type=FullPrjnSpec: spec=$188$: };
       con_type=CtLeabraCon;
       recvcons_type=CtLeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=CtLeabraConSpec: spec=$1$: };
       recv_idx=1;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[4].projections[0];
	    Projection_Group @. = [1] = LeabraPrjn .projects[0].networks[0].layers[6].projections[2];
     };
     units {
      name=;
      el_typ=CtLeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=8: y=8: n_not_xy=0: n=64: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=CtLeabraUnitSpec: spec=$3$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name=;
     sse=0;
     icon_value=0;
     netin {avg=0.2839236: max=0.3744776: max_i=8: };
     i_thrs {avg=2.028656: max=2.706964: max_i=8: };
     acts {avg=0.1404982: max=0.8976952: max_i=8: };
     acts_p {avg=0.1393573: max=0.9003724: max_i=8: };
     acts_m {avg=0.1404982: max=0.8976952: max_i=8: };
     phase_dif_ratio=1.008187;
     kwta {k=16: pct=0.25: pct_c=0.75: adth_k=5: k_ithr=2.401609: k1_ithr=2.242698: ithr_r=0.06845964: ithr_diff=0.06616884: tie_brk=0: };
     i_val {kwta=2.282426: g_i=2.282426: gp_g_i=0: g_i_orig=2.282426: };
     un_g_i {avg=2.282425: max=2.282426: max_i=0: };
     adapt_i {avg_avg=0.1955347: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
     maxda=0.002717048;
     spec {type=CtLeabraLayerSpec: spec=$4$: };
     stm_gain=0.5;
     hard_clamped=0;
     dav=0;
     net_rescale=1;
     avg_netin {avg=0: max=0: max_i=-1: };
     avg_netin_sum {avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     da_updt=0;
     misc_iar{      };
     maxda_sum=0;
     sravg_sum=0;
     sravg_cyc=0;
     mean_cai_max=0.05687535;
    };
    CtLeabraLayer @[6] {
     name="Hidden";
     flags=PROJECT_WTS_NEXT|PROJECT_WTS_DONE;
     layer_type=HIDDEN;
     pos {x=13: y=1: z=2: };
     un_geom {x=8: y=8: n_not_xy=0: n=64: };
     unit_groups=0;
     gp_geom {x=4: y=2: n_not_xy=0: n=8: };
     gp_spc {x=0: y=0: };
     act_geom {x=8: y=8: n_not_xy=0: n=64: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_Agent_Code";
       from_type=CUSTOM;
       from=$187$;
       spec {type=FullPrjnSpec: spec=$188$: };
       con_type=CtLeabraCon;
       recvcons_type=CtLeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=CtLeabraConSpec: spec=$1$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[1] {
       name="Fm_Relation_Code";
       from_type=CUSTOM;
       from=$192$;
       spec {type=FullPrjnSpec: spec=$188$: };
       con_type=CtLeabraCon;
       recvcons_type=CtLeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=CtLeabraConSpec: spec=$1$: };
       recv_idx=1;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[2] {
       name="Fm_Patient_Code";
       from_type=CUSTOM;
       from=$194$;
       spec {type=FullPrjnSpec: spec=$188$: };
       con_type=CtLeabraCon;
       recvcons_type=CtLeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=CtLeabraConSpec: spec=$1$: };
       recv_idx=2;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[1].projections[1];
	    Projection_Group @. = [1] = LeabraPrjn .projects[0].networks[0].layers[3].projections[1];
	    Projection_Group @. = [2] = LeabraPrjn .projects[0].networks[0].layers[5].projections[1];
     };
     units {
      name=;
      el_typ=CtLeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=8: y=8: n_not_xy=0: n=64: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=CtLeabraUnitSpec: spec=$3$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name=;
     sse=0;
     icon_value=0;
     netin {avg=0.2652758: max=0.3033803: max_i=8: };
     i_thrs {avg=1.889555: max=2.17557: max_i=8: };
     acts {avg=0.1310267: max=0.7646173: max_i=8: };
     acts_p {avg=0.1302869: max=0.7442353: max_i=35: };
     acts_m {avg=0.1310267: max=0.7646173: max_i=8: };
     phase_dif_ratio=1.005679;
     kwta {k=16: pct=0.25: pct_c=0.75: adth_k=5: k_ithr=2.057787: k1_ithr=1.979946: ithr_r=0.03856194: ithr_diff=0.03782795: tie_brk=0: };
     i_val {kwta=1.999406: g_i=1.999406: gp_g_i=0: g_i_orig=1.999406: };
     un_g_i {avg=1.999405: max=1.999406: max_i=0: };
     adapt_i {avg_avg=0.1855729: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
     maxda=0.01138613;
     spec {type=CtLeabraLayerSpec: spec=$4$: };
     stm_gain=0.5;
     hard_clamped=0;
     dav=0;
     net_rescale=1;
     avg_netin {avg=0: max=0: max_i=-1: };
     avg_netin_sum {avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     da_updt=0;
     misc_iar{      };
     maxda_sum=0;
     sravg_sum=0;
     sravg_cyc=0;
     mean_cai_max=0.05976549;
    };
   };
   view_objs {
    name=;
    el_typ=NetViewObj;
    el_def=0;
   };
   flags=;
   auto_build=AUTO_BUILD;
   train_mode=TRAIN;
   wt_update=ON_LINE;
   small_batch_n=10;
   batch=0;
   epoch=0;
   group=0;
   trial=99;
   tick=0;
   cycle=20;
   time=0;
   group_name=;
   trial_name="Lucia.Son.Alf";
   output_name=;
   sse_unit_avg=0;
   sse_sqrt=0;
   sse=1.739555;
   sum_sse=163.9068;
   avg_sse=1.639068;
   cnt_err_tol=0;
   cnt_err=96;
   cur_sum_sse=0;
   avg_sse_n=0;
   cur_cnt_err=0;
   train_time {name="train_time": start={usr=9135: sys=716: tot=4290824125: }: end={usr=20286: sys=1323: tot=4254606924: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   epoch_time {name="epoch_time": start={usr=9135: sys=716: tot=4290824125: }: end={usr=10979: sys=753: tot=4290826017: }: used={usr=1844: sys=37: tot=1892: }: s_used=18.92: n_used=1: };
   trial_time {name="trial_time": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   settle_time {name="settle_time": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   cycle_time {name="cycle_time": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   wt_sync_time {name="wt_sync_time": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   misc_time {name="misc_time": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   dmem_sync_level=DMEM_SYNC_NETWORK;
   dmem_nprocs=1;
   usr1_save_fmt=FULL_NET;
   wt_save_fmt=TEXT;
   lay_layout=THREE_D;
   n_units=316;
   n_cons=32256;
   max_size {x=32: y=9: z=3: };
   font_sizes {
    net_name=0.05;
    net_vals=0.05;
    layer=0.04;
    layer_vals=0.03;
    prjn=0.01;
    unit=0.02;
    un_nm_len=3;
   };
   view_params {
    xy_square=0;
    unit_spacing=0.05;
    prjn_disp=L_R_F;
    prjn_name=0;
    prjn_width=0.002;
    prjn_trans=0.5;
    lay_trans=0.5;
    unit_trans=0.6;
   };
   phase_order=MINUS_PLUS_NOTHING;
   no_plus_test=0;
   trial_init=DECAY_STATE;
   sequence_init=DO_NOTHING;
   first_plus_dwt=ONLY_FIRST_DWT;
   phase=MINUS_PHASE;
   nothing_phase=1;
   phase_no=3;
   phase_max=3;
   cycle_max=20;
   min_cycles=15;
   min_cycles_phase2=35;
   minus_cycles=50;
   avg_cycles=50;
   avg_cycles_sum=0;
   avg_cycles_n=0;
   netin_mod=1;
   send_delta=1;
   send_pct=0.07594936;
   send_pct_n=24;
   send_pct_tot=316;
   avg_send_pct=0.1607163;
   avg_send_pct_sum=0;
   avg_send_pct_n=0;
   maxda_stopcrit=-1;
   maxda=0.01138613;
   trg_max_act_stopcrit=1;
   trg_max_act=0;
   ext_rew=0;
   avg_ext_rew=0;
   avg_ext_rew_sum=0;
   avg_ext_rew_n=0;
   ct_time {
    minus=50;
    plus=20;
    inhib=20;
    syndep_int=20;
    total_cycles=90;
    inhib_start=70;
   };
   ct_sravg {
    start=30;
    end=20;
    min_da_thr=0.005;
    max_da_thr=1;
   };
   ct_sin_i {
    start=30;
    duration=20;
    burst_only=0;
    burst_i=0.05;
    trough_i=0.05;
   };
   ct_fin_i {
    start=0;
    end=20;
    inhib_i=0;
   };
   ct_cycle=90;
   cai_max=0.06155023;
  };
 };
};

// File Automatically Generated by MakeTA
// DO NOT EDIT


#include "ta_type.h"
#include "ta_type_constr.h"
#include "css_basic_types.h"
#include "css_c_ptr_types.h"
#include "css_ta.h"
#include "igeometry.h"
#include "ta_def.h"
#include "ta_platform.h"
#include "ta_thread.h"
#include "ta_string.h"
#include "ta_stdef.h"
#include "ta_variant.h"
#include "ifont.h"
#include "ta_mtrnd.h"
#include "ta_list.h"
#include "ta_filer.h"
#include "icolor.h"
#include "ta_type.h"
#include "ta_base.h"
#include "ta_TA_type.h"
#include "ta_TA_inst.h"


// Types

TypeDef TA_void("void", 1, 0, 0, 0, 1, 0);
TypeDef TA_char("char", 1, 0, 0, 0, 1, sizeof(char));
TypeDef TA_signed_char("signed_char", 1, 0, 0, 0, 1, sizeof(signed char));
TypeDef TA_unsigned_char("unsigned_char", 1, 0, 0, 0, 1, sizeof(unsigned char));
TypeDef TA_short("short", 1, 0, 0, 0, 1, sizeof(short));
TypeDef TA_signed_short("signed_short", 1, 0, 0, 0, 1, sizeof(signed short));
TypeDef TA_short_int("short_int", 1, 0, 0, 0, 1, sizeof(short int));
TypeDef TA_signed_short_int("signed_short_int", 1, 0, 0, 0, 1, sizeof(signed short int));
TypeDef TA_unsigned_short("unsigned_short", 1, 0, 0, 0, 1, sizeof(unsigned short));
TypeDef TA_unsigned_short_int("unsigned_short_int", 1, 0, 0, 0, 1, sizeof(unsigned short int));
TypeDef TA_int("int", 1, 0, 0, 0, 1, sizeof(int));
TypeDef TA_signed_int("signed_int", 1, 0, 0, 0, 1, sizeof(signed int));
TypeDef TA_signed("signed", 1, 0, 0, 0, 1, sizeof(signed));
TypeDef TA_int32_t("int32_t", 1, 0, 0, 0, 1, sizeof(int32_t));
TypeDef TA_unsigned_int("unsigned_int", 1, 0, 0, 0, 1, sizeof(unsigned int));
TypeDef TA_unsigned("unsigned", 1, 0, 0, 0, 1, sizeof(unsigned));
TypeDef TA_int64_t("int64_t", 1, 0, 0, 0, 1, sizeof(int64_t));
TypeDef TA_long_long("long_long", 1, 0, 0, 0, 1, sizeof(long long));
TypeDef TA_signed_long_long("signed_long_long", 1, 0, 0, 0, 1, sizeof(signed long long));
TypeDef TA_uint64_t("uint64_t", 1, 0, 0, 0, 1, sizeof(uint64_t));
TypeDef TA_unsigned_long_long("unsigned_long_long", 1, 0, 0, 0, 1, sizeof(unsigned long long));
TypeDef TA_long("long", 1, 0, 0, 0, 1, sizeof(long));
TypeDef TA_signed_long("signed_long", 1, 0, 0, 0, 1, sizeof(signed long));
TypeDef TA_long_int("long_int", 1, 0, 0, 0, 1, sizeof(long int));
TypeDef TA_signed_long_int("signed_long_int", 1, 0, 0, 0, 1, sizeof(signed long int));
TypeDef TA_unsigned_long("unsigned_long", 1, 0, 0, 0, 1, sizeof(unsigned long));
TypeDef TA_unsigned_long_int("unsigned_long_int", 1, 0, 0, 0, 1, sizeof(unsigned long int));
TypeDef TA_intptr_t("intptr_t", 1, 0, 0, 0, 1, sizeof(intptr_t));
TypeDef TA_uintptr_t("uintptr_t", 1, 0, 0, 0, 1, sizeof(uintptr_t));
TypeDef TA_float("float", 1, 0, 0, 0, 1, sizeof(float));
TypeDef TA_double("double", 1, 0, 0, 0, 1, sizeof(double));
TypeDef TA_bool("bool", 1, 0, 0, 0, 1, sizeof(bool));
TypeDef TA_const("const", 1, 0, 0, 1, 1, 0);
TypeDef TA_enum("enum", 1, 0, 0, 1, 1, 0);
TypeDef TA_struct("struct", 1, 0, 0, 1, 1, 0);
TypeDef TA_union("union", 1, 0, 0, 1, 1, 0);
TypeDef TA_class("class", 1, 0, 0, 1, 1, 0);
TypeDef TA_template("template", 1, 0, 0, 1, 1, 0);
TypeDef TA_templ_inst("templ_inst", 1, 0, 0, 1, 1, 0);
TypeDef TA_ta_array("ta_array", 1, 0, 0, 1, 1, 0);
TypeDef TA_taBase("taBase", " Base type for all type-aware classes Base type for all type-aware classes", 
	"", "NO_UPDATE_AFTER ", "", sizeof(taBase), (void**)&TAI_taBase, 0, 0, 0,1);
TypeDef TA_taRegFun("taRegFun", 1, 0, 0, 0, 1, 0);
TypeDef TA_taString("taString", " StrRep - internal String representation Note: this structure is allocated via malloc(), so there must be no constructor/destructor.  reference counted string", 
	"", "", "", sizeof(taString), (void**)0, 1, 0, 0,1);
TypeDef TA_Variant("Variant", " flexible value m_type that can hold many different types of content", 
	"", "", "", sizeof(Variant), (void**)0, 1, 0, 0,1);
TypeDef TA_void_ptr("void_ptr", 1, 1, 0, 1, 1, 0);
TypeDef TA_int_ref("int_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_QPoint_ref("const_QPoint_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_SbVec2s_ref("const_SbVec2s_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_iPoint("iPoint", "  ", 
	"", "EDIT_INLINE ", "", sizeof(iPoint), (void**)&TAI_iPoint, 0, 0, 0,1);
TypeDef TA_iVec2i("iVec2i", " synonym", 
	"", "", "", sizeof(iVec2i), (void**)0, 0, 0, 0,1);
TypeDef TA_iPoint_ref("iPoint_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_iPoint("const_iPoint", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_iPoint_ref("const_iPoint_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_SbVec3s_ref("const_SbVec3s_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_iVec3i("iVec3i", " ", 
	"", "EDIT_INLINE ", "", sizeof(iVec3i), (void**)&TAI_iVec3i, 0, 0, 0,1);
TypeDef TA_const_QSize_ref("const_QSize_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_iVec3i_ref("iVec3i_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_iVec3i("const_iVec3i", 1, 0, 0, 0, 1, 0);
TypeDef TA_iSize("iSize", "  ", 
	"", "EDIT_INLINE ", "", sizeof(iSize), (void**)&TAI_iSize, 0, 0, 0,1);
TypeDef TA_const_iVec3i_ref("const_iVec3i_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_iSize("const_iSize", 1, 0, 0, 0, 1, 0);
TypeDef TA_iSize_ref("iSize_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_iSize_ref("const_iSize_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_QRect_ref("const_QRect_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_iRect("iRect", "  ", 
	"", "EDIT_INLINE ", "", sizeof(iRect), (void**)&TAI_iRect, 0, 0, 0,1);
TypeDef TA_iRect_ref("iRect_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_SbVec3f_ref("const_SbVec3f_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_iVec3f("iVec3f", " 3d vector, for things like points and sizes", 
	"", "EDIT_INLINE ", "", sizeof(iVec3f), (void**)&TAI_iVec3f, 0, 0, 0,1);
TypeDef TA_const_iVec3f("const_iVec3f", 1, 0, 0, 0, 1, 0);
TypeDef TA_iVec3f_ref("iVec3f_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_iVec3f_ref("const_iVec3f_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_iBox3f("iBox3f", " 3d box, typically used for a bounding box in a normalized coordinate system", 
	"", "EDIT_INLINE ", "", sizeof(iBox3f), (void**)&TAI_iBox3f, 0, 0, 0,1);
TypeDef TA_iBox3f_ref("iBox3f_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_iBox3f("const_iBox3f", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_iBox3f_ref("const_iBox3f_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_streambuf("streambuf", " In case some header files defines these as macros.", 
	"", "", "", sizeof(streambuf), (void**)0, 0, 0, 0,1);
TypeDef TA_signed_long_long_int("signed_long_long_int", 1, 0, 0, 0, 1, sizeof(signed long long int));
TypeDef TA_streampos("streampos", "", 
	"", "", "", sizeof(streampos), (void**)0, 0, 0, 0,1);
TypeDef TA_streamoff("streamoff", "", 
	"", "", "", sizeof(streamoff), (void**)0, 0, 0, 0,1);
TypeDef TA_streamsize("streamsize", " 27.4.2.1.3 Type ios_base::iostate", 
	"", "", "", sizeof(streamsize), (void**)0, 0, 0, 0,1);
TypeDef TA__Ios_Fmtflags("_Ios_Fmtflags", "", 
	"", "", "", sizeof(int), (void**)0, 0, 0, 0,1);
TypeDef TA__Ios_Openmode("_Ios_Openmode", "", 
	"", "", "", sizeof(int), (void**)0, 0, 0, 0,1);
TypeDef TA__Ios_Iostate("_Ios_Iostate", "", 
	"", "", "", sizeof(int), (void**)0, 0, 0, 0,1);
TypeDef TA__Ios_Seekdir("_Ios_Seekdir", "", 
	"", "", "", sizeof(int), (void**)0, 0, 0, 0,1);
TypeDef TA_void_ptr_ref("void_ptr_ref", 1, 1, 1, 0, 1, 0);
TypeDef TA_long_ref("long_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_ios("ios", "", 
	"", "", "", sizeof(ios), (void**)0, 1, 0, 0,1);
TypeDef TA_ostream("ostream", "", 
	"", "", "", sizeof(ostream), (void**)0, 1, 0, 0,1);
TypeDef TA_istream("istream", "", 
	"", "", "", sizeof(istream), (void**)0, 1, 0, 0,1);
TypeDef TA_ostream_ref("ostream_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_ostream_ptr("ostream_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_char("const_char", 1, 0, 0, 0, 1, sizeof(const char));
TypeDef TA_const_char_ptr("const_char_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_istream_ref("istream_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_char_ptr("char_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_iostream("iostream", "", 
	"", "MULT_INHERIT ", "", sizeof(iostream), (void**)0, 1, 0, 0,1);
TypeDef TA_ifstream("ifstream", "", 
	"", "", "", sizeof(ifstream), (void**)0, 1, 0, 0,1);
TypeDef TA_ofstream("ofstream", "", 
	"", "", "", sizeof(ofstream), (void**)0, 1, 0, 0,1);
TypeDef TA_fstream("fstream", "", 
	"", "", "", sizeof(fstream), (void**)0, 1, 0, 0,1);
TypeDef TA_istringstream("istringstream", "", 
	"", "", "", sizeof(istringstream), (void**)0, 1, 0, 0,1);
TypeDef TA_ostringstream("ostringstream", "", 
	"", "", "", sizeof(ostringstream), (void**)0, 1, 0, 0,1);
TypeDef TA_stringstream("stringstream", "", 
	"", "", "", sizeof(stringstream), (void**)0, 1, 0, 0,1);
TypeDef TA_const_taString("const_taString", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_taString_ref("const_taString_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taPlatform("taPlatform", " class to hold static members for platform specific functions", 
	"", "", "", sizeof(taPlatform), (void**)0, 1, 0, 0,1);
TypeDef TA_taAtomic("taAtomic", " static class for doing atomic (threadsafe) operations", 
	"NO_INSTANCE ", "NO_INSTANCE ", "", sizeof(taAtomic), (void**)0, 1, 0, 0,1);
TypeDef TA_taStrRep("taStrRep", "", 
	"", "", "", sizeof(taStrRep), (void**)0, 1, 0, 0,1);
TypeDef TA_char_ary("char_ary", 1, 1, 0, 0, 1, 0);
TypeDef TA_taString_ref("taString_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_taString_ptr("const_taString_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_taStrRep_ptr("taStrRep_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_QString_ref("const_QString_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_bool_ptr("bool_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_char_ref("char_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taMatrix("taMatrix", " note: taVariant is based in part on QVariant implementation in Qt", 
	"", "", "", sizeof(taMatrix), (void**)0, 0, 0, 0,1);
TypeDef TA_const_Variant("const_Variant", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_Variant_ref("const_Variant_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_void("const_void", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_void_ptr("const_void_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_taBase_ptr("taBase_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_taMatrix_ptr("taMatrix_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_taBase("const_taBase", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_taBase_ptr("const_taBase_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_taMatrix("const_taMatrix", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_taMatrix_ptr("const_taMatrix_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_Variant_ref("Variant_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_QVariant_ref("const_QVariant_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_unsigned_char_ary("unsigned_char_ary", 1, 1, 0, 0, 1, 0);
TypeDef TA_NameVar("NameVar", " a name-value representation, using a String and a Variant", 
	"", "", "", sizeof(NameVar), (void**)0, 1, 0, 0,1);
TypeDef TA_const_NameVar("const_NameVar", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_NameVar_ref("const_NameVar_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_QFont_ref("const_QFont_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_iFont("iFont", "  ", 
	"", "", "", sizeof(iFont), (void**)0, 0, 0, 0,1);
TypeDef TA_taDataLink("taDataLink", "  interface for taiDataLink and descendants", 
	"NO_INSTANCE NO_CSS NO_MEMBERS ", "NO_INSTANCE NO_CSS NO_MEMBERS VIRT_BASE ", "", sizeof(taDataLink), (void**)0, 0, 0, 0,1);
TypeDef TA_iFont_ref("iFont_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_iFont("const_iFont", 1, 0, 0, 0, 1, 0);
TypeDef TA_taPtrList_impl("taPtrList_impl", " implementation of the pointer list class", 
	"", "", "", sizeof(taPtrList_impl), (void**)0, 0, 0, 0,1);
TypeDef TA_const_iFont_ref("const_iFont_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taPtrList_impl_ptr("taPtrList_impl_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_TALPtr("TALPtr", "", 
	"", "", "", sizeof(taPtrList_impl*), (void**)0, 0, 1, 0,1);
TypeDef TA_DataChangedReason("DataChangedReason", " reason why DataChanged being called, as well as defining ops (also used by taBase and other classes) -- some data change operations will emit multiple DataChanged calls ", 
	"", "", "", sizeof(int), (void**)0, 0, 0, 0,1);
TypeDef TA_taListItr("taListItr", " pseudo class, compatible with the FOR_ITR_EL macro in ta_group", 
	"", "", "", sizeof(taListItr), (void**)0, 0, 0, 0,1);
TypeDef TA_taHashVal("taHashVal", " ///////////////////////////////////////////////////////////////////", 
	"", "", "", sizeof(taHashVal), (void**)0, 0, 0, 0,1);
TypeDef TA_void_ptr_ptr("void_ptr_ptr", 1, 2, 0, 0, 1, 0);
TypeDef TA_const_taPtrList_impl("const_taPtrList_impl", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_taPtrList_impl_ref("const_taPtrList_impl_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taListItr_ref("taListItr_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taPtrList("taPtrList", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_taPtrList("const_taPtrList", 1, 0, 0, 0, 1, 0);
TypeDef TA_taPtrList_base("taPtrList_base", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_taPtrList_ref("const_taPtrList_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taHashEl("taHashEl", " holds information for one entry of the hash table", 
	"", "", "", sizeof(taHashEl), (void**)0, 0, 0, 0,1);
TypeDef TA_const_taPtrList_base("const_taPtrList_base", 1, 0, 0, 0, 1, 0);
TypeDef TA_taPtrList_taHashEl_("taPtrList_taHashEl_", " ", 
	"", "", "", sizeof(taPtrList<taHashEl>), (void**)&TAI_taPtrList_taHashEl_, 0, 0, 0,1);
TypeDef TA_const_taPtrList_base_ref("const_taPtrList_base_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taHashBucket("taHashBucket", " holds a set of hash table entries that all have the same hash_code modulo value", 
	"", "", "", sizeof(taHashBucket), (void**)0, 1, 0, 0,1);
TypeDef TA_taPtrList_taHashBucket_("taPtrList_taHashBucket_", " ", 
	"", "", "", sizeof(taPtrList<taHashBucket>), (void**)&TAI_taPtrList_taHashBucket_, 0, 0, 0,1);
TypeDef TA_int_ary("int_ary", 1, 1, 0, 0, 1, 0);
TypeDef TA_taHashTable("taHashTable", "  table has a number of buckets, each with some hash values", 
	"", "", "", sizeof(taHashTable), (void**)0, 1, 0, 0,1);
TypeDef TA_taHashBucket_ptr("taHashBucket_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_taHashTable_ptr("taHashTable_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_taHashTable("const_taHashTable", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_taHashTable_ref("const_taHashTable_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taArray_impl("taArray_impl", " Base Type for Arrays: physically contiguous allocation of an array of objects", 
	"", "", "", sizeof(taArray_impl), (void**)0, 0, 0, 0,1);
TypeDef TA_const_taArray_impl("const_taArray_impl", 1, 0, 0, 0, 1, 0);
TypeDef TA_taPlainArray("taPlainArray", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_taArray_impl_ref("const_taArray_impl_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_taPlainArray("const_taPlainArray", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_taPlainArray_ref("const_taPlainArray_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taFixedArray_impl("taFixedArray_impl", " basic subtype for FixedArray, no tokens of which are ever kept", 
	"NO_INSTANCE ", "VIRT_BASE NO_INSTANCE ", "", sizeof(taFixedArray_impl), (void**)0, 0, 0, 0,1);
TypeDef TA_const_taFixedArray_impl("const_taFixedArray_impl", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_taFixedArray_impl_ref("const_taFixedArray_impl_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taFixedArray("taFixedArray", 1, 0, 0, 0, 1, 0);
TypeDef TA_taFixedArray_int_("taFixedArray_int_", " rudimentary array, primarily intended as an OO replacement for C arrays", 
	"NO_INSTANCE ", "NO_INSTANCE INLINE INLINE_DUMP ", "", sizeof(taFixedArray<int>), (void**)0, 0, 0, 0,1);
TypeDef TA_const_taFixedArray("const_taFixedArray", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_int("const_int", 1, 0, 0, 0, 1, sizeof(const int));
TypeDef TA_const_taFixedArray_ref("const_taFixedArray_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_int_ref("const_int_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_int_FixedArray("int_FixedArray", " ", 
	"NO_INSTANCE ", "NO_INSTANCE INLINE INLINE_DUMP ", "", sizeof(int_FixedArray), (void**)0, 0, 0, 0,1);
TypeDef TA_int_FixedArray_ref("int_FixedArray_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_int_FixedArray("const_int_FixedArray", 1, 0, 0, 0, 1, 0);
TypeDef TA_istream_ptr("istream_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_int_FixedArray_ref("const_int_FixedArray_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_fstream_ptr("fstream_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_taFiler("taFiler", " associate this with each file that is managed", 
	"", "EDIT_INLINE ", "", sizeof(taFiler), (void**)0, 0, 0, 0,1);
TypeDef TA_rgb_t("rgb_t", " very low-level class, esp provided for rgb_Matrix and raw image ops;\nwe use default copy constructor and assignment operator;\nDO NOT CHANGE BYTE ORDER -- these are compatible (on all endians) with the jpeg decode library, and enable superfast copying to our matrixes", 
	"", "", "", sizeof(rgb_t), (void**)0, 1, 0, 0,1);
TypeDef TA_const_taFiler("const_taFiler", 1, 0, 0, 0, 1, 0);
TypeDef TA_taFiler_ref("taFiler_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_taFiler_ref("const_taFiler_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taFiler_ptr("taFiler_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_iColor_ptr("const_iColor_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_float_ref("float_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_iColor_ref("const_iColor_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_QColor_ref("const_QColor_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_QColor_ptr("const_QColor_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_taDataLinkItr("taDataLinkItr", " iterator for datalink clients -- use as a value type", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taDataLinkItr), (void**)&TAI_taDataLinkItr, 0, 0, 0,1);
TypeDef TA_taiDataLink("taiDataLink", " ", 
	"", "", "", sizeof(taiDataLink), (void**)0, 0, 0, 0,1);
TypeDef TA_taiType("taiType", " ", 
	"", "", "", sizeof(taiType), (void**)0, 0, 0, 0,1);
TypeDef TA_taiEdit("taiEdit", " ", 
	"", "", "", sizeof(taiEdit), (void**)0, 0, 0, 0,1);
TypeDef TA_taiViewType("taiViewType", " ", 
	"", "", "", sizeof(taiViewType), (void**)0, 0, 0, 0,1);
TypeDef TA_taiMember("taiMember", " ", 
	"", "", "", sizeof(taiMember), (void**)0, 0, 0, 0,1);
TypeDef TA_taiMethod("taiMethod", " ", 
	"", "", "", sizeof(taiMethod), (void**)0, 0, 0, 0,1);
TypeDef TA_css_fun_stub_ptr("css_fun_stub_ptr", "", 
	"", "", "", sizeof(void*), (void**)0, 0, 1, 0,1);
TypeDef TA_ta_void_fun("ta_void_fun", "", 
	"", "", "", sizeof(void*), (void**)0, 0, 1, 0,1);
TypeDef TA_ta_memb_ptr_class("ta_memb_ptr_class", "", 
	"", "", "", sizeof(ta_memb_ptr_class), (void**)0, 1, 0, 0,1);
TypeDef TA_int_ta_memb_ptr_class("int_ta_memb_ptr_class", 1, 0, 0, 0, 1, 0);
TypeDef TA_ta_memb_ptr("ta_memb_ptr", "", 
	"", "", "", sizeof(void*), (void**)0, 0, 1, 0,1);
TypeDef TA_TAPtr("TAPtr", " pointer to a taBase type", 
	"", "", "", sizeof(taBase*), (void**)&TAI_TAPtr, 0, 1, 0,1);
TypeDef TA_taPlainArray_taString_("taPlainArray_taString_", " a plain array", 
	"", "", "", sizeof(taPlainArray<taString>), (void**)&TAI_taPlainArray_taString_, 0, 0, 0,1);
TypeDef TA_String_PArray("String_PArray", " a plain-array of strings", 
	"", "", "", sizeof(String_PArray), (void**)0, 0, 0, 0,1);
TypeDef TA_taPlainArray_int_("taPlainArray_int_", " a plain array", 
	"", "", "", sizeof(taPlainArray<int>), (void**)&TAI_taPlainArray_int_, 0, 0, 0,1);
TypeDef TA_const_String_PArray("const_String_PArray", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_String_PArray_ref("const_String_PArray_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_int_PArray("int_PArray", " a plain-array of ints", 
	"", "", "", sizeof(int_PArray), (void**)0, 0, 0, 0,1);
TypeDef TA_taPlainArray_NameVar_("taPlainArray_NameVar_", " a plain array", 
	"", "", "", sizeof(taPlainArray<NameVar>), (void**)&TAI_taPlainArray_NameVar_, 0, 0, 0,1);
TypeDef TA_const_int_PArray("const_int_PArray", 1, 0, 0, 0, 1, 0);
TypeDef TA_String_PArray_ref("String_PArray_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_int_PArray_ref("const_int_PArray_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_NameVar_PArray("NameVar_PArray", " a plain-array of name value (variant) items", 
	"", "", "", sizeof(NameVar_PArray), (void**)0, 0, 0, 0,1);
TypeDef TA_DumpFileCvt("DumpFileCvt", " parameters to convert a dump file", 
	"", "CAT_File ", "", sizeof(DumpFileCvt), (void**)0, 0, 0, 0,1);
TypeDef TA_taPtrList_DumpFileCvt_("taPtrList_DumpFileCvt_", " ", 
	"", "CAT_File ", "", sizeof(taPtrList<DumpFileCvt>), (void**)&TAI_taPtrList_DumpFileCvt_, 0, 0, 0,1);
TypeDef TA_DumpFileCvtList("DumpFileCvtList", " list of available dump file converters", 
	"", "CAT_File ", "", sizeof(DumpFileCvtList), (void**)0, 1, 0, 0,1);
TypeDef TA_UserDataItemBase("UserDataItemBase", " base class for all simple user data", 
	"INLINE ", "INLINE ", "", sizeof(UserDataItemBase), (void**)&TAI_UserDataItemBase, 0, 0, 0,1);
TypeDef TA_ViewColor_List("ViewColor_List", "", 
	"", "", "", sizeof(ViewColor_List), (void**)0, 0, 0, 0,1);
TypeDef TA_CancelOp("CancelOp", " ops for passing cancel status and instructions, typically for Window closing ", 
	"", "", "", sizeof(int), (void**)0, 0, 0, 0,1);
TypeDef TA_CancelOp_ref("CancelOp_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taiMiscCore("taiMiscCore", " object for Qt Core event processing, etc. taiMisc inherits; taiM is always instance", 
	"NO_INSTANCE ", "NO_INSTANCE ", "", sizeof(taiMiscCore), (void**)0, 0, 0, 0,1);
TypeDef TA_init_proc_t("init_proc_t", " initialization proc", 
	"", "", "", sizeof(void*), (void**)0, 0, 1, 0,1);
TypeDef TA_taiMiscCore_ptr("taiMiscCore_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_InitProcRegistrar_ref("const_InitProcRegistrar_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taVersion("taVersion", " simple value class for version info", 
	"", "", "", sizeof(taVersion), (void**)0, 1, 0, 0,1);
TypeDef TA_const_taVersion("const_taVersion", 1, 0, 0, 0, 1, 0);
TypeDef TA_ViewColor_List_ptr("ViewColor_List_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_UserDataItemBase_ptr("UserDataItemBase_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_String_PArray_ptr("String_PArray_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_NameVar_PArray_ref("NameVar_PArray_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taMisc("taMisc", " global parameters and functions for the application", 
	"", "", "", sizeof(taMisc), (void**)&TAI_taMisc, 0, 0, 0,1);
TypeDef TA_taRefN("taRefN", " reference counting base class", 
	"", "NO_MEMBERS NO_CSS ", "", sizeof(taRefN), (void**)0, 0, 0, 0,1);
TypeDef TA_ITypedObject("ITypedObject", " ", 
	"", "NO_INSTANCE NO_CSS NO_MEMBERS VIRT_BASE ", "", sizeof(ITypedObject), (void**)0, 0, 0, 0,1);
TypeDef TA_taRefN_ref("taRefN_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taRefN_ptr("taRefN_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_taiDataLink_ptr("taiDataLink_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_taRefN_ptr_ref("taRefN_ptr_ref", 1, 1, 1, 0, 1, 0);
TypeDef TA_IDataLinkProxy("IDataLinkProxy", " ", 
	"", "NO_INSTANCE NO_CSS NO_MEMBERS VIRT_BASE ", "", sizeof(IDataLinkProxy), (void**)0, 0, 0, 0,1);
TypeDef TA_taDataLink_ptr("taDataLink_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_IDataLinkClient("IDataLinkClient", " ", 
	"", "NO_INSTANCE NO_CSS NO_MEMBERS VIRT_BASE ", "", sizeof(IDataLinkClient), (void**)0, 0, 0, 0,1);
TypeDef TA_taPtrList_IDataLinkClient_("taPtrList_IDataLinkClient_", " ", 
	"NO_INSTANCE NO_CSS NO_MEMBERS ", "NO_INSTANCE NO_CSS NO_MEMBERS ", "", sizeof(taPtrList<IDataLinkClient>), (void**)0, 0, 0, 0,1);
TypeDef TA_IDataLinkClient_PtrList("IDataLinkClient_PtrList", " ", 
	"NO_INSTANCE NO_CSS NO_MEMBERS ", "NO_INSTANCE NO_CSS NO_MEMBERS ", "", sizeof(IDataLinkClient_PtrList), (void**)0, 0, 0, 0,1);
TypeDef TA_IDataLinkClient_ptr("IDataLinkClient_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_taDataLink_ptr_ref("taDataLink_ptr_ref", 1, 1, 1, 0, 1, 0);
TypeDef TA_taDataLink_ptr_ptr("taDataLink_ptr_ptr", 1, 2, 0, 0, 1, 0);
TypeDef TA_DataChangeHelper("DataChangeHelper", " class to help track data changes to help clients defer updates, etc;", 
	"", "", "", sizeof(DataChangeHelper), (void**)0, 1, 0, 0,1);
TypeDef TA_taPtrList_EnumDef_("taPtrList_EnumDef_", " ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taPtrList<EnumDef>), (void**)&TAI_taPtrList_EnumDef_, 0, 0, 0,1);
TypeDef TA_EnumSpace("EnumSpace", " space of enums", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(EnumSpace), (void**)&TAI_EnumSpace, 0, 0, 0,1);
TypeDef TA_const_EnumSpace("const_EnumSpace", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_EnumSpace_ref("const_EnumSpace_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taPtrList_void_("taPtrList_void_", " ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taPtrList<void>), (void**)&TAI_taPtrList_void_, 0, 0, 0,1);
TypeDef TA_TokenSpace("TokenSpace", " ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(TokenSpace), (void**)&TAI_TokenSpace, 0, 0, 0,1);
TypeDef TA_taPtrList_MemberDef_("taPtrList_MemberDef_", " ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taPtrList<MemberDef>), (void**)&TAI_taPtrList_MemberDef_, 0, 0, 0,1);
TypeDef TA_const_TokenSpace("const_TokenSpace", 1, 0, 0, 0, 1, 0);
TypeDef TA_Member_List("Member_List", " simple list of members", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(Member_List), (void**)&TAI_Member_List, 0, 0, 0,1);
TypeDef TA_const_TokenSpace_ref("const_TokenSpace_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_MemberSpace("MemberSpace", " space of members", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(MemberSpace), (void**)&TAI_MemberSpace, 0, 0, 0,1);
TypeDef TA_const_MemberSpace("const_MemberSpace", 1, 0, 0, 0, 1, 0);
TypeDef TA_taPtrList_MethodDef_("taPtrList_MethodDef_", " ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taPtrList<MethodDef>), (void**)&TAI_taPtrList_MethodDef_, 0, 0, 0,1);
TypeDef TA_const_MemberSpace_ref("const_MemberSpace_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_Method_List("Method_List", " simple list of methods", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(Method_List), (void**)&TAI_Method_List, 0, 0, 0,1);
TypeDef TA_MethodSpace("MethodSpace", " space of methods", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(MethodSpace), (void**)&TAI_MethodSpace, 0, 0, 0,1);
TypeDef TA_const_MethodSpace("const_MethodSpace", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_MethodSpace_ref("const_MethodSpace_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taPtrList_TypeDef_("taPtrList_TypeDef_", " ", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(taPtrList<TypeDef>), (void**)&TAI_taPtrList_TypeDef_, 0, 0, 0,1);
TypeDef TA_TypeSpace("TypeSpace", " space of types; uses default string-based hashing", 
	"NO_CSS NO_MEMBERS ", "NO_CSS NO_MEMBERS ", "", sizeof(TypeSpace), (void**)&TAI_TypeSpace, 0, 0, 0,1);
TypeDef TA_const_TypeSpace("const_TypeSpace", 1, 0, 0, 0, 1, 0);
TypeDef TA_TypeItem("TypeItem", " base class for TypeDef, MemberDef, MethodDef, EnumDef, and TypedefDef", 
	"NO_MEMBERS NO_CSS MEMB_NO_SHOW_TREE ", "NO_MEMBERS NO_CSS MEMB_NO_SHOW_TREE ", "", sizeof(TypeItem), (void**)&TAI_TypeItem, 0, 0, 0,1);
TypeDef TA_const_TypeSpace_ref("const_TypeSpace_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_EnumSpace_ptr("EnumSpace_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_MemberDef("MemberDef", 1, 0, 0, 0, 1, sizeof(MemberDef));
TypeDef TA_const_TypeItem("const_TypeItem", 1, 0, 0, 0, 1, 0);
TypeDef TA_MemberDef_ptr("MemberDef_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_TypeItem_ref("const_TypeItem_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_EnumDef("EnumDef", " defines an enum member", 
	"NO_MEMBERS NO_CSS MEMB_NO_SHOW_TREE ", "NO_MEMBERS NO_CSS MEMB_NO_SHOW_TREE ", "", sizeof(EnumDef), (void**)&TAI_EnumDef, 0, 0, 0,1);
TypeDef TA_MethodDef("MethodDef", 1, 0, 0, 0, 1, sizeof(MethodDef));
TypeDef TA_EnumDef_ptr("EnumDef_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_MethodDef_ptr("MethodDef_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_TypeDef("TypeDef", 1, 0, 0, 0, 1, sizeof(TypeDef));
TypeDef TA_const_EnumDef("const_EnumDef", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_TypeDef("const_TypeDef", 1, 0, 0, 0, 1, sizeof(const TypeDef));
TypeDef TA_TypeDef_ptr("TypeDef_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_TypeDef_ptr("const_TypeDef_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_EnumDef_ref("const_EnumDef_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_TypeDef_ptr_ref("TypeDef_ptr_ref", 1, 1, 1, 0, 1, 0);
TypeDef TA_MemberSpace_ptr("MemberSpace_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_taiMember_ptr("taiMember_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_MemberDef("const_MemberDef", 1, 0, 0, 0, 1, sizeof(const MemberDef));
TypeDef TA_const_MemberDef_ref("const_MemberDef_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_byte_ref("byte_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_MethodSpace_ptr("MethodSpace_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_taiMethod_ptr("taiMethod_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_MethodDef("const_MethodDef", 1, 0, 0, 0, 1, sizeof(const MethodDef));
TypeDef TA_const_MethodDef_ref("const_MethodDef_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_TypeSpace_ptr("TypeSpace_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_taiType_ptr("taiType_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_taiEdit_ptr("taiEdit_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_taiViewType_ptr("taiViewType_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_TypeDef_ref("const_TypeDef_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_MemberDef_ptr("const_MemberDef_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_MemberDef_ptr_ptr("MemberDef_ptr_ptr", 1, 2, 0, 0, 1, 0);
TypeDef TA_SelectEdit("SelectEdit", "", 
	"", "", "", sizeof(SelectEdit), (void**)0, 0, 0, 0,1);
TypeDef TA_taRootBase("taRootBase", "", 
	"", "", "", sizeof(taRootBase), (void**)0, 0, 0, 0,1);
TypeDef TA_taiMimeSource("taiMimeSource", " ", 
	"", "", "", sizeof(taiMimeSource), (void**)0, 0, 0, 0,1);
TypeDef TA_taSmartRef("taSmartRef", " 'safe' reference for taBase objects -- does not ref count, but is a dlc so it tracks changes etc.", 
	"NO_INSTANCE ", "NO_INSTANCE ", "", sizeof(taSmartRef), (void**)0, 0, 0, 0,1);
TypeDef TA_taSmartPtr("taSmartPtr", " 'safe' ptr for taBase objects -- automatically does ref counts; designed to be binary compatible with taBase*", 
	"NO_INSTANCE ", "NO_INSTANCE ", "", sizeof(taSmartPtr), (void**)0, 0, 0, 0,1);
TypeDef TA_taOBase("taOBase", " owned base class of taBase", 
	"", "NO_UPDATE_AFTER ", "", sizeof(taOBase), (void**)&TAI_taOBase, 0, 0, 0,1);
TypeDef TA_taOABase("taOABase", " owned base class with QObject adapter for signals/slots", 
	"", "NO_UPDATE_AFTER ", "", sizeof(taOABase), (void**)&TAI_taOABase, 0, 0, 0,1);
TypeDef TA_taDataView("taDataView", " base class for views of an object", 
	"CAT_Display ", "MULT_INHERIT CAT_Display ", "", sizeof(taDataView), (void**)&TAI_taDataView, 0, 0, 0,1);
TypeDef TA_taNBase("taNBase", " Named, owned base class of taBase", 
	"", "", "", sizeof(taNBase), (void**)&TAI_taNBase, 0, 0, 0,1);
TypeDef TA_UserDataItem("UserDataItem", " an item of simple user data", 
	"INLINE ", "INLINE ", "", sizeof(UserDataItem), (void**)&TAI_UserDataItem, 0, 0, 0,1);
TypeDef TA_taRootBase_ptr("taRootBase_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_tabMisc("tabMisc", " miscellaneous useful stuff for taBase", 
	"", "", "", sizeof(tabMisc), (void**)&TAI_tabMisc, 0, 0, 0,1);
TypeDef TA_taBase_ref("taBase_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taSmartRef_ref("taSmartRef_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taBase_ptr_ptr("taBase_ptr_ptr", 1, 2, 0, 0, 1, 0);
TypeDef TA_const_taBase_ref("const_taBase_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_MemberDef_ptr_ref("MemberDef_ptr_ref", 1, 1, 1, 0, 1, 0);
TypeDef TA_TypeItem_ptr("TypeItem_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_taFiler_ptr_ref("taFiler_ptr_ref", 1, 1, 1, 0, 1, 0);
TypeDef TA_bool_ref("bool_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taSmartRef_ptr("taSmartRef_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_taiMimeSource_ptr("taiMimeSource_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_taiMimeSource("const_taiMimeSource", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_taiMimeSource_ptr("const_taiMimeSource_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_QPixmap_ptr("const_QPixmap_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_SelectEdit_ptr("SelectEdit_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_SelectEdit_ptr_ref("SelectEdit_ptr_ref", 1, 1, 1, 0, 1, 0);
TypeDef TA_taSmartPtr_ref("taSmartPtr_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_TAPtr_ptr("TAPtr_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_taSmartPtr("const_taSmartPtr", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_taSmartPtr_ref("const_taSmartPtr_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taSmartPtrT("taSmartPtrT", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_taSmartRef("const_taSmartRef", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_taSmartPtrT("const_taSmartPtrT", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_taSmartRef_ref("const_taSmartRef_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_taSmartPtrT_ref("const_taSmartPtrT_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taSmartRefT("taSmartRefT", 1, 0, 0, 0, 1, 0);
TypeDef TA_taSmartRefT_taBase_("taSmartRefT_taBase_", "", 
	"NO_INSTANCE ", "NO_INSTANCE ", "", sizeof(taSmartRefT<taBase>), (void**)0, 0, 0, 0,1);
TypeDef TA_const_taSmartRefT("const_taSmartRefT", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_taSmartRefT_ref("const_taSmartRefT_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taBaseRef("taBaseRef", "", 
	"NO_INSTANCE ", "NO_INSTANCE ", "", sizeof(taBaseRef), (void**)0, 0, 0, 0,1);
TypeDef TA_const_taOBase("const_taOBase", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_taBaseRef("const_taBaseRef", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_taOBase_ref("const_taOBase_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_taBaseRef_ref("const_taBaseRef_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taOABase_ptr("taOABase_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_taOABase("const_taOABase", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_taOABase_ref("const_taOABase_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_taNBase("const_taNBase", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_taNBase_ref("const_taNBase_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taNBase_ptr("taNBase_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_TANPtr("TANPtr", " this comment needed for maketa parser", 
	"", "", "", sizeof(taNBase*), (void**)&TAI_TANPtr, 0, 1, 0,1);
TypeDef TA_taFBase("taFBase", " named/owned base class of taBase, with filename", 
	"", "NO_UPDATE_AFTER ", "", sizeof(taFBase), (void**)&TAI_taFBase, 0, 0, 0,1);
TypeDef TA_taPtrList_taBase_("taPtrList_taBase_", " ", 
	"", "", "", sizeof(taPtrList<taBase>), (void**)&TAI_taPtrList_taBase_, 0, 0, 0,1);
TypeDef TA_const_taFBase("const_taFBase", 1, 0, 0, 0, 1, 0);
TypeDef TA_taBase_PtrList("taBase_PtrList", " a primitive taBase list type, used for global lists that manage taBase objects", 
	"", "", "", sizeof(taBase_PtrList), (void**)0, 1, 0, 0,1);
TypeDef TA_const_taFBase_ref("const_taFBase_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taPtrList_base_taBase_("taPtrList_base_taBase_", " ", 
	"", "", "", sizeof(taPtrList_base<taBase>), (void**)&TAI_taPtrList_base_taBase_, 0, 0, 0,1);
TypeDef TA_taPtrList_ta_base("taPtrList_ta_base", " this comment needed for maketa parser", 
	"", "", "", sizeof(taPtrList_ta_base), (void**)0, 0, 0, 0,1);
TypeDef TA_taList_impl("taList_impl", " implementation for a taBase list class", 
	"MEMB_HIDDEN_EDIT HIDDEN_INLINE ", "MULT_INHERIT NO_UPDATE_AFTER MEMB_HIDDEN_EDIT HIDDEN_INLINE ", "", sizeof(taList_impl), (void**)&TAI_taList_impl, 0, 0, 0,1);
TypeDef TA_const_taList_impl("const_taList_impl", 1, 0, 0, 0, 1, 0);
TypeDef TA_taList_impl_ptr("taList_impl_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_taList_impl_ref("const_taList_impl_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_TABLPtr("TABLPtr", " this comment needed for maketa parser", 
	"", "", "", sizeof(taList_impl*), (void**)0, 0, 1, 0,1);
TypeDef TA_taList("taList", 1, 0, 0, 0, 1, 0);
TypeDef TA_taList_taBase_("taList_taBase_", " a base list template", 
	"MEMB_HIDDEN_EDIT HIDDEN_INLINE NO_UPDATE_AFTER ", "MEMB_HIDDEN_EDIT HIDDEN_INLINE NO_UPDATE_AFTER ", "", sizeof(taList<taBase>), (void**)&TAI_taList_taBase_, 0, 0, 0,1);
TypeDef TA_const_taList("const_taList", 1, 0, 0, 0, 1, 0);
TypeDef TA_taBase_List("taBase_List", " list of objects", 
	"MEMB_HIDDEN_EDIT HIDDEN_INLINE NO_UPDATE_AFTER ", "MEMB_HIDDEN_EDIT HIDDEN_INLINE NO_UPDATE_AFTER ", "", sizeof(taBase_List), (void**)&TAI_taBase_List, 0, 0, 0,1);
TypeDef TA_const_taList_ref("const_taList_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_taBase_List("const_taBase_List", 1, 0, 0, 0, 1, 0);
TypeDef TA_taBase_List_ptr("taBase_List_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_taBase_List_ref("const_taBase_List_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taDataView_ptr("taDataView_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_taDataView("const_taDataView", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_taDataView_ref("const_taDataView_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taList_taDataView_("taList_taDataView_", " a base list template", 
	"MEMB_HIDDEN_EDIT HIDDEN_INLINE CAT_Display ", "MEMB_HIDDEN_EDIT HIDDEN_INLINE NO_UPDATE_AFTER CAT_Display ", "", sizeof(taList<taDataView>), (void**)&TAI_taList_taDataView_, 0, 0, 0,1);
TypeDef TA_DataView_List("DataView_List", " ", 
	"MEMB_HIDDEN_EDIT HIDDEN_INLINE CAT_Display ", "MEMB_HIDDEN_EDIT HIDDEN_INLINE CAT_Display ", "", sizeof(DataView_List), (void**)&TAI_DataView_List, 0, 0, 0,1);
TypeDef TA_const_DataView_List("const_DataView_List", 1, 0, 0, 0, 1, 0);
TypeDef TA_taArray_base("taArray_base", " base for arrays (from taBase)", 
	"CAT_Data ", "MULT_INHERIT VIRT_BASE NO_UPDATE_AFTER CAT_Data ", "", sizeof(taArray_base), (void**)&TAI_taArray_base, 0, 0, 0,1);
TypeDef TA_const_DataView_List_ref("const_DataView_List_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taArray("taArray", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_taArray_base("const_taArray_base", 1, 0, 0, 0, 1, 0);
TypeDef TA_taArray_int_("taArray_int_", " ", 
	"CAT_Data ", "CAT_Data VIRT_BASE NO_UPDATE_AFTER ", "", sizeof(taArray<int>), (void**)&TAI_taArray_int_, 0, 0, 0,1);
TypeDef TA_const_taArray_base_ref("const_taArray_base_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_int_Array("int_Array", " array of ints", 
	"CAT_Data ", "CAT_Data NO_UPDATE_AFTER ", "", sizeof(int_Array), (void**)&TAI_int_Array, 0, 0, 0,1);
TypeDef TA_taArray_float_("taArray_float_", " ", 
	"CAT_Data ", "CAT_Data VIRT_BASE NO_UPDATE_AFTER ", "", sizeof(taArray<float>), (void**)&TAI_taArray_float_, 0, 0, 0,1);
TypeDef TA_const_int_Array("const_int_Array", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_int_Array_ref("const_int_Array_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_float("const_float", 1, 0, 0, 0, 1, sizeof(const float));
TypeDef TA_const_float_ref("const_float_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_float_Array("float_Array", " array of floats", 
	"CAT_Data ", "CAT_Data NO_UPDATE_AFTER ", "", sizeof(float_Array), (void**)&TAI_float_Array, 0, 0, 0,1);
TypeDef TA_taArray_double_("taArray_double_", " ", 
	"CAT_Data ", "CAT_Data VIRT_BASE NO_UPDATE_AFTER ", "", sizeof(taArray<double>), (void**)&TAI_taArray_double_, 0, 0, 0,1);
TypeDef TA_const_float_Array("const_float_Array", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_float_Array_ref("const_float_Array_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_double_ref("double_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_double("const_double", 1, 0, 0, 0, 1, sizeof(const double));
TypeDef TA_const_double_ref("const_double_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_double_Array("double_Array", " array of doubles", 
	"CAT_Data ", "CAT_Data NO_UPDATE_AFTER ", "", sizeof(double_Array), (void**)&TAI_double_Array, 0, 0, 0,1);
TypeDef TA_taArray_char_("taArray_char_", " ", 
	"CAT_Data ", "CAT_Data VIRT_BASE NO_UPDATE_AFTER ", "", sizeof(taArray<char>), (void**)&TAI_taArray_char_, 0, 0, 0,1);
TypeDef TA_const_double_Array("const_double_Array", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_double_Array_ref("const_double_Array_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_char_ref("const_char_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_char_Array("char_Array", " array of chars (bytes)", 
	"CAT_Data ", "CAT_Data NO_UPDATE_AFTER ", "", sizeof(char_Array), (void**)&TAI_char_Array, 0, 0, 0,1);
TypeDef TA_taArray_taString_("taArray_taString_", " ", 
	"CAT_Data ", "CAT_Data VIRT_BASE NO_UPDATE_AFTER ", "", sizeof(taArray<taString>), (void**)&TAI_taArray_taString_, 0, 0, 0,1);
TypeDef TA_const_char_Array("const_char_Array", 1, 0, 0, 0, 1, 0);
TypeDef TA_String_Array("String_Array", " array of Strings", 
	"CAT_Data ", "CAT_Data NO_UPDATE_AFTER ", "", sizeof(String_Array), (void**)&TAI_String_Array, 0, 0, 0,1);
TypeDef TA_const_char_Array_ref("const_char_Array_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_String_Array("const_String_Array", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_String_Array_ref("const_String_Array_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_SArg_Array("SArg_Array", " string argument array: has labels for each argument to make it easier in the interface", 
	"CAT_Data CAT_Program ", "CAT_Data CAT_Program ", "", sizeof(SArg_Array), (void**)&TAI_SArg_Array, 1, 0, 0,1);
TypeDef TA_taArray_Variant_("taArray_Variant_", " ", 
	"CAT_Data ", "CAT_Data VIRT_BASE NO_UPDATE_AFTER ", "", sizeof(taArray<Variant>), (void**)&TAI_taArray_Variant_, 0, 0, 0,1);
TypeDef TA_const_SArg_Array("const_SArg_Array", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_SArg_Array_ref("const_SArg_Array_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_Variant_Array("Variant_Array", " array of variants", 
	"CAT_Data ", "CAT_Data NO_UPDATE_AFTER ", "", sizeof(Variant_Array), (void**)&TAI_Variant_Array, 0, 0, 0,1);
TypeDef TA_taArray_voidptr_("taArray_voidptr_", " ", 
	"CAT_Data ", "CAT_Data VIRT_BASE NO_UPDATE_AFTER ", "", sizeof(taArray<void*>), (void**)&TAI_taArray_voidptr_, 0, 0, 0,1);
TypeDef TA_const_Variant_Array("const_Variant_Array", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_Variant_Array_ref("const_Variant_Array_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_voidptr_ref("voidptr_ref", 1, 1, 1, 0, 1, 0);
TypeDef TA_const_voidptr("const_voidptr", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_voidptr_ref("const_voidptr_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_voidptr_Array("voidptr_Array", " array of void pointers", 
	"CAT_Data ", "CAT_Data NO_UPDATE_AFTER ", "", sizeof(voidptr_Array), (void**)&TAI_voidptr_Array, 0, 0, 0,1);
TypeDef TA_const_UserDataItemBase("const_UserDataItemBase", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_voidptr_Array("const_voidptr_Array", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_UserDataItemBase_ref("const_UserDataItemBase_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_voidptr_Array_ref("const_voidptr_Array_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_const_UserDataItem("const_UserDataItem", 1, 0, 0, 0, 1, 0);
TypeDef TA_const_UserDataItem_ref("const_UserDataItem_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taList_UserDataItemBase_("taList_UserDataItemBase_", " a base list template", 
	"MEMB_HIDDEN_EDIT HIDDEN_INLINE ", "MEMB_HIDDEN_EDIT HIDDEN_INLINE NO_UPDATE_AFTER CHILDREN_INLINE ", "", sizeof(taList<UserDataItemBase>), (void**)&TAI_taList_UserDataItemBase_, 0, 0, 0,1);
TypeDef TA_UserDataItem_List("UserDataItem_List", " ", 
	"MEMB_HIDDEN_EDIT HIDDEN_INLINE ", "MEMB_HIDDEN_EDIT HIDDEN_INLINE CHILDREN_INLINE ", "", sizeof(UserDataItem_List), (void**)&TAI_UserDataItem_List, 1, 0, 0,1);
TypeDef TA_const_UserDataItem_List("const_UserDataItem_List", 1, 0, 0, 0, 1, 0);
TypeDef TA_UserDataItem_List_ptr("UserDataItem_List_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_const_UserDataItem_List_ref("const_UserDataItem_List_ref", 1, 0, 1, 0, 1, 0);
TypeDef TA_taSmartPtrT_UserDataItem_List_("taSmartPtrT_UserDataItem_List_", "", 
	"NO_INSTANCE ", "NO_INSTANCE ", "", sizeof(taSmartPtrT<UserDataItem_List>), (void**)0, 0, 0, 0,1);
TypeDef TA_UserDataItem_ListPtr("UserDataItem_ListPtr", " UserDataItem_ListPtr", 
	"NO_INSTANCE ", "NO_INSTANCE ", "", sizeof(UserDataItem_ListPtr), (void**)0, 0, 0, 0,1);
TypeDef TA_const_QString("const_QString", 1, 0, 0, 0, 1, 0);
TypeDef TA_QString("QString", 1, 0, 0, 0, 1, 0);
TypeDef TA_uint("uint", 1, 0, 0, 0, 1, 0);
TypeDef TA_ushort("ushort", 1, 0, 0, 0, 1, 0);
TypeDef TA_byte("byte", 1, 0, 0, 0, 1, 0);
TypeDef TA_QVariant("QVariant", 1, 0, 0, 0, 1, 0);
TypeDef TA_uint8_t("uint8_t", 1, 0, 0, 0, 1, 0);
TypeDef TA_QObject("QObject", 1, 0, 0, 0, 1, 0);
TypeDef TA_QObject_ptr("QObject_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_taBaseAdapter_ptr("taBaseAdapter_ptr", 1, 1, 0, 0, 1, 0);
TypeDef TA_taBaseAdapter("taBaseAdapter", 1, 0, 0, 0, 1, 0);
TypeDef TA_voidptr("voidptr", 1, 1, 0, 0, 1, 0);

// Instances

taBase*		 TAI_taBase=NULL;
  static cssEl* cssElCFun_taBase_New_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA_Base((void*)((taBase*)ths)->New(), 1, &TA_taBase);}
    if(na == 1) {
      rval=new cssTA_Base((void*)((taBase*)ths)->New((int)*arg[1]), 1, &TA_taBase);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((taBase*)ths)->New((int)*arg[1], (TypeDef*)*arg[2]), 1, &TA_taBase);}
    return rval;}
  static cssEl* cssElCFun_taBase_HasBaseFlag_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taBase*)ths)->HasBaseFlag((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taBase_SetBaseFlag_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taBase*)ths)->SetBaseFlag((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taBase_ClearBaseFlag_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taBase*)ths)->ClearBaseFlag((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taBase_GetIndex_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taBase*)ths)->GetIndex());
    return rval;}
  static cssEl* cssElCFun_taBase_GetEnabled_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taBase*)ths)->GetEnabled());
    return rval;}
  static cssEl* cssElCFun_taBase_SetEnabled_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taBase*)ths)->SetEnabled((bool)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taBase_children__stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taBase*)ths)->children_(), 1, &TA_taList_impl);
    return rval;}
  static cssEl* cssElCFun_taBase_GetOwner_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taBase*)ths)->GetOwner((TypeDef*)*arg[1]), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taBase_GetPath_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssString(((taBase*)ths)->GetPath());}
    if(na == 1) {
      rval=new cssString(((taBase*)ths)->GetPath((taBase*)(void*)*arg[1]));}
    if(na == 2) {
      rval=new cssString(((taBase*)ths)->GetPath((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taBase_FindFromPath_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taBase*)ths)->FindFromPath(arg[1]->GetStr()), 1, &TA_taBase);}
    if(na == 2) {
      MemberDef* refarg_1=(MemberDef*)*arg[2];
    rval=new cssTA_Base((void*)((taBase*)ths)->FindFromPath(arg[1]->GetStr(), refarg_1), 1, &TA_taBase);    *arg[2]=(void*)refarg_1;
}
    if(na == 3) {
      MemberDef* refarg_1=(MemberDef*)*arg[2];
    rval=new cssTA_Base((void*)((taBase*)ths)->FindFromPath(arg[1]->GetStr(), refarg_1, (int)*arg[3]), 1, &TA_taBase);    *arg[2]=(void*)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taBase_SetFileName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taBase*)ths)->SetFileName(arg[1]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taBase_GetFileName_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taBase*)ths)->GetFileName());
    return rval;}
  static cssEl* cssElCFun_taBase_GetFileNameFmProject_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssString(((taBase*)ths)->GetFileNameFmProject(arg[1]->GetStr()));}
    if(na == 2) {
      rval=new cssString(((taBase*)ths)->GetFileNameFmProject(arg[1]->GetStr(), arg[2]->GetStr()));}
    if(na == 3) {
      rval=new cssString(((taBase*)ths)->GetFileNameFmProject(arg[1]->GetStr(), arg[2]->GetStr(), arg[3]->GetStr()));}
    if(na == 4) {
      rval=new cssString(((taBase*)ths)->GetFileNameFmProject(arg[1]->GetStr(), arg[2]->GetStr(), arg[3]->GetStr(), (bool)*arg[4]));}
    return rval;}
  static cssEl* cssElCFun_taBase_Load_strm_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)arg[1]->GetVoidPtrOfType(&TA_istream);
    rval=new cssInt((int)((taBase*)ths)->Load_strm(refarg_0));}
    if(na == 2) {
      istream& refarg_0=*(istream*)arg[1]->GetVoidPtrOfType(&TA_istream);
    rval=new cssInt((int)((taBase*)ths)->Load_strm(refarg_0, (taBase*)(void*)*arg[2]));}
    if(na == 3) {
      istream& refarg_0=*(istream*)arg[1]->GetVoidPtrOfType(&TA_istream);
    rval=new cssInt((int)((taBase*)ths)->Load_strm(refarg_0, (taBase*)(void*)*arg[2], (taBase**)(void**)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_taBase_Load_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssInt((int)((taBase*)ths)->Load());}
    if(na == 1) {
      rval=new cssInt((int)((taBase*)ths)->Load(arg[1]->GetStr()));}
    if(na == 2) {
      rval=new cssInt((int)((taBase*)ths)->Load(arg[1]->GetStr(), (taBase**)(void**)*arg[2]));}
    if(na == 3) {
      rval=new cssInt((int)((taBase*)ths)->Load(arg[1]->GetStr(), (taBase**)(void**)*arg[2], arg[3]->GetStr()));}
    return rval;}
  static cssEl* cssElCFun_taBase_Save_strm_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ostream& refarg_0=*(ostream*)arg[1]->GetVoidPtrOfType(&TA_ostream);
    rval=new cssInt((int)((taBase*)ths)->Save_strm(refarg_0));}
    if(na == 2) {
      ostream& refarg_0=*(ostream*)arg[1]->GetVoidPtrOfType(&TA_ostream);
    rval=new cssInt((int)((taBase*)ths)->Save_strm(refarg_0, (taBase*)(void*)*arg[2]));}
    if(na == 3) {
      ostream& refarg_0=*(ostream*)arg[1]->GetVoidPtrOfType(&TA_ostream);
    rval=new cssInt((int)((taBase*)ths)->Save_strm(refarg_0, (taBase*)(void*)*arg[2], (int)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_taBase_Save_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssInt((int)((taBase*)ths)->Save());}
    if(na == 1) {
      rval=new cssInt((int)((taBase*)ths)->Save(arg[1]->GetStr()));}
    return rval;}
  static cssEl* cssElCFun_taBase_SaveAs_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssInt((int)((taBase*)ths)->SaveAs());}
    if(na == 1) {
      rval=new cssInt((int)((taBase*)ths)->SaveAs(arg[1]->GetStr()));}
    if(na == 2) {
      rval=new cssInt((int)((taBase*)ths)->SaveAs(arg[1]->GetStr(), arg[2]->GetStr()));}
    return rval;}
  static cssEl* cssElCFun_taBase_UpdateAfterEdit_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taBase*)ths)->UpdateAfterEdit();
    return rval;}
  static cssEl* cssElCFun_taBase_UpdateAllViews_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taBase*)ths)->UpdateAllViews();
    return rval;}
  static cssEl* cssElCFun_taBase_StructUpdate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taBase*)ths)->StructUpdate((bool)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taBase_DataUpdate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taBase*)ths)->DataUpdate((bool)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taBase_setDirty_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taBase*)ths)->setDirty((bool)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taBase_CheckConfig_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssBool(((taBase*)ths)->CheckConfig());}
    if(na == 1) {
      rval=new cssBool(((taBase*)ths)->CheckConfig((bool)*arg[1]));}
    return rval;}
  static cssEl* cssElCFun_taBase_CheckConfig_Gui_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssBool(((taBase*)ths)->CheckConfig_Gui());}
    if(na == 1) {
      rval=new cssBool(((taBase*)ths)->CheckConfig_Gui((bool)*arg[1]));}
    if(na == 2) {
      rval=new cssBool(((taBase*)ths)->CheckConfig_Gui((bool)*arg[1], (bool)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taBase_CopyFrom_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taBase*)ths)->CopyFrom((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taBase_CopyTo_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taBase*)ths)->CopyTo((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taBase_DuplicateMe_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taBase*)ths)->DuplicateMe());
    return rval;}
  static cssEl* cssElCFun_taBase_ChangeMyType_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taBase*)ths)->ChangeMyType((TypeDef*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taBase_InheritsFrom_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taBase*)ths)->InheritsFrom((TypeDef*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taBase_InheritsFromName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taBase*)ths)->InheritsFromName((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taBase_GetEnumString_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taBase*)ths)->GetEnumString(arg[1]->GetStr(), (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taBase_GetEnumVal_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taBase*)ths)->GetEnumVal(arg[1]->GetStr()));}
    if(na == 2) {
      taString refarg_1=arg[2]->GetStr();
    rval=new cssInt((int)((taBase*)ths)->GetEnumVal(arg[1]->GetStr(), refarg_1));    *arg[2]=(String)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taBase_GetUserDataList_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA_Base((void*)((taBase*)ths)->GetUserDataList(), 1, &TA_UserDataItem_List);}
    if(na == 1) {
      rval=new cssTA_Base((void*)((taBase*)ths)->GetUserDataList((bool)*arg[1]), 1, &TA_UserDataItem_List);}
    return rval;}
  static cssEl* cssElCFun_taBase_HasUserData_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taBase*)ths)->HasUserData(arg[1]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taBase_GetUserData_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssVariant(((taBase*)ths)->GetUserData(arg[1]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taBase_GetUserDataAsBool_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taBase*)ths)->GetUserDataAsBool(arg[1]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taBase_GetUserDataAsInt_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taBase*)ths)->GetUserDataAsInt(arg[1]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taBase_GetUserDataAsFloat_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((taBase*)ths)->GetUserDataAsFloat(arg[1]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taBase_GetUserDataAsDouble_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((taBase*)ths)->GetUserDataAsDouble(arg[1]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taBase_GetUserDataAsString_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taBase*)ths)->GetUserDataAsString(arg[1]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taBase_SetUserData_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taBase*)ths)->SetUserData(arg[1]->GetStr(), arg[2]->GetVar());
    return rval;}
  static cssEl* cssElCFun_taBase_Edit_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taBase*)ths)->Edit());
    return rval;}
  static cssEl* cssElCFun_taBase_EditDialog_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssInt((int)((taBase*)ths)->EditDialog());}
    if(na == 1) {
      rval=new cssInt((int)((taBase*)ths)->EditDialog((bool)*arg[1]));}
    return rval;}
  static cssEl* cssElCFun_taBase_BrowseMe_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taBase*)ths)->BrowseMe();
    return rval;}
  static cssEl* cssElCFun_taBase_ReShowEdit_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssBool(((taBase*)ths)->ReShowEdit());}
    if(na == 1) {
      rval=new cssBool(((taBase*)ths)->ReShowEdit((bool)*arg[1]));}
    return rval;}
  static cssEl* cssElCFun_taBase_CallFun_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taBase*)ths)->CallFun(arg[1]->GetStr());
    return rval;}
  static cssEl* cssElCFun_taBase_SelectForEdit_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taBase*)ths)->SelectForEdit((MemberDef*)*arg[1], (SelectEdit*)(void*)*arg[2], arg[3]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taBase_SelectForEditNm_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taBase*)ths)->SelectForEditNm(arg[1]->GetStr(), (SelectEdit*)(void*)*arg[2], arg[3]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taBase_SelectForEditSearch_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    SelectEdit* refarg_1=(SelectEdit*)(void*)*arg[2];
    rval=new cssInt((int)((taBase*)ths)->SelectForEditSearch(arg[1]->GetStr(), refarg_1));
    *arg[2]=(void*)refarg_1;
    return rval;}
  static cssEl* cssElCFun_taBase_SelectFunForEdit_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taBase*)ths)->SelectFunForEdit((MethodDef*)*arg[1], (SelectEdit*)(void*)*arg[2], arg[3]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taBase_SelectFunForEditNm_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taBase*)ths)->SelectFunForEditNm(arg[1]->GetStr(), (SelectEdit*)(void*)*arg[2], arg[3]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taBase_CloseLater_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taBase*)ths)->CloseLater();
    return rval;}
  static cssEl* cssElCFun_taBase_Help_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taBase*)ths)->Help();
    return rval;}
  static cssEl* cssElCFun_taString_CharToCppLiteral_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taString*)ths)->CharToCppLiteral((char)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taString_StringToCppLiteral_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taString*)ths)->StringToCppLiteral(arg[1]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taString_toQString_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taString*)ths)->toQString();
    return rval;}
  static cssEl* cssElCFun_taString_setRep_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taString*)ths)->setRep((taStrRep*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taString_length_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taString*)ths)->length());
    return rval;}
  static cssEl* cssElCFun_taString_empty_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taString*)ths)->empty());
    return rval;}
  static cssEl* cssElCFun_taString_nonempty_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taString*)ths)->nonempty());
    return rval;}
  static cssEl* cssElCFun_taString_isInt_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taString*)ths)->isInt());
    return rval;}
  static cssEl* cssElCFun_taString_allocation_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taString*)ths)->allocation());
    return rval;}
  static cssEl* cssElCFun_taString_assertLength_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taString*)ths)->assertLength());
    return rval;}
  static cssEl* cssElCFun_taString_chars_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssCPtr_char((void*)((taString*)ths)->chars(), 1);
    return rval;}
  static cssEl* cssElCFun_taString_chars_ptr_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssCPtr_char((void*)((taString*)ths)->chars_ptr(), 1);
    return rval;}
  static cssEl* cssElCFun_taString_makeUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taString*)ths)->makeUnique((uint)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taString_pack_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taString*)ths)->pack();
    return rval;}
  static cssEl* cssElCFun_taString_toBool_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taString*)ths)->toBool());
    return rval;}
  static cssEl* cssElCFun_taString_toChar_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssChar(((taString*)ths)->toChar());
    return rval;}
  static cssEl* cssElCFun_taString_toShort_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssInt((int)((taString*)ths)->toShort());}
    if(na == 1) {
      rval=new cssInt((int)((taString*)ths)->toShort((bool*)(void*)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((taString*)ths)->toShort((bool*)(void*)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taString_toUShort_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssInt((int)((taString*)ths)->toUShort());}
    if(na == 1) {
      rval=new cssInt((int)((taString*)ths)->toUShort((bool*)(void*)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((taString*)ths)->toUShort((bool*)(void*)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taString_toInt_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssInt((int)((taString*)ths)->toInt());}
    if(na == 1) {
      rval=new cssInt((int)((taString*)ths)->toInt((bool*)(void*)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((taString*)ths)->toInt((bool*)(void*)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taString_toUInt_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssInt((int)((taString*)ths)->toUInt());}
    if(na == 1) {
      rval=new cssInt((int)((taString*)ths)->toUInt((bool*)(void*)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((taString*)ths)->toUInt((bool*)(void*)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taString_toInt64_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssVariant(((taString*)ths)->toInt64());}
    if(na == 1) {
      rval=new cssVariant(((taString*)ths)->toInt64((bool*)(void*)*arg[1]));}
    if(na == 2) {
      rval=new cssVariant(((taString*)ths)->toInt64((bool*)(void*)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taString_toUInt64_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssVariant(((taString*)ths)->toUInt64());}
    if(na == 1) {
      rval=new cssVariant(((taString*)ths)->toUInt64((bool*)(void*)*arg[1]));}
    if(na == 2) {
      rval=new cssVariant(((taString*)ths)->toUInt64((bool*)(void*)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taString_toFloat_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssReal((double)((taString*)ths)->toFloat());}
    if(na == 1) {
      rval=new cssReal((double)((taString*)ths)->toFloat((bool*)(void*)*arg[1]));}
    return rval;}
  static cssEl* cssElCFun_taString_toDouble_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssReal((double)((taString*)ths)->toDouble());}
    if(na == 1) {
      rval=new cssReal((double)((taString*)ths)->toDouble((bool*)(void*)*arg[1]));}
    return rval;}
  static cssEl* cssElCFun_taString_convert_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssString(((taString*)ths)->convert((double)*arg[1]));}
    if(na == 2) {
      rval=new cssString(((taString*)ths)->convert((double)*arg[1], (const char*)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taString_HexToInt_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taString*)ths)->HexToInt());
    return rval;}
  static cssEl* cssElCFun_taString_set_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taString*)ths)->set((const char*)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taString_cat_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taString*)ths)->cat((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taString_prepend_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taString*)ths)->prepend((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taString_index_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taString*)ths)->index((const char*)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((taString*)ths)->index((const char*)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taString_contains_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taString*)ths)->contains((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taString_matches_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssBool(((taString*)ths)->matches((const char*)*arg[1]));}
    if(na == 2) {
      rval=new cssBool(((taString*)ths)->matches((const char*)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taString_endsWith_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taString*)ths)->endsWith((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taString_startsWith_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taString*)ths)->startsWith((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taString_freq_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taString*)ths)->freq((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taString_at_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taString*)ths)->at((int)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taString_before_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssString(((taString*)ths)->before((const char*)*arg[1]));}
    if(na == 2) {
      rval=new cssString(((taString*)ths)->before((const char*)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taString_through_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssString(((taString*)ths)->through((const char*)*arg[1]));}
    if(na == 2) {
      rval=new cssString(((taString*)ths)->through((const char*)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taString_from_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssString(((taString*)ths)->from((const char*)*arg[1]));}
    if(na == 2) {
      rval=new cssString(((taString*)ths)->from((const char*)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taString_after_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssString(((taString*)ths)->after((const char*)*arg[1]));}
    if(na == 2) {
      rval=new cssString(((taString*)ths)->after((const char*)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taString_left_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taString*)ths)->left((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taString_right_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taString*)ths)->right((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taString_elidedTo_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssString(((taString*)ths)->elidedTo());}
    if(na == 1) {
      rval=new cssString(((taString*)ths)->elidedTo((int)*arg[1]));}
    return rval;}
  static cssEl* cssElCFun_taString_elidedToFirstLine_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taString*)ths)->elidedToFirstLine());
    return rval;}
  static cssEl* cssElCFun_taString_del_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taString*)ths)->del((int)*arg[1], (int)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_taString_remove_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((taString*)ths)->remove((const char*)*arg[1]);}
    if(na == 2) {
      ((taString*)ths)->remove((const char*)*arg[1], (int)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_taString_gsub_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taString*)ths)->gsub((const char*)*arg[1], (const char*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taString_reverse_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taString*)ths)->reverse());
    return rval;}
  static cssEl* cssElCFun_taString_upcase_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taString*)ths)->upcase());
    return rval;}
  static cssEl* cssElCFun_taString_downcase_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taString*)ths)->downcase());
    return rval;}
  static cssEl* cssElCFun_taString_capitalize_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taString*)ths)->capitalize());
    return rval;}
  static cssEl* cssElCFun_taString_truncate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taString*)ths)->truncate((uint)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taString_elem_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssChar(((taString*)ths)->elem((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taString_firstchar_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssChar(((taString*)ths)->firstchar());
    return rval;}
  static cssEl* cssElCFun_taString_lastchar_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssChar(((taString*)ths)->lastchar());
    return rval;}
  static cssEl* cssElCFun_taString_error_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taString*)ths)->error((const char*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_Variant_formatNumber_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      rval=new cssString(((Variant*)ths)->formatNumber(arg[1]->GetVar(), (short)*arg[2]));}
    if(na == 3) {
      rval=new cssString(((Variant*)ths)->formatNumber(arg[1]->GetVar(), (short)*arg[2], (bool)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_Variant_addrData_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((Variant*)ths)->addrData(), 1, &TA_const_void);
    return rval;}
  static cssEl* cssElCFun_Variant_isAtomic_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((Variant*)ths)->isAtomic());
    return rval;}
  static cssEl* cssElCFun_Variant_isDefault_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((Variant*)ths)->isDefault());
    return rval;}
  static cssEl* cssElCFun_Variant_isInvalid_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((Variant*)ths)->isInvalid());
    return rval;}
  static cssEl* cssElCFun_Variant_isNull_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((Variant*)ths)->isNull());
    return rval;}
  static cssEl* cssElCFun_Variant_isNumeric_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((Variant*)ths)->isNumeric());
    return rval;}
  static cssEl* cssElCFun_Variant_isNumericStrict_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((Variant*)ths)->isNumericStrict());
    return rval;}
  static cssEl* cssElCFun_Variant_isStringType_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((Variant*)ths)->isStringType());
    return rval;}
  static cssEl* cssElCFun_Variant_isPtrType_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((Variant*)ths)->isPtrType());
    return rval;}
  static cssEl* cssElCFun_Variant_isBaseType_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((Variant*)ths)->isBaseType());
    return rval;}
  static cssEl* cssElCFun_Variant_isMatrixType_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((Variant*)ths)->isMatrixType());
    return rval;}
  static cssEl* cssElCFun_Variant_type_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Variant*)ths)->type();
    return rval;}
  static cssEl* cssElCFun_Variant_setType_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Variant*)ths)->setType((Variant::VarType)(int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_Variant_getTypeAsString_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((Variant*)ths)->getTypeAsString());
    return rval;}
  static cssEl* cssElCFun_Variant_save_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ostream& refarg_0=*(ostream*)arg[1]->GetVoidPtrOfType(&TA_ostream);
    ((Variant*)ths)->save(refarg_0);
    return rval;}
  static cssEl* cssElCFun_Variant_load_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    istream& refarg_0=*(istream*)arg[1]->GetVoidPtrOfType(&TA_istream);
    ((Variant*)ths)->load(refarg_0);
    return rval;}
  static cssEl* cssElCFun_Variant_setInvalid_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Variant*)ths)->setInvalid();
    return rval;}
  static cssEl* cssElCFun_Variant_setVariant_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Variant*)ths)->setVariant(arg[1]->GetVar());
    return rval;}
  static cssEl* cssElCFun_Variant_setVariantData_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Variant*)ths)->setVariantData(arg[1]->GetVar());
    return rval;}
  static cssEl* cssElCFun_Variant_setBool_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((Variant*)ths)->setBool((bool)*arg[1]);}
    if(na == 2) {
      ((Variant*)ths)->setBool((bool)*arg[1], (bool)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_Variant_setByte_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((Variant*)ths)->setByte((byte)*arg[1]);}
    if(na == 2) {
      ((Variant*)ths)->setByte((byte)*arg[1], (bool)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_Variant_setInt_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((Variant*)ths)->setInt((int)*arg[1]);}
    if(na == 2) {
      ((Variant*)ths)->setInt((int)*arg[1], (bool)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_Variant_setUInt_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((Variant*)ths)->setUInt((uint)*arg[1]);}
    if(na == 2) {
      ((Variant*)ths)->setUInt((uint)*arg[1], (bool)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_Variant_setInt64_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((Variant*)ths)->setInt64((int64_t)*arg[1]);}
    if(na == 2) {
      ((Variant*)ths)->setInt64((int64_t)*arg[1], (bool)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_Variant_setUInt64_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((Variant*)ths)->setUInt64((uint64_t)*arg[1]);}
    if(na == 2) {
      ((Variant*)ths)->setUInt64((uint64_t)*arg[1], (bool)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_Variant_setIntPtr_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((Variant*)ths)->setIntPtr((intptr_t)*arg[1]);}
    if(na == 2) {
      ((Variant*)ths)->setIntPtr((intptr_t)*arg[1], (bool)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_Variant_setFloat_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((Variant*)ths)->setFloat((float)*arg[1]);}
    if(na == 2) {
      ((Variant*)ths)->setFloat((float)*arg[1], (bool)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_Variant_setDouble_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((Variant*)ths)->setDouble((double)*arg[1]);}
    if(na == 2) {
      ((Variant*)ths)->setDouble((double)*arg[1], (bool)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_Variant_setChar_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((Variant*)ths)->setChar((char)*arg[1]);}
    if(na == 2) {
      ((Variant*)ths)->setChar((char)*arg[1], (bool)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_Variant_setPtr_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Variant*)ths)->setPtr((void*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_Variant_setString_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((Variant*)ths)->setString(arg[1]->GetStr());}
    if(na == 2) {
      ((Variant*)ths)->setString(arg[1]->GetStr(), (bool)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_Variant_setCString_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((Variant*)ths)->setCString((const char*)*arg[1]);}
    if(na == 2) {
      ((Variant*)ths)->setCString((const char*)*arg[1], (bool)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_Variant_setBase_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Variant*)ths)->setBase((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_Variant_setMatrix_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Variant*)ths)->setMatrix((taMatrix*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_Variant_updateFromString_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Variant*)ths)->updateFromString(arg[1]->GetStr());
    return rval;}
  static cssEl* cssElCFun_Variant_toBool_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((Variant*)ths)->toBool());
    return rval;}
  static cssEl* cssElCFun_Variant_toByte_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Variant*)ths)->toByte());
    return rval;}
  static cssEl* cssElCFun_Variant_toInt_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Variant*)ths)->toInt());
    return rval;}
  static cssEl* cssElCFun_Variant_toUInt_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Variant*)ths)->toUInt());
    return rval;}
  static cssEl* cssElCFun_Variant_toInt64_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssVariant(((Variant*)ths)->toInt64());
    return rval;}
  static cssEl* cssElCFun_Variant_toUInt64_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssVariant(((Variant*)ths)->toUInt64());
    return rval;}
  static cssEl* cssElCFun_Variant_toFloat_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((Variant*)ths)->toFloat());
    return rval;}
  static cssEl* cssElCFun_Variant_toDouble_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((Variant*)ths)->toDouble());
    return rval;}
  static cssEl* cssElCFun_Variant_toChar_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssChar(((Variant*)ths)->toChar());
    return rval;}
  static cssEl* cssElCFun_Variant_toPtr_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((Variant*)ths)->toPtr(), 1, &TA_void);
    return rval;}
  static cssEl* cssElCFun_Variant_toString_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((Variant*)ths)->toString());
    return rval;}
  static cssEl* cssElCFun_Variant_toBase_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((Variant*)ths)->toBase(), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_Variant_toMatrix_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((Variant*)ths)->toMatrix(), 1, &TA_taMatrix);
    return rval;}
  static cssEl* cssElCFun_Variant_toCssLiteral_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((Variant*)ths)->toCssLiteral());
    return rval;}
  static cssEl* cssElCFun_Variant_eqVariant_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((Variant*)ths)->eqVariant(arg[1]->GetVar()));
    return rval;}
  static cssEl* cssElCFun_Variant_eqBool_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((Variant*)ths)->eqBool((bool)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Variant_eqByte_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((Variant*)ths)->eqByte((byte)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Variant_eqInt_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((Variant*)ths)->eqInt((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Variant_eqUInt_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((Variant*)ths)->eqUInt((uint)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Variant_eqInt64_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((Variant*)ths)->eqInt64((int64_t)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Variant_eqUInt64_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((Variant*)ths)->eqUInt64((uint64_t)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Variant_eqIntPtr_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((Variant*)ths)->eqIntPtr((intptr_t)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Variant_eqFloat_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((Variant*)ths)->eqFloat((float)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Variant_eqDouble_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((Variant*)ths)->eqDouble((double)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Variant_eqChar_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((Variant*)ths)->eqChar((char)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Variant_eqString_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((Variant*)ths)->eqString(arg[1]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_Variant_eqCString_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((Variant*)ths)->eqCString((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Variant_eqPtr_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((Variant*)ths)->eqPtr((const void*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Variant_eqBase_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((Variant*)ths)->eqBase((const taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Variant_eqMatrix_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((Variant*)ths)->eqMatrix((const taMatrix*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Variant_cmpVariant_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Variant*)ths)->cmpVariant(arg[1]->GetVar()));
    return rval;}
  static cssEl* cssElCFun_Variant_cmpBool_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Variant*)ths)->cmpBool((bool)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Variant_cmpByte_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Variant*)ths)->cmpByte((byte)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Variant_cmpInt_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Variant*)ths)->cmpInt((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Variant_cmpUInt_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Variant*)ths)->cmpUInt((uint)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Variant_cmpInt64_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Variant*)ths)->cmpInt64((int64_t)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Variant_cmpUInt64_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Variant*)ths)->cmpUInt64((uint64_t)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Variant_cmpIntPtr_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Variant*)ths)->cmpIntPtr((intptr_t)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Variant_cmpFloat_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Variant*)ths)->cmpFloat((float)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Variant_cmpDouble_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Variant*)ths)->cmpDouble((double)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Variant_cmpChar_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Variant*)ths)->cmpChar((char)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Variant_cmpString_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Variant*)ths)->cmpString(arg[1]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_Variant_cmpCString_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Variant*)ths)->cmpCString((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Variant_cmpPtr_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Variant*)ths)->cmpPtr((const void*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Variant_cmpBase_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Variant*)ths)->cmpBase((const taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Variant_cmpMatrix_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((Variant*)ths)->cmpMatrix((const taMatrix*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_Variant_setQVariant_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Variant*)ths)->setQVariant(*(QVariant*)arg[1]->GetVoidPtrOfType(&TA_QVariant));
    return rval;}
  static cssEl* cssElCFun_Variant_toQVariant_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Variant*)ths)->toQVariant();
    return rval;}
  static cssEl* cssElCFun_Variant_GetRepInfo_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    TypeDef* refarg_0=(TypeDef*)*arg[1];    void* refarg_1=(void*)(void*)*arg[2];
    ((Variant*)ths)->GetRepInfo(refarg_0, refarg_1);
    *arg[1]=(void*)refarg_0;    *arg[2]=(void*)refarg_1;
    return rval;}
  static cssEl* cssElCFun_Variant_UpdateAfterLoad_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((Variant*)ths)->UpdateAfterLoad();
    return rval;}
  static cssEl* cssElCFun_Variant_ForceType_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((Variant*)ths)->ForceType((Variant::VarType)(int)*arg[1], (bool)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_Variant_Dump_Save_Type_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ostream& refarg_0=*(ostream*)arg[1]->GetVoidPtrOfType(&TA_ostream);
    ((Variant*)ths)->Dump_Save_Type(refarg_0);
    return rval;}
  static cssEl* cssElCFun_Variant_Dump_Load_Type_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    istream& refarg_0=*(istream*)arg[1]->GetVoidPtrOfType(&TA_istream);    int refarg_1=(int)*arg[2];
    rval=new cssBool(((Variant*)ths)->Dump_Load_Type(refarg_0, refarg_1));
    *arg[2]=(Int)refarg_1;
    return rval;}
iPoint*		 TAI_iPoint=NULL;
  static cssEl* cssElCFun_iPoint_getArrayIndex_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((iPoint*)ths)->getArrayIndex((int)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_iPoint_isEqual_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((iPoint*)ths)->isEqual((int)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_iPoint_getValue_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    int refarg_0=(int)*arg[1];    int refarg_1=(int)*arg[2];
    ((iPoint*)ths)->getValue(refarg_0, refarg_1);
    *arg[1]=(Int)refarg_0;    *arg[2]=(Int)refarg_1;
    return rval;}
  static cssEl* cssElCFun_iPoint_setValue_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((iPoint*)ths)->setValue((int)*arg[1], (int)*arg[2]);
    return rval;}
iVec3i*		 TAI_iVec3i=NULL;
  static cssEl* cssElCFun_iVec3i_isEqual_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((iVec3i*)ths)->isEqual((int)*arg[1], (int)*arg[2], (int)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_iVec3i_getValue_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    int refarg_0=(int)*arg[1];    int refarg_1=(int)*arg[2];    int refarg_2=(int)*arg[3];
    ((iVec3i*)ths)->getValue(refarg_0, refarg_1, refarg_2);
    *arg[1]=(Int)refarg_0;    *arg[2]=(Int)refarg_1;    *arg[3]=(Int)refarg_2;
    return rval;}
  static cssEl* cssElCFun_iVec3i_setValue_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((iVec3i*)ths)->setValue((int)*arg[1], (int)*arg[2], (int)*arg[3]);
    return rval;}
iSize*		 TAI_iSize=NULL;
  static cssEl* cssElCFun_iSize_set_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((iSize*)ths)->set((int)*arg[1], (int)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_iSize_height_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((iSize*)ths)->height());
    return rval;}
  static cssEl* cssElCFun_iSize_width_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((iSize*)ths)->width());
    return rval;}
iRect*		 TAI_iRect=NULL;
  static cssEl* cssElCFun_iRect_topLeft_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((iRect*)ths)->topLeft();
    return rval;}
  static cssEl* cssElCFun_iRect_size_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((iRect*)ths)->size();
    return rval;}
  static cssEl* cssElCFun_iRect_left_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((iRect*)ths)->left());
    return rval;}
  static cssEl* cssElCFun_iRect_top_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((iRect*)ths)->top());
    return rval;}
  static cssEl* cssElCFun_iRect_width_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((iRect*)ths)->width());
    return rval;}
  static cssEl* cssElCFun_iRect_height_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((iRect*)ths)->height());
    return rval;}
iVec3f*		 TAI_iVec3f=NULL;
  static cssEl* cssElCFun_iVec3f_isEqual_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((iVec3f*)ths)->isEqual((float)*arg[1], (float)*arg[2], (float)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_iVec3f_isUnity_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((iVec3f*)ths)->isUnity());
    return rval;}
  static cssEl* cssElCFun_iVec3f_isZero_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((iVec3f*)ths)->isZero());
    return rval;}
  static cssEl* cssElCFun_iVec3f_setValue_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((iVec3f*)ths)->setValue((float)*arg[1], (float)*arg[2], (float)*arg[3]);
    return rval;}
iBox3f*		 TAI_iBox3f=NULL;
  static cssEl* cssElCFun_iBox3f_center_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((iBox3f*)ths)->center();
    return rval;}
  static cssEl* cssElCFun_iBox3f_height_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((iBox3f*)ths)->height());
    return rval;}
  static cssEl* cssElCFun_iBox3f_width_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((iBox3f*)ths)->width());
    return rval;}
  static cssEl* cssElCFun_iBox3f_depth_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((iBox3f*)ths)->depth());
    return rval;}
  static cssEl* cssElCFun_iBox3f_bottom_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((iBox3f*)ths)->bottom());
    return rval;}
  static cssEl* cssElCFun_iBox3f_top_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((iBox3f*)ths)->top());
    return rval;}
  static cssEl* cssElCFun_iBox3f_left_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((iBox3f*)ths)->left());
    return rval;}
  static cssEl* cssElCFun_iBox3f_right_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((iBox3f*)ths)->right());
    return rval;}
  static cssEl* cssElCFun_iBox3f_far_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((iBox3f*)ths)->far());
    return rval;}
  static cssEl* cssElCFun_iBox3f_near_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((iBox3f*)ths)->near());
    return rval;}
  static cssEl* cssElCFun_iBox3f_size_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((iBox3f*)ths)->size();
    return rval;}
  static cssEl* cssElCFun_iBox3f_isZero_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((iBox3f*)ths)->isZero());
    return rval;}
  static cssEl* cssElCFun_iBox3f_setValue_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((iBox3f*)ths)->setValue(*(iVec3f*)arg[1]->GetVoidPtrOfType(&TA_iVec3f), *(iVec3f*)arg[2]->GetVoidPtrOfType(&TA_iVec3f));
    return rval;}
  static cssEl* cssElCFun_iBox3f_setValueCS_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((iBox3f*)ths)->setValueCS(*(iVec3f*)arg[1]->GetVoidPtrOfType(&TA_iVec3f), *(iVec3f*)arg[2]->GetVoidPtrOfType(&TA_iVec3f));
    return rval;}
  static cssEl* cssElCFun_ios_flags_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((ios*)ths)->flags();
    return rval;}
  static cssEl* cssElCFun_ios_setf_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ios*)ths)->setf((ios::fmtflags)(int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_ios_unsetf_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ios*)ths)->unsetf((ios::fmtflags)(int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_ios_tie_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((ios*)ths)->tie((ostream*)(void*)*arg[1]), 1, &TA_ostream);
    return rval;}
  static cssEl* cssElCFun_ios_precision_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ios*)ths)->precision((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_ios_width_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ios*)ths)->width((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_ios_clear_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((ios*)ths)->clear();}
    if(na == 1) {
      ((ios*)ths)->clear((ios::iostate)(int)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_ios_setstate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ios*)ths)->setstate((ios::iostate)(int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_ios_good_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ios*)ths)->good());
    return rval;}
  static cssEl* cssElCFun_ios_eof_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ios*)ths)->eof());
    return rval;}
  static cssEl* cssElCFun_ios_fail_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ios*)ths)->fail());
    return rval;}
  static cssEl* cssElCFun_ios_bad_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ios*)ths)->bad());
    return rval;}
  static cssEl* cssElCFun_ios_pword_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((ios*)ths)->pword((int)*arg[1]), 1, &TA_void);
    return rval;}
  static cssEl* cssElCFun_ios_iword_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ios*)ths)->iword((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_ostream_flush_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((ostream*)ths)->flush();
    return rval;}
  static cssEl* cssElCFun_ostream_put_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ostream*)ths)->put((char)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_ostream_write_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ostream*)ths)->write((const char*)*arg[1], (streamsize)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_ostream_seekp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((ostream*)ths)->seekp((streamoff)*arg[1], (ios::seekdir)(int)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_ostream_tellp_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ostream*)ths)->tellp());
    return rval;}
  static cssEl* cssElCFun_istream_getline_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ((istream*)ths)->getline((char*)*arg[1], (int)*arg[2]);}
    if(na == 3) {
      ((istream*)ths)->getline((char*)*arg[1], (int)*arg[2], (char)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_istream_read_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((istream*)ths)->read((char*)*arg[1], (streamsize)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_istream_get_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((istream*)ths)->get());
    return rval;}
  static cssEl* cssElCFun_istream_peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((istream*)ths)->peek());
    return rval;}
  static cssEl* cssElCFun_istream_ignore_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((istream*)ths)->ignore();}
    if(na == 1) {
      ((istream*)ths)->ignore((int)*arg[1]);}
    if(na == 2) {
      ((istream*)ths)->ignore((int)*arg[1], (int)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_istream_sync_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((istream*)ths)->sync());
    return rval;}
  static cssEl* cssElCFun_istream_seekg_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((istream*)ths)->seekg((streamoff)*arg[1], (ios::seekdir)(int)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_istream_tellg_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((istream*)ths)->tellg());
    return rval;}
  static cssEl* cssElCFun_istream_putback_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((istream*)ths)->putback((char)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_istream_unget_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((istream*)ths)->unget();
    return rval;}
  static cssEl* cssElCFun_iostream_flags_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((iostream*)ths)->flags();
    return rval;}
  static cssEl* cssElCFun_iostream_setf_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((iostream*)ths)->setf((ios::fmtflags)(int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_iostream_unsetf_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((iostream*)ths)->unsetf((ios::fmtflags)(int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_iostream_tie_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((iostream*)ths)->tie((ostream*)(void*)*arg[1]), 1, &TA_ostream);
    return rval;}
  static cssEl* cssElCFun_iostream_precision_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((iostream*)ths)->precision((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_iostream_width_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((iostream*)ths)->width((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_iostream_clear_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((iostream*)ths)->clear();}
    if(na == 1) {
      ((iostream*)ths)->clear((ios::iostate)(int)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_iostream_setstate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((iostream*)ths)->setstate((ios::iostate)(int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_iostream_good_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((iostream*)ths)->good());
    return rval;}
  static cssEl* cssElCFun_iostream_eof_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((iostream*)ths)->eof());
    return rval;}
  static cssEl* cssElCFun_iostream_fail_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((iostream*)ths)->fail());
    return rval;}
  static cssEl* cssElCFun_iostream_bad_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((iostream*)ths)->bad());
    return rval;}
  static cssEl* cssElCFun_iostream_pword_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((iostream*)ths)->pword((int)*arg[1]), 1, &TA_void);
    return rval;}
  static cssEl* cssElCFun_iostream_iword_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((iostream*)ths)->iword((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_iostream_getline_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ((iostream*)ths)->getline((char*)*arg[1], (int)*arg[2]);}
    if(na == 3) {
      ((iostream*)ths)->getline((char*)*arg[1], (int)*arg[2], (char)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_iostream_read_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((iostream*)ths)->read((char*)*arg[1], (streamsize)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_iostream_get_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((iostream*)ths)->get());
    return rval;}
  static cssEl* cssElCFun_iostream_peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((iostream*)ths)->peek());
    return rval;}
  static cssEl* cssElCFun_iostream_ignore_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((iostream*)ths)->ignore();}
    if(na == 1) {
      ((iostream*)ths)->ignore((int)*arg[1]);}
    if(na == 2) {
      ((iostream*)ths)->ignore((int)*arg[1], (int)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_iostream_sync_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((iostream*)ths)->sync());
    return rval;}
  static cssEl* cssElCFun_iostream_seekg_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((iostream*)ths)->seekg((streamoff)*arg[1], (ios::seekdir)(int)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_iostream_tellg_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((iostream*)ths)->tellg());
    return rval;}
  static cssEl* cssElCFun_iostream_putback_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((iostream*)ths)->putback((char)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_iostream_unget_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((iostream*)ths)->unget();
    return rval;}
  static cssEl* cssElCFun_iostream_flush_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((iostream*)ths)->flush();
    return rval;}
  static cssEl* cssElCFun_iostream_put_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((iostream*)ths)->put((char)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_iostream_write_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((iostream*)ths)->write((const char*)*arg[1], (streamsize)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_iostream_seekp_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((iostream*)ths)->seekp((streamoff)*arg[1], (ios::seekdir)(int)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_iostream_tellp_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((iostream*)ths)->tellp());
    return rval;}
  static cssEl* cssElCFun_ifstream_close_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((ifstream*)ths)->close();
    return rval;}
  static cssEl* cssElCFun_ifstream_is_open_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ifstream*)ths)->is_open());
    return rval;}
  static cssEl* cssElCFun_ifstream_open_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((ifstream*)ths)->open((const char*)*arg[1]);}
    if(na == 2) {
      ((ifstream*)ths)->open((const char*)*arg[1], (ios::openmode)(int)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_ofstream_close_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((ofstream*)ths)->close();
    return rval;}
  static cssEl* cssElCFun_ofstream_is_open_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((ofstream*)ths)->is_open());
    return rval;}
  static cssEl* cssElCFun_ofstream_open_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((ofstream*)ths)->open((const char*)*arg[1]);}
    if(na == 2) {
      ((ofstream*)ths)->open((const char*)*arg[1], (ios::openmode)(int)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_fstream_close_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((fstream*)ths)->close();
    return rval;}
  static cssEl* cssElCFun_fstream_is_open_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((fstream*)ths)->is_open());
    return rval;}
  static cssEl* cssElCFun_fstream_open_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((fstream*)ths)->open((const char*)*arg[1], (ios::openmode)(int)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_taPlatform_cpuCount_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPlatform*)ths)->cpuCount());
    return rval;}
  static cssEl* cssElCFun_taPlatform_processId_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPlatform*)ths)->processId());
    return rval;}
  static cssEl* cssElCFun_taPlatform_tickCount_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPlatform*)ths)->tickCount());
    return rval;}
  static cssEl* cssElCFun_taPlatform_finalSep_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taPlatform*)ths)->finalSep(arg[1]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taPlatform_getTempPath_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taPlatform*)ths)->getTempPath());
    return rval;}
  static cssEl* cssElCFun_taPlatform_getHomePath_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taPlatform*)ths)->getHomePath());
    return rval;}
  static cssEl* cssElCFun_taPlatform_getAppDataPath_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taPlatform*)ths)->getAppDataPath(arg[1]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taPlatform_getFileName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taPlatform*)ths)->getFileName(arg[1]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taPlatform_getFilePath_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taPlatform*)ths)->getFilePath(arg[1]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taPlatform_posFinalSep_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPlatform*)ths)->posFinalSep(arg[1]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taPlatform_mkdir_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPlatform*)ths)->mkdir(arg[1]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taPlatform_exec_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPlatform*)ths)->exec(arg[1]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taPlatform_sleep_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPlatform*)ths)->sleep((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPlatform_msleep_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPlatform*)ths)->msleep((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taAtomic_Increment_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    int refarg_0=(int)*arg[1];
    rval=new cssInt((int)((taAtomic*)ths)->Increment(refarg_0));
    *arg[1]=(Int)refarg_0;
    return rval;}
  static cssEl* cssElCFun_taAtomic_Decrement_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    int refarg_0=(int)*arg[1];
    rval=new cssInt((int)((taAtomic*)ths)->Decrement(refarg_0));
    *arg[1]=(Int)refarg_0;
    return rval;}
  static cssEl* cssElCFun_taAtomic_TestAndSet_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    int refarg_0=(int)*arg[1];
    rval=new cssInt((int)((taAtomic*)ths)->TestAndSet(refarg_0, (int)*arg[2], (int)*arg[3]));
    *arg[1]=(Int)refarg_0;
    return rval;}
  static cssEl* cssElCFun_taAtomic_GetNextValue_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 3) {
      int refarg_0=(int)*arg[1];    int refarg_1=(int)*arg[2];
    rval=new cssInt((int)((taAtomic*)ths)->GetNextValue(refarg_0, refarg_1, (int)*arg[3]));    *arg[1]=(Int)refarg_0;    *arg[2]=(Int)refarg_1;
}
    if(na == 4) {
      int refarg_0=(int)*arg[1];    int refarg_1=(int)*arg[2];
    rval=new cssInt((int)((taAtomic*)ths)->GetNextValue(refarg_0, refarg_1, (int)*arg[3], (int)*arg[4]));    *arg[1]=(Int)refarg_0;    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taAtomic_GetPrevValue_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 3) {
      int refarg_0=(int)*arg[1];    int refarg_1=(int)*arg[2];
    rval=new cssInt((int)((taAtomic*)ths)->GetPrevValue(refarg_0, refarg_1, (int)*arg[3]));    *arg[1]=(Int)refarg_0;    *arg[2]=(Int)refarg_1;
}
    if(na == 4) {
      int refarg_0=(int)*arg[1];    int refarg_1=(int)*arg[2];
    rval=new cssInt((int)((taAtomic*)ths)->GetPrevValue(refarg_0, refarg_1, (int)*arg[3], (int)*arg[4]));    *arg[1]=(Int)refarg_0;    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_NameVar_GetStr_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((NameVar*)ths)->GetStr());
    return rval;}
  static cssEl* cssElCFun_NameVar_SetFmStr_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((NameVar*)ths)->SetFmStr(arg[1]->GetStr());
    return rval;}
  static cssEl* cssElCFun_iFont_bold_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((iFont*)ths)->bold());
    return rval;}
  static cssEl* cssElCFun_iFont_setBold_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((iFont*)ths)->setBold((bool)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_iFont_italic_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((iFont*)ths)->italic());
    return rval;}
  static cssEl* cssElCFun_iFont_setItalic_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((iFont*)ths)->setItalic((bool)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_iFont_setPointSize_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((iFont*)ths)->setPointSize((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_iFont_setStretch_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((iFont*)ths)->setStretch((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_iFont_underline_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((iFont*)ths)->underline());
    return rval;}
  static cssEl* cssElCFun_iFont_setUnderline_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((iFont*)ths)->setUnderline((bool)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_iFont_copy_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((iFont*)ths)->copy(*(iFont*)arg[1]->GetVoidPtrOfType(&TA_iFont));
    return rval;}
  static cssEl* cssElCFun_iFont_equals_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((iFont*)ths)->equals(*(iFont*)arg[1]->GetVoidPtrOfType(&TA_iFont)));
    return rval;}
  static cssEl* cssElCFun_iFont_setRawName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((iFont*)ths)->setRawName((const char*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_InRange_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList_impl*)ths)->InRange((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_Alloc_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList_impl*)ths)->Alloc((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_AllocExact_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList_impl*)ths)->AllocExact((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_Reset_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList_impl*)ths)->Reset();
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_IsEmpty_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList_impl*)ths)->IsEmpty());
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_BuildHashTable_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList_impl*)ths)->BuildHashTable((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_RemoveName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList_impl*)ths)->RemoveName(arg[1]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_RemoveIdx_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList_impl*)ths)->RemoveIdx((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_RemoveLast_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList_impl*)ths)->RemoveLast());
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_RemoveAll_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList_impl*)ths)->RemoveAll();
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_MoveIdx_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList_impl*)ths)->MoveIdx((int)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_SwapIdx_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList_impl*)ths)->SwapIdx((int)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_PopAll_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList_impl*)ths)->PopAll();
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_Permute_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList_impl*)ths)->Permute();
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_Sort_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((taPtrList_impl*)ths)->Sort();}
    if(na == 1) {
      ((taPtrList_impl*)ths)->Sort((bool)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_FirstEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    taListItr refarg_0=(taListItr)*arg[1];
    rval=new cssTA((void*)((taPtrList_impl*)ths)->FirstEl(refarg_0), 1, &TA_void);
    *arg[1]=(Int)refarg_0;
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_NextEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    taListItr refarg_0=(taListItr)*arg[1];
    rval=new cssTA((void*)((taPtrList_impl*)ths)->NextEl(refarg_0), 1, &TA_void);
    *arg[1]=(Int)refarg_0;
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_Duplicate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList_impl*)ths)->Duplicate(*(taPtrList_impl*)arg[1]->GetVoidPtrOfType(&TA_taPtrList_impl));
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_DupeUniqNameNew_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList_impl*)ths)->DupeUniqNameNew(*(taPtrList_impl*)arg[1]->GetVoidPtrOfType(&TA_taPtrList_impl));
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_DupeUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList_impl*)ths)->DupeUniqNameOld(*(taPtrList_impl*)arg[1]->GetVoidPtrOfType(&TA_taPtrList_impl));
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_Stealth_Borrow_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList_impl*)ths)->Stealth_Borrow(*(taPtrList_impl*)arg[1]->GetVoidPtrOfType(&TA_taPtrList_impl));
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_Borrow_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList_impl*)ths)->Borrow(*(taPtrList_impl*)arg[1]->GetVoidPtrOfType(&TA_taPtrList_impl));
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_BorrowUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList_impl*)ths)->BorrowUnique(*(taPtrList_impl*)arg[1]->GetVoidPtrOfType(&TA_taPtrList_impl));
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_BorrowUniqNameNew_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList_impl*)ths)->BorrowUniqNameNew(*(taPtrList_impl*)arg[1]->GetVoidPtrOfType(&TA_taPtrList_impl));
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_BorrowUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList_impl*)ths)->BorrowUniqNameOld(*(taPtrList_impl*)arg[1]->GetVoidPtrOfType(&TA_taPtrList_impl));
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_Copy_Common_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList_impl*)ths)->Copy_Common(*(taPtrList_impl*)arg[1]->GetVoidPtrOfType(&TA_taPtrList_impl));
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_Copy_Duplicate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList_impl*)ths)->Copy_Duplicate(*(taPtrList_impl*)arg[1]->GetVoidPtrOfType(&TA_taPtrList_impl));
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_Copy_Borrow_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList_impl*)ths)->Copy_Borrow(*(taPtrList_impl*)arg[1]->GetVoidPtrOfType(&TA_taPtrList_impl));
    return rval;}
  static cssEl* cssElCFun_taPtrList_impl_List_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((taPtrList_impl*)ths)->List();}
    if(na == 1) {
      ostream& refarg_0=*(ostream*)arg[1]->GetVoidPtrOfType(&TA_ostream);
    ((taPtrList_impl*)ths)->List(refarg_0);}
    return rval;}
  static cssEl* cssElCFun_taHashEl_Initialize_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taHashEl*)ths)->Initialize();
    return rval;}
taPtrList<taHashEl>*		 TAI_taPtrList_taHashEl_=NULL;
  static cssEl* cssElCFun_taPtrList_taHashEl__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<taHashEl>*)ths)->SafeEl((int)*arg[1]), 1, &TA_taHashEl);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<taHashEl>*)ths)->FastEl((int)*arg[1]), 1, &TA_taHashEl);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__Edit_El_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<taHashEl>*)ths)->Edit_El((taHashEl*)(void*)*arg[1]), 1, &TA_taHashEl);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__FindName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA((void*)((taPtrList<taHashEl>*)ths)->FindName(arg[1]->GetStr()), 1, &TA_taHashEl);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA((void*)((taPtrList<taHashEl>*)ths)->FindName(arg[1]->GetStr(), refarg_1), 1, &TA_taHashEl);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<taHashEl>*)ths)->Pop(), 1, &TA_taHashEl);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<taHashEl>*)ths)->Peek(), 1, &TA_taHashEl);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__AddUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<taHashEl>*)ths)->AddUniqNameOld((taHashEl*)(void*)*arg[1]), 1, &TA_taHashEl);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__LinkUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<taHashEl>*)ths)->LinkUniqNameOld((taHashEl*)(void*)*arg[1]), 1, &TA_taHashEl);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__FindEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashEl>*)ths)->FindEl((const taHashEl*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__AddOnly_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList<taHashEl>*)ths)->AddOnly((taHashEl*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__Add_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList<taHashEl>*)ths)->Add((taHashEl*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__AddUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList<taHashEl>*)ths)->AddUnique((taHashEl*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__AddUniqNameNew_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList<taHashEl>*)ths)->AddUniqNameNew((taHashEl*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__Insert_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList<taHashEl>*)ths)->Insert((taHashEl*)(void*)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__ReplaceEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList<taHashEl>*)ths)->ReplaceEl((taHashEl*)(void*)*arg[1], (taHashEl*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__ReplaceName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList<taHashEl>*)ths)->ReplaceName(arg[1]->GetStr(), (taHashEl*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__ReplaceIdx_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList<taHashEl>*)ths)->ReplaceIdx((int)*arg[1], (taHashEl*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__RemoveEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList<taHashEl>*)ths)->RemoveEl((taHashEl*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__DuplicateEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList<taHashEl>*)ths)->DuplicateEl((taHashEl*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__Link_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList<taHashEl>*)ths)->Link((taHashEl*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__LinkUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList<taHashEl>*)ths)->LinkUnique((taHashEl*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__LinkUniqNameNew_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList<taHashEl>*)ths)->LinkUniqNameNew((taHashEl*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__InsertLink_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssBool(((taPtrList<taHashEl>*)ths)->InsertLink((taHashEl*)(void*)*arg[1]));}
    if(na == 2) {
      rval=new cssBool(((taPtrList<taHashEl>*)ths)->InsertLink((taHashEl*)(void*)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__ReplaceLinkEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList<taHashEl>*)ths)->ReplaceLinkEl((taHashEl*)(void*)*arg[1], (taHashEl*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__ReplaceLinkName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList<taHashEl>*)ths)->ReplaceLinkName(arg[1]->GetStr(), (taHashEl*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__ReplaceLinkIdx_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList<taHashEl>*)ths)->ReplaceLinkIdx((int)*arg[1], (taHashEl*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__Push_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList<taHashEl>*)ths)->Push((taHashEl*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__MoveEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList<taHashEl>*)ths)->MoveEl((taHashEl*)(void*)*arg[1], (taHashEl*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__Transfer_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList<taHashEl>*)ths)->Transfer((taHashEl*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__MoveBefore_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList<taHashEl>*)ths)->MoveBefore((taHashEl*)(void*)*arg[1], (taHashEl*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashEl__MoveAfter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList<taHashEl>*)ths)->MoveAfter((taHashEl*)(void*)*arg[1], (taHashEl*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taHashBucket_FindHashEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taHashBucket*)ths)->FindHashEl((taHashVal)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taHashBucket_FindListEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taHashBucket*)ths)->FindListEl((taHashVal)*arg[1]));
    return rval;}
taPtrList<taHashBucket>*		 TAI_taPtrList_taHashBucket_=NULL;
  static cssEl* cssElCFun_taPtrList_taHashBucket__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<taHashBucket>*)ths)->SafeEl((int)*arg[1]), 1, &TA_taHashBucket);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<taHashBucket>*)ths)->FastEl((int)*arg[1]), 1, &TA_taHashBucket);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__Edit_El_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<taHashBucket>*)ths)->Edit_El((taHashBucket*)(void*)*arg[1]), 1, &TA_taHashBucket);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__FindName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA((void*)((taPtrList<taHashBucket>*)ths)->FindName(arg[1]->GetStr()), 1, &TA_taHashBucket);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA((void*)((taPtrList<taHashBucket>*)ths)->FindName(arg[1]->GetStr(), refarg_1), 1, &TA_taHashBucket);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<taHashBucket>*)ths)->Pop(), 1, &TA_taHashBucket);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<taHashBucket>*)ths)->Peek(), 1, &TA_taHashBucket);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__AddUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<taHashBucket>*)ths)->AddUniqNameOld((taHashBucket*)(void*)*arg[1]), 1, &TA_taHashBucket);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__LinkUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<taHashBucket>*)ths)->LinkUniqNameOld((taHashBucket*)(void*)*arg[1]), 1, &TA_taHashBucket);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__FindEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taHashBucket>*)ths)->FindEl((const taHashBucket*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__AddOnly_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList<taHashBucket>*)ths)->AddOnly((taHashBucket*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__Add_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList<taHashBucket>*)ths)->Add((taHashBucket*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__AddUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList<taHashBucket>*)ths)->AddUnique((taHashBucket*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__AddUniqNameNew_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList<taHashBucket>*)ths)->AddUniqNameNew((taHashBucket*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__Insert_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList<taHashBucket>*)ths)->Insert((taHashBucket*)(void*)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__ReplaceEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList<taHashBucket>*)ths)->ReplaceEl((taHashBucket*)(void*)*arg[1], (taHashBucket*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__ReplaceName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList<taHashBucket>*)ths)->ReplaceName(arg[1]->GetStr(), (taHashBucket*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__ReplaceIdx_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList<taHashBucket>*)ths)->ReplaceIdx((int)*arg[1], (taHashBucket*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__RemoveEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList<taHashBucket>*)ths)->RemoveEl((taHashBucket*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__DuplicateEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList<taHashBucket>*)ths)->DuplicateEl((taHashBucket*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__Link_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList<taHashBucket>*)ths)->Link((taHashBucket*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__LinkUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList<taHashBucket>*)ths)->LinkUnique((taHashBucket*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__LinkUniqNameNew_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList<taHashBucket>*)ths)->LinkUniqNameNew((taHashBucket*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__InsertLink_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssBool(((taPtrList<taHashBucket>*)ths)->InsertLink((taHashBucket*)(void*)*arg[1]));}
    if(na == 2) {
      rval=new cssBool(((taPtrList<taHashBucket>*)ths)->InsertLink((taHashBucket*)(void*)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__ReplaceLinkEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList<taHashBucket>*)ths)->ReplaceLinkEl((taHashBucket*)(void*)*arg[1], (taHashBucket*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__ReplaceLinkName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList<taHashBucket>*)ths)->ReplaceLinkName(arg[1]->GetStr(), (taHashBucket*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__ReplaceLinkIdx_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList<taHashBucket>*)ths)->ReplaceLinkIdx((int)*arg[1], (taHashBucket*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__Push_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList<taHashBucket>*)ths)->Push((taHashBucket*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__MoveEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList<taHashBucket>*)ths)->MoveEl((taHashBucket*)(void*)*arg[1], (taHashBucket*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__Transfer_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList<taHashBucket>*)ths)->Transfer((taHashBucket*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__MoveBefore_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList<taHashBucket>*)ths)->MoveBefore((taHashBucket*)(void*)*arg[1], (taHashBucket*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taHashBucket__MoveAfter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList<taHashBucket>*)ths)->MoveAfter((taHashBucket*)(void*)*arg[1], (taHashBucket*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taHashTable_Alloc_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taHashTable*)ths)->Alloc((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taHashTable_RemoveAll_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taHashTable*)ths)->RemoveAll();
    return rval;}
  static cssEl* cssElCFun_taHashTable_Add_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taHashTable*)ths)->Add((taHashVal)*arg[1], (int)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_taHashTable_FindListEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taHashTable*)ths)->FindListEl((taHashVal)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taHashTable_UpdateIndex_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taHashTable*)ths)->UpdateIndex(arg[1]->GetStr(), (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taHashTable_RemoveHash_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taHashTable*)ths)->RemoveHash((taHashVal)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taHashTable_RemoveString_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taHashTable*)ths)->RemoveString(arg[1]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taHashTable_InitList__stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taHashTable*)ths)->InitList_();
    return rval;}
  static cssEl* cssElCFun_taArray_impl_InRange_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taArray_impl*)ths)->InRange((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_impl_Alloc_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_impl*)ths)->Alloc((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_impl_Reset_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_impl*)ths)->Reset();
    return rval;}
  static cssEl* cssElCFun_taArray_impl_Equal__stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taArray_impl*)ths)->Equal_(*(taArray_impl*)arg[1]->GetVoidPtrOfType(&TA_taArray_impl)));
    return rval;}
  static cssEl* cssElCFun_taArray_impl_BlankEl__stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taArray_impl*)ths)->BlankEl_(), 1, &TA_void);
    return rval;}
  static cssEl* cssElCFun_taArray_impl_SetSize_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_impl*)ths)->SetSize((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_impl_AddBlank_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((taArray_impl*)ths)->AddBlank();}
    if(na == 1) {
      ((taArray_impl*)ths)->AddBlank((int)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_taArray_impl_RemoveIdx_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssBool(((taArray_impl*)ths)->RemoveIdx((uint)*arg[1]));}
    if(na == 2) {
      rval=new cssBool(((taArray_impl*)ths)->RemoveIdx((uint)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taArray_impl_MoveIdx_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taArray_impl*)ths)->MoveIdx((int)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taArray_impl_SwapIdx_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taArray_impl*)ths)->SwapIdx((int)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taArray_impl_Permute_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_impl*)ths)->Permute();
    return rval;}
  static cssEl* cssElCFun_taArray_impl_Sort_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((taArray_impl*)ths)->Sort();}
    if(na == 1) {
      ((taArray_impl*)ths)->Sort((bool)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_taArray_impl_ShiftLeft_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_impl*)ths)->ShiftLeft((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_impl_ShiftLeftPct_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_impl*)ths)->ShiftLeftPct((float)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_impl_V_Flip_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray_impl*)ths)->V_Flip((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_impl_Duplicate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_impl*)ths)->Duplicate(*(taArray_impl*)arg[1]->GetVoidPtrOfType(&TA_taArray_impl));
    return rval;}
  static cssEl* cssElCFun_taArray_impl_DupeUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_impl*)ths)->DupeUnique(*(taArray_impl*)arg[1]->GetVoidPtrOfType(&TA_taArray_impl));
    return rval;}
  static cssEl* cssElCFun_taArray_impl_Copy_Common_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_impl*)ths)->Copy_Common(*(taArray_impl*)arg[1]->GetVoidPtrOfType(&TA_taArray_impl));
    return rval;}
  static cssEl* cssElCFun_taArray_impl_Copy_Duplicate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_impl*)ths)->Copy_Duplicate(*(taArray_impl*)arg[1]->GetVoidPtrOfType(&TA_taArray_impl));
    return rval;}
  static cssEl* cssElCFun_taArray_impl_CopyVals_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((taArray_impl*)ths)->CopyVals(*(taArray_impl*)arg[1]->GetVoidPtrOfType(&TA_taArray_impl));}
    if(na == 2) {
      ((taArray_impl*)ths)->CopyVals(*(taArray_impl*)arg[1]->GetVoidPtrOfType(&TA_taArray_impl), (int)*arg[2]);}
    if(na == 3) {
      ((taArray_impl*)ths)->CopyVals(*(taArray_impl*)arg[1]->GetVoidPtrOfType(&TA_taArray_impl), (int)*arg[2], (int)*arg[3]);}
    if(na == 4) {
      ((taArray_impl*)ths)->CopyVals(*(taArray_impl*)arg[1]->GetVoidPtrOfType(&TA_taArray_impl), (int)*arg[2], (int)*arg[3], (int)*arg[4]);}
    return rval;}
  static cssEl* cssElCFun_taArray_impl_List_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((taArray_impl*)ths)->List();}
    if(na == 1) {
      ostream& refarg_0=*(ostream*)arg[1]->GetVoidPtrOfType(&TA_ostream);
    ((taArray_impl*)ths)->List(refarg_0);}
    return rval;}
  static cssEl* cssElCFun_taArray_impl_InitFromString_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_impl*)ths)->InitFromString(arg[1]->GetStr());
    return rval;}
  static cssEl* cssElCFun_taFixedArray_impl_InRange_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taFixedArray_impl*)ths)->InRange((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taFixedArray_impl_Reset_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taFixedArray_impl*)ths)->Reset();
    return rval;}
  static cssEl* cssElCFun_taFixedArray_impl_SetSize_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taFixedArray_impl*)ths)->SetSize((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taFixedArray_int__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taFixedArray<int>*)ths)->SafeEl((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taFixedArray_int__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taFixedArray<int>*)ths)->FastEl((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taFixedArray_int__Set_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taFixedArray<int>*)ths)->Set((int)*arg[1], (int)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_taFixedArray_int__Add_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taFixedArray<int>*)ths)->Add((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taFixedArray_int__AddUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taFixedArray<int>*)ths)->AddUnique((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taFixedArray_int__Insert_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ((taFixedArray<int>*)ths)->Insert((int)*arg[1], (int)*arg[2]);}
    if(na == 3) {
      ((taFixedArray<int>*)ths)->Insert((int)*arg[1], (int)*arg[2], (int)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_taFixedArray_int__Find_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taFixedArray<int>*)ths)->Find((int)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((taFixedArray<int>*)ths)->Find((int)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taFiler_New_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA((void*)((taFiler*)ths)->New(), 1, &TA_taFiler);}
    if(na == 1) {
      rval=new cssTA((void*)((taFiler*)ths)->New(arg[1]->GetStr()), 1, &TA_taFiler);}
    if(na == 2) {
      rval=new cssTA((void*)((taFiler*)ths)->New(arg[1]->GetStr(), arg[2]->GetStr()), 1, &TA_taFiler);}
    if(na == 3) {
      rval=new cssTA((void*)((taFiler*)ths)->New(arg[1]->GetStr(), arg[2]->GetStr(), (taFiler::FilerFlags)(int)*arg[3]), 1, &TA_taFiler);}
    if(na == 4) {
      rval=new cssTA((void*)((taFiler*)ths)->New(arg[1]->GetStr(), arg[2]->GetStr(), (taFiler::FilerFlags)(int)*arg[3], arg[4]->GetStr()), 1, &TA_taFiler);}
    return rval;}
  static cssEl* cssElCFun_taFiler_compressEnabled_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taFiler*)ths)->compressEnabled());
    return rval;}
  static cssEl* cssElCFun_taFiler_compressReq_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taFiler*)ths)->compressReq());
    return rval;}
  static cssEl* cssElCFun_taFiler_isOpen_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taFiler*)ths)->isOpen());
    return rval;}
  static cssEl* cssElCFun_taFiler_isCompressed_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taFiler*)ths)->isCompressed());
    return rval;}
  static cssEl* cssElCFun_taFiler_fileName_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taFiler*)ths)->fileName());
    return rval;}
  static cssEl* cssElCFun_taFiler_setFileName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taFiler*)ths)->setFileName(arg[1]->GetStr());
    return rval;}
  static cssEl* cssElCFun_taFiler_dir_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taFiler*)ths)->dir());
    return rval;}
  static cssEl* cssElCFun_taFiler_fname_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taFiler*)ths)->fname());
    return rval;}
  static cssEl* cssElCFun_taFiler_setFname_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taFiler*)ths)->setFname(arg[1]->GetStr());
    return rval;}
  static cssEl* cssElCFun_taFiler_open_write_exist_check_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taFiler*)ths)->open_write_exist_check());
    return rval;}
  static cssEl* cssElCFun_taFiler_Open_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taFiler*)ths)->Open(), 1, &TA_istream);
    return rval;}
  static cssEl* cssElCFun_taFiler_Save_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taFiler*)ths)->Save(), 1, &TA_ostream);
    return rval;}
  static cssEl* cssElCFun_taFiler_SaveAs_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taFiler*)ths)->SaveAs(), 1, &TA_ostream);
    return rval;}
  static cssEl* cssElCFun_taFiler_Append_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taFiler*)ths)->Append(), 1, &TA_ostream);
    return rval;}
  static cssEl* cssElCFun_taFiler_Close_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taFiler*)ths)->Close();
    return rval;}
  static cssEl* cssElCFun_taFiler_GetFileName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taFiler*)ths)->GetFileName((taFiler::FileOperation)(int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taFiler_FixFileName_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taFiler*)ths)->FixFileName();
    return rval;}
  static cssEl* cssElCFun_rgb_t_toInt_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((rgb_t*)ths)->toInt());
    return rval;}
  static cssEl* cssElCFun_rgb_t_setInt_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((rgb_t*)ths)->setInt((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_rgb_t_toString_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((rgb_t*)ths)->toString());
    return rval;}
  static cssEl* cssElCFun_rgb_t_setString_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((rgb_t*)ths)->setString(arg[1]->GetStr());
    return rval;}
taDataLinkItr*		 TAI_taDataLinkItr=NULL;
taBase**		 TAI_TAPtr=NULL;
taPlainArray<taString>*		 TAI_taPlainArray_taString_=NULL;
  static cssEl* cssElCFun_taPlainArray_taString__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taPlainArray<taString>*)ths)->SafeEl((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPlainArray_taString__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taPlainArray<taString>*)ths)->FastEl((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPlainArray_taString__RevEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taPlainArray<taString>*)ths)->RevEl((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPlainArray_taString__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taPlainArray<taString>*)ths)->Pop());
    return rval;}
  static cssEl* cssElCFun_taPlainArray_taString__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taPlainArray<taString>*)ths)->Peek());
    return rval;}
  static cssEl* cssElCFun_taPlainArray_taString__Set_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPlainArray<taString>*)ths)->Set((int)*arg[1], arg[2]->GetStr());
    return rval;}
  static cssEl* cssElCFun_taPlainArray_taString__Add_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPlainArray<taString>*)ths)->Add(arg[1]->GetStr());
    return rval;}
  static cssEl* cssElCFun_taPlainArray_taString__AddUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPlainArray<taString>*)ths)->AddUnique(arg[1]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taPlainArray_taString__Push_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPlainArray<taString>*)ths)->Push(arg[1]->GetStr());
    return rval;}
  static cssEl* cssElCFun_taPlainArray_taString__Insert_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ((taPlainArray<taString>*)ths)->Insert(arg[1]->GetStr(), (int)*arg[2]);}
    if(na == 3) {
      ((taPlainArray<taString>*)ths)->Insert(arg[1]->GetStr(), (int)*arg[2], (int)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_taPlainArray_taString__FindEl_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taPlainArray<taString>*)ths)->FindEl(arg[1]->GetStr()));}
    if(na == 2) {
      rval=new cssInt((int)((taPlainArray<taString>*)ths)->FindEl(arg[1]->GetStr(), (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taPlainArray_taString__RemoveEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPlainArray<taString>*)ths)->RemoveEl(arg[1]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_String_PArray_FindContains_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((String_PArray*)ths)->FindContains(arg[1]->GetStr()));}
    if(na == 2) {
      rval=new cssInt((int)((String_PArray*)ths)->FindContains(arg[1]->GetStr(), (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_String_PArray_AsString_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssString(((String_PArray*)ths)->AsString());}
    if(na == 1) {
      rval=new cssString(((String_PArray*)ths)->AsString(arg[1]->GetStr()));}
    return rval;}
  static cssEl* cssElCFun_String_PArray_SetFromString_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((String_PArray*)ths)->SetFromString(arg[1]->GetStr());}
    if(na == 2) {
      ((String_PArray*)ths)->SetFromString(arg[1]->GetStr(), arg[2]->GetStr());}
    return rval;}
taPlainArray<int>*		 TAI_taPlainArray_int_=NULL;
  static cssEl* cssElCFun_taPlainArray_int__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPlainArray<int>*)ths)->SafeEl((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPlainArray_int__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPlainArray<int>*)ths)->FastEl((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPlainArray_int__RevEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPlainArray<int>*)ths)->RevEl((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPlainArray_int__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPlainArray<int>*)ths)->Pop());
    return rval;}
  static cssEl* cssElCFun_taPlainArray_int__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPlainArray<int>*)ths)->Peek());
    return rval;}
  static cssEl* cssElCFun_taPlainArray_int__Set_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPlainArray<int>*)ths)->Set((int)*arg[1], (int)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_taPlainArray_int__Add_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPlainArray<int>*)ths)->Add((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPlainArray_int__AddUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPlainArray<int>*)ths)->AddUnique((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPlainArray_int__Push_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPlainArray<int>*)ths)->Push((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPlainArray_int__Insert_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ((taPlainArray<int>*)ths)->Insert((int)*arg[1], (int)*arg[2]);}
    if(na == 3) {
      ((taPlainArray<int>*)ths)->Insert((int)*arg[1], (int)*arg[2], (int)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_taPlainArray_int__FindEl_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taPlainArray<int>*)ths)->FindEl((int)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((taPlainArray<int>*)ths)->FindEl((int)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taPlainArray_int__RemoveEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPlainArray<int>*)ths)->RemoveEl((int)*arg[1]));
    return rval;}
taPlainArray<NameVar>*		 TAI_taPlainArray_NameVar_=NULL;
  static cssEl* cssElCFun_taPlainArray_NameVar__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPlainArray<NameVar>*)ths)->SafeEl((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPlainArray_NameVar__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPlainArray<NameVar>*)ths)->FastEl((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPlainArray_NameVar__RevEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPlainArray<NameVar>*)ths)->RevEl((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPlainArray_NameVar__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taPlainArray<NameVar>*)ths)->Pop();
    return rval;}
  static cssEl* cssElCFun_taPlainArray_NameVar__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taPlainArray<NameVar>*)ths)->Peek();
    return rval;}
  static cssEl* cssElCFun_taPlainArray_NameVar__Set_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPlainArray<NameVar>*)ths)->Set((int)*arg[1], *(NameVar*)arg[2]->GetVoidPtrOfType(&TA_NameVar));
    return rval;}
  static cssEl* cssElCFun_taPlainArray_NameVar__Add_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPlainArray<NameVar>*)ths)->Add(*(NameVar*)arg[1]->GetVoidPtrOfType(&TA_NameVar));
    return rval;}
  static cssEl* cssElCFun_taPlainArray_NameVar__AddUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPlainArray<NameVar>*)ths)->AddUnique(*(NameVar*)arg[1]->GetVoidPtrOfType(&TA_NameVar)));
    return rval;}
  static cssEl* cssElCFun_taPlainArray_NameVar__Push_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPlainArray<NameVar>*)ths)->Push(*(NameVar*)arg[1]->GetVoidPtrOfType(&TA_NameVar));
    return rval;}
  static cssEl* cssElCFun_taPlainArray_NameVar__Insert_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ((taPlainArray<NameVar>*)ths)->Insert(*(NameVar*)arg[1]->GetVoidPtrOfType(&TA_NameVar), (int)*arg[2]);}
    if(na == 3) {
      ((taPlainArray<NameVar>*)ths)->Insert(*(NameVar*)arg[1]->GetVoidPtrOfType(&TA_NameVar), (int)*arg[2], (int)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_taPlainArray_NameVar__FindEl_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taPlainArray<NameVar>*)ths)->FindEl(*(NameVar*)arg[1]->GetVoidPtrOfType(&TA_NameVar)));}
    if(na == 2) {
      rval=new cssInt((int)((taPlainArray<NameVar>*)ths)->FindEl(*(NameVar*)arg[1]->GetVoidPtrOfType(&TA_NameVar), (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taPlainArray_NameVar__RemoveEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPlainArray<NameVar>*)ths)->RemoveEl(*(NameVar*)arg[1]->GetVoidPtrOfType(&TA_NameVar)));
    return rval;}
  static cssEl* cssElCFun_NameVar_PArray_FindName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((NameVar_PArray*)ths)->FindName(arg[1]->GetStr()));}
    if(na == 2) {
      rval=new cssInt((int)((NameVar_PArray*)ths)->FindName(arg[1]->GetStr(), (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_NameVar_PArray_FindNameContains_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((NameVar_PArray*)ths)->FindNameContains(arg[1]->GetStr()));}
    if(na == 2) {
      rval=new cssInt((int)((NameVar_PArray*)ths)->FindNameContains(arg[1]->GetStr(), (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_NameVar_PArray_FindValue_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((NameVar_PArray*)ths)->FindValue(arg[1]->GetVar()));}
    if(na == 2) {
      rval=new cssInt((int)((NameVar_PArray*)ths)->FindValue(arg[1]->GetVar(), (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_NameVar_PArray_FindValueContains_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((NameVar_PArray*)ths)->FindValueContains(arg[1]->GetStr()));}
    if(na == 2) {
      rval=new cssInt((int)((NameVar_PArray*)ths)->FindValueContains(arg[1]->GetStr(), (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_NameVar_PArray_GetVal_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssVariant(((NameVar_PArray*)ths)->GetVal(arg[1]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_NameVar_PArray_GetAllVals_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    String_PArray& refarg_1=*(String_PArray*)arg[2]->GetVoidPtrOfType(&TA_String_PArray);
    rval=new cssBool(((NameVar_PArray*)ths)->GetAllVals(arg[1]->GetStr(), refarg_1));
    return rval;}
  static cssEl* cssElCFun_NameVar_PArray_SetVal_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((NameVar_PArray*)ths)->SetVal(arg[1]->GetStr(), arg[2]->GetVar()));
    return rval;}
  static cssEl* cssElCFun_NameVar_PArray_AsString_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssString(((NameVar_PArray*)ths)->AsString());}
    if(na == 1) {
      rval=new cssString(((NameVar_PArray*)ths)->AsString(arg[1]->GetStr()));}
    return rval;}
taPtrList<DumpFileCvt>*		 TAI_taPtrList_DumpFileCvt_=NULL;
  static cssEl* cssElCFun_taPtrList_DumpFileCvt__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<DumpFileCvt>*)ths)->SafeEl((int)*arg[1]), 1, &TA_DumpFileCvt);
    return rval;}
  static cssEl* cssElCFun_taPtrList_DumpFileCvt__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<DumpFileCvt>*)ths)->FastEl((int)*arg[1]), 1, &TA_DumpFileCvt);
    return rval;}
  static cssEl* cssElCFun_taPtrList_DumpFileCvt__Edit_El_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<DumpFileCvt>*)ths)->Edit_El((DumpFileCvt*)(void*)*arg[1]), 1, &TA_DumpFileCvt);
    return rval;}
  static cssEl* cssElCFun_taPtrList_DumpFileCvt__FindName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA((void*)((taPtrList<DumpFileCvt>*)ths)->FindName(arg[1]->GetStr()), 1, &TA_DumpFileCvt);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA((void*)((taPtrList<DumpFileCvt>*)ths)->FindName(arg[1]->GetStr(), refarg_1), 1, &TA_DumpFileCvt);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taPtrList_DumpFileCvt__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<DumpFileCvt>*)ths)->Pop(), 1, &TA_DumpFileCvt);
    return rval;}
  static cssEl* cssElCFun_taPtrList_DumpFileCvt__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<DumpFileCvt>*)ths)->Peek(), 1, &TA_DumpFileCvt);
    return rval;}
  static cssEl* cssElCFun_taPtrList_DumpFileCvt__AddUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<DumpFileCvt>*)ths)->AddUniqNameOld((DumpFileCvt*)(void*)*arg[1]), 1, &TA_DumpFileCvt);
    return rval;}
  static cssEl* cssElCFun_taPtrList_DumpFileCvt__LinkUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taPtrList<DumpFileCvt>*)ths)->LinkUniqNameOld((DumpFileCvt*)(void*)*arg[1]), 1, &TA_DumpFileCvt);
    return rval;}
  static cssEl* cssElCFun_taPtrList_DumpFileCvt__FindEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<DumpFileCvt>*)ths)->FindEl((const DumpFileCvt*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_DumpFileCvt__AddOnly_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList<DumpFileCvt>*)ths)->AddOnly((DumpFileCvt*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_DumpFileCvt__Add_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList<DumpFileCvt>*)ths)->Add((DumpFileCvt*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_DumpFileCvt__AddUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList<DumpFileCvt>*)ths)->AddUnique((DumpFileCvt*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_DumpFileCvt__AddUniqNameNew_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList<DumpFileCvt>*)ths)->AddUniqNameNew((DumpFileCvt*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_DumpFileCvt__Insert_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList<DumpFileCvt>*)ths)->Insert((DumpFileCvt*)(void*)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_DumpFileCvt__ReplaceEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList<DumpFileCvt>*)ths)->ReplaceEl((DumpFileCvt*)(void*)*arg[1], (DumpFileCvt*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_DumpFileCvt__ReplaceName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList<DumpFileCvt>*)ths)->ReplaceName(arg[1]->GetStr(), (DumpFileCvt*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_DumpFileCvt__ReplaceIdx_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList<DumpFileCvt>*)ths)->ReplaceIdx((int)*arg[1], (DumpFileCvt*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_DumpFileCvt__RemoveEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList<DumpFileCvt>*)ths)->RemoveEl((DumpFileCvt*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_DumpFileCvt__DuplicateEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList<DumpFileCvt>*)ths)->DuplicateEl((DumpFileCvt*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_DumpFileCvt__Link_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList<DumpFileCvt>*)ths)->Link((DumpFileCvt*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_DumpFileCvt__LinkUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList<DumpFileCvt>*)ths)->LinkUnique((DumpFileCvt*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_DumpFileCvt__LinkUniqNameNew_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList<DumpFileCvt>*)ths)->LinkUniqNameNew((DumpFileCvt*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_DumpFileCvt__InsertLink_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssBool(((taPtrList<DumpFileCvt>*)ths)->InsertLink((DumpFileCvt*)(void*)*arg[1]));}
    if(na == 2) {
      rval=new cssBool(((taPtrList<DumpFileCvt>*)ths)->InsertLink((DumpFileCvt*)(void*)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taPtrList_DumpFileCvt__ReplaceLinkEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList<DumpFileCvt>*)ths)->ReplaceLinkEl((DumpFileCvt*)(void*)*arg[1], (DumpFileCvt*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_DumpFileCvt__ReplaceLinkName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList<DumpFileCvt>*)ths)->ReplaceLinkName(arg[1]->GetStr(), (DumpFileCvt*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_DumpFileCvt__ReplaceLinkIdx_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList<DumpFileCvt>*)ths)->ReplaceLinkIdx((int)*arg[1], (DumpFileCvt*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_DumpFileCvt__Push_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList<DumpFileCvt>*)ths)->Push((DumpFileCvt*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_DumpFileCvt__MoveEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList<DumpFileCvt>*)ths)->MoveEl((DumpFileCvt*)(void*)*arg[1], (DumpFileCvt*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_DumpFileCvt__Transfer_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList<DumpFileCvt>*)ths)->Transfer((DumpFileCvt*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_DumpFileCvt__MoveBefore_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList<DumpFileCvt>*)ths)->MoveBefore((DumpFileCvt*)(void*)*arg[1], (DumpFileCvt*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_DumpFileCvt__MoveAfter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList<DumpFileCvt>*)ths)->MoveAfter((DumpFileCvt*)(void*)*arg[1], (DumpFileCvt*)(void*)*arg[2]));
    return rval;}
UserDataItemBase*		 TAI_UserDataItemBase=NULL;
  static cssEl* cssElCFun_UserDataItemBase_GetOwner_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((UserDataItemBase*)ths)->GetOwner(), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_UserDataItemBase_isSimple_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((UserDataItemBase*)ths)->isSimple());
    return rval;}
  static cssEl* cssElCFun_UserDataItemBase_valueAsVariant_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssVariant(((UserDataItemBase*)ths)->valueAsVariant());
    return rval;}
  static cssEl* cssElCFun_UserDataItemBase_setValueAsVariant_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((UserDataItemBase*)ths)->setValueAsVariant(arg[1]->GetVar()));
    return rval;}
  static cssEl* cssElCFun_taiMiscCore_New_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA((void*)((taiMiscCore*)ths)->New(), 1, &TA_taiMiscCore);}
    if(na == 1) {
      rval=new cssTA((void*)((taiMiscCore*)ths)->New((QObject*)(void*)*arg[1]), 1, &TA_taiMiscCore);}
    return rval;}
  static cssEl* cssElCFun_taiMiscCore_WaitProc_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taiMiscCore*)ths)->WaitProc();
    return rval;}
  static cssEl* cssElCFun_taiMiscCore_RunPending_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taiMiscCore*)ths)->RunPending());
    return rval;}
  static cssEl* cssElCFun_taiMiscCore_Quit_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((taiMiscCore*)ths)->Quit();}
    if(na == 1) {
      ((taiMiscCore*)ths)->Quit((CancelOp)(int)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_taiMiscCore_OnQuitting_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    CancelOp refarg_0=(CancelOp)(int)*arg[1];
    ((taiMiscCore*)ths)->OnQuitting(refarg_0);
    *arg[1]=(Int)refarg_0;
    return rval;}
  static cssEl* cssElCFun_taiMiscCore_classname_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taiMiscCore*)ths)->classname());
    return rval;}
  static cssEl* cssElCFun_taiMiscCore_Busy__stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taiMiscCore*)ths)->Busy_((bool)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taiMiscCore_CheckConfigResult__stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taiMiscCore*)ths)->CheckConfigResult_((bool)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taVersion_set_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ((taVersion*)ths)->set((ushort)*arg[1], (ushort)*arg[2]);}
    if(na == 3) {
      ((taVersion*)ths)->set((ushort)*arg[1], (ushort)*arg[2], (ushort)*arg[3]);}
    if(na == 4) {
      ((taVersion*)ths)->set((ushort)*arg[1], (ushort)*arg[2], (ushort)*arg[3], (ushort)*arg[4]);}
    return rval;}
  static cssEl* cssElCFun_taVersion_toString_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taVersion*)ths)->toString());
    return rval;}
  static cssEl* cssElCFun_taVersion_Clear_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taVersion*)ths)->Clear();
    return rval;}
taMisc*		 TAI_taMisc=NULL;
  static cssEl* cssElCFun_taMisc_SaveConfig_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taMisc*)ths)->SaveConfig();
    return rval;}
  static cssEl* cssElCFun_taMisc_LoadConfig_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taMisc*)ths)->LoadConfig();
    return rval;}
  static cssEl* cssElCFun_taMisc_SuperCat_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taMisc*)ths)->SuperCat((const char*)*arg[1], (const char*)*arg[2], (const char*)*arg[3], (const char*)*arg[4], (const char*)*arg[5], (const char*)*arg[6], (const char*)*arg[7], (const char*)*arg[8], (const char*)*arg[9]));
    return rval;}
  static cssEl* cssElCFun_taMisc_Error_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((taMisc*)ths)->Error((const char*)*arg[1]);}
    if(na == 2) {
      ((taMisc*)ths)->Error((const char*)*arg[1], (const char*)*arg[2]);}
    if(na == 3) {
      ((taMisc*)ths)->Error((const char*)*arg[1], (const char*)*arg[2], (const char*)*arg[3]);}
    if(na == 4) {
      ((taMisc*)ths)->Error((const char*)*arg[1], (const char*)*arg[2], (const char*)*arg[3], (const char*)*arg[4]);}
    if(na == 5) {
      ((taMisc*)ths)->Error((const char*)*arg[1], (const char*)*arg[2], (const char*)*arg[3], (const char*)*arg[4], (const char*)*arg[5]);}
    if(na == 6) {
      ((taMisc*)ths)->Error((const char*)*arg[1], (const char*)*arg[2], (const char*)*arg[3], (const char*)*arg[4], (const char*)*arg[5], (const char*)*arg[6]);}
    if(na == 7) {
      ((taMisc*)ths)->Error((const char*)*arg[1], (const char*)*arg[2], (const char*)*arg[3], (const char*)*arg[4], (const char*)*arg[5], (const char*)*arg[6], (const char*)*arg[7]);}
    if(na == 8) {
      ((taMisc*)ths)->Error((const char*)*arg[1], (const char*)*arg[2], (const char*)*arg[3], (const char*)*arg[4], (const char*)*arg[5], (const char*)*arg[6], (const char*)*arg[7], (const char*)*arg[8]);}
    if(na == 9) {
      ((taMisc*)ths)->Error((const char*)*arg[1], (const char*)*arg[2], (const char*)*arg[3], (const char*)*arg[4], (const char*)*arg[5], (const char*)*arg[6], (const char*)*arg[7], (const char*)*arg[8], (const char*)*arg[9]);}
    return rval;}
  static cssEl* cssElCFun_taMisc_CheckError_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((taMisc*)ths)->CheckError((const char*)*arg[1]);}
    if(na == 2) {
      ((taMisc*)ths)->CheckError((const char*)*arg[1], (const char*)*arg[2]);}
    if(na == 3) {
      ((taMisc*)ths)->CheckError((const char*)*arg[1], (const char*)*arg[2], (const char*)*arg[3]);}
    if(na == 4) {
      ((taMisc*)ths)->CheckError((const char*)*arg[1], (const char*)*arg[2], (const char*)*arg[3], (const char*)*arg[4]);}
    if(na == 5) {
      ((taMisc*)ths)->CheckError((const char*)*arg[1], (const char*)*arg[2], (const char*)*arg[3], (const char*)*arg[4], (const char*)*arg[5]);}
    if(na == 6) {
      ((taMisc*)ths)->CheckError((const char*)*arg[1], (const char*)*arg[2], (const char*)*arg[3], (const char*)*arg[4], (const char*)*arg[5], (const char*)*arg[6]);}
    if(na == 7) {
      ((taMisc*)ths)->CheckError((const char*)*arg[1], (const char*)*arg[2], (const char*)*arg[3], (const char*)*arg[4], (const char*)*arg[5], (const char*)*arg[6], (const char*)*arg[7]);}
    if(na == 8) {
      ((taMisc*)ths)->CheckError((const char*)*arg[1], (const char*)*arg[2], (const char*)*arg[3], (const char*)*arg[4], (const char*)*arg[5], (const char*)*arg[6], (const char*)*arg[7], (const char*)*arg[8]);}
    if(na == 9) {
      ((taMisc*)ths)->CheckError((const char*)*arg[1], (const char*)*arg[2], (const char*)*arg[3], (const char*)*arg[4], (const char*)*arg[5], (const char*)*arg[6], (const char*)*arg[7], (const char*)*arg[8], (const char*)*arg[9]);}
    return rval;}
  static cssEl* cssElCFun_taMisc_Warning_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((taMisc*)ths)->Warning((const char*)*arg[1]);}
    if(na == 2) {
      ((taMisc*)ths)->Warning((const char*)*arg[1], (const char*)*arg[2]);}
    if(na == 3) {
      ((taMisc*)ths)->Warning((const char*)*arg[1], (const char*)*arg[2], (const char*)*arg[3]);}
    if(na == 4) {
      ((taMisc*)ths)->Warning((const char*)*arg[1], (const char*)*arg[2], (const char*)*arg[3], (const char*)*arg[4]);}
    if(na == 5) {
      ((taMisc*)ths)->Warning((const char*)*arg[1], (const char*)*arg[2], (const char*)*arg[3], (const char*)*arg[4], (const char*)*arg[5]);}
    if(na == 6) {
      ((taMisc*)ths)->Warning((const char*)*arg[1], (const char*)*arg[2], (const char*)*arg[3], (const char*)*arg[4], (const char*)*arg[5], (const char*)*arg[6]);}
    if(na == 7) {
      ((taMisc*)ths)->Warning((const char*)*arg[1], (const char*)*arg[2], (const char*)*arg[3], (const char*)*arg[4], (const char*)*arg[5], (const char*)*arg[6], (const char*)*arg[7]);}
    if(na == 8) {
      ((taMisc*)ths)->Warning((const char*)*arg[1], (const char*)*arg[2], (const char*)*arg[3], (const char*)*arg[4], (const char*)*arg[5], (const char*)*arg[6], (const char*)*arg[7], (const char*)*arg[8]);}
    if(na == 9) {
      ((taMisc*)ths)->Warning((const char*)*arg[1], (const char*)*arg[2], (const char*)*arg[3], (const char*)*arg[4], (const char*)*arg[5], (const char*)*arg[6], (const char*)*arg[7], (const char*)*arg[8], (const char*)*arg[9]);}
    return rval;}
  static cssEl* cssElCFun_taMisc_Choice_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssInt((int)((taMisc*)ths)->Choice());}
    if(na == 1) {
      rval=new cssInt((int)((taMisc*)ths)->Choice((const char*)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((taMisc*)ths)->Choice((const char*)*arg[1], (const char*)*arg[2]));}
    if(na == 3) {
      rval=new cssInt((int)((taMisc*)ths)->Choice((const char*)*arg[1], (const char*)*arg[2], (const char*)*arg[3]));}
    if(na == 4) {
      rval=new cssInt((int)((taMisc*)ths)->Choice((const char*)*arg[1], (const char*)*arg[2], (const char*)*arg[3], (const char*)*arg[4]));}
    if(na == 5) {
      rval=new cssInt((int)((taMisc*)ths)->Choice((const char*)*arg[1], (const char*)*arg[2], (const char*)*arg[3], (const char*)*arg[4], (const char*)*arg[5]));}
    if(na == 6) {
      rval=new cssInt((int)((taMisc*)ths)->Choice((const char*)*arg[1], (const char*)*arg[2], (const char*)*arg[3], (const char*)*arg[4], (const char*)*arg[5], (const char*)*arg[6]));}
    if(na == 7) {
      rval=new cssInt((int)((taMisc*)ths)->Choice((const char*)*arg[1], (const char*)*arg[2], (const char*)*arg[3], (const char*)*arg[4], (const char*)*arg[5], (const char*)*arg[6], (const char*)*arg[7]));}
    if(na == 8) {
      rval=new cssInt((int)((taMisc*)ths)->Choice((const char*)*arg[1], (const char*)*arg[2], (const char*)*arg[3], (const char*)*arg[4], (const char*)*arg[5], (const char*)*arg[6], (const char*)*arg[7], (const char*)*arg[8]));}
    if(na == 9) {
      rval=new cssInt((int)((taMisc*)ths)->Choice((const char*)*arg[1], (const char*)*arg[2], (const char*)*arg[3], (const char*)*arg[4], (const char*)*arg[5], (const char*)*arg[6], (const char*)*arg[7], (const char*)*arg[8], (const char*)*arg[9]));}
    if(na == 10) {
      rval=new cssInt((int)((taMisc*)ths)->Choice((const char*)*arg[1], (const char*)*arg[2], (const char*)*arg[3], (const char*)*arg[4], (const char*)*arg[5], (const char*)*arg[6], (const char*)*arg[7], (const char*)*arg[8], (const char*)*arg[9], (const char*)*arg[10]));}
    return rval;}
  static cssEl* cssElCFun_taMisc_FlushConsole_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taMisc*)ths)->FlushConsole();
    return rval;}
  static cssEl* cssElCFun_taMisc_Busy_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((taMisc*)ths)->Busy();}
    if(na == 1) {
      ((taMisc*)ths)->Busy((bool)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_taMisc_DoneBusy_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taMisc*)ths)->DoneBusy();
    return rval;}
  static cssEl* cssElCFun_taMisc_CheckConfigStart_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((taMisc*)ths)->CheckConfigStart();}
    if(na == 1) {
      ((taMisc*)ths)->CheckConfigStart((bool)*arg[1]);}
    if(na == 2) {
      ((taMisc*)ths)->CheckConfigStart((bool)*arg[1], (bool)*arg[2]);}
    return rval;}
  static cssEl* cssElCFun_taMisc_CheckConfigEnd_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((taMisc*)ths)->CheckConfigEnd();}
    if(na == 1) {
      ((taMisc*)ths)->CheckConfigEnd((bool)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_taMisc_MallocInfo_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ostream& refarg_0=*(ostream*)arg[1]->GetVoidPtrOfType(&TA_ostream);
    ((taMisc*)ths)->MallocInfo(refarg_0);
    return rval;}
  static cssEl* cssElCFun_taMisc_ListAllTokens_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ostream& refarg_0=*(ostream*)arg[1]->GetVoidPtrOfType(&TA_ostream);
    ((taMisc*)ths)->ListAllTokens(refarg_0);
    return rval;}
  static cssEl* cssElCFun_taMisc_TypeToTypeInfoKind_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taMisc*)ths)->TypeToTypeInfoKind((TypeDef*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taMisc_HelpMsg_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((taMisc*)ths)->HelpMsg();}
    if(na == 1) {
      ostream& refarg_0=*(ostream*)arg[1]->GetVoidPtrOfType(&TA_ostream);
    ((taMisc*)ths)->HelpMsg(refarg_0);}
    return rval;}
  static cssEl* cssElCFun_taMisc_AddArgName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taMisc*)ths)->AddArgName(arg[1]->GetStr(), arg[2]->GetStr());
    return rval;}
  static cssEl* cssElCFun_taMisc_AddArgNameDesc_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taMisc*)ths)->AddArgNameDesc(arg[1]->GetStr(), arg[2]->GetStr());
    return rval;}
  static cssEl* cssElCFun_taMisc_UpdateArgs_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taMisc*)ths)->UpdateArgs();
    return rval;}
  static cssEl* cssElCFun_taMisc_CheckArgByName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taMisc*)ths)->CheckArgByName(arg[1]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taMisc_FindArgByName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taMisc*)ths)->FindArgByName(arg[1]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taMisc_GetAllArgsNamed_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    String_PArray& refarg_1=*(String_PArray*)arg[2]->GetVoidPtrOfType(&TA_String_PArray);
    rval=new cssBool(((taMisc*)ths)->GetAllArgsNamed(arg[1]->GetStr(), refarg_1));
    return rval;}
  static cssEl* cssElCFun_taMisc_CheckArgValContains_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taMisc*)ths)->CheckArgValContains(arg[1]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taMisc_FindArgValContains_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taMisc*)ths)->FindArgValContains(arg[1]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taMisc_AddUserDataSchema_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taMisc*)ths)->AddUserDataSchema(arg[1]->GetStr(), (UserDataItemBase*)(void*)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_taMisc_CharToStrArray_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    String_PArray& refarg_0=*(String_PArray*)arg[1]->GetVoidPtrOfType(&TA_String_PArray);
    ((taMisc*)ths)->CharToStrArray(refarg_0, (const char*)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_taMisc_StrArrayToChar_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taMisc*)ths)->StrArrayToChar(*(String_PArray*)arg[1]->GetVoidPtrOfType(&TA_String_PArray)));
    return rval;}
  static cssEl* cssElCFun_taMisc_SpaceLabel_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    taString refarg_0=arg[1]->GetStr();
    ((taMisc*)ths)->SpaceLabel(refarg_0);
    *arg[1]=(String)refarg_0;
    return rval;}
  static cssEl* cssElCFun_taMisc_LeadingZeros_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taMisc*)ths)->LeadingZeros((int)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taMisc_FormatValue_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taMisc*)ths)->FormatValue((float)*arg[1], (int)*arg[2], (int)*arg[3]));
    return rval;}
  static cssEl* cssElCFun_taMisc_StringMaxLen_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taMisc*)ths)->StringMaxLen(arg[1]->GetStr(), (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taMisc_StringEnforceLen_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taMisc*)ths)->StringEnforceLen(arg[1]->GetStr(), (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taMisc_StringCVar_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taMisc*)ths)->StringCVar(arg[1]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taMisc_GetFileFmPath_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taMisc*)ths)->GetFileFmPath(arg[1]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taMisc_GetDirFmPath_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssString(((taMisc*)ths)->GetDirFmPath(arg[1]->GetStr()));}
    if(na == 2) {
      rval=new cssString(((taMisc*)ths)->GetDirFmPath(arg[1]->GetStr(), (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taMisc_GetHomePath_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taMisc*)ths)->GetHomePath());
    return rval;}
  static cssEl* cssElCFun_taMisc_GetCurrentPath_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taMisc*)ths)->GetCurrentPath());
    return rval;}
  static cssEl* cssElCFun_taMisc_SetCurrentPath_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taMisc*)ths)->SetCurrentPath(arg[1]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taMisc_FindFileOnPath_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    String_PArray& refarg_0=*(String_PArray*)arg[1]->GetVoidPtrOfType(&TA_String_PArray);
    rval=new cssString(((taMisc*)ths)->FindFileOnPath(refarg_0, (const char*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taMisc_FindFileOnLoadPath_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taMisc*)ths)->FindFileOnLoadPath((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taMisc_StartRecording_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taMisc*)ths)->StartRecording((ostream*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taMisc_StopRecording_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taMisc*)ths)->StopRecording();
    return rval;}
  static cssEl* cssElCFun_taMisc_RecordScript_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taMisc*)ths)->RecordScript((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taMisc_ScriptRecordAssignment_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taMisc*)ths)->ScriptRecordAssignment((taBase*)(void*)*arg[1], (MemberDef*)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_taMisc_SRIAssignment_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taMisc*)ths)->SRIAssignment((taBase*)(void*)*arg[1], (MemberDef*)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_taMisc_SREAssignment_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taMisc*)ths)->SREAssignment((taBase*)(void*)*arg[1], (MemberDef*)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_taMisc_skip_white_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)arg[1]->GetVoidPtrOfType(&TA_istream);
    rval=new cssInt((int)((taMisc*)ths)->skip_white(refarg_0));}
    if(na == 2) {
      istream& refarg_0=*(istream*)arg[1]->GetVoidPtrOfType(&TA_istream);
    rval=new cssInt((int)((taMisc*)ths)->skip_white(refarg_0, (bool)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taMisc_skip_white_noeol_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)arg[1]->GetVoidPtrOfType(&TA_istream);
    rval=new cssInt((int)((taMisc*)ths)->skip_white_noeol(refarg_0));}
    if(na == 2) {
      istream& refarg_0=*(istream*)arg[1]->GetVoidPtrOfType(&TA_istream);
    rval=new cssInt((int)((taMisc*)ths)->skip_white_noeol(refarg_0, (bool)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taMisc_skip_till_start_quote_or_semi_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)arg[1]->GetVoidPtrOfType(&TA_istream);
    rval=new cssInt((int)((taMisc*)ths)->skip_till_start_quote_or_semi(refarg_0));}
    if(na == 2) {
      istream& refarg_0=*(istream*)arg[1]->GetVoidPtrOfType(&TA_istream);
    rval=new cssInt((int)((taMisc*)ths)->skip_till_start_quote_or_semi(refarg_0, (bool)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taMisc_read_word_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)arg[1]->GetVoidPtrOfType(&TA_istream);
    rval=new cssInt((int)((taMisc*)ths)->read_word(refarg_0));}
    if(na == 2) {
      istream& refarg_0=*(istream*)arg[1]->GetVoidPtrOfType(&TA_istream);
    rval=new cssInt((int)((taMisc*)ths)->read_word(refarg_0, (bool)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taMisc_read_nonwhite_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)arg[1]->GetVoidPtrOfType(&TA_istream);
    rval=new cssInt((int)((taMisc*)ths)->read_nonwhite(refarg_0));}
    if(na == 2) {
      istream& refarg_0=*(istream*)arg[1]->GetVoidPtrOfType(&TA_istream);
    rval=new cssInt((int)((taMisc*)ths)->read_nonwhite(refarg_0, (bool)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taMisc_read_nonwhite_noeol_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)arg[1]->GetVoidPtrOfType(&TA_istream);
    rval=new cssInt((int)((taMisc*)ths)->read_nonwhite_noeol(refarg_0));}
    if(na == 2) {
      istream& refarg_0=*(istream*)arg[1]->GetVoidPtrOfType(&TA_istream);
    rval=new cssInt((int)((taMisc*)ths)->read_nonwhite_noeol(refarg_0, (bool)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taMisc_read_till_eol_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)arg[1]->GetVoidPtrOfType(&TA_istream);
    rval=new cssInt((int)((taMisc*)ths)->read_till_eol(refarg_0));}
    if(na == 2) {
      istream& refarg_0=*(istream*)arg[1]->GetVoidPtrOfType(&TA_istream);
    rval=new cssInt((int)((taMisc*)ths)->read_till_eol(refarg_0, (bool)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taMisc_read_till_semi_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)arg[1]->GetVoidPtrOfType(&TA_istream);
    rval=new cssInt((int)((taMisc*)ths)->read_till_semi(refarg_0));}
    if(na == 2) {
      istream& refarg_0=*(istream*)arg[1]->GetVoidPtrOfType(&TA_istream);
    rval=new cssInt((int)((taMisc*)ths)->read_till_semi(refarg_0, (bool)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taMisc_read_till_lbracket_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)arg[1]->GetVoidPtrOfType(&TA_istream);
    rval=new cssInt((int)((taMisc*)ths)->read_till_lbracket(refarg_0));}
    if(na == 2) {
      istream& refarg_0=*(istream*)arg[1]->GetVoidPtrOfType(&TA_istream);
    rval=new cssInt((int)((taMisc*)ths)->read_till_lbracket(refarg_0, (bool)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taMisc_read_till_lb_or_semi_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)arg[1]->GetVoidPtrOfType(&TA_istream);
    rval=new cssInt((int)((taMisc*)ths)->read_till_lb_or_semi(refarg_0));}
    if(na == 2) {
      istream& refarg_0=*(istream*)arg[1]->GetVoidPtrOfType(&TA_istream);
    rval=new cssInt((int)((taMisc*)ths)->read_till_lb_or_semi(refarg_0, (bool)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taMisc_read_till_rbracket_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)arg[1]->GetVoidPtrOfType(&TA_istream);
    rval=new cssInt((int)((taMisc*)ths)->read_till_rbracket(refarg_0));}
    if(na == 2) {
      istream& refarg_0=*(istream*)arg[1]->GetVoidPtrOfType(&TA_istream);
    rval=new cssInt((int)((taMisc*)ths)->read_till_rbracket(refarg_0, (bool)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taMisc_read_till_rb_or_semi_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)arg[1]->GetVoidPtrOfType(&TA_istream);
    rval=new cssInt((int)((taMisc*)ths)->read_till_rb_or_semi(refarg_0));}
    if(na == 2) {
      istream& refarg_0=*(istream*)arg[1]->GetVoidPtrOfType(&TA_istream);
    rval=new cssInt((int)((taMisc*)ths)->read_till_rb_or_semi(refarg_0, (bool)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taMisc_read_till_end_quote_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)arg[1]->GetVoidPtrOfType(&TA_istream);
    rval=new cssInt((int)((taMisc*)ths)->read_till_end_quote(refarg_0));}
    if(na == 2) {
      istream& refarg_0=*(istream*)arg[1]->GetVoidPtrOfType(&TA_istream);
    rval=new cssInt((int)((taMisc*)ths)->read_till_end_quote(refarg_0, (bool)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taMisc_read_till_end_quote_semi_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)arg[1]->GetVoidPtrOfType(&TA_istream);
    rval=new cssInt((int)((taMisc*)ths)->read_till_end_quote_semi(refarg_0));}
    if(na == 2) {
      istream& refarg_0=*(istream*)arg[1]->GetVoidPtrOfType(&TA_istream);
    rval=new cssInt((int)((taMisc*)ths)->read_till_end_quote_semi(refarg_0, (bool)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taMisc_skip_past_err_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)arg[1]->GetVoidPtrOfType(&TA_istream);
    rval=new cssInt((int)((taMisc*)ths)->skip_past_err(refarg_0));}
    if(na == 2) {
      istream& refarg_0=*(istream*)arg[1]->GetVoidPtrOfType(&TA_istream);
    rval=new cssInt((int)((taMisc*)ths)->skip_past_err(refarg_0, (bool)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taMisc_skip_past_err_rb_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)arg[1]->GetVoidPtrOfType(&TA_istream);
    rval=new cssInt((int)((taMisc*)ths)->skip_past_err_rb(refarg_0));}
    if(na == 2) {
      istream& refarg_0=*(istream*)arg[1]->GetVoidPtrOfType(&TA_istream);
    rval=new cssInt((int)((taMisc*)ths)->skip_past_err_rb(refarg_0, (bool)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taMisc_replace_strings_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    istream& refarg_0=*(istream*)arg[1]->GetVoidPtrOfType(&TA_istream);    ostream& refarg_1=*(ostream*)arg[2]->GetVoidPtrOfType(&TA_ostream);    NameVar_PArray& refarg_2=*(NameVar_PArray*)arg[3]->GetVoidPtrOfType(&TA_NameVar_PArray);
    rval=new cssInt((int)((taMisc*)ths)->replace_strings(refarg_0, refarg_1, refarg_2));
    return rval;}
  static cssEl* cssElCFun_taMisc_find_strings_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    istream& refarg_0=*(istream*)arg[1]->GetVoidPtrOfType(&TA_istream);    String_PArray& refarg_1=*(String_PArray*)arg[2]->GetVoidPtrOfType(&TA_String_PArray);
    rval=new cssInt((int)((taMisc*)ths)->find_strings(refarg_0, refarg_1));
    return rval;}
  static cssEl* cssElCFun_taMisc_read_tag_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    istream& refarg_0=*(istream*)arg[1]->GetVoidPtrOfType(&TA_istream);    taString refarg_1=arg[2]->GetStr();    taString refarg_2=arg[3]->GetStr();
    ((taMisc*)ths)->read_tag(refarg_0, refarg_1, refarg_2);
    *arg[2]=(String)refarg_1;    *arg[3]=(String)refarg_2;
    return rval;}
  static cssEl* cssElCFun_taMisc_read_till_rangle_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)arg[1]->GetVoidPtrOfType(&TA_istream);
    rval=new cssInt((int)((taMisc*)ths)->read_till_rangle(refarg_0));}
    if(na == 2) {
      istream& refarg_0=*(istream*)arg[1]->GetVoidPtrOfType(&TA_istream);
    rval=new cssInt((int)((taMisc*)ths)->read_till_rangle(refarg_0, (bool)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taMisc_indent_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ostream& refarg_0=*(ostream*)arg[1]->GetVoidPtrOfType(&TA_ostream);
    ((taMisc*)ths)->indent(refarg_0, (int)*arg[2]);}
    if(na == 3) {
      ostream& refarg_0=*(ostream*)arg[1]->GetVoidPtrOfType(&TA_ostream);
    ((taMisc*)ths)->indent(refarg_0, (int)*arg[2], (int)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_taMisc_write_quoted_string_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ostream& refarg_0=*(ostream*)arg[1]->GetVoidPtrOfType(&TA_ostream);
    ((taMisc*)ths)->write_quoted_string(refarg_0, arg[2]->GetStr());}
    if(na == 3) {
      ostream& refarg_0=*(ostream*)arg[1]->GetVoidPtrOfType(&TA_ostream);
    ((taMisc*)ths)->write_quoted_string(refarg_0, arg[2]->GetStr(), (bool)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_taMisc_fmt_sep_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 4) {
      ostream& refarg_0=*(ostream*)arg[1]->GetVoidPtrOfType(&TA_ostream);
    ((taMisc*)ths)->fmt_sep(refarg_0, arg[2]->GetStr(), (int)*arg[3], (int)*arg[4]);}
    if(na == 5) {
      ostream& refarg_0=*(ostream*)arg[1]->GetVoidPtrOfType(&TA_ostream);
    ((taMisc*)ths)->fmt_sep(refarg_0, arg[2]->GetStr(), (int)*arg[3], (int)*arg[4], (int)*arg[5]);}
    return rval;}
  static cssEl* cssElCFun_taMisc_fancy_list_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ostream& refarg_0=*(ostream*)arg[1]->GetVoidPtrOfType(&TA_ostream);
    ((taMisc*)ths)->fancy_list(refarg_0, arg[2]->GetStr(), (int)*arg[3], (int)*arg[4], (int)*arg[5]);
    return rval;}
  static cssEl* cssElCFun_DataChangeHelper_doStructUpdate_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((DataChangeHelper*)ths)->doStructUpdate());
    return rval;}
  static cssEl* cssElCFun_DataChangeHelper_doDataUpdate_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((DataChangeHelper*)ths)->doDataUpdate());
    return rval;}
  static cssEl* cssElCFun_DataChangeHelper_UpdateFromDataChanged_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((DataChangeHelper*)ths)->UpdateFromDataChanged((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_DataChangeHelper_Reset_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((DataChangeHelper*)ths)->Reset();
    return rval;}
taPtrList<EnumDef>*		 TAI_taPtrList_EnumDef_=NULL;
EnumSpace*		 TAI_EnumSpace=NULL;
taPtrList<void>*		 TAI_taPtrList_void_=NULL;
TokenSpace*		 TAI_TokenSpace=NULL;
taPtrList<MemberDef>*		 TAI_taPtrList_MemberDef_=NULL;
Member_List*		 TAI_Member_List=NULL;
MemberSpace*		 TAI_MemberSpace=NULL;
taPtrList<MethodDef>*		 TAI_taPtrList_MethodDef_=NULL;
Method_List*		 TAI_Method_List=NULL;
MethodSpace*		 TAI_MethodSpace=NULL;
taPtrList<TypeDef>*		 TAI_taPtrList_TypeDef_=NULL;
TypeSpace*		 TAI_TypeSpace=NULL;
TypeItem*		 TAI_TypeItem=NULL;
EnumDef*		 TAI_EnumDef=NULL;
  static cssEl* cssElCFun_taSmartRef_This_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taSmartRef*)ths)->This(), 1, &TA_void);
    return rval;}
  static cssEl* cssElCFun_taSmartRef_GetTypeDef_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taSmartRef*)ths)->GetTypeDef(), 1, &TA_TypeDef);
    return rval;}
  static cssEl* cssElCFun_taSmartRef_GetDataTypeDef_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taSmartRef*)ths)->GetDataTypeDef(), 1, &TA_TypeDef);
    return rval;}
  static cssEl* cssElCFun_taSmartRef_DataLinkDestroying_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taSmartRef*)ths)->DataLinkDestroying((taDataLink*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taSmartRef_DataDataChanged_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taSmartRef*)ths)->DataDataChanged((taDataLink*)(void*)*arg[1], (int)*arg[2], (void*)(void*)*arg[3], (void*)(void*)*arg[4]);
    return rval;}
  static cssEl* cssElCFun_taSmartRef_ptr_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taSmartRef*)ths)->ptr(), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taSmartRef_set_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taSmartRef*)ths)->set((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taSmartRef_GetBaseType_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taSmartRef*)ths)->GetBaseType(), 1, &TA_TypeDef);
    return rval;}
  static cssEl* cssElCFun_taSmartRef_Init_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taSmartRef*)ths)->Init((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taSmartRef_CutLinks_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taSmartRef*)ths)->CutLinks();
    return rval;}
  static cssEl* cssElCFun_taSmartPtr_GetBaseType_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taSmartPtr*)ths)->GetBaseType((TypeDef*)*arg[1]), 1, &TA_TypeDef);
    return rval;}
  static cssEl* cssElCFun_taSmartPtr_ptr_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taSmartPtr*)ths)->ptr(), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taSmartPtr_set_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taSmartPtr*)ths)->set((taBase*)(void*)*arg[1]);
    return rval;}
taOBase*		 TAI_taOBase=NULL;
  static cssEl* cssElCFun_taOBase_GetOwner_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taOBase*)ths)->GetOwner((TypeDef*)*arg[1]), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taOBase_GetUserDataList_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA_Base((void*)((taOBase*)ths)->GetUserDataList(), 1, &TA_UserDataItem_List);}
    if(na == 1) {
      rval=new cssTA_Base((void*)((taOBase*)ths)->GetUserDataList((bool)*arg[1]), 1, &TA_UserDataItem_List);}
    return rval;}
taOABase*		 TAI_taOABase=NULL;
  static cssEl* cssElCFun_taOABase_SetAdapter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taOABase*)ths)->SetAdapter((taBaseAdapter*)(void*)*arg[1]);
    return rval;}
taDataView*		 TAI_taDataView=NULL;
  static cssEl* cssElCFun_taDataView_New_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA_Base((void*)((taDataView*)ths)->New(), 1, &TA_taBase);}
    if(na == 1) {
      rval=new cssTA_Base((void*)((taDataView*)ths)->New((int)*arg[1]), 1, &TA_taBase);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((taDataView*)ths)->New((int)*arg[1], (TypeDef*)*arg[2]), 1, &TA_taBase);}
    return rval;}
  static cssEl* cssElCFun_taDataView_HasBaseFlag_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taDataView*)ths)->HasBaseFlag((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taDataView_SetBaseFlag_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taDataView*)ths)->SetBaseFlag((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taDataView_ClearBaseFlag_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taDataView*)ths)->ClearBaseFlag((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taDataView_GetIndex_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taDataView*)ths)->GetIndex());
    return rval;}
  static cssEl* cssElCFun_taDataView_GetEnabled_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taDataView*)ths)->GetEnabled());
    return rval;}
  static cssEl* cssElCFun_taDataView_SetEnabled_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taDataView*)ths)->SetEnabled((bool)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taDataView_children__stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taDataView*)ths)->children_(), 1, &TA_taList_impl);
    return rval;}
  static cssEl* cssElCFun_taDataView_GetOwner_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taDataView*)ths)->GetOwner((TypeDef*)*arg[1]), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taDataView_GetPath_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssString(((taDataView*)ths)->GetPath());}
    if(na == 1) {
      rval=new cssString(((taDataView*)ths)->GetPath((taBase*)(void*)*arg[1]));}
    if(na == 2) {
      rval=new cssString(((taDataView*)ths)->GetPath((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taDataView_FindFromPath_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taDataView*)ths)->FindFromPath(arg[1]->GetStr()), 1, &TA_taBase);}
    if(na == 2) {
      MemberDef* refarg_1=(MemberDef*)*arg[2];
    rval=new cssTA_Base((void*)((taDataView*)ths)->FindFromPath(arg[1]->GetStr(), refarg_1), 1, &TA_taBase);    *arg[2]=(void*)refarg_1;
}
    if(na == 3) {
      MemberDef* refarg_1=(MemberDef*)*arg[2];
    rval=new cssTA_Base((void*)((taDataView*)ths)->FindFromPath(arg[1]->GetStr(), refarg_1, (int)*arg[3]), 1, &TA_taBase);    *arg[2]=(void*)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taDataView_SetFileName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taDataView*)ths)->SetFileName(arg[1]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taDataView_GetFileName_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taDataView*)ths)->GetFileName());
    return rval;}
  static cssEl* cssElCFun_taDataView_GetFileNameFmProject_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssString(((taDataView*)ths)->GetFileNameFmProject(arg[1]->GetStr()));}
    if(na == 2) {
      rval=new cssString(((taDataView*)ths)->GetFileNameFmProject(arg[1]->GetStr(), arg[2]->GetStr()));}
    if(na == 3) {
      rval=new cssString(((taDataView*)ths)->GetFileNameFmProject(arg[1]->GetStr(), arg[2]->GetStr(), arg[3]->GetStr()));}
    if(na == 4) {
      rval=new cssString(((taDataView*)ths)->GetFileNameFmProject(arg[1]->GetStr(), arg[2]->GetStr(), arg[3]->GetStr(), (bool)*arg[4]));}
    return rval;}
  static cssEl* cssElCFun_taDataView_Load_strm_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)arg[1]->GetVoidPtrOfType(&TA_istream);
    rval=new cssInt((int)((taDataView*)ths)->Load_strm(refarg_0));}
    if(na == 2) {
      istream& refarg_0=*(istream*)arg[1]->GetVoidPtrOfType(&TA_istream);
    rval=new cssInt((int)((taDataView*)ths)->Load_strm(refarg_0, (taBase*)(void*)*arg[2]));}
    if(na == 3) {
      istream& refarg_0=*(istream*)arg[1]->GetVoidPtrOfType(&TA_istream);
    rval=new cssInt((int)((taDataView*)ths)->Load_strm(refarg_0, (taBase*)(void*)*arg[2], (taBase**)(void**)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_taDataView_Load_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssInt((int)((taDataView*)ths)->Load());}
    if(na == 1) {
      rval=new cssInt((int)((taDataView*)ths)->Load(arg[1]->GetStr()));}
    if(na == 2) {
      rval=new cssInt((int)((taDataView*)ths)->Load(arg[1]->GetStr(), (taBase**)(void**)*arg[2]));}
    if(na == 3) {
      rval=new cssInt((int)((taDataView*)ths)->Load(arg[1]->GetStr(), (taBase**)(void**)*arg[2], arg[3]->GetStr()));}
    return rval;}
  static cssEl* cssElCFun_taDataView_Save_strm_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ostream& refarg_0=*(ostream*)arg[1]->GetVoidPtrOfType(&TA_ostream);
    rval=new cssInt((int)((taDataView*)ths)->Save_strm(refarg_0));}
    if(na == 2) {
      ostream& refarg_0=*(ostream*)arg[1]->GetVoidPtrOfType(&TA_ostream);
    rval=new cssInt((int)((taDataView*)ths)->Save_strm(refarg_0, (taBase*)(void*)*arg[2]));}
    if(na == 3) {
      ostream& refarg_0=*(ostream*)arg[1]->GetVoidPtrOfType(&TA_ostream);
    rval=new cssInt((int)((taDataView*)ths)->Save_strm(refarg_0, (taBase*)(void*)*arg[2], (int)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_taDataView_Save_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssInt((int)((taDataView*)ths)->Save());}
    if(na == 1) {
      rval=new cssInt((int)((taDataView*)ths)->Save(arg[1]->GetStr()));}
    return rval;}
  static cssEl* cssElCFun_taDataView_SaveAs_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssInt((int)((taDataView*)ths)->SaveAs());}
    if(na == 1) {
      rval=new cssInt((int)((taDataView*)ths)->SaveAs(arg[1]->GetStr()));}
    if(na == 2) {
      rval=new cssInt((int)((taDataView*)ths)->SaveAs(arg[1]->GetStr(), arg[2]->GetStr()));}
    return rval;}
  static cssEl* cssElCFun_taDataView_UpdateAfterEdit_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taDataView*)ths)->UpdateAfterEdit();
    return rval;}
  static cssEl* cssElCFun_taDataView_UpdateAllViews_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taDataView*)ths)->UpdateAllViews();
    return rval;}
  static cssEl* cssElCFun_taDataView_StructUpdate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taDataView*)ths)->StructUpdate((bool)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taDataView_DataUpdate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taDataView*)ths)->DataUpdate((bool)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taDataView_setDirty_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taDataView*)ths)->setDirty((bool)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taDataView_CheckConfig_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssBool(((taDataView*)ths)->CheckConfig());}
    if(na == 1) {
      rval=new cssBool(((taDataView*)ths)->CheckConfig((bool)*arg[1]));}
    return rval;}
  static cssEl* cssElCFun_taDataView_CheckConfig_Gui_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssBool(((taDataView*)ths)->CheckConfig_Gui());}
    if(na == 1) {
      rval=new cssBool(((taDataView*)ths)->CheckConfig_Gui((bool)*arg[1]));}
    if(na == 2) {
      rval=new cssBool(((taDataView*)ths)->CheckConfig_Gui((bool)*arg[1], (bool)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taDataView_CopyFrom_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taDataView*)ths)->CopyFrom((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taDataView_CopyTo_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taDataView*)ths)->CopyTo((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taDataView_DuplicateMe_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taDataView*)ths)->DuplicateMe());
    return rval;}
  static cssEl* cssElCFun_taDataView_ChangeMyType_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taDataView*)ths)->ChangeMyType((TypeDef*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taDataView_InheritsFrom_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taDataView*)ths)->InheritsFrom((TypeDef*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taDataView_InheritsFromName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taDataView*)ths)->InheritsFromName((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taDataView_GetEnumString_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taDataView*)ths)->GetEnumString(arg[1]->GetStr(), (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taDataView_GetEnumVal_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taDataView*)ths)->GetEnumVal(arg[1]->GetStr()));}
    if(na == 2) {
      taString refarg_1=arg[2]->GetStr();
    rval=new cssInt((int)((taDataView*)ths)->GetEnumVal(arg[1]->GetStr(), refarg_1));    *arg[2]=(String)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taDataView_GetUserDataList_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA_Base((void*)((taDataView*)ths)->GetUserDataList(), 1, &TA_UserDataItem_List);}
    if(na == 1) {
      rval=new cssTA_Base((void*)((taDataView*)ths)->GetUserDataList((bool)*arg[1]), 1, &TA_UserDataItem_List);}
    return rval;}
  static cssEl* cssElCFun_taDataView_HasUserData_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taDataView*)ths)->HasUserData(arg[1]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taDataView_GetUserData_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssVariant(((taDataView*)ths)->GetUserData(arg[1]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taDataView_GetUserDataAsBool_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taDataView*)ths)->GetUserDataAsBool(arg[1]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taDataView_GetUserDataAsInt_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taDataView*)ths)->GetUserDataAsInt(arg[1]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taDataView_GetUserDataAsFloat_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((taDataView*)ths)->GetUserDataAsFloat(arg[1]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taDataView_GetUserDataAsDouble_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((taDataView*)ths)->GetUserDataAsDouble(arg[1]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taDataView_GetUserDataAsString_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taDataView*)ths)->GetUserDataAsString(arg[1]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taDataView_SetUserData_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taDataView*)ths)->SetUserData(arg[1]->GetStr(), arg[2]->GetVar());
    return rval;}
  static cssEl* cssElCFun_taDataView_Edit_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taDataView*)ths)->Edit());
    return rval;}
  static cssEl* cssElCFun_taDataView_EditDialog_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssInt((int)((taDataView*)ths)->EditDialog());}
    if(na == 1) {
      rval=new cssInt((int)((taDataView*)ths)->EditDialog((bool)*arg[1]));}
    return rval;}
  static cssEl* cssElCFun_taDataView_BrowseMe_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taDataView*)ths)->BrowseMe();
    return rval;}
  static cssEl* cssElCFun_taDataView_ReShowEdit_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssBool(((taDataView*)ths)->ReShowEdit());}
    if(na == 1) {
      rval=new cssBool(((taDataView*)ths)->ReShowEdit((bool)*arg[1]));}
    return rval;}
  static cssEl* cssElCFun_taDataView_CallFun_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taDataView*)ths)->CallFun(arg[1]->GetStr());
    return rval;}
  static cssEl* cssElCFun_taDataView_SelectForEdit_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taDataView*)ths)->SelectForEdit((MemberDef*)*arg[1], (SelectEdit*)(void*)*arg[2], arg[3]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taDataView_SelectForEditNm_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taDataView*)ths)->SelectForEditNm(arg[1]->GetStr(), (SelectEdit*)(void*)*arg[2], arg[3]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taDataView_SelectForEditSearch_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    SelectEdit* refarg_1=(SelectEdit*)(void*)*arg[2];
    rval=new cssInt((int)((taDataView*)ths)->SelectForEditSearch(arg[1]->GetStr(), refarg_1));
    *arg[2]=(void*)refarg_1;
    return rval;}
  static cssEl* cssElCFun_taDataView_SelectFunForEdit_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taDataView*)ths)->SelectFunForEdit((MethodDef*)*arg[1], (SelectEdit*)(void*)*arg[2], arg[3]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taDataView_SelectFunForEditNm_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taDataView*)ths)->SelectFunForEditNm(arg[1]->GetStr(), (SelectEdit*)(void*)*arg[2], arg[3]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taDataView_CloseLater_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taDataView*)ths)->CloseLater();
    return rval;}
  static cssEl* cssElCFun_taDataView_Help_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taDataView*)ths)->Help();
    return rval;}
  static cssEl* cssElCFun_taDataView_This_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taDataView*)ths)->This(), 1, &TA_void);
    return rval;}
  static cssEl* cssElCFun_taDataView_link_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taDataView*)ths)->link(), 1, &TA_taiDataLink);
    return rval;}
  static cssEl* cssElCFun_taDataView_GetDataTypeDef_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taDataView*)ths)->GetDataTypeDef(), 1, &TA_TypeDef);
    return rval;}
  static cssEl* cssElCFun_taDataView_link__stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taDataView*)ths)->link_(), 1, &TA_taDataLink);
    return rval;}
  static cssEl* cssElCFun_taDataView_DataLinkDestroying_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taDataView*)ths)->DataLinkDestroying((taDataLink*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taDataView_DataDataChanged_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taDataView*)ths)->DataDataChanged((taDataLink*)(void*)*arg[1], (int)*arg[2], (void*)(void*)*arg[3], (void*)(void*)*arg[4]);
    return rval;}
  static cssEl* cssElCFun_taDataView_data_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taDataView*)ths)->data(), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taDataView_SetData_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taDataView*)ths)->SetData((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taDataView_dbuCnt_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taDataView*)ths)->dbuCnt());
    return rval;}
  static cssEl* cssElCFun_taDataView_index_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taDataView*)ths)->index());
    return rval;}
  static cssEl* cssElCFun_taDataView_isMapped_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taDataView*)ths)->isMapped());
    return rval;}
  static cssEl* cssElCFun_taDataView_md_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taDataView*)ths)->md(), 1, &TA_MemberDef);
    return rval;}
  static cssEl* cssElCFun_taDataView_parDbuCnt_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taDataView*)ths)->parDbuCnt());
    return rval;}
  static cssEl* cssElCFun_taDataView_hasParent_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taDataView*)ths)->hasParent());
    return rval;}
  static cssEl* cssElCFun_taDataView_parent_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taDataView*)ths)->parent(), 1, &TA_taDataView);
    return rval;}
  static cssEl* cssElCFun_taDataView_parentType_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taDataView*)ths)->parentType(), 1, &TA_TypeDef);
    return rval;}
  static cssEl* cssElCFun_taDataView_GetDataMemberDef_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taDataView*)ths)->GetDataMemberDef(), 1, &TA_MemberDef);
    return rval;}
  static cssEl* cssElCFun_taDataView_GetLabel_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taDataView*)ths)->GetLabel());
    return rval;}
  static cssEl* cssElCFun_taDataView_DataUpdateAfterEdit_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taDataView*)ths)->DataUpdateAfterEdit();
    return rval;}
  static cssEl* cssElCFun_taDataView_DataUpdateAfterEdit_Child_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taDataView*)ths)->DataUpdateAfterEdit_Child((taDataView*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taDataView_ChildClearing_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taDataView*)ths)->ChildClearing((taDataView*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taDataView_ChildRendered_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taDataView*)ths)->ChildRendered((taDataView*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taDataView_CloseChild_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taDataView*)ths)->CloseChild((taDataView*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taDataView_Render_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taDataView*)ths)->Render();
    return rval;}
  static cssEl* cssElCFun_taDataView_Clear_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((taDataView*)ths)->Clear();}
    if(na == 1) {
      ((taDataView*)ths)->Clear((taDataView*)(void*)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_taDataView_Reset_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taDataView*)ths)->Reset();
    return rval;}
  static cssEl* cssElCFun_taDataView_Refresh_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taDataView*)ths)->Refresh();
    return rval;}
  static cssEl* cssElCFun_taDataView_Unbind_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taDataView*)ths)->Unbind();
    return rval;}
  static cssEl* cssElCFun_taDataView_DoActions_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taDataView*)ths)->DoActions((taDataView::DataViewAction)(int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taDataView_ItemRemoving_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taDataView*)ths)->ItemRemoving((taDataView*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taDataView_DataDestroying_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taDataView*)ths)->DataDestroying();
    return rval;}
taNBase*		 TAI_taNBase=NULL;
UserDataItem*		 TAI_UserDataItem=NULL;
  static cssEl* cssElCFun_UserDataItem_isSimple_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((UserDataItem*)ths)->isSimple());
    return rval;}
  static cssEl* cssElCFun_UserDataItem_valueAsVariant_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssVariant(((UserDataItem*)ths)->valueAsVariant());
    return rval;}
  static cssEl* cssElCFun_UserDataItem_setValueAsVariant_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((UserDataItem*)ths)->setValueAsVariant(arg[1]->GetVar()));
    return rval;}
tabMisc*		 TAI_tabMisc=NULL;
  static cssEl* cssElCFun_tabMisc_Close_Obj_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((tabMisc*)ths)->Close_Obj((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_tabMisc_DeleteRoot_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((tabMisc*)ths)->DeleteRoot();
    return rval;}
  static cssEl* cssElCFun_tabMisc_WaitProc_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((tabMisc*)ths)->WaitProc();
    return rval;}
  static cssEl* cssElCFun_tabMisc_DelayedUpdateAfterEdit_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((tabMisc*)ths)->DelayedUpdateAfterEdit((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taSmartRefT_taBase__ptr_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taSmartRefT<taBase>*)ths)->ptr(), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taSmartRefT_taBase__GetBaseType_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taSmartRefT<taBase>*)ths)->GetBaseType(), 1, &TA_TypeDef);
    return rval;}
  static cssEl* cssElCFun_taBaseRef_GetDataTypeDef_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taBaseRef*)ths)->GetDataTypeDef(), 1, &TA_TypeDef);
    return rval;}
taNBase**		 TAI_TANPtr=NULL;
taFBase*		 TAI_taFBase=NULL;
taPtrList<taBase>*		 TAI_taPtrList_taBase_=NULL;
  static cssEl* cssElCFun_taPtrList_taBase__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taPtrList<taBase>*)ths)->SafeEl((int)*arg[1]), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taBase__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taPtrList<taBase>*)ths)->FastEl((int)*arg[1]), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taBase__Edit_El_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taPtrList<taBase>*)ths)->Edit_El((taBase*)(void*)*arg[1]), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taBase__FindName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taPtrList<taBase>*)ths)->FindName(arg[1]->GetStr()), 1, &TA_taBase);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taPtrList<taBase>*)ths)->FindName(arg[1]->GetStr(), refarg_1), 1, &TA_taBase);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taPtrList_taBase__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taPtrList<taBase>*)ths)->Pop(), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taBase__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taPtrList<taBase>*)ths)->Peek(), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taBase__AddUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taPtrList<taBase>*)ths)->AddUniqNameOld((taBase*)(void*)*arg[1]), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taBase__LinkUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taPtrList<taBase>*)ths)->LinkUniqNameOld((taBase*)(void*)*arg[1]), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taBase__FindEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList<taBase>*)ths)->FindEl((const taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taBase__AddOnly_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList<taBase>*)ths)->AddOnly((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taBase__Add_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList<taBase>*)ths)->Add((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taBase__AddUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList<taBase>*)ths)->AddUnique((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taBase__AddUniqNameNew_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList<taBase>*)ths)->AddUniqNameNew((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taBase__Insert_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList<taBase>*)ths)->Insert((taBase*)(void*)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taBase__ReplaceEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList<taBase>*)ths)->ReplaceEl((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taBase__ReplaceName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList<taBase>*)ths)->ReplaceName(arg[1]->GetStr(), (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taBase__ReplaceIdx_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList<taBase>*)ths)->ReplaceIdx((int)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taBase__RemoveEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList<taBase>*)ths)->RemoveEl((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taBase__DuplicateEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList<taBase>*)ths)->DuplicateEl((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taBase__Link_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList<taBase>*)ths)->Link((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taBase__LinkUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList<taBase>*)ths)->LinkUnique((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taBase__LinkUniqNameNew_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList<taBase>*)ths)->LinkUniqNameNew((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taBase__InsertLink_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssBool(((taPtrList<taBase>*)ths)->InsertLink((taBase*)(void*)*arg[1]));}
    if(na == 2) {
      rval=new cssBool(((taPtrList<taBase>*)ths)->InsertLink((taBase*)(void*)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taPtrList_taBase__ReplaceLinkEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList<taBase>*)ths)->ReplaceLinkEl((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taBase__ReplaceLinkName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList<taBase>*)ths)->ReplaceLinkName(arg[1]->GetStr(), (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taBase__ReplaceLinkIdx_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList<taBase>*)ths)->ReplaceLinkIdx((int)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taBase__Push_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList<taBase>*)ths)->Push((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_taBase__MoveEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList<taBase>*)ths)->MoveEl((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taBase__Transfer_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList<taBase>*)ths)->Transfer((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taBase__MoveBefore_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList<taBase>*)ths)->MoveBefore((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_taBase__MoveAfter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList<taBase>*)ths)->MoveAfter((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
taPtrList_base<taBase>*		 TAI_taPtrList_base_taBase_=NULL;
  static cssEl* cssElCFun_taPtrList_base_taBase__FindEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taPtrList_base<taBase>*)ths)->FindEl((const taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_base_taBase__AddOnly_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList_base<taBase>*)ths)->AddOnly((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_base_taBase__Add_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList_base<taBase>*)ths)->Add((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_base_taBase__AddUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList_base<taBase>*)ths)->AddUnique((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_base_taBase__AddUniqNameNew_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList_base<taBase>*)ths)->AddUniqNameNew((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_base_taBase__Insert_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList_base<taBase>*)ths)->Insert((taBase*)(void*)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_base_taBase__ReplaceEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList_base<taBase>*)ths)->ReplaceEl((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_base_taBase__ReplaceName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList_base<taBase>*)ths)->ReplaceName(arg[1]->GetStr(), (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_base_taBase__ReplaceIdx_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList_base<taBase>*)ths)->ReplaceIdx((int)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_base_taBase__RemoveEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList_base<taBase>*)ths)->RemoveEl((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_base_taBase__DuplicateEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList_base<taBase>*)ths)->DuplicateEl((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_base_taBase__Link_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList_base<taBase>*)ths)->Link((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_base_taBase__LinkUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList_base<taBase>*)ths)->LinkUnique((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_base_taBase__LinkUniqNameNew_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList_base<taBase>*)ths)->LinkUniqNameNew((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_base_taBase__InsertLink_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssBool(((taPtrList_base<taBase>*)ths)->InsertLink((taBase*)(void*)*arg[1]));}
    if(na == 2) {
      rval=new cssBool(((taPtrList_base<taBase>*)ths)->InsertLink((taBase*)(void*)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taPtrList_base_taBase__ReplaceLinkEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList_base<taBase>*)ths)->ReplaceLinkEl((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_base_taBase__ReplaceLinkName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList_base<taBase>*)ths)->ReplaceLinkName(arg[1]->GetStr(), (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_base_taBase__ReplaceLinkIdx_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList_base<taBase>*)ths)->ReplaceLinkIdx((int)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_base_taBase__Push_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taPtrList_base<taBase>*)ths)->Push((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taPtrList_base_taBase__MoveEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList_base<taBase>*)ths)->MoveEl((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_base_taBase__Transfer_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList_base<taBase>*)ths)->Transfer((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_base_taBase__MoveBefore_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList_base<taBase>*)ths)->MoveBefore((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taPtrList_base_taBase__MoveAfter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taPtrList_base<taBase>*)ths)->MoveAfter((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
taList_impl*		 TAI_taList_impl=NULL;
  static cssEl* cssElCFun_taList_impl_New_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA_Base((void*)((taList_impl*)ths)->New(), 1, &TA_taBase);}
    if(na == 1) {
      rval=new cssTA_Base((void*)((taList_impl*)ths)->New((int)*arg[1]), 1, &TA_taBase);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((taList_impl*)ths)->New((int)*arg[1], (TypeDef*)*arg[2]), 1, &TA_taBase);}
    return rval;}
  static cssEl* cssElCFun_taList_impl_HasBaseFlag_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taList_impl*)ths)->HasBaseFlag((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_SetBaseFlag_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->SetBaseFlag((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taList_impl_ClearBaseFlag_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->ClearBaseFlag((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taList_impl_GetIndex_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->GetIndex());
    return rval;}
  static cssEl* cssElCFun_taList_impl_GetEnabled_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->GetEnabled());
    return rval;}
  static cssEl* cssElCFun_taList_impl_SetEnabled_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->SetEnabled((bool)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taList_impl_children__stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList_impl*)ths)->children_(), 1, &TA_taList_impl);
    return rval;}
  static cssEl* cssElCFun_taList_impl_GetOwner_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList_impl*)ths)->GetOwner((TypeDef*)*arg[1]), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taList_impl_GetPath_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssString(((taList_impl*)ths)->GetPath());}
    if(na == 1) {
      rval=new cssString(((taList_impl*)ths)->GetPath((taBase*)(void*)*arg[1]));}
    if(na == 2) {
      rval=new cssString(((taList_impl*)ths)->GetPath((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taList_impl_FindFromPath_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taList_impl*)ths)->FindFromPath(arg[1]->GetStr()), 1, &TA_taBase);}
    if(na == 2) {
      MemberDef* refarg_1=(MemberDef*)*arg[2];
    rval=new cssTA_Base((void*)((taList_impl*)ths)->FindFromPath(arg[1]->GetStr(), refarg_1), 1, &TA_taBase);    *arg[2]=(void*)refarg_1;
}
    if(na == 3) {
      MemberDef* refarg_1=(MemberDef*)*arg[2];
    rval=new cssTA_Base((void*)((taList_impl*)ths)->FindFromPath(arg[1]->GetStr(), refarg_1, (int)*arg[3]), 1, &TA_taBase);    *arg[2]=(void*)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taList_impl_SetFileName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taList_impl*)ths)->SetFileName(arg[1]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taList_impl_GetFileName_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taList_impl*)ths)->GetFileName());
    return rval;}
  static cssEl* cssElCFun_taList_impl_GetFileNameFmProject_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssString(((taList_impl*)ths)->GetFileNameFmProject(arg[1]->GetStr()));}
    if(na == 2) {
      rval=new cssString(((taList_impl*)ths)->GetFileNameFmProject(arg[1]->GetStr(), arg[2]->GetStr()));}
    if(na == 3) {
      rval=new cssString(((taList_impl*)ths)->GetFileNameFmProject(arg[1]->GetStr(), arg[2]->GetStr(), arg[3]->GetStr()));}
    if(na == 4) {
      rval=new cssString(((taList_impl*)ths)->GetFileNameFmProject(arg[1]->GetStr(), arg[2]->GetStr(), arg[3]->GetStr(), (bool)*arg[4]));}
    return rval;}
  static cssEl* cssElCFun_taList_impl_Load_strm_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)arg[1]->GetVoidPtrOfType(&TA_istream);
    rval=new cssInt((int)((taList_impl*)ths)->Load_strm(refarg_0));}
    if(na == 2) {
      istream& refarg_0=*(istream*)arg[1]->GetVoidPtrOfType(&TA_istream);
    rval=new cssInt((int)((taList_impl*)ths)->Load_strm(refarg_0, (taBase*)(void*)*arg[2]));}
    if(na == 3) {
      istream& refarg_0=*(istream*)arg[1]->GetVoidPtrOfType(&TA_istream);
    rval=new cssInt((int)((taList_impl*)ths)->Load_strm(refarg_0, (taBase*)(void*)*arg[2], (taBase**)(void**)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_taList_impl_Load_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssInt((int)((taList_impl*)ths)->Load());}
    if(na == 1) {
      rval=new cssInt((int)((taList_impl*)ths)->Load(arg[1]->GetStr()));}
    if(na == 2) {
      rval=new cssInt((int)((taList_impl*)ths)->Load(arg[1]->GetStr(), (taBase**)(void**)*arg[2]));}
    if(na == 3) {
      rval=new cssInt((int)((taList_impl*)ths)->Load(arg[1]->GetStr(), (taBase**)(void**)*arg[2], arg[3]->GetStr()));}
    return rval;}
  static cssEl* cssElCFun_taList_impl_Save_strm_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ostream& refarg_0=*(ostream*)arg[1]->GetVoidPtrOfType(&TA_ostream);
    rval=new cssInt((int)((taList_impl*)ths)->Save_strm(refarg_0));}
    if(na == 2) {
      ostream& refarg_0=*(ostream*)arg[1]->GetVoidPtrOfType(&TA_ostream);
    rval=new cssInt((int)((taList_impl*)ths)->Save_strm(refarg_0, (taBase*)(void*)*arg[2]));}
    if(na == 3) {
      ostream& refarg_0=*(ostream*)arg[1]->GetVoidPtrOfType(&TA_ostream);
    rval=new cssInt((int)((taList_impl*)ths)->Save_strm(refarg_0, (taBase*)(void*)*arg[2], (int)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_taList_impl_Save_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssInt((int)((taList_impl*)ths)->Save());}
    if(na == 1) {
      rval=new cssInt((int)((taList_impl*)ths)->Save(arg[1]->GetStr()));}
    return rval;}
  static cssEl* cssElCFun_taList_impl_SaveAs_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssInt((int)((taList_impl*)ths)->SaveAs());}
    if(na == 1) {
      rval=new cssInt((int)((taList_impl*)ths)->SaveAs(arg[1]->GetStr()));}
    if(na == 2) {
      rval=new cssInt((int)((taList_impl*)ths)->SaveAs(arg[1]->GetStr(), arg[2]->GetStr()));}
    return rval;}
  static cssEl* cssElCFun_taList_impl_UpdateAfterEdit_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->UpdateAfterEdit();
    return rval;}
  static cssEl* cssElCFun_taList_impl_UpdateAllViews_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->UpdateAllViews();
    return rval;}
  static cssEl* cssElCFun_taList_impl_StructUpdate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->StructUpdate((bool)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taList_impl_DataUpdate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->DataUpdate((bool)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taList_impl_setDirty_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->setDirty((bool)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taList_impl_CheckConfig_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssBool(((taList_impl*)ths)->CheckConfig());}
    if(na == 1) {
      rval=new cssBool(((taList_impl*)ths)->CheckConfig((bool)*arg[1]));}
    return rval;}
  static cssEl* cssElCFun_taList_impl_CheckConfig_Gui_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssBool(((taList_impl*)ths)->CheckConfig_Gui());}
    if(na == 1) {
      rval=new cssBool(((taList_impl*)ths)->CheckConfig_Gui((bool)*arg[1]));}
    if(na == 2) {
      rval=new cssBool(((taList_impl*)ths)->CheckConfig_Gui((bool)*arg[1], (bool)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taList_impl_CopyFrom_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taList_impl*)ths)->CopyFrom((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_CopyTo_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taList_impl*)ths)->CopyTo((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_DuplicateMe_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taList_impl*)ths)->DuplicateMe());
    return rval;}
  static cssEl* cssElCFun_taList_impl_ChangeMyType_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taList_impl*)ths)->ChangeMyType((TypeDef*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_InheritsFrom_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taList_impl*)ths)->InheritsFrom((TypeDef*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_InheritsFromName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taList_impl*)ths)->InheritsFromName((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_GetEnumString_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taList_impl*)ths)->GetEnumString(arg[1]->GetStr(), (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_GetEnumVal_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taList_impl*)ths)->GetEnumVal(arg[1]->GetStr()));}
    if(na == 2) {
      taString refarg_1=arg[2]->GetStr();
    rval=new cssInt((int)((taList_impl*)ths)->GetEnumVal(arg[1]->GetStr(), refarg_1));    *arg[2]=(String)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taList_impl_GetUserDataList_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA_Base((void*)((taList_impl*)ths)->GetUserDataList(), 1, &TA_UserDataItem_List);}
    if(na == 1) {
      rval=new cssTA_Base((void*)((taList_impl*)ths)->GetUserDataList((bool)*arg[1]), 1, &TA_UserDataItem_List);}
    return rval;}
  static cssEl* cssElCFun_taList_impl_HasUserData_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taList_impl*)ths)->HasUserData(arg[1]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taList_impl_GetUserData_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssVariant(((taList_impl*)ths)->GetUserData(arg[1]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taList_impl_GetUserDataAsBool_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taList_impl*)ths)->GetUserDataAsBool(arg[1]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taList_impl_GetUserDataAsInt_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->GetUserDataAsInt(arg[1]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taList_impl_GetUserDataAsFloat_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((taList_impl*)ths)->GetUserDataAsFloat(arg[1]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taList_impl_GetUserDataAsDouble_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((taList_impl*)ths)->GetUserDataAsDouble(arg[1]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taList_impl_GetUserDataAsString_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taList_impl*)ths)->GetUserDataAsString(arg[1]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taList_impl_SetUserData_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->SetUserData(arg[1]->GetStr(), arg[2]->GetVar());
    return rval;}
  static cssEl* cssElCFun_taList_impl_Edit_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->Edit());
    return rval;}
  static cssEl* cssElCFun_taList_impl_EditDialog_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssInt((int)((taList_impl*)ths)->EditDialog());}
    if(na == 1) {
      rval=new cssInt((int)((taList_impl*)ths)->EditDialog((bool)*arg[1]));}
    return rval;}
  static cssEl* cssElCFun_taList_impl_BrowseMe_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->BrowseMe();
    return rval;}
  static cssEl* cssElCFun_taList_impl_ReShowEdit_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssBool(((taList_impl*)ths)->ReShowEdit());}
    if(na == 1) {
      rval=new cssBool(((taList_impl*)ths)->ReShowEdit((bool)*arg[1]));}
    return rval;}
  static cssEl* cssElCFun_taList_impl_CallFun_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->CallFun(arg[1]->GetStr());
    return rval;}
  static cssEl* cssElCFun_taList_impl_SelectForEdit_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taList_impl*)ths)->SelectForEdit((MemberDef*)*arg[1], (SelectEdit*)(void*)*arg[2], arg[3]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taList_impl_SelectForEditNm_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taList_impl*)ths)->SelectForEditNm(arg[1]->GetStr(), (SelectEdit*)(void*)*arg[2], arg[3]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taList_impl_SelectForEditSearch_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    SelectEdit* refarg_1=(SelectEdit*)(void*)*arg[2];
    rval=new cssInt((int)((taList_impl*)ths)->SelectForEditSearch(arg[1]->GetStr(), refarg_1));
    *arg[2]=(void*)refarg_1;
    return rval;}
  static cssEl* cssElCFun_taList_impl_SelectFunForEdit_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taList_impl*)ths)->SelectFunForEdit((MethodDef*)*arg[1], (SelectEdit*)(void*)*arg[2], arg[3]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taList_impl_SelectFunForEditNm_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taList_impl*)ths)->SelectFunForEditNm(arg[1]->GetStr(), (SelectEdit*)(void*)*arg[2], arg[3]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taList_impl_CloseLater_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->CloseLater();
    return rval;}
  static cssEl* cssElCFun_taList_impl_Help_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->Help();
    return rval;}
  static cssEl* cssElCFun_taList_impl_InRange_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taList_impl*)ths)->InRange((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_Alloc_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->Alloc((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taList_impl_AllocExact_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->AllocExact((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taList_impl_Reset_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->Reset();
    return rval;}
  static cssEl* cssElCFun_taList_impl_IsEmpty_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taList_impl*)ths)->IsEmpty());
    return rval;}
  static cssEl* cssElCFun_taList_impl_BuildHashTable_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->BuildHashTable((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taList_impl_RemoveName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taList_impl*)ths)->RemoveName(arg[1]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taList_impl_RemoveIdx_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taList_impl*)ths)->RemoveIdx((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_RemoveLast_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taList_impl*)ths)->RemoveLast());
    return rval;}
  static cssEl* cssElCFun_taList_impl_RemoveAll_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->RemoveAll();
    return rval;}
  static cssEl* cssElCFun_taList_impl_MoveIdx_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taList_impl*)ths)->MoveIdx((int)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_SwapIdx_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taList_impl*)ths)->SwapIdx((int)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_PopAll_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->PopAll();
    return rval;}
  static cssEl* cssElCFun_taList_impl_Permute_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->Permute();
    return rval;}
  static cssEl* cssElCFun_taList_impl_Sort_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((taList_impl*)ths)->Sort();}
    if(na == 1) {
      ((taList_impl*)ths)->Sort((bool)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_taList_impl_FirstEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    taListItr refarg_0=(taListItr)*arg[1];
    rval=new cssTA((void*)((taList_impl*)ths)->FirstEl(refarg_0), 1, &TA_void);
    *arg[1]=(Int)refarg_0;
    return rval;}
  static cssEl* cssElCFun_taList_impl_NextEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    taListItr refarg_0=(taListItr)*arg[1];
    rval=new cssTA((void*)((taList_impl*)ths)->NextEl(refarg_0), 1, &TA_void);
    *arg[1]=(Int)refarg_0;
    return rval;}
  static cssEl* cssElCFun_taList_impl_Duplicate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->Duplicate(*(taPtrList_impl*)arg[1]->GetVoidPtrOfType(&TA_taPtrList_impl));
    return rval;}
  static cssEl* cssElCFun_taList_impl_DupeUniqNameNew_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->DupeUniqNameNew(*(taPtrList_impl*)arg[1]->GetVoidPtrOfType(&TA_taPtrList_impl));
    return rval;}
  static cssEl* cssElCFun_taList_impl_DupeUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->DupeUniqNameOld(*(taPtrList_impl*)arg[1]->GetVoidPtrOfType(&TA_taPtrList_impl));
    return rval;}
  static cssEl* cssElCFun_taList_impl_Stealth_Borrow_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->Stealth_Borrow(*(taPtrList_impl*)arg[1]->GetVoidPtrOfType(&TA_taPtrList_impl));
    return rval;}
  static cssEl* cssElCFun_taList_impl_Borrow_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->Borrow(*(taPtrList_impl*)arg[1]->GetVoidPtrOfType(&TA_taPtrList_impl));
    return rval;}
  static cssEl* cssElCFun_taList_impl_BorrowUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->BorrowUnique(*(taPtrList_impl*)arg[1]->GetVoidPtrOfType(&TA_taPtrList_impl));
    return rval;}
  static cssEl* cssElCFun_taList_impl_BorrowUniqNameNew_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->BorrowUniqNameNew(*(taPtrList_impl*)arg[1]->GetVoidPtrOfType(&TA_taPtrList_impl));
    return rval;}
  static cssEl* cssElCFun_taList_impl_BorrowUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->BorrowUniqNameOld(*(taPtrList_impl*)arg[1]->GetVoidPtrOfType(&TA_taPtrList_impl));
    return rval;}
  static cssEl* cssElCFun_taList_impl_Copy_Common_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->Copy_Common(*(taPtrList_impl*)arg[1]->GetVoidPtrOfType(&TA_taPtrList_impl));
    return rval;}
  static cssEl* cssElCFun_taList_impl_Copy_Duplicate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->Copy_Duplicate(*(taPtrList_impl*)arg[1]->GetVoidPtrOfType(&TA_taPtrList_impl));
    return rval;}
  static cssEl* cssElCFun_taList_impl_Copy_Borrow_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->Copy_Borrow(*(taPtrList_impl*)arg[1]->GetVoidPtrOfType(&TA_taPtrList_impl));
    return rval;}
  static cssEl* cssElCFun_taList_impl_List_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((taList_impl*)ths)->List();}
    if(na == 1) {
      ostream& refarg_0=*(ostream*)arg[1]->GetVoidPtrOfType(&TA_ostream);
    ((taList_impl*)ths)->List(refarg_0);}
    return rval;}
  static cssEl* cssElCFun_taList_impl_FindEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->FindEl((const taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_AddOnly_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->AddOnly((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taList_impl_Add_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->Add((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taList_impl_AddUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taList_impl*)ths)->AddUnique((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_AddUniqNameNew_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taList_impl*)ths)->AddUniqNameNew((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_Insert_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taList_impl*)ths)->Insert((taBase*)(void*)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_ReplaceEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taList_impl*)ths)->ReplaceEl((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_ReplaceName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taList_impl*)ths)->ReplaceName(arg[1]->GetStr(), (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_ReplaceIdx_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taList_impl*)ths)->ReplaceIdx((int)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_RemoveEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taList_impl*)ths)->RemoveEl((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_DuplicateEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taList_impl*)ths)->DuplicateEl((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_Link_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->Link((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taList_impl_LinkUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taList_impl*)ths)->LinkUnique((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_LinkUniqNameNew_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taList_impl*)ths)->LinkUniqNameNew((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_InsertLink_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssBool(((taList_impl*)ths)->InsertLink((taBase*)(void*)*arg[1]));}
    if(na == 2) {
      rval=new cssBool(((taList_impl*)ths)->InsertLink((taBase*)(void*)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taList_impl_ReplaceLinkEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taList_impl*)ths)->ReplaceLinkEl((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_ReplaceLinkName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taList_impl*)ths)->ReplaceLinkName(arg[1]->GetStr(), (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_ReplaceLinkIdx_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taList_impl*)ths)->ReplaceLinkIdx((int)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_Push_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->Push((taBase*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taList_impl_MoveEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taList_impl*)ths)->MoveEl((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_Transfer_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taList_impl*)ths)->Transfer((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_MoveBefore_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taList_impl*)ths)->MoveBefore((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_MoveAfter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taList_impl*)ths)->MoveAfter((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_SetDefaultElType_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->SetDefaultElType((TypeDef*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_SetDefaultElName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->SetDefaultElName(arg[1]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taList_impl_SetDefaultEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->SetDefaultEl((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_SetSize_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->SetSize((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taList_impl_EnforceType_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->EnforceType();
    return rval;}
  static cssEl* cssElCFun_taList_impl_EnforceSameStru_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->EnforceSameStru(*(taList_impl*)arg[1]->GetVoidPtrOfType(&TA_taList_impl));
    return rval;}
  static cssEl* cssElCFun_taList_impl_ChangeType_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taList_impl*)ths)->ChangeType((taBase*)(void*)*arg[1], (TypeDef*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_ReplaceType_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taList_impl*)ths)->ReplaceType((TypeDef*)*arg[1], (TypeDef*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_impl_SetBaseType_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taList_impl*)ths)->SetBaseType((TypeDef*)*arg[1]);
    return rval;}
taList<taBase>*		 TAI_taList_taBase_=NULL;
  static cssEl* cssElCFun_taList_taBase__MoveBefore_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taList<taBase>*)ths)->MoveBefore((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_taBase__MoveAfter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taList<taBase>*)ths)->MoveAfter((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_taBase__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<taBase>*)ths)->SafeEl((int)*arg[1]), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taList_taBase__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<taBase>*)ths)->FastEl((int)*arg[1]), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taList_taBase__DefaultEl_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<taBase>*)ths)->DefaultEl(), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taList_taBase__Edit_El_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<taBase>*)ths)->Edit_El((taBase*)(void*)*arg[1]), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taList_taBase__FindName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taList<taBase>*)ths)->FindName(arg[1]->GetStr()), 1, &TA_taBase);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taList<taBase>*)ths)->FindName(arg[1]->GetStr(), refarg_1), 1, &TA_taBase);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taList_taBase__FindType_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taList<taBase>*)ths)->FindType((TypeDef*)*arg[1]), 1, &TA_taBase);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taList<taBase>*)ths)->FindType((TypeDef*)*arg[1], refarg_1), 1, &TA_taBase);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taList_taBase__First_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<taBase>*)ths)->First(), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taList_taBase__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<taBase>*)ths)->Pop(), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taList_taBase__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<taBase>*)ths)->Peek(), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taList_taBase__AddUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<taBase>*)ths)->AddUniqNameOld((taBase*)(void*)*arg[1]), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taList_taBase__LinkUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<taBase>*)ths)->LinkUniqNameOld((taBase*)(void*)*arg[1]), 1, &TA_taBase);
    return rval;}
taBase_List*		 TAI_taBase_List=NULL;
taList<taDataView>*		 TAI_taList_taDataView_=NULL;
  static cssEl* cssElCFun_taList_taDataView__MoveBefore_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taList<taDataView>*)ths)->MoveBefore((taDataView*)(void*)*arg[1], (taDataView*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_taDataView__MoveAfter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taList<taDataView>*)ths)->MoveAfter((taDataView*)(void*)*arg[1], (taDataView*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_taDataView__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<taDataView>*)ths)->SafeEl((int)*arg[1]), 1, &TA_taDataView);
    return rval;}
  static cssEl* cssElCFun_taList_taDataView__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<taDataView>*)ths)->FastEl((int)*arg[1]), 1, &TA_taDataView);
    return rval;}
  static cssEl* cssElCFun_taList_taDataView__DefaultEl_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<taDataView>*)ths)->DefaultEl(), 1, &TA_taDataView);
    return rval;}
  static cssEl* cssElCFun_taList_taDataView__Edit_El_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<taDataView>*)ths)->Edit_El((taDataView*)(void*)*arg[1]), 1, &TA_taDataView);
    return rval;}
  static cssEl* cssElCFun_taList_taDataView__FindName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taList<taDataView>*)ths)->FindName(arg[1]->GetStr()), 1, &TA_taDataView);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taList<taDataView>*)ths)->FindName(arg[1]->GetStr(), refarg_1), 1, &TA_taDataView);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taList_taDataView__FindType_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taList<taDataView>*)ths)->FindType((TypeDef*)*arg[1]), 1, &TA_taDataView);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taList<taDataView>*)ths)->FindType((TypeDef*)*arg[1], refarg_1), 1, &TA_taDataView);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taList_taDataView__First_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<taDataView>*)ths)->First(), 1, &TA_taDataView);
    return rval;}
  static cssEl* cssElCFun_taList_taDataView__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<taDataView>*)ths)->Pop(), 1, &TA_taDataView);
    return rval;}
  static cssEl* cssElCFun_taList_taDataView__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<taDataView>*)ths)->Peek(), 1, &TA_taDataView);
    return rval;}
  static cssEl* cssElCFun_taList_taDataView__AddUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<taDataView>*)ths)->AddUniqNameOld((taDataView*)(void*)*arg[1]), 1, &TA_taDataView);
    return rval;}
  static cssEl* cssElCFun_taList_taDataView__LinkUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<taDataView>*)ths)->LinkUniqNameOld((taDataView*)(void*)*arg[1]), 1, &TA_taDataView);
    return rval;}
DataView_List*		 TAI_DataView_List=NULL;
  static cssEl* cssElCFun_DataView_List_SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((DataView_List*)ths)->SafeEl((int)*arg[1]), 1, &TA_taDataView);
    return rval;}
  static cssEl* cssElCFun_DataView_List_FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((DataView_List*)ths)->FastEl((int)*arg[1]), 1, &TA_taDataView);
    return rval;}
  static cssEl* cssElCFun_DataView_List_DoAction_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((DataView_List*)ths)->DoAction((taDataView::DataViewAction)(int)*arg[1]);
    return rval;}
taArray_base*		 TAI_taArray_base=NULL;
  static cssEl* cssElCFun_taArray_base_New_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA_Base((void*)((taArray_base*)ths)->New(), 1, &TA_taBase);}
    if(na == 1) {
      rval=new cssTA_Base((void*)((taArray_base*)ths)->New((int)*arg[1]), 1, &TA_taBase);}
    if(na == 2) {
      rval=new cssTA_Base((void*)((taArray_base*)ths)->New((int)*arg[1], (TypeDef*)*arg[2]), 1, &TA_taBase);}
    return rval;}
  static cssEl* cssElCFun_taArray_base_HasBaseFlag_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taArray_base*)ths)->HasBaseFlag((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_base_SetBaseFlag_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_base*)ths)->SetBaseFlag((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_base_ClearBaseFlag_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_base*)ths)->ClearBaseFlag((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_base_GetIndex_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray_base*)ths)->GetIndex());
    return rval;}
  static cssEl* cssElCFun_taArray_base_GetEnabled_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray_base*)ths)->GetEnabled());
    return rval;}
  static cssEl* cssElCFun_taArray_base_SetEnabled_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_base*)ths)->SetEnabled((bool)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_base_children__stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taArray_base*)ths)->children_(), 1, &TA_taList_impl);
    return rval;}
  static cssEl* cssElCFun_taArray_base_GetOwner_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taArray_base*)ths)->GetOwner((TypeDef*)*arg[1]), 1, &TA_taBase);
    return rval;}
  static cssEl* cssElCFun_taArray_base_GetPath_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssString(((taArray_base*)ths)->GetPath());}
    if(na == 1) {
      rval=new cssString(((taArray_base*)ths)->GetPath((taBase*)(void*)*arg[1]));}
    if(na == 2) {
      rval=new cssString(((taArray_base*)ths)->GetPath((taBase*)(void*)*arg[1], (taBase*)(void*)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taArray_base_FindFromPath_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taArray_base*)ths)->FindFromPath(arg[1]->GetStr()), 1, &TA_taBase);}
    if(na == 2) {
      MemberDef* refarg_1=(MemberDef*)*arg[2];
    rval=new cssTA_Base((void*)((taArray_base*)ths)->FindFromPath(arg[1]->GetStr(), refarg_1), 1, &TA_taBase);    *arg[2]=(void*)refarg_1;
}
    if(na == 3) {
      MemberDef* refarg_1=(MemberDef*)*arg[2];
    rval=new cssTA_Base((void*)((taArray_base*)ths)->FindFromPath(arg[1]->GetStr(), refarg_1, (int)*arg[3]), 1, &TA_taBase);    *arg[2]=(void*)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taArray_base_SetFileName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taArray_base*)ths)->SetFileName(arg[1]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taArray_base_GetFileName_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taArray_base*)ths)->GetFileName());
    return rval;}
  static cssEl* cssElCFun_taArray_base_GetFileNameFmProject_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssString(((taArray_base*)ths)->GetFileNameFmProject(arg[1]->GetStr()));}
    if(na == 2) {
      rval=new cssString(((taArray_base*)ths)->GetFileNameFmProject(arg[1]->GetStr(), arg[2]->GetStr()));}
    if(na == 3) {
      rval=new cssString(((taArray_base*)ths)->GetFileNameFmProject(arg[1]->GetStr(), arg[2]->GetStr(), arg[3]->GetStr()));}
    if(na == 4) {
      rval=new cssString(((taArray_base*)ths)->GetFileNameFmProject(arg[1]->GetStr(), arg[2]->GetStr(), arg[3]->GetStr(), (bool)*arg[4]));}
    return rval;}
  static cssEl* cssElCFun_taArray_base_Load_strm_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      istream& refarg_0=*(istream*)arg[1]->GetVoidPtrOfType(&TA_istream);
    rval=new cssInt((int)((taArray_base*)ths)->Load_strm(refarg_0));}
    if(na == 2) {
      istream& refarg_0=*(istream*)arg[1]->GetVoidPtrOfType(&TA_istream);
    rval=new cssInt((int)((taArray_base*)ths)->Load_strm(refarg_0, (taBase*)(void*)*arg[2]));}
    if(na == 3) {
      istream& refarg_0=*(istream*)arg[1]->GetVoidPtrOfType(&TA_istream);
    rval=new cssInt((int)((taArray_base*)ths)->Load_strm(refarg_0, (taBase*)(void*)*arg[2], (taBase**)(void**)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_taArray_base_Load_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssInt((int)((taArray_base*)ths)->Load());}
    if(na == 1) {
      rval=new cssInt((int)((taArray_base*)ths)->Load(arg[1]->GetStr()));}
    if(na == 2) {
      rval=new cssInt((int)((taArray_base*)ths)->Load(arg[1]->GetStr(), (taBase**)(void**)*arg[2]));}
    if(na == 3) {
      rval=new cssInt((int)((taArray_base*)ths)->Load(arg[1]->GetStr(), (taBase**)(void**)*arg[2], arg[3]->GetStr()));}
    return rval;}
  static cssEl* cssElCFun_taArray_base_Save_strm_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ostream& refarg_0=*(ostream*)arg[1]->GetVoidPtrOfType(&TA_ostream);
    rval=new cssInt((int)((taArray_base*)ths)->Save_strm(refarg_0));}
    if(na == 2) {
      ostream& refarg_0=*(ostream*)arg[1]->GetVoidPtrOfType(&TA_ostream);
    rval=new cssInt((int)((taArray_base*)ths)->Save_strm(refarg_0, (taBase*)(void*)*arg[2]));}
    if(na == 3) {
      ostream& refarg_0=*(ostream*)arg[1]->GetVoidPtrOfType(&TA_ostream);
    rval=new cssInt((int)((taArray_base*)ths)->Save_strm(refarg_0, (taBase*)(void*)*arg[2], (int)*arg[3]));}
    return rval;}
  static cssEl* cssElCFun_taArray_base_Save_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssInt((int)((taArray_base*)ths)->Save());}
    if(na == 1) {
      rval=new cssInt((int)((taArray_base*)ths)->Save(arg[1]->GetStr()));}
    return rval;}
  static cssEl* cssElCFun_taArray_base_SaveAs_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssInt((int)((taArray_base*)ths)->SaveAs());}
    if(na == 1) {
      rval=new cssInt((int)((taArray_base*)ths)->SaveAs(arg[1]->GetStr()));}
    if(na == 2) {
      rval=new cssInt((int)((taArray_base*)ths)->SaveAs(arg[1]->GetStr(), arg[2]->GetStr()));}
    return rval;}
  static cssEl* cssElCFun_taArray_base_UpdateAfterEdit_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_base*)ths)->UpdateAfterEdit();
    return rval;}
  static cssEl* cssElCFun_taArray_base_UpdateAllViews_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_base*)ths)->UpdateAllViews();
    return rval;}
  static cssEl* cssElCFun_taArray_base_StructUpdate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_base*)ths)->StructUpdate((bool)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_base_DataUpdate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_base*)ths)->DataUpdate((bool)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_base_setDirty_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_base*)ths)->setDirty((bool)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_base_CheckConfig_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssBool(((taArray_base*)ths)->CheckConfig());}
    if(na == 1) {
      rval=new cssBool(((taArray_base*)ths)->CheckConfig((bool)*arg[1]));}
    return rval;}
  static cssEl* cssElCFun_taArray_base_CheckConfig_Gui_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssBool(((taArray_base*)ths)->CheckConfig_Gui());}
    if(na == 1) {
      rval=new cssBool(((taArray_base*)ths)->CheckConfig_Gui((bool)*arg[1]));}
    if(na == 2) {
      rval=new cssBool(((taArray_base*)ths)->CheckConfig_Gui((bool)*arg[1], (bool)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taArray_base_CopyFrom_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taArray_base*)ths)->CopyFrom((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_base_CopyTo_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taArray_base*)ths)->CopyTo((taBase*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_base_DuplicateMe_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taArray_base*)ths)->DuplicateMe());
    return rval;}
  static cssEl* cssElCFun_taArray_base_ChangeMyType_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taArray_base*)ths)->ChangeMyType((TypeDef*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_base_InheritsFrom_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taArray_base*)ths)->InheritsFrom((TypeDef*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_base_InheritsFromName_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taArray_base*)ths)->InheritsFromName((const char*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_base_GetEnumString_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taArray_base*)ths)->GetEnumString(arg[1]->GetStr(), (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taArray_base_GetEnumVal_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taArray_base*)ths)->GetEnumVal(arg[1]->GetStr()));}
    if(na == 2) {
      taString refarg_1=arg[2]->GetStr();
    rval=new cssInt((int)((taArray_base*)ths)->GetEnumVal(arg[1]->GetStr(), refarg_1));    *arg[2]=(String)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taArray_base_GetUserDataList_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssTA_Base((void*)((taArray_base*)ths)->GetUserDataList(), 1, &TA_UserDataItem_List);}
    if(na == 1) {
      rval=new cssTA_Base((void*)((taArray_base*)ths)->GetUserDataList((bool)*arg[1]), 1, &TA_UserDataItem_List);}
    return rval;}
  static cssEl* cssElCFun_taArray_base_HasUserData_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taArray_base*)ths)->HasUserData(arg[1]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taArray_base_GetUserData_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssVariant(((taArray_base*)ths)->GetUserData(arg[1]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taArray_base_GetUserDataAsBool_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taArray_base*)ths)->GetUserDataAsBool(arg[1]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taArray_base_GetUserDataAsInt_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray_base*)ths)->GetUserDataAsInt(arg[1]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taArray_base_GetUserDataAsFloat_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((taArray_base*)ths)->GetUserDataAsFloat(arg[1]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taArray_base_GetUserDataAsDouble_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((taArray_base*)ths)->GetUserDataAsDouble(arg[1]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taArray_base_GetUserDataAsString_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taArray_base*)ths)->GetUserDataAsString(arg[1]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taArray_base_SetUserData_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_base*)ths)->SetUserData(arg[1]->GetStr(), arg[2]->GetVar());
    return rval;}
  static cssEl* cssElCFun_taArray_base_Edit_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray_base*)ths)->Edit());
    return rval;}
  static cssEl* cssElCFun_taArray_base_EditDialog_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssInt((int)((taArray_base*)ths)->EditDialog());}
    if(na == 1) {
      rval=new cssInt((int)((taArray_base*)ths)->EditDialog((bool)*arg[1]));}
    return rval;}
  static cssEl* cssElCFun_taArray_base_BrowseMe_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_base*)ths)->BrowseMe();
    return rval;}
  static cssEl* cssElCFun_taArray_base_ReShowEdit_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      rval=new cssBool(((taArray_base*)ths)->ReShowEdit());}
    if(na == 1) {
      rval=new cssBool(((taArray_base*)ths)->ReShowEdit((bool)*arg[1]));}
    return rval;}
  static cssEl* cssElCFun_taArray_base_CallFun_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_base*)ths)->CallFun(arg[1]->GetStr());
    return rval;}
  static cssEl* cssElCFun_taArray_base_SelectForEdit_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taArray_base*)ths)->SelectForEdit((MemberDef*)*arg[1], (SelectEdit*)(void*)*arg[2], arg[3]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taArray_base_SelectForEditNm_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taArray_base*)ths)->SelectForEditNm(arg[1]->GetStr(), (SelectEdit*)(void*)*arg[2], arg[3]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taArray_base_SelectForEditSearch_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    SelectEdit* refarg_1=(SelectEdit*)(void*)*arg[2];
    rval=new cssInt((int)((taArray_base*)ths)->SelectForEditSearch(arg[1]->GetStr(), refarg_1));
    *arg[2]=(void*)refarg_1;
    return rval;}
  static cssEl* cssElCFun_taArray_base_SelectFunForEdit_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taArray_base*)ths)->SelectFunForEdit((MethodDef*)*arg[1], (SelectEdit*)(void*)*arg[2], arg[3]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taArray_base_SelectFunForEditNm_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taArray_base*)ths)->SelectFunForEditNm(arg[1]->GetStr(), (SelectEdit*)(void*)*arg[2], arg[3]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taArray_base_CloseLater_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_base*)ths)->CloseLater();
    return rval;}
  static cssEl* cssElCFun_taArray_base_Help_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_base*)ths)->Help();
    return rval;}
  static cssEl* cssElCFun_taArray_base_InRange_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taArray_base*)ths)->InRange((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_base_Alloc_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_base*)ths)->Alloc((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_base_Reset_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_base*)ths)->Reset();
    return rval;}
  static cssEl* cssElCFun_taArray_base_Equal__stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taArray_base*)ths)->Equal_(*(taArray_impl*)arg[1]->GetVoidPtrOfType(&TA_taArray_impl)));
    return rval;}
  static cssEl* cssElCFun_taArray_base_BlankEl__stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA((void*)((taArray_base*)ths)->BlankEl_(), 1, &TA_void);
    return rval;}
  static cssEl* cssElCFun_taArray_base_SetSize_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_base*)ths)->SetSize((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_base_AddBlank_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((taArray_base*)ths)->AddBlank();}
    if(na == 1) {
      ((taArray_base*)ths)->AddBlank((int)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_taArray_base_RemoveIdx_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssBool(((taArray_base*)ths)->RemoveIdx((uint)*arg[1]));}
    if(na == 2) {
      rval=new cssBool(((taArray_base*)ths)->RemoveIdx((uint)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taArray_base_MoveIdx_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taArray_base*)ths)->MoveIdx((int)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taArray_base_SwapIdx_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taArray_base*)ths)->SwapIdx((int)*arg[1], (int)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taArray_base_Permute_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_base*)ths)->Permute();
    return rval;}
  static cssEl* cssElCFun_taArray_base_Sort_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((taArray_base*)ths)->Sort();}
    if(na == 1) {
      ((taArray_base*)ths)->Sort((bool)*arg[1]);}
    return rval;}
  static cssEl* cssElCFun_taArray_base_ShiftLeft_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_base*)ths)->ShiftLeft((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_base_ShiftLeftPct_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_base*)ths)->ShiftLeftPct((float)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_base_V_Flip_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray_base*)ths)->V_Flip((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_base_Duplicate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_base*)ths)->Duplicate(*(taArray_impl*)arg[1]->GetVoidPtrOfType(&TA_taArray_impl));
    return rval;}
  static cssEl* cssElCFun_taArray_base_DupeUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_base*)ths)->DupeUnique(*(taArray_impl*)arg[1]->GetVoidPtrOfType(&TA_taArray_impl));
    return rval;}
  static cssEl* cssElCFun_taArray_base_Copy_Common_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_base*)ths)->Copy_Common(*(taArray_impl*)arg[1]->GetVoidPtrOfType(&TA_taArray_impl));
    return rval;}
  static cssEl* cssElCFun_taArray_base_Copy_Duplicate_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_base*)ths)->Copy_Duplicate(*(taArray_impl*)arg[1]->GetVoidPtrOfType(&TA_taArray_impl));
    return rval;}
  static cssEl* cssElCFun_taArray_base_CopyVals_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((taArray_base*)ths)->CopyVals(*(taArray_impl*)arg[1]->GetVoidPtrOfType(&TA_taArray_impl));}
    if(na == 2) {
      ((taArray_base*)ths)->CopyVals(*(taArray_impl*)arg[1]->GetVoidPtrOfType(&TA_taArray_impl), (int)*arg[2]);}
    if(na == 3) {
      ((taArray_base*)ths)->CopyVals(*(taArray_impl*)arg[1]->GetVoidPtrOfType(&TA_taArray_impl), (int)*arg[2], (int)*arg[3]);}
    if(na == 4) {
      ((taArray_base*)ths)->CopyVals(*(taArray_impl*)arg[1]->GetVoidPtrOfType(&TA_taArray_impl), (int)*arg[2], (int)*arg[3], (int)*arg[4]);}
    return rval;}
  static cssEl* cssElCFun_taArray_base_List_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((taArray_base*)ths)->List();}
    if(na == 1) {
      ostream& refarg_0=*(ostream*)arg[1]->GetVoidPtrOfType(&TA_ostream);
    ((taArray_base*)ths)->List(refarg_0);}
    return rval;}
  static cssEl* cssElCFun_taArray_base_InitFromString_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray_base*)ths)->InitFromString(arg[1]->GetStr());
    return rval;}
taArray<int>*		 TAI_taArray_int_=NULL;
  static cssEl* cssElCFun_taArray_int__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray<int>*)ths)->SafeEl((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_int__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray<int>*)ths)->FastEl((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_int__RevEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray<int>*)ths)->RevEl((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_int__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray<int>*)ths)->Pop());
    return rval;}
  static cssEl* cssElCFun_taArray_int__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssInt((int)((taArray<int>*)ths)->Peek());
    return rval;}
  static cssEl* cssElCFun_taArray_int__Set_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<int>*)ths)->Set((int)*arg[1], (int)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_taArray_int__Add_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<int>*)ths)->Add((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_int__AddUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taArray<int>*)ths)->AddUnique((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_int__Push_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<int>*)ths)->Push((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_int__Insert_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ((taArray<int>*)ths)->Insert((int)*arg[1], (int)*arg[2]);}
    if(na == 3) {
      ((taArray<int>*)ths)->Insert((int)*arg[1], (int)*arg[2], (int)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_taArray_int__FindEl_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taArray<int>*)ths)->FindEl((int)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((taArray<int>*)ths)->FindEl((int)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taArray_int__RemoveEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taArray<int>*)ths)->RemoveEl((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_int__InitVals_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((taArray<int>*)ths)->InitVals((int)*arg[1]);}
    if(na == 2) {
      ((taArray<int>*)ths)->InitVals((int)*arg[1], (int)*arg[2]);}
    if(na == 3) {
      ((taArray<int>*)ths)->InitVals((int)*arg[1], (int)*arg[2], (int)*arg[3]);}
    return rval;}
int_Array*		 TAI_int_Array=NULL;
  static cssEl* cssElCFun_int_Array_FillSeq_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 0) {
      ((int_Array*)ths)->FillSeq();}
    if(na == 1) {
      ((int_Array*)ths)->FillSeq((int)*arg[1]);}
    if(na == 2) {
      ((int_Array*)ths)->FillSeq((int)*arg[1], (int)*arg[2]);}
    return rval;}
taArray<float>*		 TAI_taArray_float_=NULL;
  static cssEl* cssElCFun_taArray_float__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((taArray<float>*)ths)->SafeEl((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_float__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((taArray<float>*)ths)->FastEl((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_float__RevEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((taArray<float>*)ths)->RevEl((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_float__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((taArray<float>*)ths)->Pop());
    return rval;}
  static cssEl* cssElCFun_taArray_float__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((taArray<float>*)ths)->Peek());
    return rval;}
  static cssEl* cssElCFun_taArray_float__Set_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<float>*)ths)->Set((int)*arg[1], (float)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_taArray_float__Add_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<float>*)ths)->Add((float)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_float__AddUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taArray<float>*)ths)->AddUnique((float)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_float__Push_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<float>*)ths)->Push((float)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_float__Insert_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ((taArray<float>*)ths)->Insert((float)*arg[1], (int)*arg[2]);}
    if(na == 3) {
      ((taArray<float>*)ths)->Insert((float)*arg[1], (int)*arg[2], (int)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_taArray_float__FindEl_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taArray<float>*)ths)->FindEl((float)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((taArray<float>*)ths)->FindEl((float)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taArray_float__RemoveEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taArray<float>*)ths)->RemoveEl((float)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_float__InitVals_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((taArray<float>*)ths)->InitVals((float)*arg[1]);}
    if(na == 2) {
      ((taArray<float>*)ths)->InitVals((float)*arg[1], (int)*arg[2]);}
    if(na == 3) {
      ((taArray<float>*)ths)->InitVals((float)*arg[1], (int)*arg[2], (int)*arg[3]);}
    return rval;}
float_Array*		 TAI_float_Array=NULL;
taArray<double>*		 TAI_taArray_double_=NULL;
  static cssEl* cssElCFun_taArray_double__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((taArray<double>*)ths)->SafeEl((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_double__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((taArray<double>*)ths)->FastEl((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_double__RevEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((taArray<double>*)ths)->RevEl((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_double__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((taArray<double>*)ths)->Pop());
    return rval;}
  static cssEl* cssElCFun_taArray_double__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssReal((double)((taArray<double>*)ths)->Peek());
    return rval;}
  static cssEl* cssElCFun_taArray_double__Set_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<double>*)ths)->Set((int)*arg[1], (double)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_taArray_double__Add_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<double>*)ths)->Add((double)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_double__AddUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taArray<double>*)ths)->AddUnique((double)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_double__Push_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<double>*)ths)->Push((double)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_double__Insert_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ((taArray<double>*)ths)->Insert((double)*arg[1], (int)*arg[2]);}
    if(na == 3) {
      ((taArray<double>*)ths)->Insert((double)*arg[1], (int)*arg[2], (int)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_taArray_double__FindEl_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taArray<double>*)ths)->FindEl((double)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((taArray<double>*)ths)->FindEl((double)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taArray_double__RemoveEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taArray<double>*)ths)->RemoveEl((double)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_double__InitVals_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((taArray<double>*)ths)->InitVals((double)*arg[1]);}
    if(na == 2) {
      ((taArray<double>*)ths)->InitVals((double)*arg[1], (int)*arg[2]);}
    if(na == 3) {
      ((taArray<double>*)ths)->InitVals((double)*arg[1], (int)*arg[2], (int)*arg[3]);}
    return rval;}
double_Array*		 TAI_double_Array=NULL;
taArray<char>*		 TAI_taArray_char_=NULL;
  static cssEl* cssElCFun_taArray_char__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssChar(((taArray<char>*)ths)->SafeEl((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_char__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssChar(((taArray<char>*)ths)->FastEl((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_char__RevEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssChar(((taArray<char>*)ths)->RevEl((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_char__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssChar(((taArray<char>*)ths)->Pop());
    return rval;}
  static cssEl* cssElCFun_taArray_char__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssChar(((taArray<char>*)ths)->Peek());
    return rval;}
  static cssEl* cssElCFun_taArray_char__Set_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<char>*)ths)->Set((int)*arg[1], (char)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_taArray_char__Add_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<char>*)ths)->Add((char)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_char__AddUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taArray<char>*)ths)->AddUnique((char)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_char__Push_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<char>*)ths)->Push((char)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_char__Insert_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ((taArray<char>*)ths)->Insert((char)*arg[1], (int)*arg[2]);}
    if(na == 3) {
      ((taArray<char>*)ths)->Insert((char)*arg[1], (int)*arg[2], (int)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_taArray_char__FindEl_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taArray<char>*)ths)->FindEl((char)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((taArray<char>*)ths)->FindEl((char)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taArray_char__RemoveEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taArray<char>*)ths)->RemoveEl((char)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_char__InitVals_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((taArray<char>*)ths)->InitVals((char)*arg[1]);}
    if(na == 2) {
      ((taArray<char>*)ths)->InitVals((char)*arg[1], (int)*arg[2]);}
    if(na == 3) {
      ((taArray<char>*)ths)->InitVals((char)*arg[1], (int)*arg[2], (int)*arg[3]);}
    return rval;}
char_Array*		 TAI_char_Array=NULL;
taArray<taString>*		 TAI_taArray_taString_=NULL;
  static cssEl* cssElCFun_taArray_taString__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taArray<taString>*)ths)->SafeEl((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_taString__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taArray<taString>*)ths)->FastEl((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_taString__RevEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taArray<taString>*)ths)->RevEl((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_taString__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taArray<taString>*)ths)->Pop());
    return rval;}
  static cssEl* cssElCFun_taArray_taString__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((taArray<taString>*)ths)->Peek());
    return rval;}
  static cssEl* cssElCFun_taArray_taString__Set_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<taString>*)ths)->Set((int)*arg[1], arg[2]->GetStr());
    return rval;}
  static cssEl* cssElCFun_taArray_taString__Add_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<taString>*)ths)->Add(arg[1]->GetStr());
    return rval;}
  static cssEl* cssElCFun_taArray_taString__AddUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taArray<taString>*)ths)->AddUnique(arg[1]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taArray_taString__Push_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<taString>*)ths)->Push(arg[1]->GetStr());
    return rval;}
  static cssEl* cssElCFun_taArray_taString__Insert_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ((taArray<taString>*)ths)->Insert(arg[1]->GetStr(), (int)*arg[2]);}
    if(na == 3) {
      ((taArray<taString>*)ths)->Insert(arg[1]->GetStr(), (int)*arg[2], (int)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_taArray_taString__FindEl_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taArray<taString>*)ths)->FindEl(arg[1]->GetStr()));}
    if(na == 2) {
      rval=new cssInt((int)((taArray<taString>*)ths)->FindEl(arg[1]->GetStr(), (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taArray_taString__RemoveEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taArray<taString>*)ths)->RemoveEl(arg[1]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_taArray_taString__InitVals_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((taArray<taString>*)ths)->InitVals(arg[1]->GetStr());}
    if(na == 2) {
      ((taArray<taString>*)ths)->InitVals(arg[1]->GetStr(), (int)*arg[2]);}
    if(na == 3) {
      ((taArray<taString>*)ths)->InitVals(arg[1]->GetStr(), (int)*arg[2], (int)*arg[3]);}
    return rval;}
String_Array*		 TAI_String_Array=NULL;
SArg_Array*		 TAI_SArg_Array=NULL;
  static cssEl* cssElCFun_SArg_Array_UpdateAfterEdit_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((SArg_Array*)ths)->UpdateAfterEdit();
    return rval;}
  static cssEl* cssElCFun_SArg_Array_HasValue_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((SArg_Array*)ths)->HasValue(arg[1]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_SArg_Array_GetValue_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssString(((SArg_Array*)ths)->GetValue(arg[1]->GetStr()));
    return rval;}
  static cssEl* cssElCFun_SArg_Array_SetValue_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((SArg_Array*)ths)->SetValue(arg[1]->GetStr(), arg[2]->GetStr());
    return rval;}
taArray<Variant>*		 TAI_taArray_Variant_=NULL;
  static cssEl* cssElCFun_taArray_Variant__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssVariant(((taArray<Variant>*)ths)->SafeEl((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_Variant__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssVariant(((taArray<Variant>*)ths)->FastEl((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_Variant__RevEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssVariant(((taArray<Variant>*)ths)->RevEl((int)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_Variant__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssVariant(((taArray<Variant>*)ths)->Pop());
    return rval;}
  static cssEl* cssElCFun_taArray_Variant__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssVariant(((taArray<Variant>*)ths)->Peek());
    return rval;}
  static cssEl* cssElCFun_taArray_Variant__Set_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<Variant>*)ths)->Set((int)*arg[1], arg[2]->GetVar());
    return rval;}
  static cssEl* cssElCFun_taArray_Variant__Add_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<Variant>*)ths)->Add(arg[1]->GetVar());
    return rval;}
  static cssEl* cssElCFun_taArray_Variant__AddUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taArray<Variant>*)ths)->AddUnique(arg[1]->GetVar()));
    return rval;}
  static cssEl* cssElCFun_taArray_Variant__Push_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<Variant>*)ths)->Push(arg[1]->GetVar());
    return rval;}
  static cssEl* cssElCFun_taArray_Variant__Insert_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ((taArray<Variant>*)ths)->Insert(arg[1]->GetVar(), (int)*arg[2]);}
    if(na == 3) {
      ((taArray<Variant>*)ths)->Insert(arg[1]->GetVar(), (int)*arg[2], (int)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_taArray_Variant__FindEl_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taArray<Variant>*)ths)->FindEl(arg[1]->GetVar()));}
    if(na == 2) {
      rval=new cssInt((int)((taArray<Variant>*)ths)->FindEl(arg[1]->GetVar(), (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taArray_Variant__RemoveEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taArray<Variant>*)ths)->RemoveEl(arg[1]->GetVar()));
    return rval;}
  static cssEl* cssElCFun_taArray_Variant__InitVals_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((taArray<Variant>*)ths)->InitVals(arg[1]->GetVar());}
    if(na == 2) {
      ((taArray<Variant>*)ths)->InitVals(arg[1]->GetVar(), (int)*arg[2]);}
    if(na == 3) {
      ((taArray<Variant>*)ths)->InitVals(arg[1]->GetVar(), (int)*arg[2], (int)*arg[3]);}
    return rval;}
Variant_Array*		 TAI_Variant_Array=NULL;
taArray<void*>*		 TAI_taArray_voidptr_=NULL;
  static cssEl* cssElCFun_taArray_voidptr__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<void*>*)ths)->SafeEl((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_voidptr__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<void*>*)ths)->FastEl((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_voidptr__RevEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<void*>*)ths)->RevEl((int)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_voidptr__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<void*>*)ths)->Pop();
    return rval;}
  static cssEl* cssElCFun_taArray_voidptr__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<void*>*)ths)->Peek();
    return rval;}
  static cssEl* cssElCFun_taArray_voidptr__Set_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<void*>*)ths)->Set((int)*arg[1], (void*)(void*)*arg[2]);
    return rval;}
  static cssEl* cssElCFun_taArray_voidptr__Add_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<void*>*)ths)->Add((void*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_voidptr__AddUnique_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taArray<void*>*)ths)->AddUnique((void*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_voidptr__Push_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    ((taArray<void*>*)ths)->Push((void*)(void*)*arg[1]);
    return rval;}
  static cssEl* cssElCFun_taArray_voidptr__Insert_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 2) {
      ((taArray<void*>*)ths)->Insert((void*)(void*)*arg[1], (int)*arg[2]);}
    if(na == 3) {
      ((taArray<void*>*)ths)->Insert((void*)(void*)*arg[1], (int)*arg[2], (int)*arg[3]);}
    return rval;}
  static cssEl* cssElCFun_taArray_voidptr__FindEl_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssInt((int)((taArray<void*>*)ths)->FindEl((void*)(void*)*arg[1]));}
    if(na == 2) {
      rval=new cssInt((int)((taArray<void*>*)ths)->FindEl((void*)(void*)*arg[1], (int)*arg[2]));}
    return rval;}
  static cssEl* cssElCFun_taArray_voidptr__RemoveEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taArray<void*>*)ths)->RemoveEl((void*)(void*)*arg[1]));
    return rval;}
  static cssEl* cssElCFun_taArray_voidptr__InitVals_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      ((taArray<void*>*)ths)->InitVals((void*)(void*)*arg[1]);}
    if(na == 2) {
      ((taArray<void*>*)ths)->InitVals((void*)(void*)*arg[1], (int)*arg[2]);}
    if(na == 3) {
      ((taArray<void*>*)ths)->InitVals((void*)(void*)*arg[1], (int)*arg[2], (int)*arg[3]);}
    return rval;}
voidptr_Array*		 TAI_voidptr_Array=NULL;
taList<UserDataItemBase>*		 TAI_taList_UserDataItemBase_=NULL;
  static cssEl* cssElCFun_taList_UserDataItemBase__MoveBefore_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taList<UserDataItemBase>*)ths)->MoveBefore((UserDataItemBase*)(void*)*arg[1], (UserDataItemBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_UserDataItemBase__MoveAfter_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssBool(((taList<UserDataItemBase>*)ths)->MoveAfter((UserDataItemBase*)(void*)*arg[1], (UserDataItemBase*)(void*)*arg[2]));
    return rval;}
  static cssEl* cssElCFun_taList_UserDataItemBase__SafeEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<UserDataItemBase>*)ths)->SafeEl((int)*arg[1]), 1, &TA_UserDataItemBase);
    return rval;}
  static cssEl* cssElCFun_taList_UserDataItemBase__FastEl_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<UserDataItemBase>*)ths)->FastEl((int)*arg[1]), 1, &TA_UserDataItemBase);
    return rval;}
  static cssEl* cssElCFun_taList_UserDataItemBase__DefaultEl_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<UserDataItemBase>*)ths)->DefaultEl(), 1, &TA_UserDataItemBase);
    return rval;}
  static cssEl* cssElCFun_taList_UserDataItemBase__Edit_El_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<UserDataItemBase>*)ths)->Edit_El((UserDataItemBase*)(void*)*arg[1]), 1, &TA_UserDataItemBase);
    return rval;}
  static cssEl* cssElCFun_taList_UserDataItemBase__FindName_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taList<UserDataItemBase>*)ths)->FindName(arg[1]->GetStr()), 1, &TA_UserDataItemBase);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taList<UserDataItemBase>*)ths)->FindName(arg[1]->GetStr(), refarg_1), 1, &TA_UserDataItemBase);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taList_UserDataItemBase__FindType_stub(void* ths,int na, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    if(na == 1) {
      rval=new cssTA_Base((void*)((taList<UserDataItemBase>*)ths)->FindType((TypeDef*)*arg[1]), 1, &TA_UserDataItemBase);}
    if(na == 2) {
      int refarg_1=(int)*arg[2];
    rval=new cssTA_Base((void*)((taList<UserDataItemBase>*)ths)->FindType((TypeDef*)*arg[1], refarg_1), 1, &TA_UserDataItemBase);    *arg[2]=(Int)refarg_1;
}
    return rval;}
  static cssEl* cssElCFun_taList_UserDataItemBase__First_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<UserDataItemBase>*)ths)->First(), 1, &TA_UserDataItemBase);
    return rval;}
  static cssEl* cssElCFun_taList_UserDataItemBase__Pop_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<UserDataItemBase>*)ths)->Pop(), 1, &TA_UserDataItemBase);
    return rval;}
  static cssEl* cssElCFun_taList_UserDataItemBase__Peek_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<UserDataItemBase>*)ths)->Peek(), 1, &TA_UserDataItemBase);
    return rval;}
  static cssEl* cssElCFun_taList_UserDataItemBase__AddUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<UserDataItemBase>*)ths)->AddUniqNameOld((UserDataItemBase*)(void*)*arg[1]), 1, &TA_UserDataItemBase);
    return rval;}
  static cssEl* cssElCFun_taList_UserDataItemBase__LinkUniqNameOld_stub(void* ths,int, cssEl** arg) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taList<UserDataItemBase>*)ths)->LinkUniqNameOld((UserDataItemBase*)(void*)*arg[1]), 1, &TA_UserDataItemBase);
    return rval;}
UserDataItem_List*		 TAI_UserDataItem_List=NULL;
  static cssEl* cssElCFun_taSmartPtrT_UserDataItem_List__ptr_stub(void* ths,int, cssEl**) {
    cssEl* rval=&cssMisc::Void;
    rval=new cssTA_Base((void*)((taSmartPtrT<UserDataItem_List>*)ths)->ptr(), 1, &TA_UserDataItem_List);
    return rval;}

// Type Data

static EnumDef_data TA_taBase_Orientation[]={
  {"Horizontal","","",1},
  {"Vertical","","",2},
  NULL};
static EnumDef_data TA_taBase_ValType[]={
  {"VT_STRING"," an ANSI string of any length","",0},
  {"VT_DOUBLE"," a 8-byte floating point value (aprox 15 sig decimal digits)","",1},
  {"VT_FLOAT"," a 4-byte floating point value (aprox 7 sig decimal digits)","",2},
  {"VT_INT"," a 32-bit signed integer","",3},
  {"VT_BYTE"," an unsigned 8-bit integer; used mostly for image components (rgb)","",4},
  {"VT_VARIANT"," a Variant, which can hold scalars, matrices, and objects","",5},
  NULL};
static EnumDef_data TA_taBase_BaseFlags[]={
  {"THIS_INVALID"," CheckThisConfig_impl has detected a problem","",1},
  {"CHILD_INVALID"," CheckChildConfig_impl returns issue with a child","",2},
  {"DESTROYING"," Set in Destroying at the very beginning of destroy","",64},
  {"DESTROYED"," set in base destroy (DEBUG only); lets us detect multi destroys","",128},
  NULL};
static EnumDef_data TA_taBase_DumpQueryResult[]={
  {"DQR_NO_SAVE"," definitely do not save","",0},
  {"DQR_SAVE"," definitely save","",1},
  {"DQR_DEFAULT"," do default for this member (this is the base result)","",2},
  NULL};
static MethodArgs_data TA_taBase_New_MethArgs[]={
  {&TA_int,NULL,"n_objs","1"},
  {&TA_TypeDef_ptr,NULL,"type","__null"},
  NULL};
static MethodArgs_data TA_taBase_HasBaseFlag_MethArgs[]={
  {&TA_int,NULL,"flag",""},
  NULL};
static MethodArgs_data TA_taBase_SetBaseFlag_MethArgs[]={
  {&TA_int,NULL,"flag",""},
  NULL};
static MethodArgs_data TA_taBase_ClearBaseFlag_MethArgs[]={
  {&TA_int,NULL,"flag",""},
  NULL};
static MethodArgs_data TA_taBase_SetEnabled_MethArgs[]={
  {&TA_bool,NULL,"value",""},
  NULL};
static MethodArgs_data TA_taBase_GetOwner_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"td",""},
  NULL};
static MethodArgs_data TA_taBase_GetPath_MethArgs[]={
  {&TA_TAPtr,NULL,"ta","__null"},
  {&TA_TAPtr,NULL,"par_stop","__null"},
  NULL};
static MethodArgs_data TA_taBase_FindFromPath_MethArgs[]={
  {&TA_const_taString_ref,NULL,"path",""},
  {&TA_MemberDef_ptr_ref,NULL,"ret_md","no_mdef"},
  {&TA_int,NULL,"start","0"},
  NULL};
static MethodArgs_data TA_taBase_SetFileName_MethArgs[]={
  {&TA_const_taString_ref,NULL,"val",""},
  NULL};
static MethodArgs_data TA_taBase_GetFileNameFmProject_MethArgs[]={
  {&TA_const_taString_ref,NULL,"ext",""},
  {&TA_const_taString_ref,NULL,"tag"," "},
  {&TA_const_taString_ref,NULL,"subdir"," "},
  {&TA_bool,NULL,"dmem_proc_no"," false"},
  NULL};
static MethodArgs_data TA_taBase_Load_strm_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_TAPtr,NULL,"par","__null"},
  {&TA_taBase_ptr_ptr,NULL,"loaded_obj_ptr"," __null"},
  NULL};
static MethodArgs_data TA_taBase_Load_MethArgs[]={
  {&TA_const_taString_ref,NULL,"fname",""},
  {&TA_taBase_ptr_ptr,NULL,"loaded_obj_ptr"," __null"},
  {&TA_taString,NULL,"context"," taString()"},
  NULL};
static MethodArgs_data TA_taBase_Save_strm_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  {&TA_TAPtr,NULL,"par","__null"},
  {&TA_int,NULL,"indent","0"},
  NULL};
static MethodArgs_data TA_taBase_Save_MethArgs[]={
  {&TA_taString,NULL,"context"," taString()"},
  NULL};
static MethodArgs_data TA_taBase_SaveAs_MethArgs[]={
  {&TA_const_taString_ref,NULL,"fname"," taString()"},
  {&TA_taString,NULL,"context"," taString()"},
  NULL};
static MethodArgs_data TA_taBase_StructUpdate_MethArgs[]={
  {&TA_bool,NULL,"begin",""},
  NULL};
static MethodArgs_data TA_taBase_DataUpdate_MethArgs[]={
  {&TA_bool,NULL,"begin",""},
  NULL};
static MethodArgs_data TA_taBase_setDirty_MethArgs[]={
  {&TA_bool,NULL,"value",""},
  NULL};
static MethodArgs_data TA_taBase_CheckConfig_MethArgs[]={
  {&TA_bool,NULL,"quiet"," false"},
  NULL};
static MethodArgs_data TA_taBase_CheckConfig_Gui_MethArgs[]={
  {&TA_bool,NULL,"confirm_success"," true"},
  {&TA_bool,NULL,"quiet"," false"},
  NULL};
static MethodArgs_data TA_taBase_CopyFrom_MethArgs[]={
  {&TA_TAPtr,NULL,"cpy_from",""},
  NULL};
static MethodArgs_data TA_taBase_CopyTo_MethArgs[]={
  {&TA_TAPtr,NULL,"cpy_to",""},
  NULL};
static MethodArgs_data TA_taBase_ChangeMyType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"new_type",""},
  NULL};
static MethodArgs_data TA_taBase_InheritsFrom_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"it",""},
  NULL};
static MethodArgs_data TA_taBase_InheritsFromName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"nm",""},
  NULL};
static MethodArgs_data TA_taBase_GetEnumString_MethArgs[]={
  {&TA_const_taString_ref,NULL,"enum_tp_nm",""},
  {&TA_int,NULL,"enum_val",""},
  NULL};
static MethodArgs_data TA_taBase_GetEnumVal_MethArgs[]={
  {&TA_const_taString_ref,NULL,"enum_nm",""},
  {&TA_taString_ref,NULL,"enum_tp_nm"," no_name"},
  NULL};
static MethodArgs_data TA_taBase_GetUserDataList_MethArgs[]={
  {&TA_bool,NULL,"force_create"," false"},
  NULL};
static MethodArgs_data TA_taBase_HasUserData_MethArgs[]={
  {&TA_const_taString_ref,NULL,"key",""},
  NULL};
static MethodArgs_data TA_taBase_GetUserData_MethArgs[]={
  {&TA_const_taString_ref,NULL,"key",""},
  NULL};
static MethodArgs_data TA_taBase_GetUserDataAsBool_MethArgs[]={
  {&TA_const_taString_ref,NULL,"key",""},
  NULL};
static MethodArgs_data TA_taBase_GetUserDataAsInt_MethArgs[]={
  {&TA_const_taString_ref,NULL,"key",""},
  NULL};
static MethodArgs_data TA_taBase_GetUserDataAsFloat_MethArgs[]={
  {&TA_const_taString_ref,NULL,"key",""},
  NULL};
static MethodArgs_data TA_taBase_GetUserDataAsDouble_MethArgs[]={
  {&TA_const_taString_ref,NULL,"key",""},
  NULL};
static MethodArgs_data TA_taBase_GetUserDataAsString_MethArgs[]={
  {&TA_const_taString_ref,NULL,"key",""},
  NULL};
static MethodArgs_data TA_taBase_SetUserData_MethArgs[]={
  {&TA_const_taString_ref,NULL,"key",""},
  {&TA_const_Variant_ref,NULL,"value",""},
  NULL};
static MethodArgs_data TA_taBase_EditDialog_MethArgs[]={
  {&TA_bool,NULL,"modal"," false"},
  NULL};
static MethodArgs_data TA_taBase_ReShowEdit_MethArgs[]={
  {&TA_bool,NULL,"force"," false"},
  NULL};
static MethodArgs_data TA_taBase_CallFun_MethArgs[]={
  {&TA_const_taString_ref,NULL,"fun_name",""},
  NULL};
static MethodArgs_data TA_taBase_SelectForEdit_MethArgs[]={
  {&TA_MemberDef_ptr,NULL,"member",""},
  {&TA_SelectEdit_ptr,NULL,"editor",""},
  {&TA_const_taString_ref,NULL,"extra_label",""},
  NULL};
static MethodArgs_data TA_taBase_SelectForEditNm_MethArgs[]={
  {&TA_const_taString_ref,NULL,"memb_nm",""},
  {&TA_SelectEdit_ptr,NULL,"editor",""},
  {&TA_const_taString_ref,NULL,"extra_label",""},
  NULL};
static MethodArgs_data TA_taBase_SelectForEditSearch_MethArgs[]={
  {&TA_const_taString_ref,NULL,"memb_contains",""},
  {&TA_SelectEdit_ptr_ref,NULL,"editor",""},
  NULL};
static MethodArgs_data TA_taBase_SelectFunForEdit_MethArgs[]={
  {&TA_MethodDef_ptr,NULL,"function",""},
  {&TA_SelectEdit_ptr,NULL,"editor",""},
  {&TA_const_taString_ref,NULL,"extra_label",""},
  NULL};
static MethodArgs_data TA_taBase_SelectFunForEditNm_MethArgs[]={
  {&TA_const_taString_ref,NULL,"function_nm",""},
  {&TA_SelectEdit_ptr,NULL,"editor",""},
  {&TA_const_taString_ref,NULL,"extra_label",""},
  NULL};
static MethodDef_data TA_taBase_MethodDef[]={
  {&TA_taBase_ptr,NULL,"New"," Create n_objs objects of given type (type is optional)","CAT_ObjectMgmt ","",
    0,2,0,1,0,NULL,cssElCFun_taBase_New_stub,TA_taBase_New_MethArgs},
  {&TA_bool,NULL,"HasBaseFlag"," true if flag set, or if multiple, any set","CAT_ObjectMgmt ","",
    0,1,-1,0,0,NULL,cssElCFun_taBase_HasBaseFlag_stub,TA_taBase_HasBaseFlag_MethArgs},
  {&TA_void,NULL,"SetBaseFlag"," sets the flag(s)","CAT_ObjectMgmt ","",
    0,1,-1,0,0,NULL,cssElCFun_taBase_SetBaseFlag_stub,TA_taBase_SetBaseFlag_MethArgs},
  {&TA_void,NULL,"ClearBaseFlag"," clears the flag(s)","CAT_ObjectMgmt ","",
    0,1,-1,0,0,NULL,cssElCFun_taBase_ClearBaseFlag_stub,TA_taBase_ClearBaseFlag_MethArgs},
  {&TA_int,NULL,"GetIndex"," object's index within an owner list. cached by some objs.","CAT_ObjectMgmt ","",
    0,0,-1,1,0,NULL,cssElCFun_taBase_GetIndex_stub,NULL},
  {&TA_int,NULL,"GetEnabled"," for items that support an enabled/disabled state; -1=n/a, 0=disabled, 1=enabled (note: (bool)-1 = true)","","",
    0,0,-1,1,0,NULL,cssElCFun_taBase_GetEnabled_stub,NULL},
  {&TA_void,NULL,"SetEnabled","","","",
    0,1,-1,1,0,NULL,cssElCFun_taBase_SetEnabled_stub,TA_taBase_SetEnabled_MethArgs},
  {&TA_taList_impl_ptr,NULL,"children_"," for lists, and for taOBase w/ default children","","",
    0,0,-1,1,0,NULL,cssElCFun_taBase_children__stub,NULL},
  {&TA_TAPtr,NULL,"GetOwner"," ","CAT_ObjectMgmt ","",
    1,1,-1,1,0,NULL,cssElCFun_taBase_GetOwner_stub,TA_taBase_GetOwner_MethArgs},
  {&TA_taString,NULL,"GetPath"," get path without name informtation, stop at par_stop if non-null","CAT_ObjectMgmt ","",
    0,2,0,1,0,NULL,cssElCFun_taBase_GetPath_stub,TA_taBase_GetPath_MethArgs},
  {&TA_TAPtr,NULL,"FindFromPath"," find object from path (starting from this, and position start of the path)","CAT_ObjectMgmt ","",
    0,3,1,1,0,NULL,cssElCFun_taBase_FindFromPath_stub,TA_taBase_FindFromPath_MethArgs},
  {&TA_bool,NULL,"SetFileName"," set file name for object","CAT_File ","",
    0,1,-1,1,0,NULL,cssElCFun_taBase_SetFileName_stub,TA_taBase_SetFileName_MethArgs},
  {&TA_taString,NULL,"GetFileName"," get file name object was last saved with","CAT_File ","",
    0,0,-1,1,0,NULL,cssElCFun_taBase_GetFileName_stub,NULL},
  {&TA_taString,NULL,"GetFileNameFmProject"," get file name from project file name -- useful for saving files associated with the project; ext = extension; tag = additional tag; subdir = additional directory after any existing in project name; fname = proj->base_name (subdir) + tag + ext; if dmem_proc_no, add dmem proc no to file name. empty if project not found","CAT_File ","",
    0,4,1,1,0,NULL,cssElCFun_taBase_GetFileNameFmProject_stub,TA_taBase_GetFileNameFmProject_MethArgs},
  {&TA_int,NULL,"Load_strm"," Load object data from a file -- sets pointer to loaded obj if non-null: could actually load a different object than this (e.g. if this is a list or group)","CAT_File ","",
    0,3,1,1,0,NULL,cssElCFun_taBase_Load_strm_stub,TA_taBase_Load_strm_MethArgs},
  {&TA_int,NULL,"Load"," Load object data from given file name (if empty, prompt user for a name) -- sets pointer to loaded obj if non-null: could actually load a different object than this (e.g. if this is a list or group)","MENU MENU_ON_Object ARGC_0 CAT_File ","",
    0,3,0,1,0,NULL,cssElCFun_taBase_Load_stub,TA_taBase_Load_MethArgs},
  {&TA_int,NULL,"Save_strm"," Save object data to a file stream","CAT_File ","",
    0,3,1,1,0,NULL,cssElCFun_taBase_Save_strm_stub,TA_taBase_Save_strm_MethArgs},
  {&TA_int,NULL,"Save"," saves the object to a file using current file name (from GetFileName() function); if context='' then default is used","MENU MENU_ON_Object ARGC_0 CAT_File ","",
    0,1,0,1,0,NULL,cssElCFun_taBase_Save_stub,TA_taBase_Save_MethArgs},
  {&TA_int,NULL,"SaveAs"," Saves object data to a new file -- if fname is empty, it prompts the user; if context='' then default is used","MENU ARGC_0 CAT_File ","",
    0,2,0,1,0,NULL,cssElCFun_taBase_SaveAs_stub,TA_taBase_SaveAs_MethArgs},
  {&TA_void,NULL,"UpdateAfterEdit"," called after editing, or any user change to members (eg. in the interface, script)","CAT_ObjectMgmt ","",
    0,0,-1,1,0,NULL,cssElCFun_taBase_UpdateAfterEdit_stub,NULL},
  {&TA_void,NULL,"UpdateAllViews"," called after data changes, to update views","CAT_Display ","",
    0,0,-1,1,0,NULL,cssElCFun_taBase_UpdateAllViews_stub,NULL},
  {&TA_void,NULL,"StructUpdate"," bracket structural changes with (nestable) true/false calls;","CAT_ObjectMgmt ","",
    0,1,-1,0,0,NULL,cssElCFun_taBase_StructUpdate_stub,TA_taBase_StructUpdate_MethArgs},
  {&TA_void,NULL,"DataUpdate"," bracket data value changes with (nestable) true/false calls;","CAT_ObjectMgmt ","",
    0,1,-1,0,0,NULL,cssElCFun_taBase_DataUpdate_stub,TA_taBase_DataUpdate_MethArgs},
  {&TA_void,NULL,"setDirty"," set the dirty flag indicating a change in object values; 'true' gets forwarded up; 'false' does nothing","CAT_ObjectMgmt ","",
    0,1,-1,1,0,NULL,cssElCFun_taBase_setDirty_stub,TA_taBase_setDirty_MethArgs},
  {&TA_bool,NULL,"CheckConfig"," check the configuration of this object and all its children (defaults to no confirm of success)","CAT_ObjectMgmt ","",
    0,1,0,0,0,NULL,cssElCFun_taBase_CheckConfig_stub,TA_taBase_CheckConfig_MethArgs},
  {&TA_bool,NULL,"CheckConfig_Gui"," check the configuration of this object and all its children -- failed items highlighted in red, items with failed children in yellow","MENU MENU_ON_Object CAT_ObjectMgmt ARGC_0 LABEL_CheckConfig ","",
    0,2,0,0,0,NULL,cssElCFun_taBase_CheckConfig_Gui_stub,TA_taBase_CheckConfig_Gui_MethArgs},
  {&TA_bool,NULL,"CopyFrom"," Copy from given object into this object","MENU MENU_ON_Object MENU_SEP_BEFORE TYPE_ON_this NO_SCOPE CAT_ObjectMgmt ","",
    0,1,-1,1,0,NULL,cssElCFun_taBase_CopyFrom_stub,TA_taBase_CopyFrom_MethArgs},
  {&TA_bool,NULL,"CopyTo"," Copy to given object from this object","MENU TYPE_ON_this NO_SCOPE CAT_ObjectMgmt ","",
    0,1,-1,1,0,NULL,cssElCFun_taBase_CopyTo_stub,TA_taBase_CopyTo_MethArgs},
  {&TA_bool,NULL,"DuplicateMe"," Make another copy of myself (done through owner)","MENU CONFIRM CAT_ObjectMgmt ","",
    0,0,-1,1,0,NULL,cssElCFun_taBase_DuplicateMe_stub,NULL},
  {&TA_bool,NULL,"ChangeMyType"," Change me into a different type of object, copying current info (done through owner)","MENU TYPE_this CAT_ObjectMgmt ","",
    0,1,-1,1,0,NULL,cssElCFun_taBase_ChangeMyType_stub,TA_taBase_ChangeMyType_MethArgs},
  {&TA_bool,NULL,"InheritsFrom"," does this inherit from given type ","CAT_ObjectMgmt ","",
    1,1,-1,0,0,NULL,cssElCFun_taBase_InheritsFrom_stub,TA_taBase_InheritsFrom_MethArgs},
  {&TA_bool,NULL,"InheritsFromName"," does this inherit from given type name?","CAT_ObjectMgmt ","",
    0,1,-1,0,0,NULL,cssElCFun_taBase_InheritsFromName_stub,TA_taBase_InheritsFromName_MethArgs},
  {&TA_taString,NULL,"GetEnumString"," get the name corresponding to given enum value in enum type enum_tp_nm","CAT_ObjectMgmt ","",
    0,2,-1,1,0,NULL,cssElCFun_taBase_GetEnumString_stub,TA_taBase_GetEnumString_MethArgs},
  {&TA_int,NULL,"GetEnumVal"," get the enum value corresponding to the given enum name (-1 if not found), and sets enum_tp_nm to name of type this enum belongs in (empty if not found)","CAT_ObjectMgmt ","",
    0,2,1,1,0,NULL,cssElCFun_taBase_GetEnumVal_stub,TA_taBase_GetEnumVal_MethArgs},
  {&TA_UserDataItem_List_ptr,NULL,"GetUserDataList"," gets the userdatalist for this class","CAT_UserData EXPERT ","",
    0,1,0,1,0,NULL,cssElCFun_taBase_GetUserDataList_stub,TA_taBase_GetUserDataList_MethArgs},
  {&TA_bool,NULL,"HasUserData"," returns true if UserData exists for this key (case sens)","CAT_UserData EXPERT ","",
    0,1,-1,1,0,NULL,cssElCFun_taBase_HasUserData_stub,TA_taBase_HasUserData_MethArgs},
  {&TA_const_Variant,NULL,"GetUserData"," get specified user data; returns class default value if not present, or nilVariant if no default user data or class doesn't support UserData","CAT_UserData ","",
    0,1,-1,1,0,NULL,cssElCFun_taBase_GetUserData_stub,TA_taBase_GetUserData_MethArgs},
  {&TA_bool,NULL,"GetUserDataAsBool"," get specified user data as bool (see GetUserData)","CAT_UserData EXPERT ","",
    0,1,-1,0,0,NULL,cssElCFun_taBase_GetUserDataAsBool_stub,TA_taBase_GetUserDataAsBool_MethArgs},
  {&TA_int,NULL,"GetUserDataAsInt"," get specified user data as int (see GetUserData)","CAT_UserData EXPERT ","",
    0,1,-1,0,0,NULL,cssElCFun_taBase_GetUserDataAsInt_stub,TA_taBase_GetUserDataAsInt_MethArgs},
  {&TA_float,NULL,"GetUserDataAsFloat"," get specified user data as float (see GetUserData)","CAT_UserData EXPERT ","",
    0,1,-1,0,0,NULL,cssElCFun_taBase_GetUserDataAsFloat_stub,TA_taBase_GetUserDataAsFloat_MethArgs},
  {&TA_double,NULL,"GetUserDataAsDouble"," get specified user data as double (see GetUserData)","CAT_UserData EXPERT ","",
    0,1,-1,0,0,NULL,cssElCFun_taBase_GetUserDataAsDouble_stub,TA_taBase_GetUserDataAsDouble_MethArgs},
  {&TA_const_taString,NULL,"GetUserDataAsString"," get specified user data as String (see GetUserData)","CAT_UserData EXPERT ","",
    0,1,-1,0,0,NULL,cssElCFun_taBase_GetUserDataAsString_stub,TA_taBase_GetUserDataAsString_MethArgs},
  {&TA_void,NULL,"SetUserData"," set user data; ignored if class does not support user data","CAT_UserData EXPERT ","",
    0,2,-1,1,0,NULL,cssElCFun_taBase_SetUserData_stub,TA_taBase_SetUserData_MethArgs},
  {&TA_int,NULL,"Edit"," Edit this object using the gui","MENU ARGC_0 MENU_ON_Object MENU_CONTEXT NO_SCRIPT CAT_Display ","",
    0,0,-1,1,0,NULL,cssElCFun_taBase_Edit_stub,NULL},
  {&TA_int,NULL,"EditDialog"," Edit this object in a popup dialog using the gui","MENU ARGC_0 MENU_ON_Object MENU_CONTEXT NO_SCRIPT CAT_Display ","",
    0,1,0,1,0,NULL,cssElCFun_taBase_EditDialog_stub,TA_taBase_EditDialog_MethArgs},
  {&TA_void,NULL,"BrowseMe"," show this object in its own browser ","MENU MENU_ON_Object MENU_SEP_AFTER MENU_CONTEXT CAT_Display ","",
    0,0,-1,1,0,NULL,cssElCFun_taBase_BrowseMe_stub,NULL},
  {&TA_bool,NULL,"ReShowEdit"," reshows any open edit dialogs for this object","CAT_Display ","",
    0,1,0,1,0,NULL,cssElCFun_taBase_ReShowEdit_stub,TA_taBase_ReShowEdit_MethArgs},
  {&TA_void,NULL,"CallFun"," call function of given name on this object, prompting for args using gui interface","CAT_ObjectMgmt ","",
    0,1,-1,1,0,NULL,cssElCFun_taBase_CallFun_stub,TA_taBase_CallFun_MethArgs},
  {&TA_bool,NULL,"SelectForEdit"," select a given member for editing in an edit dialog that collects selected members and methods from different objects (if editor is NULL, a new one is created in .edits). returns false if method was already selected","MENU CAT_Display NULL_OK ","",
    0,3,-1,1,0,NULL,cssElCFun_taBase_SelectForEdit_stub,TA_taBase_SelectForEdit_MethArgs},
  {&TA_bool,NULL,"SelectForEditNm"," select a given member (by name) for editing in an edit dialog that collects selected members from different objects (if editor is NULL, a new one is created in .edits). returns false if method was already selected","","",
    0,3,-1,1,0,NULL,cssElCFun_taBase_SelectForEditNm_stub,TA_taBase_SelectForEditNm_MethArgs},
  {&TA_int,NULL,"SelectForEditSearch"," search among this object and any sub-objects for members containing given string, and add to given select editor (if NULL, a new one is created in .edits). returns number found","MENU NULL_OK CAT_Display ","",
    0,2,-1,1,0,NULL,cssElCFun_taBase_SelectForEditSearch_stub,TA_taBase_SelectForEditSearch_MethArgs},
  {&TA_bool,NULL,"SelectFunForEdit"," select a given function (method) for calling in a select edit dialog that collects selected members and methods from different objects (if editor is NULL, a new one is created in .edits). returns false if method was already selected","MENU NULL_OK CAT_Display ","",
    0,3,-1,1,0,NULL,cssElCFun_taBase_SelectFunForEdit_stub,TA_taBase_SelectFunForEdit_MethArgs},
  {&TA_bool,NULL,"SelectFunForEditNm"," select a given method (by name) for editing in an edit dialog that collects selected members from different objects (if editor is NULL, a new one is created in .edits) returns false if method was already selected","","",
    0,3,-1,1,0,NULL,cssElCFun_taBase_SelectFunForEditNm_stub,TA_taBase_SelectFunForEditNm_MethArgs},
  {&TA_void,NULL,"CloseLater"," PERMANENTLY Destroy this object! This is not Iconify.","MENU CONFIRM NO_REVERT_AFTER LABEL_Close_(Destroy) NO_MENU_CONTEXT CAT_ObjectMgmt ","",
    0,0,-1,1,0,NULL,cssElCFun_taBase_CloseLater_stub,NULL},
  {&TA_void,NULL,"Help"," get help on using this object","MENU CAT_Display ","",
    0,0,-1,1,0,NULL,cssElCFun_taBase_Help_stub,NULL},
  NULL};
static MethodArgs_data TA_taString_CharToCppLiteral_MethArgs[]={
  {&TA_char,NULL,"c",""},
  NULL};
static MethodArgs_data TA_taString_StringToCppLiteral_MethArgs[]={
  {&TA_const_taString_ref,NULL,"str",""},
  NULL};
static MethodArgs_data TA_taString_setRep_MethArgs[]={
  {&TA_taStrRep_ptr,NULL,"rep_",""},
  NULL};
static MethodArgs_data TA_taString_makeUnique_MethArgs[]={
  {&TA_uint,NULL,"min_new_sz",""},
  NULL};
static MethodArgs_data TA_taString_toShort_MethArgs[]={
  {&TA_bool_ptr,NULL,"ok"," 0"},
  {&TA_int,NULL,"base"," 10"},
  NULL};
static MethodArgs_data TA_taString_toUShort_MethArgs[]={
  {&TA_bool_ptr,NULL,"ok"," 0"},
  {&TA_int,NULL,"base"," 10"},
  NULL};
static MethodArgs_data TA_taString_toInt_MethArgs[]={
  {&TA_bool_ptr,NULL,"ok"," 0"},
  {&TA_int,NULL,"base"," 10"},
  NULL};
static MethodArgs_data TA_taString_toUInt_MethArgs[]={
  {&TA_bool_ptr,NULL,"ok"," 0"},
  {&TA_int,NULL,"base"," 10"},
  NULL};
static MethodArgs_data TA_taString_toInt64_MethArgs[]={
  {&TA_bool_ptr,NULL,"ok"," 0"},
  {&TA_int,NULL,"base"," 10"},
  NULL};
static MethodArgs_data TA_taString_toUInt64_MethArgs[]={
  {&TA_bool_ptr,NULL,"ok"," 0"},
  {&TA_int,NULL,"base"," 10"},
  NULL};
static MethodArgs_data TA_taString_toFloat_MethArgs[]={
  {&TA_bool_ptr,NULL,"ok"," 0"},
  NULL};
static MethodArgs_data TA_taString_toDouble_MethArgs[]={
  {&TA_bool_ptr,NULL,"ok"," 0"},
  NULL};
static MethodArgs_data TA_taString_convert_MethArgs[]={
  {&TA_double,NULL,"f",""},
  {&TA_const_char_ptr,NULL,"format"," %lg"},
  NULL};
static MethodArgs_data TA_taString_set_MethArgs[]={
  {&TA_const_char_ptr,NULL,"t",""},
  {&TA_int,NULL,"len",""},
  NULL};
static MethodArgs_data TA_taString_cat_MethArgs[]={
  {&TA_const_char_ptr,NULL,"t",""},
  NULL};
static MethodArgs_data TA_taString_prepend_MethArgs[]={
  {&TA_const_char_ptr,NULL,"t",""},
  NULL};
static MethodArgs_data TA_taString_index_MethArgs[]={
  {&TA_const_char_ptr,NULL,"t",""},
  {&TA_int,NULL,"startpos"," 0"},
  NULL};
static MethodArgs_data TA_taString_contains_MethArgs[]={
  {&TA_const_char_ptr,NULL,"t",""},
  NULL};
static MethodArgs_data TA_taString_matches_MethArgs[]={
  {&TA_const_char_ptr,NULL,"t",""},
  {&TA_int,NULL,"pos"," 0"},
  NULL};
static MethodArgs_data TA_taString_endsWith_MethArgs[]={
  {&TA_const_char_ptr,NULL,"t",""},
  NULL};
static MethodArgs_data TA_taString_startsWith_MethArgs[]={
  {&TA_const_char_ptr,NULL,"t",""},
  NULL};
static MethodArgs_data TA_taString_freq_MethArgs[]={
  {&TA_const_char_ptr,NULL,"t",""},
  NULL};
static MethodArgs_data TA_taString_at_MethArgs[]={
  {&TA_int,NULL,"pos",""},
  {&TA_int,NULL,"len",""},
  NULL};
static MethodArgs_data TA_taString_before_MethArgs[]={
  {&TA_const_char_ptr,NULL,"t",""},
  {&TA_int,NULL,"startpos"," 0"},
  NULL};
static MethodArgs_data TA_taString_through_MethArgs[]={
  {&TA_const_char_ptr,NULL,"t",""},
  {&TA_int,NULL,"startpos"," 0"},
  NULL};
static MethodArgs_data TA_taString_from_MethArgs[]={
  {&TA_const_char_ptr,NULL,"t",""},
  {&TA_int,NULL,"startpos"," 0"},
  NULL};
static MethodArgs_data TA_taString_after_MethArgs[]={
  {&TA_const_char_ptr,NULL,"t",""},
  {&TA_int,NULL,"startpos"," 0"},
  NULL};
static MethodArgs_data TA_taString_left_MethArgs[]={
  {&TA_int,NULL,"len",""},
  NULL};
static MethodArgs_data TA_taString_right_MethArgs[]={
  {&TA_int,NULL,"len",""},
  NULL};
static MethodArgs_data TA_taString_elidedTo_MethArgs[]={
  {&TA_int,NULL,"len"," -1"},
  NULL};
static MethodArgs_data TA_taString_del_MethArgs[]={
  {&TA_int,NULL,"pos",""},
  {&TA_int,NULL,"len",""},
  NULL};
static MethodArgs_data TA_taString_remove_MethArgs[]={
  {&TA_const_char_ptr,NULL,"t",""},
  {&TA_int,NULL,"startpos"," 0"},
  NULL};
static MethodArgs_data TA_taString_gsub_MethArgs[]={
  {&TA_const_char_ptr,NULL,"pat",""},
  {&TA_const_char_ptr,NULL,"repl",""},
  NULL};
static MethodArgs_data TA_taString_truncate_MethArgs[]={
  {&TA_uint,NULL,"new_len",""},
  NULL};
static MethodArgs_data TA_taString_elem_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taString_error_MethArgs[]={
  {&TA_const_char_ptr,NULL,"msg",""},
  NULL};
static MethodDef_data TA_taString_MethodDef[]={
  {&TA_const_taString,NULL,"CharToCppLiteral"," converts a character to a C++ valid literal; can be embedded in a C++ string","","",
    0,1,-1,0,1,(ta_void_fun)(taString::CharToCppLiteral),cssElCFun_taString_CharToCppLiteral_stub,TA_taString_CharToCppLiteral_MethArgs},
  {&TA_const_taString,NULL,"StringToCppLiteral"," converts a string to a C++ valid literal","","",
    0,1,-1,0,1,(ta_void_fun)(taString::StringToCppLiteral),cssElCFun_taString_StringToCppLiteral_stub,TA_taString_StringToCppLiteral_MethArgs},
  {&TA_const_QString,NULL,"toQString"," evil C++ necessitates this!!!","","",
    0,0,-1,0,0,NULL,cssElCFun_taString_toQString_stub,NULL},
  {&TA_void,NULL,"setRep"," for replacing rep (non-constructor) -- rep_ must be non-null","","",
    0,1,-1,0,0,NULL,cssElCFun_taString_setRep_stub,TA_taString_setRep_MethArgs},
  {&TA_int,NULL,"length"," how many characters in the string","","",
    0,0,-1,0,0,NULL,cssElCFun_taString_length_stub,NULL},
  {&TA_bool,NULL,"empty"," true if the string is empty","","",
    0,0,-1,0,0,NULL,cssElCFun_taString_empty_stub,NULL},
  {&TA_bool,NULL,"nonempty"," true if the string is nonempty","","",
    0,0,-1,0,0,NULL,cssElCFun_taString_nonempty_stub,NULL},
  {&TA_bool,NULL,"isInt"," true if the string contains a value that can be interpreted as an integer [+-]dd*","","",
    0,0,-1,0,0,NULL,cssElCFun_taString_isInt_stub,NULL},
  {&TA_int,NULL,"allocation","","","",
    0,0,-1,0,0,NULL,cssElCFun_taString_allocation_stub,NULL},
  {&TA_int,NULL,"assertLength"," call after manual buffer operations, to set length from null term -- **WARNING** only use on ref==1, and where there is a null term in the buff, and sz is not overflowed","","",
    0,0,-1,0,0,NULL,cssElCFun_taString_assertLength_stub,NULL},
  {&TA_const_char_ptr,NULL,"chars"," returns null-terminated string DO NOT MODIFY","","",
    0,0,-1,0,0,NULL,cssElCFun_taString_chars_stub,NULL},
  {&TA_char_ptr,NULL,"chars_ptr"," returns point to the string, for in-place mods -- **this makeUnique() first, so you have a unique instance to overwrite**","","",
    0,0,-1,0,0,NULL,cssElCFun_taString_chars_ptr_stub,NULL},
  {&TA_void,NULL,"makeUnique"," makeUnique(), but force sz to be at least new_sz","","",
    1,1,-1,0,0,NULL,cssElCFun_taString_makeUnique_stub,TA_taString_makeUnique_MethArgs},
  {&TA_void,NULL,"pack"," if there is any extra space (above a small threshold), release it","","",
    0,0,-1,0,0,NULL,cssElCFun_taString_pack_stub,NULL},
  {&TA_bool,NULL,"toBool"," accepts true as starting with t/T, or else 1","","",
    0,0,-1,0,0,NULL,cssElCFun_taString_toBool_stub,NULL},
  {&TA_char,NULL,"toChar"," if size 1, then that's it, else try heuristics","","",
    0,0,-1,0,0,NULL,cssElCFun_taString_toChar_stub,NULL},
  {&TA_short,NULL,"toShort","","","",
    0,2,0,0,0,NULL,cssElCFun_taString_toShort_stub,TA_taString_toShort_MethArgs},
  {&TA_ushort,NULL,"toUShort","","","",
    0,2,0,0,0,NULL,cssElCFun_taString_toUShort_stub,TA_taString_toUShort_MethArgs},
  {&TA_int,NULL,"toInt","","","",
    0,2,0,0,0,NULL,cssElCFun_taString_toInt_stub,TA_taString_toInt_MethArgs},
  {&TA_uint,NULL,"toUInt","","","",
    0,2,0,0,0,NULL,cssElCFun_taString_toUInt_stub,TA_taString_toUInt_MethArgs},
  {&TA_int64_t,NULL,"toInt64","","","",
    0,2,0,0,0,NULL,cssElCFun_taString_toInt64_stub,TA_taString_toInt64_MethArgs},
  {&TA_uint64_t,NULL,"toUInt64","","","",
    0,2,0,0,0,NULL,cssElCFun_taString_toUInt64_stub,TA_taString_toUInt64_MethArgs},
  {&TA_float,NULL,"toFloat","","","",
    0,1,0,0,0,NULL,cssElCFun_taString_toFloat_stub,TA_taString_toFloat_MethArgs},
  {&TA_double,NULL,"toDouble","","","",
    0,1,0,0,0,NULL,cssElCFun_taString_toDouble_stub,TA_taString_toDouble_MethArgs},
  {&TA_taString_ref,NULL,"convert","","","",
    3,2,1,0,0,NULL,cssElCFun_taString_convert_stub,TA_taString_convert_MethArgs},
  {&TA_int,NULL,"HexToInt","","","",
    0,0,-1,0,0,NULL,cssElCFun_taString_HexToInt_stub,NULL},
  {&TA_taString_ref,NULL,"set"," parameterized set -- used in assigns","","",
    0,2,-1,0,0,NULL,cssElCFun_taString_set_stub,TA_taString_set_MethArgs},
  {&TA_taString_ref,NULL,"cat","","","",
    2,1,-1,0,0,NULL,cssElCFun_taString_cat_stub,TA_taString_cat_MethArgs},
  {&TA_taString_ref,NULL,"prepend"," add to beginning of string","","",
    2,1,-1,0,0,NULL,cssElCFun_taString_prepend_stub,TA_taString_prepend_MethArgs},
  {&TA_int,NULL,"index"," return position of target in string or -1 for failure","","",
    2,2,1,0,0,NULL,cssElCFun_taString_index_stub,TA_taString_index_MethArgs},
  {&TA_bool,NULL,"contains"," return 'true' if target appears anywhere after position pos (or before, if pos is negative) in String","","",
    5,1,-1,0,0,NULL,cssElCFun_taString_contains_stub,TA_taString_contains_MethArgs},
  {&TA_bool,NULL,"matches"," return 'true' if target appears at position pos in String","","",
    2,2,1,0,0,NULL,cssElCFun_taString_matches_stub,TA_taString_matches_MethArgs},
  {&TA_bool,NULL,"endsWith"," return 'true' if target is at end of String","","",
    2,1,-1,0,0,NULL,cssElCFun_taString_endsWith_stub,TA_taString_endsWith_MethArgs},
  {&TA_bool,NULL,"startsWith"," return 'true' if target is at start of String","","",
    2,1,-1,0,0,NULL,cssElCFun_taString_startsWith_stub,TA_taString_startsWith_MethArgs},
  {&TA_int,NULL,"freq"," return number of occurences of target in String","","",
    2,1,-1,0,0,NULL,cssElCFun_taString_freq_stub,TA_taString_freq_MethArgs},
  {&TA_taString,NULL,"at"," substring at position for length","","",
    3,2,-1,0,0,NULL,cssElCFun_taString_at_stub,TA_taString_at_MethArgs},
  {&TA_taString,NULL,"before"," substring before (not including) target string","","",
    3,2,1,0,0,NULL,cssElCFun_taString_before_stub,TA_taString_before_MethArgs},
  {&TA_taString,NULL,"through"," substring through (including) target string","","",
    3,2,1,0,0,NULL,cssElCFun_taString_through_stub,TA_taString_through_MethArgs},
  {&TA_taString,NULL,"from"," substring from (including) target string","","",
    3,2,1,0,0,NULL,cssElCFun_taString_from_stub,TA_taString_from_MethArgs},
  {&TA_taString,NULL,"after"," substring after (not including) target string","","",
    3,2,1,0,0,NULL,cssElCFun_taString_after_stub,TA_taString_after_MethArgs},
  {&TA_taString,NULL,"left"," leftmost len chars","","",
    0,1,-1,0,0,NULL,cssElCFun_taString_left_stub,TA_taString_left_MethArgs},
  {&TA_taString,NULL,"right"," rightmost len chars","","",
    0,1,-1,0,0,NULL,cssElCFun_taString_right_stub,TA_taString_right_MethArgs},
  {&TA_taString,NULL,"elidedTo"," return a string no more than len long, no line breaks, eliding chars if needed and adding ... marks; -1 is no eliding","","",
    0,1,0,0,0,NULL,cssElCFun_taString_elidedTo_stub,TA_taString_elidedTo_MethArgs},
  {&TA_taString,NULL,"elidedToFirstLine"," if has newlines, elide to first line","","",
    0,0,-1,0,0,NULL,cssElCFun_taString_elidedToFirstLine_stub,NULL},
  {&TA_void,NULL,"del"," delete len chars starting at pos","","",
    3,2,-1,0,0,NULL,cssElCFun_taString_del_stub,TA_taString_del_MethArgs},
  {&TA_void,NULL,"remove"," remove target string from string","","",
    0,2,1,0,0,NULL,cssElCFun_taString_remove_stub,TA_taString_remove_MethArgs},
  {&TA_int,NULL,"gsub"," global substitution: substitute all occurrences of pat with repl","","",
    2,2,-1,0,0,NULL,cssElCFun_taString_gsub_stub,TA_taString_gsub_MethArgs},
  {&TA_taString_ref,NULL,"reverse"," reverse order of string","","",
    0,0,-1,0,0,NULL,cssElCFun_taString_reverse_stub,NULL},
  {&TA_taString_ref,NULL,"upcase"," convert all letters to upper case","","",
    0,0,-1,0,0,NULL,cssElCFun_taString_upcase_stub,NULL},
  {&TA_taString_ref,NULL,"downcase"," convert all letters to lower case","","",
    0,0,-1,0,0,NULL,cssElCFun_taString_downcase_stub,NULL},
  {&TA_taString_ref,NULL,"capitalize"," capitalize the first letter of each word","","",
    0,0,-1,0,0,NULL,cssElCFun_taString_capitalize_stub,NULL},
  {&TA_void,NULL,"truncate"," shortens the string to new_len (if less than curr)","","",
    0,1,-1,0,0,NULL,cssElCFun_taString_truncate_stub,TA_taString_truncate_MethArgs},
  {&TA_char,NULL,"elem"," get the character at index i","","",
    0,1,-1,0,0,NULL,cssElCFun_taString_elem_stub,TA_taString_elem_MethArgs},
  {&TA_char,NULL,"firstchar"," get the first character, '\0 if empty","","",
    0,0,-1,0,0,NULL,cssElCFun_taString_firstchar_stub,NULL},
  {&TA_char,NULL,"lastchar"," get the last character; '\0 if empty","","",
    0,0,-1,0,0,NULL,cssElCFun_taString_lastchar_stub,NULL},
  {&TA_void,NULL,"error","","","",
    0,1,-1,0,0,NULL,cssElCFun_taString_error_stub,TA_taString_error_MethArgs},
  NULL};
static EnumDef_data TA_Variant_VarType[]={
  {"T_Invalid"," ","LABEL_Invalid ",0},
  {"T_Bool"," ","LABEL_Bool ",1},
  {"T_Int"," ","LABEL_Int ",2},
  {"T_UInt"," ","LABEL_UInt ",3},
  {"T_Int64"," ","LABEL_Int64 ",4},
  {"T_UInt64"," ","LABEL_UInt64 ",5},
  {"T_Double"," ","LABEL_Real ",6},
  {"T_Char"," ","LABEL_Char ",7},
  {"T_String"," ","LABEL_String ",9},
  {"T_Ptr"," void*","LABEL_Ptr ",10},
  {"T_Base"," taBase ref counted","LABEL_taBase ",11},
  {"T_Matrix"," taMatrix ref counted","LABEL_taMatrix ",12},
  NULL};
static MethodArgs_data TA_Variant_formatNumber_MethArgs[]={
  {&TA_const_Variant_ref,NULL,"val",""},
  {&TA_short,NULL,"prec",""},
  {&TA_bool,NULL,"hex"," false"},
  NULL};
static MethodArgs_data TA_Variant_setType_MethArgs[]={
  {NULL,"::VarType","value",""},
  NULL};
static MethodArgs_data TA_Variant_save_MethArgs[]={
  {&TA_ostream_ref,NULL,"s",""},
  NULL};
static MethodArgs_data TA_Variant_load_MethArgs[]={
  {&TA_istream_ref,NULL,"s",""},
  NULL};
static MethodArgs_data TA_Variant_setVariant_MethArgs[]={
  {&TA_const_Variant_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_Variant_setVariantData_MethArgs[]={
  {&TA_const_Variant_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_Variant_setBool_MethArgs[]={
  {&TA_bool,NULL,"val",""},
  {&TA_bool,NULL,"null"," false"},
  NULL};
static MethodArgs_data TA_Variant_setByte_MethArgs[]={
  {&TA_byte,NULL,"val",""},
  {&TA_bool,NULL,"null"," false"},
  NULL};
static MethodArgs_data TA_Variant_setInt_MethArgs[]={
  {&TA_int,NULL,"val",""},
  {&TA_bool,NULL,"null"," false"},
  NULL};
static MethodArgs_data TA_Variant_setUInt_MethArgs[]={
  {&TA_uint,NULL,"val",""},
  {&TA_bool,NULL,"null"," false"},
  NULL};
static MethodArgs_data TA_Variant_setInt64_MethArgs[]={
  {&TA_int64_t,NULL,"val",""},
  {&TA_bool,NULL,"null"," false"},
  NULL};
static MethodArgs_data TA_Variant_setUInt64_MethArgs[]={
  {&TA_uint64_t,NULL,"val",""},
  {&TA_bool,NULL,"null"," false"},
  NULL};
static MethodArgs_data TA_Variant_setIntPtr_MethArgs[]={
  {&TA_intptr_t,NULL,"val",""},
  {&TA_bool,NULL,"null"," false"},
  NULL};
static MethodArgs_data TA_Variant_setFloat_MethArgs[]={
  {&TA_float,NULL,"val",""},
  {&TA_bool,NULL,"null"," false"},
  NULL};
static MethodArgs_data TA_Variant_setDouble_MethArgs[]={
  {&TA_double,NULL,"val",""},
  {&TA_bool,NULL,"null"," false"},
  NULL};
static MethodArgs_data TA_Variant_setChar_MethArgs[]={
  {&TA_char,NULL,"val",""},
  {&TA_bool,NULL,"null"," false"},
  NULL};
static MethodArgs_data TA_Variant_setPtr_MethArgs[]={
  {&TA_void_ptr,NULL,"val",""},
  NULL};
static MethodArgs_data TA_Variant_setString_MethArgs[]={
  {&TA_const_taString_ref,NULL,"cp",""},
  {&TA_bool,NULL,"null"," false"},
  NULL};
static MethodArgs_data TA_Variant_setCString_MethArgs[]={
  {&TA_const_char_ptr,NULL,"val",""},
  {&TA_bool,NULL,"null"," false"},
  NULL};
static MethodArgs_data TA_Variant_setBase_MethArgs[]={
  {&TA_taBase_ptr,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_Variant_setMatrix_MethArgs[]={
  {&TA_taMatrix_ptr,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_Variant_updateFromString_MethArgs[]={
  {&TA_const_taString_ref,NULL,"val",""},
  NULL};
static MethodArgs_data TA_Variant_eqVariant_MethArgs[]={
  {&TA_const_Variant_ref,NULL,"val",""},
  NULL};
static MethodArgs_data TA_Variant_eqBool_MethArgs[]={
  {&TA_bool,NULL,"val",""},
  NULL};
static MethodArgs_data TA_Variant_eqByte_MethArgs[]={
  {&TA_byte,NULL,"val",""},
  NULL};
static MethodArgs_data TA_Variant_eqInt_MethArgs[]={
  {&TA_int,NULL,"val",""},
  NULL};
static MethodArgs_data TA_Variant_eqUInt_MethArgs[]={
  {&TA_uint,NULL,"val",""},
  NULL};
static MethodArgs_data TA_Variant_eqInt64_MethArgs[]={
  {&TA_int64_t,NULL,"val",""},
  NULL};
static MethodArgs_data TA_Variant_eqUInt64_MethArgs[]={
  {&TA_uint64_t,NULL,"val",""},
  NULL};
static MethodArgs_data TA_Variant_eqIntPtr_MethArgs[]={
  {&TA_intptr_t,NULL,"val",""},
  NULL};
static MethodArgs_data TA_Variant_eqFloat_MethArgs[]={
  {&TA_float,NULL,"val",""},
  NULL};
static MethodArgs_data TA_Variant_eqDouble_MethArgs[]={
  {&TA_double,NULL,"val",""},
  NULL};
static MethodArgs_data TA_Variant_eqChar_MethArgs[]={
  {&TA_char,NULL,"val",""},
  NULL};
static MethodArgs_data TA_Variant_eqString_MethArgs[]={
  {&TA_const_taString_ref,NULL,"val",""},
  NULL};
static MethodArgs_data TA_Variant_eqCString_MethArgs[]={
  {&TA_const_char_ptr,NULL,"val",""},
  NULL};
static MethodArgs_data TA_Variant_eqPtr_MethArgs[]={
  {&TA_const_void_ptr,NULL,"val",""},
  NULL};
static MethodArgs_data TA_Variant_eqBase_MethArgs[]={
  {&TA_const_taBase_ptr,NULL,"val",""},
  NULL};
static MethodArgs_data TA_Variant_eqMatrix_MethArgs[]={
  {&TA_const_taMatrix_ptr,NULL,"val",""},
  NULL};
static MethodArgs_data TA_Variant_cmpVariant_MethArgs[]={
  {&TA_const_Variant_ref,NULL,"val",""},
  NULL};
static MethodArgs_data TA_Variant_cmpBool_MethArgs[]={
  {&TA_bool,NULL,"val",""},
  NULL};
static MethodArgs_data TA_Variant_cmpByte_MethArgs[]={
  {&TA_byte,NULL,"val",""},
  NULL};
static MethodArgs_data TA_Variant_cmpInt_MethArgs[]={
  {&TA_int,NULL,"val",""},
  NULL};
static MethodArgs_data TA_Variant_cmpUInt_MethArgs[]={
  {&TA_uint,NULL,"val",""},
  NULL};
static MethodArgs_data TA_Variant_cmpInt64_MethArgs[]={
  {&TA_int64_t,NULL,"val",""},
  NULL};
static MethodArgs_data TA_Variant_cmpUInt64_MethArgs[]={
  {&TA_uint64_t,NULL,"val",""},
  NULL};
static MethodArgs_data TA_Variant_cmpIntPtr_MethArgs[]={
  {&TA_intptr_t,NULL,"val",""},
  NULL};
static MethodArgs_data TA_Variant_cmpFloat_MethArgs[]={
  {&TA_float,NULL,"val",""},
  NULL};
static MethodArgs_data TA_Variant_cmpDouble_MethArgs[]={
  {&TA_double,NULL,"val",""},
  NULL};
static MethodArgs_data TA_Variant_cmpChar_MethArgs[]={
  {&TA_char,NULL,"val",""},
  NULL};
static MethodArgs_data TA_Variant_cmpString_MethArgs[]={
  {&TA_const_taString_ref,NULL,"val",""},
  NULL};
static MethodArgs_data TA_Variant_cmpCString_MethArgs[]={
  {&TA_const_char_ptr,NULL,"val",""},
  NULL};
static MethodArgs_data TA_Variant_cmpPtr_MethArgs[]={
  {&TA_const_void_ptr,NULL,"val",""},
  NULL};
static MethodArgs_data TA_Variant_cmpBase_MethArgs[]={
  {&TA_const_taBase_ptr,NULL,"val",""},
  NULL};
static MethodArgs_data TA_Variant_cmpMatrix_MethArgs[]={
  {&TA_const_taMatrix_ptr,NULL,"val",""},
  NULL};
static MethodArgs_data TA_Variant_setQVariant_MethArgs[]={
  {&TA_const_QVariant_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_Variant_GetRepInfo_MethArgs[]={
  {&TA_TypeDef_ptr_ref,NULL,"typ",""},
  {&TA_void_ptr_ref,NULL,"data",""},
  NULL};
static MethodArgs_data TA_Variant_ForceType_MethArgs[]={
  {NULL,"::VarType","vt",""},
  {&TA_bool,NULL,"null",""},
  NULL};
static MethodArgs_data TA_Variant_Dump_Save_Type_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  NULL};
static MethodArgs_data TA_Variant_Dump_Load_Type_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_int_ref,NULL,"last_char",""},
  NULL};
static MethodDef_data TA_Variant_MethodDef[]={
  {&TA_const_taString,NULL,"formatNumber"," format a number (hex for integral types only)","","",
    0,3,2,0,1,(ta_void_fun)(Variant::formatNumber),cssElCFun_Variant_formatNumber_stub,TA_Variant_formatNumber_MethArgs},
  {&TA_const_void_ptr,NULL,"addrData"," this is for low-level routines","","",
    0,0,-1,0,0,NULL,cssElCFun_Variant_addrData_stub,NULL},
  {&TA_bool,NULL,"isAtomic"," 'true' for non-ptr types (includes Invalid)","","",
    0,0,-1,0,0,NULL,cssElCFun_Variant_isAtomic_stub,NULL},
  {&TA_bool,NULL,"isDefault"," returns 'true' if contains the default value for the type (null is ignored)","","",
    0,0,-1,0,0,NULL,cssElCFun_Variant_isDefault_stub,NULL},
  {&TA_bool,NULL,"isInvalid","","","",
    0,0,-1,0,0,NULL,cssElCFun_Variant_isInvalid_stub,NULL},
  {&TA_bool,NULL,"isNull"," 'true' if the value is null","","",
    0,0,-1,0,0,NULL,cssElCFun_Variant_isNull_stub,NULL},
  {&TA_bool,NULL,"isNumeric"," 'true' if NumericStrict, or valid numeric string","","",
    0,0,-1,0,0,NULL,cssElCFun_Variant_isNumeric_stub,NULL},
  {&TA_bool,NULL,"isNumericStrict"," 'true' if an int-ish, float, or char type","","",
    0,0,-1,0,0,NULL,cssElCFun_Variant_isNumericStrict_stub,NULL},
  {&TA_bool,NULL,"isStringType"," 'true' if a char or String","","",
    0,0,-1,0,0,NULL,cssElCFun_Variant_isStringType_stub,NULL},
  {&TA_bool,NULL,"isPtrType"," 'true' if the value is a void*, taBase*, or taMatrix*","","",
    0,0,-1,0,0,NULL,cssElCFun_Variant_isPtrType_stub,NULL},
  {&TA_bool,NULL,"isBaseType"," 'true' if the value is a taBase* or taMatrix*","","",
    0,0,-1,0,0,NULL,cssElCFun_Variant_isBaseType_stub,NULL},
  {&TA_bool,NULL,"isMatrixType"," 'true' if the value is a taMatrix*, BUT could be NULL","","",
    0,0,-1,0,0,NULL,cssElCFun_Variant_isMatrixType_stub,NULL},
  {NULL,"::VarType","type"," ","","",
    0,0,-1,0,0,NULL,cssElCFun_Variant_type_stub,NULL},
  {&TA_void,NULL,"setType"," force it to be given type, if changed, set to default value","","",
    0,1,-1,0,0,NULL,cssElCFun_Variant_setType_stub,TA_Variant_setType_MethArgs},
  {&TA_taString,NULL,"getTypeAsString"," for debugging, get variant type as a string","","",
    0,0,-1,0,0,NULL,cssElCFun_Variant_getTypeAsString_stub,NULL},
  {&TA_void,NULL,"save"," streams out using << for the type","","",
    0,1,-1,0,0,NULL,cssElCFun_Variant_save_stub,TA_Variant_save_MethArgs},
  {&TA_void,NULL,"load"," streams in as a string, use toXxx if it is of another type","","",
    0,1,-1,0,0,NULL,cssElCFun_Variant_load_stub,TA_Variant_load_MethArgs},
  {&TA_void,NULL,"setInvalid"," invalid/null","","",
    0,0,-1,0,0,NULL,cssElCFun_Variant_setInvalid_stub,NULL},
  {&TA_void,NULL,"setVariant"," basically a copy","","",
    0,1,-1,0,0,NULL,cssElCFun_Variant_setVariant_stub,TA_Variant_setVariant_MethArgs},
  {&TA_void,NULL,"setVariantData"," preserve target type, only copy data","","",
    0,1,-1,0,0,NULL,cssElCFun_Variant_setVariantData_stub,TA_Variant_setVariantData_MethArgs},
  {&TA_void,NULL,"setBool","","","",
    0,2,1,0,0,NULL,cssElCFun_Variant_setBool_stub,TA_Variant_setBool_MethArgs},
  {&TA_void,NULL,"setByte","","","",
    0,2,1,0,0,NULL,cssElCFun_Variant_setByte_stub,TA_Variant_setByte_MethArgs},
  {&TA_void,NULL,"setInt","","","",
    0,2,1,0,0,NULL,cssElCFun_Variant_setInt_stub,TA_Variant_setInt_MethArgs},
  {&TA_void,NULL,"setUInt","","","",
    0,2,1,0,0,NULL,cssElCFun_Variant_setUInt_stub,TA_Variant_setUInt_MethArgs},
  {&TA_void,NULL,"setInt64","","","",
    0,2,1,0,0,NULL,cssElCFun_Variant_setInt64_stub,TA_Variant_setInt64_MethArgs},
  {&TA_void,NULL,"setUInt64","","","",
    0,2,1,0,0,NULL,cssElCFun_Variant_setUInt64_stub,TA_Variant_setUInt64_MethArgs},
  {&TA_void,NULL,"setIntPtr","","","",
    0,2,1,0,0,NULL,cssElCFun_Variant_setIntPtr_stub,TA_Variant_setIntPtr_MethArgs},
  {&TA_void,NULL,"setFloat","","","",
    0,2,1,0,0,NULL,cssElCFun_Variant_setFloat_stub,TA_Variant_setFloat_MethArgs},
  {&TA_void,NULL,"setDouble","","","",
    0,2,1,0,0,NULL,cssElCFun_Variant_setDouble_stub,TA_Variant_setDouble_MethArgs},
  {&TA_void,NULL,"setChar","","","",
    0,2,1,0,0,NULL,cssElCFun_Variant_setChar_stub,TA_Variant_setChar_MethArgs},
  {&TA_void,NULL,"setPtr","","","",
    0,1,-1,0,0,NULL,cssElCFun_Variant_setPtr_stub,TA_Variant_setPtr_MethArgs},
  {&TA_void,NULL,"setString"," handles setting of a string ","","",
    0,2,1,0,0,NULL,cssElCFun_Variant_setString_stub,TA_Variant_setString_MethArgs},
  {&TA_void,NULL,"setCString","","","",
    0,2,1,0,0,NULL,cssElCFun_Variant_setCString_stub,TA_Variant_setCString_MethArgs},
  {&TA_void,NULL,"setBase"," handles setting of a taBase","","",
    0,1,-1,0,0,NULL,cssElCFun_Variant_setBase_stub,TA_Variant_setBase_MethArgs},
  {&TA_void,NULL,"setMatrix"," handles setting of a matrix","","",
    0,1,-1,0,0,NULL,cssElCFun_Variant_setMatrix_stub,TA_Variant_setMatrix_MethArgs},
  {&TA_void,NULL,"updateFromString"," set value from string, but keep current type","","",
    0,1,-1,0,0,NULL,cssElCFun_Variant_updateFromString_stub,TA_Variant_updateFromString_MethArgs},
  {&TA_bool,NULL,"toBool","","","",
    0,0,-1,0,0,NULL,cssElCFun_Variant_toBool_stub,NULL},
  {&TA_byte,NULL,"toByte","","","",
    0,0,-1,0,0,NULL,cssElCFun_Variant_toByte_stub,NULL},
  {&TA_int,NULL,"toInt","","","",
    0,0,-1,0,0,NULL,cssElCFun_Variant_toInt_stub,NULL},
  {&TA_uint,NULL,"toUInt","","","",
    0,0,-1,0,0,NULL,cssElCFun_Variant_toUInt_stub,NULL},
  {&TA_int64_t,NULL,"toInt64","","","",
    0,0,-1,0,0,NULL,cssElCFun_Variant_toInt64_stub,NULL},
  {&TA_uint64_t,NULL,"toUInt64"," ","","",
    0,0,-1,0,0,NULL,cssElCFun_Variant_toUInt64_stub,NULL},
  {&TA_float,NULL,"toFloat","","","",
    0,0,-1,0,0,NULL,cssElCFun_Variant_toFloat_stub,NULL},
  {&TA_double,NULL,"toDouble","","","",
    0,0,-1,0,0,NULL,cssElCFun_Variant_toDouble_stub,NULL},
  {&TA_char,NULL,"toChar","","","",
    0,0,-1,0,0,NULL,cssElCFun_Variant_toChar_stub,NULL},
  {&TA_void_ptr,NULL,"toPtr"," must be a void*, Base, or Matrix, otherwise returns NULL","","",
    0,0,-1,0,0,NULL,cssElCFun_Variant_toPtr_stub,NULL},
  {&TA_taString,NULL,"toString","","","",
    0,0,-1,0,0,NULL,cssElCFun_Variant_toString_stub,NULL},
  {&TA_taBase_ptr,NULL,"toBase"," must be a Base or Matrix, otherwise returns NULL","","",
    0,0,-1,0,0,NULL,cssElCFun_Variant_toBase_stub,NULL},
  {&TA_taMatrix_ptr,NULL,"toMatrix"," must be a Matrix, otherwise returns NULL","","",
    0,0,-1,0,0,NULL,cssElCFun_Variant_toMatrix_stub,NULL},
  {&TA_const_taString,NULL,"toCssLiteral"," to a form suitable for initializing a Css variable, ex. quoted strings, U suffix for unsigned, path for taBase variable, etc.","","",
    0,0,-1,0,0,NULL,cssElCFun_Variant_toCssLiteral_stub,NULL},
  {&TA_bool,NULL,"eqVariant"," value equality, using fairly relaxed type rules; Invalid never == anything","","",
    0,1,-1,0,0,NULL,cssElCFun_Variant_eqVariant_stub,TA_Variant_eqVariant_MethArgs},
  {&TA_bool,NULL,"eqBool","","","",
    0,1,-1,0,0,NULL,cssElCFun_Variant_eqBool_stub,TA_Variant_eqBool_MethArgs},
  {&TA_bool,NULL,"eqByte","","","",
    0,1,-1,0,0,NULL,cssElCFun_Variant_eqByte_stub,TA_Variant_eqByte_MethArgs},
  {&TA_bool,NULL,"eqInt","","","",
    0,1,-1,0,0,NULL,cssElCFun_Variant_eqInt_stub,TA_Variant_eqInt_MethArgs},
  {&TA_bool,NULL,"eqUInt","","","",
    0,1,-1,0,0,NULL,cssElCFun_Variant_eqUInt_stub,TA_Variant_eqUInt_MethArgs},
  {&TA_bool,NULL,"eqInt64","","","",
    0,1,-1,0,0,NULL,cssElCFun_Variant_eqInt64_stub,TA_Variant_eqInt64_MethArgs},
  {&TA_bool,NULL,"eqUInt64","","","",
    0,1,-1,0,0,NULL,cssElCFun_Variant_eqUInt64_stub,TA_Variant_eqUInt64_MethArgs},
  {&TA_bool,NULL,"eqIntPtr","","","",
    0,1,-1,0,0,NULL,cssElCFun_Variant_eqIntPtr_stub,TA_Variant_eqIntPtr_MethArgs},
  {&TA_bool,NULL,"eqFloat","","","",
    0,1,-1,0,0,NULL,cssElCFun_Variant_eqFloat_stub,TA_Variant_eqFloat_MethArgs},
  {&TA_bool,NULL,"eqDouble","","","",
    0,1,-1,0,0,NULL,cssElCFun_Variant_eqDouble_stub,TA_Variant_eqDouble_MethArgs},
  {&TA_bool,NULL,"eqChar","","","",
    0,1,-1,0,0,NULL,cssElCFun_Variant_eqChar_stub,TA_Variant_eqChar_MethArgs},
  {&TA_bool,NULL,"eqString"," handles eqting of a string ","","",
    0,1,-1,0,0,NULL,cssElCFun_Variant_eqString_stub,TA_Variant_eqString_MethArgs},
  {&TA_bool,NULL,"eqCString","","","",
    0,1,-1,0,0,NULL,cssElCFun_Variant_eqCString_stub,TA_Variant_eqCString_MethArgs},
  {&TA_bool,NULL,"eqPtr","","","",
    0,1,-1,0,0,NULL,cssElCFun_Variant_eqPtr_stub,TA_Variant_eqPtr_MethArgs},
  {&TA_bool,NULL,"eqBase","","","",
    0,1,-1,0,0,NULL,cssElCFun_Variant_eqBase_stub,TA_Variant_eqBase_MethArgs},
  {&TA_bool,NULL,"eqMatrix"," comparison operations, < -ve, == 0, > +ve","","",
    0,1,-1,0,0,NULL,cssElCFun_Variant_eqMatrix_stub,TA_Variant_eqMatrix_MethArgs},
  {&TA_int,NULL,"cmpVariant"," value compare, using fairly relaxed type rules; Invalid never == anything","","",
    0,1,-1,0,0,NULL,cssElCFun_Variant_cmpVariant_stub,TA_Variant_cmpVariant_MethArgs},
  {&TA_int,NULL,"cmpBool","","","",
    0,1,-1,0,0,NULL,cssElCFun_Variant_cmpBool_stub,TA_Variant_cmpBool_MethArgs},
  {&TA_int,NULL,"cmpByte","","","",
    0,1,-1,0,0,NULL,cssElCFun_Variant_cmpByte_stub,TA_Variant_cmpByte_MethArgs},
  {&TA_int,NULL,"cmpInt","","","",
    0,1,-1,0,0,NULL,cssElCFun_Variant_cmpInt_stub,TA_Variant_cmpInt_MethArgs},
  {&TA_int,NULL,"cmpUInt","","","",
    0,1,-1,0,0,NULL,cssElCFun_Variant_cmpUInt_stub,TA_Variant_cmpUInt_MethArgs},
  {&TA_int,NULL,"cmpInt64","","","",
    0,1,-1,0,0,NULL,cssElCFun_Variant_cmpInt64_stub,TA_Variant_cmpInt64_MethArgs},
  {&TA_int,NULL,"cmpUInt64","","","",
    0,1,-1,0,0,NULL,cssElCFun_Variant_cmpUInt64_stub,TA_Variant_cmpUInt64_MethArgs},
  {&TA_int,NULL,"cmpIntPtr","","","",
    0,1,-1,0,0,NULL,cssElCFun_Variant_cmpIntPtr_stub,TA_Variant_cmpIntPtr_MethArgs},
  {&TA_int,NULL,"cmpFloat","","","",
    0,1,-1,0,0,NULL,cssElCFun_Variant_cmpFloat_stub,TA_Variant_cmpFloat_MethArgs},
  {&TA_int,NULL,"cmpDouble","","","",
    0,1,-1,0,0,NULL,cssElCFun_Variant_cmpDouble_stub,TA_Variant_cmpDouble_MethArgs},
  {&TA_int,NULL,"cmpChar","","","",
    0,1,-1,0,0,NULL,cssElCFun_Variant_cmpChar_stub,TA_Variant_cmpChar_MethArgs},
  {&TA_int,NULL,"cmpString"," handles cmpting of a string ","","",
    0,1,-1,0,0,NULL,cssElCFun_Variant_cmpString_stub,TA_Variant_cmpString_MethArgs},
  {&TA_int,NULL,"cmpCString","","","",
    0,1,-1,0,0,NULL,cssElCFun_Variant_cmpCString_stub,TA_Variant_cmpCString_MethArgs},
  {&TA_int,NULL,"cmpPtr","","","",
    0,1,-1,0,0,NULL,cssElCFun_Variant_cmpPtr_stub,TA_Variant_cmpPtr_MethArgs},
  {&TA_int,NULL,"cmpBase","","","",
    0,1,-1,0,0,NULL,cssElCFun_Variant_cmpBase_stub,TA_Variant_cmpBase_MethArgs},
  {&TA_int,NULL,"cmpMatrix"," TODO bool	canCast(VarType new_type);","","",
    0,1,-1,0,0,NULL,cssElCFun_Variant_cmpMatrix_stub,TA_Variant_cmpMatrix_MethArgs},
  {&TA_void,NULL,"setQVariant","","","",
    0,1,-1,0,0,NULL,cssElCFun_Variant_setQVariant_stub,TA_Variant_setQVariant_MethArgs},
  {&TA_QVariant,NULL,"toQVariant","","","",
    0,0,-1,0,0,NULL,cssElCFun_Variant_toQVariant_stub,NULL},
  {&TA_void,NULL,"GetRepInfo"," current typedef, and pointer to the data","","",
    0,2,-1,0,0,NULL,cssElCFun_Variant_GetRepInfo_stub,TA_Variant_GetRepInfo_MethArgs},
  {&TA_void,NULL,"UpdateAfterLoad"," called after internal modifications, to reassert correctness of null etc.","","",
    0,0,-1,0,0,NULL,cssElCFun_Variant_UpdateAfterLoad_stub,NULL},
  {&TA_void,NULL,"ForceType"," called by streaming system to force the type to be indicated kind","","",
    0,2,-1,0,0,NULL,cssElCFun_Variant_ForceType_stub,TA_Variant_ForceType_MethArgs},
  {&TA_void,NULL,"Dump_Save_Type"," dumps type and null ","","",
    0,1,-1,0,0,NULL,cssElCFun_Variant_Dump_Save_Type_stub,TA_Variant_Dump_Save_Type_MethArgs},
  {&TA_bool,NULL,"Dump_Load_Type"," loads type and null, using taMisc:: strm routines; calls ForceType; returns 'true' if type loaded ","","",
    0,2,-1,0,0,NULL,cssElCFun_Variant_Dump_Load_Type_stub,TA_Variant_Dump_Load_Type_MethArgs},
  NULL};
static int iPoint::* TA_iPoint_MbrOff;
static MemberDef_data TA_iPoint_MemberDef[]={
  {&TA_int,NULL,"x","","","",
    *((ta_memb_ptr*)&(TA_iPoint_MbrOff=(int iPoint::*)(&iPoint::x))),0,NULL,0},
  {&TA_int,NULL,"y","","","",
    *((ta_memb_ptr*)&(TA_iPoint_MbrOff=(int iPoint::*)(&iPoint::y))),0,NULL,0},
  NULL};
static MethodArgs_data TA_iPoint_getArrayIndex_MethArgs[]={
  {&TA_int,NULL,"x_",""},
  {&TA_int,NULL,"y_",""},
  NULL};
static MethodArgs_data TA_iPoint_isEqual_MethArgs[]={
  {&TA_int,NULL,"x_",""},
  {&TA_int,NULL,"y_",""},
  NULL};
static MethodArgs_data TA_iPoint_getValue_MethArgs[]={
  {&TA_int_ref,NULL,"x_",""},
  {&TA_int_ref,NULL,"y_",""},
  NULL};
static MethodArgs_data TA_iPoint_setValue_MethArgs[]={
  {&TA_int,NULL,"x_",""},
  {&TA_int,NULL,"y_",""},
  NULL};
static MethodDef_data TA_iPoint_MethodDef[]={
  {&TA_int,NULL,"getArrayIndex"," assumes x and y are array sizes -- gets the row-major array index, or -1 if out of bounds","","",
    0,2,-1,0,0,NULL,cssElCFun_iPoint_getArrayIndex_stub,TA_iPoint_getArrayIndex_MethArgs},
  {&TA_bool,NULL,"isEqual","","","",
    0,2,-1,0,0,NULL,cssElCFun_iPoint_isEqual_stub,TA_iPoint_isEqual_MethArgs},
  {&TA_void,NULL,"getValue","","","",
    0,2,-1,0,0,NULL,cssElCFun_iPoint_getValue_stub,TA_iPoint_getValue_MethArgs},
  {&TA_void,NULL,"setValue","","","",
    0,2,-1,0,0,NULL,cssElCFun_iPoint_setValue_stub,TA_iPoint_setValue_MethArgs},
  NULL};
static int iVec3i::* TA_iVec3i_MbrOff;
static MemberDef_data TA_iVec3i_MemberDef[]={
  {&TA_int,NULL,"z","","","",
    *((ta_memb_ptr*)&(TA_iVec3i_MbrOff=(int iVec3i::*)(&iVec3i::z))),0,NULL,0},
  NULL};
static MethodArgs_data TA_iVec3i_isEqual_MethArgs[]={
  {&TA_int,NULL,"x_",""},
  {&TA_int,NULL,"y_",""},
  {&TA_int,NULL,"z_",""},
  NULL};
static MethodArgs_data TA_iVec3i_getValue_MethArgs[]={
  {&TA_int_ref,NULL,"x_",""},
  {&TA_int_ref,NULL,"y_",""},
  {&TA_int_ref,NULL,"z_",""},
  NULL};
static MethodArgs_data TA_iVec3i_setValue_MethArgs[]={
  {&TA_int,NULL,"x_",""},
  {&TA_int,NULL,"y_",""},
  {&TA_int,NULL,"z_",""},
  NULL};
static MethodDef_data TA_iVec3i_MethodDef[]={
  {&TA_bool,NULL,"isEqual","","","",
    1,3,-1,0,0,NULL,cssElCFun_iVec3i_isEqual_stub,TA_iVec3i_isEqual_MethArgs},
  {&TA_void,NULL,"getValue","","","",
    1,3,-1,0,0,NULL,cssElCFun_iVec3i_getValue_stub,TA_iVec3i_getValue_MethArgs},
  {&TA_void,NULL,"setValue","","","",
    1,3,-1,0,0,NULL,cssElCFun_iVec3i_setValue_stub,TA_iVec3i_setValue_MethArgs},
  NULL};
static int iSize::* TA_iSize_MbrOff;
static MemberDef_data TA_iSize_MemberDef[]={
  {&TA_int,NULL,"w","","","",
    *((ta_memb_ptr*)&(TA_iSize_MbrOff=(int iSize::*)(&iSize::w))),0,NULL,0},
  {&TA_int,NULL,"h","","","",
    *((ta_memb_ptr*)&(TA_iSize_MbrOff=(int iSize::*)(&iSize::h))),0,NULL,0},
  NULL};
static MethodArgs_data TA_iSize_set_MethArgs[]={
  {&TA_int,NULL,"w_",""},
  {&TA_int,NULL,"h_",""},
  NULL};
static MethodDef_data TA_iSize_MethodDef[]={
  {&TA_void,NULL,"set","","","",
    0,2,-1,0,0,NULL,cssElCFun_iSize_set_stub,TA_iSize_set_MethArgs},
  {&TA_int,NULL,"height","","","",
    0,0,-1,0,0,NULL,cssElCFun_iSize_height_stub,NULL},
  {&TA_int,NULL,"width","","","",
    0,0,-1,0,0,NULL,cssElCFun_iSize_width_stub,NULL},
  NULL};
static int iRect::* TA_iRect_MbrOff;
static MemberDef_data TA_iRect_MemberDef[]={
  {&TA_int,NULL,"x","","","",
    *((ta_memb_ptr*)&(TA_iRect_MbrOff=(int iRect::*)(&iRect::x))),0,NULL,0},
  {&TA_int,NULL,"y","","","",
    *((ta_memb_ptr*)&(TA_iRect_MbrOff=(int iRect::*)(&iRect::y))),0,NULL,0},
  {&TA_int,NULL,"w","","","",
    *((ta_memb_ptr*)&(TA_iRect_MbrOff=(int iRect::*)(&iRect::w))),0,NULL,0},
  {&TA_int,NULL,"h","","","",
    *((ta_memb_ptr*)&(TA_iRect_MbrOff=(int iRect::*)(&iRect::h))),0,NULL,0},
  NULL};
static MethodDef_data TA_iRect_MethodDef[]={
  {&TA_iPoint,NULL,"topLeft","","","",
    0,0,-1,0,0,NULL,cssElCFun_iRect_topLeft_stub,NULL},
  {&TA_iSize,NULL,"size","","","",
    0,0,-1,0,0,NULL,cssElCFun_iRect_size_stub,NULL},
  {&TA_int,NULL,"left","","","",
    0,0,-1,0,0,NULL,cssElCFun_iRect_left_stub,NULL},
  {&TA_int,NULL,"top","","","",
    0,0,-1,0,0,NULL,cssElCFun_iRect_top_stub,NULL},
  {&TA_int,NULL,"width","","","",
    0,0,-1,0,0,NULL,cssElCFun_iRect_width_stub,NULL},
  {&TA_int,NULL,"height","","","",
    0,0,-1,0,0,NULL,cssElCFun_iRect_height_stub,NULL},
  NULL};
static int iVec3f::* TA_iVec3f_MbrOff;
static MemberDef_data TA_iVec3f_MemberDef[]={
  {&TA_float,NULL,"x","","","",
    *((ta_memb_ptr*)&(TA_iVec3f_MbrOff=(int iVec3f::*)(&iVec3f::x))),0,NULL,0},
  {&TA_float,NULL,"y","","","",
    *((ta_memb_ptr*)&(TA_iVec3f_MbrOff=(int iVec3f::*)(&iVec3f::y))),0,NULL,0},
  {&TA_float,NULL,"z","","","",
    *((ta_memb_ptr*)&(TA_iVec3f_MbrOff=(int iVec3f::*)(&iVec3f::z))),0,NULL,0},
  NULL};
static MethodArgs_data TA_iVec3f_isEqual_MethArgs[]={
  {&TA_float,NULL,"x_",""},
  {&TA_float,NULL,"y_",""},
  {&TA_float,NULL,"z_",""},
  NULL};
static MethodArgs_data TA_iVec3f_setValue_MethArgs[]={
  {&TA_float,NULL,"x_",""},
  {&TA_float,NULL,"y_",""},
  {&TA_float,NULL,"z_",""},
  NULL};
static MethodDef_data TA_iVec3f_MethodDef[]={
  {&TA_bool,NULL,"isEqual","","","",
    0,3,-1,0,0,NULL,cssElCFun_iVec3f_isEqual_stub,TA_iVec3f_isEqual_MethArgs},
  {&TA_bool,NULL,"isUnity","","","",
    0,0,-1,0,0,NULL,cssElCFun_iVec3f_isUnity_stub,NULL},
  {&TA_bool,NULL,"isZero","","","",
    0,0,-1,0,0,NULL,cssElCFun_iVec3f_isZero_stub,NULL},
  {&TA_void,NULL,"setValue","","","",
    0,3,-1,0,0,NULL,cssElCFun_iVec3f_setValue_stub,TA_iVec3f_setValue_MethArgs},
  NULL};
static int iBox3f::* TA_iBox3f_MbrOff;
static MemberDef_data TA_iBox3f_MemberDef[]={
  {&TA_iVec3f,NULL,"min"," minimum point","","",
    *((ta_memb_ptr*)&(TA_iBox3f_MbrOff=(int iBox3f::*)(&iBox3f::min))),0,NULL,0},
  {&TA_iVec3f,NULL,"max"," maximum point","","",
    *((ta_memb_ptr*)&(TA_iBox3f_MbrOff=(int iBox3f::*)(&iBox3f::max))),0,NULL,0},
  NULL};
static MethodArgs_data TA_iBox3f_setValue_MethArgs[]={
  {&TA_const_iVec3f_ref,NULL,"min_",""},
  {&TA_const_iVec3f_ref,NULL,"max_",""},
  NULL};
static MethodArgs_data TA_iBox3f_setValueCS_MethArgs[]={
  {&TA_const_iVec3f_ref,NULL,"center_",""},
  {&TA_const_iVec3f_ref,NULL,"size_",""},
  NULL};
static MethodDef_data TA_iBox3f_MethodDef[]={
  {&TA_iVec3f,NULL,"center"," center point of the box","","",
    0,0,-1,0,0,NULL,cssElCFun_iBox3f_center_stub,NULL},
  {&TA_float,NULL,"height","","","",
    0,0,-1,0,0,NULL,cssElCFun_iBox3f_height_stub,NULL},
  {&TA_float,NULL,"width","","","",
    0,0,-1,0,0,NULL,cssElCFun_iBox3f_width_stub,NULL},
  {&TA_float,NULL,"depth","","","",
    0,0,-1,0,0,NULL,cssElCFun_iBox3f_depth_stub,NULL},
  {&TA_float,NULL,"bottom","","","",
    0,0,-1,0,0,NULL,cssElCFun_iBox3f_bottom_stub,NULL},
  {&TA_float,NULL,"top","","","",
    0,0,-1,0,0,NULL,cssElCFun_iBox3f_top_stub,NULL},
  {&TA_float,NULL,"left","","","",
    0,0,-1,0,0,NULL,cssElCFun_iBox3f_left_stub,NULL},
  {&TA_float,NULL,"right","","","",
    0,0,-1,0,0,NULL,cssElCFun_iBox3f_right_stub,NULL},
  {&TA_float,NULL,"far","","","",
    0,0,-1,0,0,NULL,cssElCFun_iBox3f_far_stub,NULL},
  {&TA_float,NULL,"near","","","",
    0,0,-1,0,0,NULL,cssElCFun_iBox3f_near_stub,NULL},
  {&TA_iVec3f,NULL,"size"," size of the box in each dimension","","",
    0,0,-1,0,0,NULL,cssElCFun_iBox3f_size_stub,NULL},
  {&TA_bool,NULL,"isZero","","","",
    0,0,-1,0,0,NULL,cssElCFun_iBox3f_isZero_stub,NULL},
  {&TA_void,NULL,"setValue","","","",
    1,2,-1,0,0,NULL,cssElCFun_iBox3f_setValue_stub,TA_iBox3f_setValue_MethArgs},
  {&TA_void,NULL,"setValueCS"," set the value by specifying the center and the size -- can only specify boxes with planes parallel to the coord axes","","",
    1,2,-1,0,0,NULL,cssElCFun_iBox3f_setValueCS_stub,TA_iBox3f_setValueCS_MethArgs},
  NULL};
static EnumDef_data TA__Ios_Fmtflags_EnumDef[]={
  {"boolalpha","","",1},
  {"dec","","",2},
  {"fixed","","",4},
  {"hex","","",8},
  {"internal","","",16},
  {"left","","",32},
  {"oct","","",64},
  {"right","","",128},
  {"scientific","","",256},
  {"showbase","","",512},
  {"showpoint","","",1024},
  {"showpos","","",2048},
  {"skipws","","",4096},
  {"unitbuf","","",8192},
  {"uppercase","","",16384},
  {"adjustfield","","",176},
  {"basefield","","",74},
  {"floatfield","","",260},
  NULL};
static EnumDef_data TA__Ios_Openmode_EnumDef[]={
  {"app","","",1},
  {"ate","","",2},
  {"binary","","",4},
  {"in","","",8},
  {"out","","",16},
  {"trunc","","",32},
  NULL};
static EnumDef_data TA__Ios_Iostate_EnumDef[]={
  {"badbit","","",1},
  {"eofbit","","",2},
  {"failbit","","",4},
  {"goodbit","","",0},
  NULL};
static EnumDef_data TA__Ios_Seekdir_EnumDef[]={
  {"beg","","",0},
  {"cur"," 1","",1},
  {"end"," 2","",2},
  NULL};
static EnumDef_data TA_ios_fmtflags[]={
  {"boolalpha","","",1},
  {"dec","","",2},
  {"fixed","","",4},
  {"hex","","",8},
  {"internal","","",16},
  {"left","","",32},
  {"oct","","",64},
  {"right","","",128},
  {"scientific","","",256},
  {"showbase","","",512},
  {"showpoint","","",1024},
  {"showpos","","",2048},
  {"skipws","","",4096},
  {"unitbuf","","",8192},
  {"uppercase","","",16384},
  {"adjustfield","","",176},
  {"basefield","","",74},
  {"floatfield","","",260},
  NULL};
static EnumDef_data TA_ios_iostate[]={
  {"badbit","","",1},
  {"eofbit","","",2},
  {"failbit","","",4},
  {"goodbit","","",0},
  NULL};
static EnumDef_data TA_ios_openmode[]={
  {"app","","",1},
  {"ate","","",2},
  {"binary","","",4},
  {"in","","",8},
  {"out","","",16},
  {"trunc","","",32},
  NULL};
static EnumDef_data TA_ios_seekdir[]={
  {"beg","","",0},
  {"cur"," 1","",1},
  {"end"," 2","",2},
  NULL};
static MethodArgs_data TA_ios_setf_MethArgs[]={
  {NULL,"::fmtflags","val",""},
  NULL};
static MethodArgs_data TA_ios_unsetf_MethArgs[]={
  {NULL,"::fmtflags","mask",""},
  NULL};
static MethodArgs_data TA_ios_tie_MethArgs[]={
  {&TA_ostream_ptr,NULL,"val",""},
  NULL};
static MethodArgs_data TA_ios_precision_MethArgs[]={
  {&TA_int,NULL,"newp",""},
  NULL};
static MethodArgs_data TA_ios_width_MethArgs[]={
  {&TA_int,NULL,"val",""},
  NULL};
static MethodArgs_data TA_ios_clear_MethArgs[]={
  {NULL,"::iostate","state"," 0"},
  NULL};
static MethodArgs_data TA_ios_setstate_MethArgs[]={
  {NULL,"::iostate","flag",""},
  NULL};
static MethodArgs_data TA_ios_pword_MethArgs[]={
  {&TA_int,NULL,"na",""},
  NULL};
static MethodArgs_data TA_ios_iword_MethArgs[]={
  {&TA_int,NULL,"na",""},
  NULL};
static MethodDef_data TA_ios_MethodDef[]={
  {&TA__Ios_Fmtflags,NULL,"flags","","","",
    0,0,-1,0,0,NULL,cssElCFun_ios_flags_stub,NULL},
  {&TA__Ios_Fmtflags,NULL,"setf","","","",
    0,1,-1,0,0,NULL,cssElCFun_ios_setf_stub,TA_ios_setf_MethArgs},
  {&TA_void,NULL,"unsetf","","","",
    0,1,-1,0,0,NULL,cssElCFun_ios_unsetf_stub,TA_ios_unsetf_MethArgs},
  {&TA_ostream_ptr,NULL,"tie","","","",
    1,1,-1,0,0,NULL,cssElCFun_ios_tie_stub,TA_ios_tie_MethArgs},
  {&TA_int,NULL,"precision","","","",
    1,1,-1,0,0,NULL,cssElCFun_ios_precision_stub,TA_ios_precision_MethArgs},
  {&TA_int,NULL,"width","","","",
    1,1,-1,0,0,NULL,cssElCFun_ios_width_stub,TA_ios_width_MethArgs},
  {&TA_void,NULL,"clear","","","",
    0,1,0,0,0,NULL,cssElCFun_ios_clear_stub,TA_ios_clear_MethArgs},
  {&TA_void,NULL,"setstate","","","",
    0,1,-1,0,0,NULL,cssElCFun_ios_setstate_stub,TA_ios_setstate_MethArgs},
  {&TA_int,NULL,"good","","","",
    0,0,-1,0,0,NULL,cssElCFun_ios_good_stub,NULL},
  {&TA_int,NULL,"eof","","","",
    0,0,-1,0,0,NULL,cssElCFun_ios_eof_stub,NULL},
  {&TA_int,NULL,"fail","","","",
    0,0,-1,0,0,NULL,cssElCFun_ios_fail_stub,NULL},
  {&TA_int,NULL,"bad","","","",
    0,0,-1,0,0,NULL,cssElCFun_ios_bad_stub,NULL},
  {&TA_void_ptr,NULL,"pword","","","",
    0,1,-1,0,0,NULL,cssElCFun_ios_pword_stub,TA_ios_pword_MethArgs},
  {&TA_long,NULL,"iword","","","",
    0,1,-1,0,0,NULL,cssElCFun_ios_iword_stub,TA_ios_iword_MethArgs},
  NULL};
static MethodArgs_data TA_ostream_put_MethArgs[]={
  {&TA_char,NULL,"c",""},
  NULL};
static MethodArgs_data TA_ostream_write_MethArgs[]={
  {&TA_const_char_ptr,NULL,"s",""},
  {&TA_streamsize,NULL,"n",""},
  NULL};
static MethodArgs_data TA_ostream_seekp_MethArgs[]={
  {&TA_streamoff,NULL,"off",""},
  {NULL,"ios::seekdir","dir",""},
  NULL};
static MethodDef_data TA_ostream_MethodDef[]={
  {&TA_ostream_ref,NULL,"flush","","","",
    0,0,-1,0,0,NULL,cssElCFun_ostream_flush_stub,NULL},
  {&TA_ostream_ref,NULL,"put","","","",
    0,1,-1,0,0,NULL,cssElCFun_ostream_put_stub,TA_ostream_put_MethArgs},
  {&TA_ostream_ref,NULL,"write","","","",
    0,2,-1,0,0,NULL,cssElCFun_ostream_write_stub,TA_ostream_write_MethArgs},
  {&TA_ostream_ref,NULL,"seekp","","","",
    0,2,-1,0,0,NULL,cssElCFun_ostream_seekp_stub,TA_ostream_seekp_MethArgs},
  {&TA_streampos,NULL,"tellp","","","",
    0,0,-1,0,0,NULL,cssElCFun_ostream_tellp_stub,NULL},
  NULL};
static MethodArgs_data TA_istream_getline_MethArgs[]={
  {&TA_char_ptr,NULL,"ptr",""},
  {&TA_int,NULL,"len",""},
  {&TA_char,NULL,"delim"," '\n'"},
  NULL};
static MethodArgs_data TA_istream_read_MethArgs[]={
  {&TA_char_ptr,NULL,"ptr",""},
  {&TA_streamsize,NULL,"n",""},
  NULL};
static MethodArgs_data TA_istream_ignore_MethArgs[]={
  {&TA_int,NULL,"n","1"},
  {&TA_int,NULL,"delim"," (-1)"},
  NULL};
static MethodArgs_data TA_istream_seekg_MethArgs[]={
  {&TA_streamoff,NULL,"off",""},
  {NULL,"ios::seekdir","dir",""},
  NULL};
static MethodArgs_data TA_istream_putback_MethArgs[]={
  {&TA_char,NULL,"ch",""},
  NULL};
static MethodDef_data TA_istream_MethodDef[]={
  {&TA_istream_ref,NULL,"getline","","","",
    0,3,2,0,0,NULL,cssElCFun_istream_getline_stub,TA_istream_getline_MethArgs},
  {&TA_istream_ref,NULL,"read","","","",
    0,2,-1,0,0,NULL,cssElCFun_istream_read_stub,TA_istream_read_MethArgs},
  {&TA_int,NULL,"get","","","",
    0,0,-1,0,0,NULL,cssElCFun_istream_get_stub,NULL},
  {&TA_int,NULL,"peek","","","",
    0,0,-1,0,0,NULL,cssElCFun_istream_peek_stub,NULL},
  {&TA_istream_ref,NULL,"ignore","","","",
    0,2,0,0,0,NULL,cssElCFun_istream_ignore_stub,TA_istream_ignore_MethArgs},
  {&TA_int,NULL,"sync","","","",
    0,0,-1,0,0,NULL,cssElCFun_istream_sync_stub,NULL},
  {&TA_istream_ref,NULL,"seekg","","","",
    0,2,-1,0,0,NULL,cssElCFun_istream_seekg_stub,TA_istream_seekg_MethArgs},
  {&TA_streampos,NULL,"tellg","","","",
    0,0,-1,0,0,NULL,cssElCFun_istream_tellg_stub,NULL},
  {&TA_istream_ref,NULL,"putback","","","",
    0,1,-1,0,0,NULL,cssElCFun_istream_putback_stub,TA_istream_putback_MethArgs},
  {&TA_istream_ref,NULL,"unget","","","",
    0,0,-1,0,0,NULL,cssElCFun_istream_unget_stub,NULL},
  NULL};
static MethodArgs_data TA_iostream_setf_MethArgs[]={
  {NULL,"ios::fmtflags","val",""},
  NULL};
static MethodArgs_data TA_iostream_unsetf_MethArgs[]={
  {NULL,"ios::fmtflags","mask",""},
  NULL};
static MethodArgs_data TA_iostream_tie_MethArgs[]={
  {&TA_ostream_ptr,NULL,"val",""},
  NULL};
static MethodArgs_data TA_iostream_precision_MethArgs[]={
  {&TA_int,NULL,"newp",""},
  NULL};
static MethodArgs_data TA_iostream_width_MethArgs[]={
  {&TA_int,NULL,"val",""},
  NULL};
static MethodArgs_data TA_iostream_clear_MethArgs[]={
  {NULL,"ios::iostate","state"," 0"},
  NULL};
static MethodArgs_data TA_iostream_setstate_MethArgs[]={
  {NULL,"ios::iostate","flag",""},
  NULL};
static MethodArgs_data TA_iostream_pword_MethArgs[]={
  {&TA_int,NULL,"na",""},
  NULL};
static MethodArgs_data TA_iostream_iword_MethArgs[]={
  {&TA_int,NULL,"na",""},
  NULL};
static MethodArgs_data TA_iostream_getline_MethArgs[]={
  {&TA_char_ptr,NULL,"ptr",""},
  {&TA_int,NULL,"len",""},
  {&TA_char,NULL,"delim"," '\n'"},
  NULL};
static MethodArgs_data TA_iostream_read_MethArgs[]={
  {&TA_char_ptr,NULL,"ptr",""},
  {&TA_streamsize,NULL,"n",""},
  NULL};
static MethodArgs_data TA_iostream_ignore_MethArgs[]={
  {&TA_int,NULL,"n","1"},
  {&TA_int,NULL,"delim"," (-1)"},
  NULL};
static MethodArgs_data TA_iostream_seekg_MethArgs[]={
  {&TA_streamoff,NULL,"off",""},
  {NULL,"ios::seekdir","dir",""},
  NULL};
static MethodArgs_data TA_iostream_putback_MethArgs[]={
  {&TA_char,NULL,"ch",""},
  NULL};
static MethodArgs_data TA_iostream_put_MethArgs[]={
  {&TA_char,NULL,"c",""},
  NULL};
static MethodArgs_data TA_iostream_write_MethArgs[]={
  {&TA_const_char_ptr,NULL,"s",""},
  {&TA_streamsize,NULL,"n",""},
  NULL};
static MethodArgs_data TA_iostream_seekp_MethArgs[]={
  {&TA_streamoff,NULL,"off",""},
  {NULL,"ios::seekdir","dir",""},
  NULL};
static MethodDef_data TA_iostream_MethodDef[]={
  {&TA__Ios_Fmtflags,NULL,"flags","","","",
    0,0,-1,0,0,NULL,cssElCFun_iostream_flags_stub,NULL},
  {&TA__Ios_Fmtflags,NULL,"setf","","","",
    0,1,-1,0,0,NULL,cssElCFun_iostream_setf_stub,TA_iostream_setf_MethArgs},
  {&TA_void,NULL,"unsetf","","","",
    0,1,-1,0,0,NULL,cssElCFun_iostream_unsetf_stub,TA_iostream_unsetf_MethArgs},
  {&TA_ostream_ptr,NULL,"tie","","","",
    1,1,-1,0,0,NULL,cssElCFun_iostream_tie_stub,TA_iostream_tie_MethArgs},
  {&TA_int,NULL,"precision","","","",
    1,1,-1,0,0,NULL,cssElCFun_iostream_precision_stub,TA_iostream_precision_MethArgs},
  {&TA_int,NULL,"width","","","",
    1,1,-1,0,0,NULL,cssElCFun_iostream_width_stub,TA_iostream_width_MethArgs},
  {&TA_void,NULL,"clear","","","",
    0,1,0,0,0,NULL,cssElCFun_iostream_clear_stub,TA_iostream_clear_MethArgs},
  {&TA_void,NULL,"setstate","","","",
    0,1,-1,0,0,NULL,cssElCFun_iostream_setstate_stub,TA_iostream_setstate_MethArgs},
  {&TA_int,NULL,"good","","","",
    0,0,-1,0,0,NULL,cssElCFun_iostream_good_stub,NULL},
  {&TA_int,NULL,"eof","","","",
    0,0,-1,0,0,NULL,cssElCFun_iostream_eof_stub,NULL},
  {&TA_int,NULL,"fail","","","",
    0,0,-1,0,0,NULL,cssElCFun_iostream_fail_stub,NULL},
  {&TA_int,NULL,"bad","","","",
    0,0,-1,0,0,NULL,cssElCFun_iostream_bad_stub,NULL},
  {&TA_void_ptr,NULL,"pword","","","",
    0,1,-1,0,0,NULL,cssElCFun_iostream_pword_stub,TA_iostream_pword_MethArgs},
  {&TA_long,NULL,"iword","","","",
    0,1,-1,0,0,NULL,cssElCFun_iostream_iword_stub,TA_iostream_iword_MethArgs},
  {&TA_istream_ref,NULL,"getline","","","",
    0,3,2,0,0,NULL,cssElCFun_iostream_getline_stub,TA_iostream_getline_MethArgs},
  {&TA_istream_ref,NULL,"read","","","",
    0,2,-1,0,0,NULL,cssElCFun_iostream_read_stub,TA_iostream_read_MethArgs},
  {&TA_int,NULL,"get","","","",
    0,0,-1,0,0,NULL,cssElCFun_iostream_get_stub,NULL},
  {&TA_int,NULL,"peek","","","",
    0,0,-1,0,0,NULL,cssElCFun_iostream_peek_stub,NULL},
  {&TA_istream_ref,NULL,"ignore","","","",
    0,2,0,0,0,NULL,cssElCFun_iostream_ignore_stub,TA_iostream_ignore_MethArgs},
  {&TA_int,NULL,"sync","","","",
    0,0,-1,0,0,NULL,cssElCFun_iostream_sync_stub,NULL},
  {&TA_istream_ref,NULL,"seekg","","","",
    0,2,-1,0,0,NULL,cssElCFun_iostream_seekg_stub,TA_iostream_seekg_MethArgs},
  {&TA_streampos,NULL,"tellg","","","",
    0,0,-1,0,0,NULL,cssElCFun_iostream_tellg_stub,NULL},
  {&TA_istream_ref,NULL,"putback","","","",
    0,1,-1,0,0,NULL,cssElCFun_iostream_putback_stub,TA_iostream_putback_MethArgs},
  {&TA_istream_ref,NULL,"unget","","","",
    0,0,-1,0,0,NULL,cssElCFun_iostream_unget_stub,NULL},
  {&TA_ostream_ref,NULL,"flush","","","",
    0,0,-1,0,0,NULL,cssElCFun_iostream_flush_stub,NULL},
  {&TA_ostream_ref,NULL,"put","","","",
    0,1,-1,0,0,NULL,cssElCFun_iostream_put_stub,TA_iostream_put_MethArgs},
  {&TA_ostream_ref,NULL,"write","","","",
    0,2,-1,0,0,NULL,cssElCFun_iostream_write_stub,TA_iostream_write_MethArgs},
  {&TA_ostream_ref,NULL,"seekp","","","",
    0,2,-1,0,0,NULL,cssElCFun_iostream_seekp_stub,TA_iostream_seekp_MethArgs},
  {&TA_streampos,NULL,"tellp","","","",
    0,0,-1,0,0,NULL,cssElCFun_iostream_tellp_stub,NULL},
  NULL};
static MethodArgs_data TA_ifstream_open_MethArgs[]={
  {&TA_const_char_ptr,NULL,"name",""},
  {NULL,"ios::openmode","mode"," 0x08"},
  NULL};
static MethodDef_data TA_ifstream_MethodDef[]={
  {&TA_void,NULL,"close","","","",
    0,0,-1,0,0,NULL,cssElCFun_ifstream_close_stub,NULL},
  {&TA_int,NULL,"is_open","","","",
    0,0,-1,0,0,NULL,cssElCFun_ifstream_is_open_stub,NULL},
  {&TA_void,NULL,"open","","","",
    0,2,1,0,0,NULL,cssElCFun_ifstream_open_stub,TA_ifstream_open_MethArgs},
  NULL};
static MethodArgs_data TA_ofstream_open_MethArgs[]={
  {&TA_const_char_ptr,NULL,"name",""},
  {NULL,"ios::openmode","mode"," 0x10"},
  NULL};
static MethodDef_data TA_ofstream_MethodDef[]={
  {&TA_void,NULL,"close","","","",
    0,0,-1,0,0,NULL,cssElCFun_ofstream_close_stub,NULL},
  {&TA_int,NULL,"is_open","","","",
    0,0,-1,0,0,NULL,cssElCFun_ofstream_is_open_stub,NULL},
  {&TA_void,NULL,"open","","","",
    0,2,1,0,0,NULL,cssElCFun_ofstream_open_stub,TA_ofstream_open_MethArgs},
  NULL};
static MethodArgs_data TA_fstream_open_MethArgs[]={
  {&TA_const_char_ptr,NULL,"name",""},
  {NULL,"ios::openmode","mode",""},
  NULL};
static MethodDef_data TA_fstream_MethodDef[]={
  {&TA_void,NULL,"close","","","",
    0,0,-1,0,0,NULL,cssElCFun_fstream_close_stub,NULL},
  {&TA_int,NULL,"is_open","","","",
    0,0,-1,0,0,NULL,cssElCFun_fstream_is_open_stub,NULL},
  {&TA_void,NULL,"open","","","",
    0,2,-1,0,0,NULL,cssElCFun_fstream_open_stub,TA_fstream_open_MethArgs},
  NULL};
static MethodArgs_data TA_taPlatform_finalSep_MethArgs[]={
  {&TA_const_taString_ref,NULL,"in",""},
  NULL};
static MethodArgs_data TA_taPlatform_getAppDataPath_MethArgs[]={
  {&TA_const_taString_ref,NULL,"appname",""},
  NULL};
static MethodArgs_data TA_taPlatform_getFileName_MethArgs[]={
  {&TA_const_taString_ref,NULL,"in",""},
  NULL};
static MethodArgs_data TA_taPlatform_getFilePath_MethArgs[]={
  {&TA_const_taString_ref,NULL,"in",""},
  NULL};
static MethodArgs_data TA_taPlatform_posFinalSep_MethArgs[]={
  {&TA_const_taString_ref,NULL,"in",""},
  NULL};
static MethodArgs_data TA_taPlatform_mkdir_MethArgs[]={
  {&TA_const_taString_ref,NULL,"dir",""},
  NULL};
static MethodArgs_data TA_taPlatform_exec_MethArgs[]={
  {&TA_const_taString_ref,NULL,"cmd",""},
  NULL};
static MethodArgs_data TA_taPlatform_sleep_MethArgs[]={
  {&TA_int,NULL,"sec",""},
  NULL};
static MethodArgs_data TA_taPlatform_msleep_MethArgs[]={
  {&TA_int,NULL,"msec",""},
  NULL};
static MethodDef_data TA_taPlatform_MethodDef[]={
  {&TA_int,NULL,"cpuCount"," number of physical cpus","","",
    0,0,-1,0,1,(ta_void_fun)(taPlatform::cpuCount),cssElCFun_taPlatform_cpuCount_stub,NULL},
  {&TA_int,NULL,"processId"," returns a process-specific Id","","",
    0,0,-1,0,1,(ta_void_fun)(taPlatform::processId),cssElCFun_taPlatform_processId_stub,NULL},
  {&TA_int,NULL,"tickCount"," ticks since system started -- def of a 'tick' is system dependent","","",
    0,0,-1,0,1,(ta_void_fun)(taPlatform::tickCount),cssElCFun_taPlatform_tickCount_stub,NULL},
  {&TA_taString,NULL,"finalSep"," return string that has a valid final separator","","",
    0,1,-1,0,1,(ta_void_fun)(taPlatform::finalSep),cssElCFun_taPlatform_finalSep_stub,TA_taPlatform_finalSep_MethArgs},
  {&TA_taString,NULL,"getTempPath"," get a valid temporary path (that user can write to)","","",
    0,0,-1,0,1,(ta_void_fun)(taPlatform::getTempPath),cssElCFun_taPlatform_getTempPath_stub,NULL},
  {&TA_taString,NULL,"getHomePath"," the user's home folder","","",
    0,0,-1,0,1,(ta_void_fun)(taPlatform::getHomePath),cssElCFun_taPlatform_getHomePath_stub,NULL},
  {&TA_taString,NULL,"getAppDataPath"," root for preference data","","",
    0,1,-1,0,1,(ta_void_fun)(taPlatform::getAppDataPath),cssElCFun_taPlatform_getAppDataPath_stub,TA_taPlatform_getAppDataPath_MethArgs},
  {&TA_taString,NULL,"getFileName"," retrieves only the filename&ext, w/o leading path info","","",
    0,1,-1,0,1,(ta_void_fun)(taPlatform::getFileName),cssElCFun_taPlatform_getFileName_stub,TA_taPlatform_getFileName_MethArgs},
  {&TA_taString,NULL,"getFilePath"," retrieves only the file path, if any (no final separator)","","",
    0,1,-1,0,1,(ta_void_fun)(taPlatform::getFilePath),cssElCFun_taPlatform_getFilePath_stub,TA_taPlatform_getFilePath_MethArgs},
  {&TA_int,NULL,"posFinalSep"," position of final path separator, -1 if not found","","",
    0,1,-1,0,1,(ta_void_fun)(taPlatform::posFinalSep),cssElCFun_taPlatform_posFinalSep_stub,TA_taPlatform_posFinalSep_MethArgs},
  {&TA_bool,NULL,"mkdir"," make or assert the directory, true if ok","","",
    0,1,-1,0,1,(ta_void_fun)(taPlatform::mkdir),cssElCFun_taPlatform_mkdir_stub,TA_taPlatform_mkdir_MethArgs},
  {&TA_int,NULL,"exec"," ","","",
    0,1,-1,0,1,(ta_void_fun)(taPlatform::exec),cssElCFun_taPlatform_exec_stub,TA_taPlatform_exec_MethArgs},
  {&TA_void,NULL,"sleep"," sleep the specified number of seconds","","",
    0,1,-1,0,1,(ta_void_fun)(taPlatform::sleep),cssElCFun_taPlatform_sleep_stub,TA_taPlatform_sleep_MethArgs},
  {&TA_void,NULL,"msleep"," sleep the specified number of milliseconds","","",
    0,1,-1,0,1,(ta_void_fun)(taPlatform::msleep),cssElCFun_taPlatform_msleep_stub,TA_taPlatform_msleep_MethArgs},
  NULL};
static MethodArgs_data TA_taAtomic_Increment_MethArgs[]={
  {&TA_int_ref,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taAtomic_Decrement_MethArgs[]={
  {&TA_int_ref,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taAtomic_TestAndSet_MethArgs[]={
  {&TA_int_ref,NULL,"i",""},
  {&TA_int,NULL,"expected",""},
  {&TA_int,NULL,"newval",""},
  NULL};
static MethodArgs_data TA_taAtomic_GetNextValue_MethArgs[]={
  {&TA_int_ref,NULL,"i",""},
  {&TA_int_ref,NULL,"result",""},
  {&TA_int,NULL,"maxval",""},
  {&TA_int,NULL,"inc_by","1"},
  NULL};
static MethodArgs_data TA_taAtomic_GetPrevValue_MethArgs[]={
  {&TA_int_ref,NULL,"i",""},
  {&TA_int_ref,NULL,"result",""},
  {&TA_int,NULL,"minval",""},
  {&TA_int,NULL,"dec_by","1"},
  NULL};
static MethodDef_data TA_taAtomic_MethodDef[]={
  {&TA_int,NULL,"Increment"," indivisibly increment i; returns 'true' if result is != 0","","",
    0,1,-1,0,1,(ta_void_fun)(taAtomic::Increment),cssElCFun_taAtomic_Increment_stub,TA_taAtomic_Increment_MethArgs},
  {&TA_int,NULL,"Decrement"," indivisibly decrement i; returns 'true' if result is != 0","","",
    0,1,-1,0,1,(ta_void_fun)(taAtomic::Decrement),cssElCFun_taAtomic_Decrement_stub,TA_taAtomic_Decrement_MethArgs},
  {&TA_int,NULL,"TestAndSet"," if i==exp then return 'true' and set i=newval; else return 'false' (i unchanged)","","",
    0,3,-1,0,1,(ta_void_fun)(taAtomic::TestAndSet),cssElCFun_taAtomic_TestAndSet_stub,TA_taAtomic_TestAndSet_MethArgs},
  {&TA_int,NULL,"GetNextValue"," get the next available value of i <= maxval, by adding inc_by -- useful for 'greedy' multi-thread algorithms; 'true' if the result is valid","","",
    0,4,3,0,1,(ta_void_fun)(taAtomic::GetNextValue),cssElCFun_taAtomic_GetNextValue_stub,TA_taAtomic_GetNextValue_MethArgs},
  {&TA_int,NULL,"GetPrevValue"," get the next available value of i >= minval, by subtracting dec_by -- useful for 'greedy' multi-thread algorithms; 'true' if the result is valid","","",
    0,4,3,0,1,(ta_void_fun)(taAtomic::GetPrevValue),cssElCFun_taAtomic_GetPrevValue_stub,TA_taAtomic_GetPrevValue_MethArgs},
  NULL};
static int taStrRep::* TA_taStrRep_MbrOff;
static MemberDef_data TA_taStrRep_MemberDef[]={
  {&TA_uint,NULL,"len"," string length (not including null terminator)","","",
    *((ta_memb_ptr*)&(TA_taStrRep_MbrOff=(int taStrRep::*)(&taStrRep::len))),0,NULL,0},
  {&TA_uint,NULL,"sz"," allocated space ((not including null terminator)","","",
    *((ta_memb_ptr*)&(TA_taStrRep_MbrOff=(int taStrRep::*)(&taStrRep::sz))),0,NULL,0},
  {&TA_uint,NULL,"cnt"," reference count (when goes to 0, instance is deleted)","","",
    *((ta_memb_ptr*)&(TA_taStrRep_MbrOff=(int taStrRep::*)(&taStrRep::cnt))),0,NULL,0},
  {&TA_char_ary,NULL,"s"," the string starts here, null terminator always maintained","","",
    *((ta_memb_ptr*)&(TA_taStrRep_MbrOff=(int taStrRep::*)(&taStrRep::s))),0,NULL,0},
  NULL};
static int NameVar::* TA_NameVar_MbrOff;
static MemberDef_data TA_NameVar_MemberDef[]={
  {&TA_taString,NULL,"name"," the name","","",
    *((ta_memb_ptr*)&(TA_NameVar_MbrOff=(int NameVar::*)(&NameVar::name))),0,NULL,0},
  {&TA_Variant,NULL,"value"," the value","","",
    *((ta_memb_ptr*)&(TA_NameVar_MbrOff=(int NameVar::*)(&NameVar::value))),0,NULL,0},
  NULL};
static MethodArgs_data TA_NameVar_SetFmStr_MethArgs[]={
  {&TA_const_taString_ref,NULL,"val",""},
  NULL};
static MethodDef_data TA_NameVar_MethodDef[]={
  {&TA_taString,NULL,"GetStr","","","",
    0,0,-1,0,0,NULL,cssElCFun_NameVar_GetStr_stub,NULL},
  {&TA_void,NULL,"SetFmStr","","","",
    0,1,-1,0,0,NULL,cssElCFun_NameVar_SetFmStr_stub,TA_NameVar_SetFmStr_MethArgs},
  NULL};
static EnumDef_data TA_iFont_Attributes[]={
  {"Bold","","",1},
  {"Italic","","",2},
  {"Underline","","",4},
  NULL};
static int iFont::* TA_iFont_MbrOff;
static MemberDef_data TA_iFont_MemberDef[]={
  {&TA_taString,NULL,"fontName"," family name of the font, such as 'Helvetica' or 'Arial'","","",
    *((ta_memb_ptr*)&(TA_iFont_MbrOff=(int iFont::*)(&iFont::fontName))),0,NULL,0},
  {NULL,"::Attributes","attribs"," font modifiers","BITS ","",
    *((ta_memb_ptr*)&(TA_iFont_MbrOff=(int iFont::*)(&iFont::attribs))),0,NULL,0},
  {&TA_float,NULL,"pointSize"," point size of the font -- will be aproximated in 3D","","",
    *((ta_memb_ptr*)&(TA_iFont_MbrOff=(int iFont::*)(&iFont::pointSize))),0,NULL,0},
  {&TA_int,NULL,"stretch"," the degree of stretch, less is narrower","DETAIL DEF_100 ","",
    *((ta_memb_ptr*)&(TA_iFont_MbrOff=(int iFont::*)(&iFont::stretch))),0,NULL,0},
  NULL};
static MethodArgs_data TA_iFont_setBold_MethArgs[]={
  {&TA_bool,NULL,"value",""},
  NULL};
static MethodArgs_data TA_iFont_setItalic_MethArgs[]={
  {&TA_bool,NULL,"value",""},
  NULL};
static MethodArgs_data TA_iFont_setPointSize_MethArgs[]={
  {&TA_int,NULL,"value",""},
  NULL};
static MethodArgs_data TA_iFont_setStretch_MethArgs[]={
  {&TA_int,NULL,"value",""},
  NULL};
static MethodArgs_data TA_iFont_setUnderline_MethArgs[]={
  {&TA_bool,NULL,"value",""},
  NULL};
static MethodArgs_data TA_iFont_copy_MethArgs[]={
  {&TA_const_iFont_ref,NULL,"src",""},
  NULL};
static MethodArgs_data TA_iFont_equals_MethArgs[]={
  {&TA_const_iFont_ref,NULL,"b",""},
  NULL};
static MethodArgs_data TA_iFont_setRawName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"raw_name",""},
  NULL};
static MethodDef_data TA_iFont_MethodDef[]={
  {&TA_bool,NULL,"bold","","","",
    0,0,-1,0,0,NULL,cssElCFun_iFont_bold_stub,NULL},
  {&TA_void,NULL,"setBold","","","",
    0,1,-1,0,0,NULL,cssElCFun_iFont_setBold_stub,TA_iFont_setBold_MethArgs},
  {&TA_bool,NULL,"italic","","","",
    0,0,-1,0,0,NULL,cssElCFun_iFont_italic_stub,NULL},
  {&TA_void,NULL,"setItalic","","","",
    0,1,-1,0,0,NULL,cssElCFun_iFont_setItalic_stub,TA_iFont_setItalic_MethArgs},
  {&TA_void,NULL,"setPointSize","","","",
    1,1,-1,0,0,NULL,cssElCFun_iFont_setPointSize_stub,TA_iFont_setPointSize_MethArgs},
  {&TA_void,NULL,"setStretch","","","",
    0,1,-1,0,0,NULL,cssElCFun_iFont_setStretch_stub,TA_iFont_setStretch_MethArgs},
  {&TA_bool,NULL,"underline","","","",
    0,0,-1,0,0,NULL,cssElCFun_iFont_underline_stub,NULL},
  {&TA_void,NULL,"setUnderline","","","",
    0,1,-1,0,0,NULL,cssElCFun_iFont_setUnderline_stub,TA_iFont_setUnderline_MethArgs},
  {&TA_void,NULL,"copy","","","",
    0,1,-1,0,0,NULL,cssElCFun_iFont_copy_stub,TA_iFont_copy_MethArgs},
  {&TA_bool,NULL,"equals","","","",
    0,1,-1,0,0,NULL,cssElCFun_iFont_equals_stub,TA_iFont_equals_MethArgs},
  {&TA_void,NULL,"setRawName","","","",
    0,1,-1,0,0,NULL,cssElCFun_iFont_setRawName_stub,TA_iFont_setRawName_MethArgs},
  NULL};
static int taPtrList_impl::* TA_taPtrList_impl_MbrOff;
static MemberDef_data TA_taPtrList_impl_MemberDef[]={
  {&TA_void_ptr_ptr,NULL,"el"," the elements themselves","READ_ONLY NO_SAVE NO_SHOW ","",
    *((ta_memb_ptr*)&(TA_taPtrList_impl_MbrOff=(int taPtrList_impl::*)(&taPtrList_impl::el))),0,NULL,0},
  {&TA_int,NULL,"alloc_size"," allocation size","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_taPtrList_impl_MbrOff=(int taPtrList_impl::*)(&taPtrList_impl::alloc_size))),0,NULL,0},
  {&TA_taHashTable_ptr,NULL,"hash_table"," a hash table (NULL if not used)","READ_ONLY NO_SAVE HIDDEN ","",
    *((ta_memb_ptr*)&(TA_taPtrList_impl_MbrOff=(int taPtrList_impl::*)(&taPtrList_impl::hash_table))),0,NULL,0},
  {&TA_int,NULL,"size"," number of elements in the list","READ_ONLY NO_SAVE SHOW ","",
    *((ta_memb_ptr*)&(TA_taPtrList_impl_MbrOff=(int taPtrList_impl::*)(&taPtrList_impl::size))),0,NULL,0},
  NULL};
static MethodArgs_data TA_taPtrList_impl_InRange_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taPtrList_impl_Alloc_MethArgs[]={
  {&TA_int,NULL,"sz",""},
  NULL};
static MethodArgs_data TA_taPtrList_impl_AllocExact_MethArgs[]={
  {&TA_int,NULL,"sz",""},
  NULL};
static MethodArgs_data TA_taPtrList_impl_BuildHashTable_MethArgs[]={
  {&TA_int,NULL,"n_buckets",""},
  NULL};
static MethodArgs_data TA_taPtrList_impl_RemoveName_MethArgs[]={
  {&TA_const_taString_ref,NULL,"item_nm",""},
  NULL};
static MethodArgs_data TA_taPtrList_impl_RemoveIdx_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taPtrList_impl_MoveIdx_MethArgs[]={
  {&TA_int,NULL,"from",""},
  {&TA_int,NULL,"to",""},
  NULL};
static MethodArgs_data TA_taPtrList_impl_SwapIdx_MethArgs[]={
  {&TA_int,NULL,"pos1",""},
  {&TA_int,NULL,"pos2",""},
  NULL};
static MethodArgs_data TA_taPtrList_impl_Sort_MethArgs[]={
  {&TA_bool,NULL,"descending","false"},
  NULL};
static MethodArgs_data TA_taPtrList_impl_FirstEl_MethArgs[]={
  {&TA_taListItr_ref,NULL,"itr",""},
  NULL};
static MethodArgs_data TA_taPtrList_impl_NextEl_MethArgs[]={
  {&TA_taListItr_ref,NULL,"itr",""},
  NULL};
static MethodArgs_data TA_taPtrList_impl_Duplicate_MethArgs[]={
  {&TA_const_taPtrList_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taPtrList_impl_DupeUniqNameNew_MethArgs[]={
  {&TA_const_taPtrList_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taPtrList_impl_DupeUniqNameOld_MethArgs[]={
  {&TA_const_taPtrList_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taPtrList_impl_Stealth_Borrow_MethArgs[]={
  {&TA_const_taPtrList_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taPtrList_impl_Borrow_MethArgs[]={
  {&TA_const_taPtrList_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taPtrList_impl_BorrowUnique_MethArgs[]={
  {&TA_const_taPtrList_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taPtrList_impl_BorrowUniqNameNew_MethArgs[]={
  {&TA_const_taPtrList_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taPtrList_impl_BorrowUniqNameOld_MethArgs[]={
  {&TA_const_taPtrList_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taPtrList_impl_Copy_Common_MethArgs[]={
  {&TA_const_taPtrList_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taPtrList_impl_Copy_Duplicate_MethArgs[]={
  {&TA_const_taPtrList_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taPtrList_impl_Copy_Borrow_MethArgs[]={
  {&TA_const_taPtrList_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taPtrList_impl_List_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm","cout"},
  NULL};
static MethodDef_data TA_taPtrList_impl_MethodDef[]={
  {&TA_bool,NULL,"InRange","","","",
    0,1,-1,0,0,NULL,cssElCFun_taPtrList_impl_InRange_stub,TA_taPtrList_impl_InRange_MethArgs},
  {&TA_void,NULL,"Alloc"," allocate a list big enough for given number of elements (or current size) -- uses optimized memory allocation policies and generally allocates more than currently needed","CAT_Modify ","",
    0,1,-1,1,0,NULL,cssElCFun_taPtrList_impl_Alloc_stub,TA_taPtrList_impl_Alloc_MethArgs},
  {&TA_void,NULL,"AllocExact"," allocate exact number specified","CAT_Modify ","",
    0,1,-1,1,0,NULL,cssElCFun_taPtrList_impl_AllocExact_stub,TA_taPtrList_impl_AllocExact_MethArgs},
  {&TA_void,NULL,"Reset"," reset the list (remove all elements)","CAT_Modify ","",
    0,0,-1,1,0,NULL,cssElCFun_taPtrList_impl_Reset_stub,NULL},
  {&TA_bool,NULL,"IsEmpty"," is the list empty of elements (i.e., size == 0)","CAT_Access ","",
    0,0,-1,1,0,NULL,cssElCFun_taPtrList_impl_IsEmpty_stub,NULL},
  {&TA_void,NULL,"BuildHashTable"," build a hash table with given number of buckets (not dynamic, so make it big)","CAT_Modify ","",
    0,1,-1,1,0,NULL,cssElCFun_taPtrList_impl_BuildHashTable_stub,TA_taPtrList_impl_BuildHashTable_MethArgs},
  {&TA_bool,NULL,"RemoveName"," remove (and delete) named element from list","CAT_Modify ","",
    0,1,-1,1,0,NULL,cssElCFun_taPtrList_impl_RemoveName_stub,TA_taPtrList_impl_RemoveName_MethArgs},
  {&TA_bool,NULL,"RemoveIdx"," remove (and delete) element from list at index","CAT_Modify ","",
    0,1,-1,1,0,NULL,cssElCFun_taPtrList_impl_RemoveIdx_stub,TA_taPtrList_impl_RemoveIdx_MethArgs},
  {&TA_bool,NULL,"RemoveLast"," remove the last element on the list","CAT_Modify ","",
    0,0,-1,1,0,NULL,cssElCFun_taPtrList_impl_RemoveLast_stub,NULL},
  {&TA_void,NULL,"RemoveAll"," Remove all elements on the list","MENU MENU_ON_Edit CONFIRM CAT_Modify ","",
    0,0,-1,1,0,NULL,cssElCFun_taPtrList_impl_RemoveAll_stub,NULL},
  {&TA_bool,NULL,"MoveIdx"," Move element from index (from) to position (to) in list","CAT_Modify ","",
    0,2,-1,1,0,NULL,cssElCFun_taPtrList_impl_MoveIdx_stub,TA_taPtrList_impl_MoveIdx_MethArgs},
  {&TA_bool,NULL,"SwapIdx"," Swap the elements in the two given positions on the list","CAT_Modify ","",
    0,2,-1,1,0,NULL,cssElCFun_taPtrList_impl_SwapIdx_stub,TA_taPtrList_impl_SwapIdx_MethArgs},
  {&TA_void,NULL,"PopAll"," pop all elements off the stack","CAT_Modify ","",
    0,0,-1,1,0,NULL,cssElCFun_taPtrList_impl_PopAll_stub,NULL},
  {&TA_void,NULL,"Permute"," permute the items in the list into a random order","MENU CONFIRM CAT_Order ","",
    0,0,-1,1,0,NULL,cssElCFun_taPtrList_impl_Permute_stub,NULL},
  {&TA_void,NULL,"Sort"," sort the items in the list in alpha order according to name (or El_Compare_)","MENU CONFIRM CAT_Order ","",
    0,1,0,1,0,NULL,cssElCFun_taPtrList_impl_Sort_stub,TA_taPtrList_impl_Sort_MethArgs},
  {&TA_void_ptr,NULL,"FirstEl"," get the first item on the list, initialize iterator","CAT_Access ","",
    0,1,-1,0,0,NULL,cssElCFun_taPtrList_impl_FirstEl_stub,TA_taPtrList_impl_FirstEl_MethArgs},
  {&TA_void_ptr,NULL,"NextEl"," get the next item on the list according to iterator","CAT_Access ","",
    0,1,-1,0,0,NULL,cssElCFun_taPtrList_impl_NextEl_stub,TA_taPtrList_impl_NextEl_MethArgs},
  {&TA_void,NULL,"Duplicate"," duplicate (clone & add) elements of given list into this one","CAT_Copy ","",
    0,1,-1,0,0,NULL,cssElCFun_taPtrList_impl_Duplicate_stub,TA_taPtrList_impl_Duplicate_MethArgs},
  {&TA_void,NULL,"DupeUniqNameNew"," duplicate so result is unique names, replacing with new ones where dupl","CAT_Copy ","",
    0,1,-1,0,0,NULL,cssElCFun_taPtrList_impl_DupeUniqNameNew_stub,TA_taPtrList_impl_DupeUniqNameNew_MethArgs},
  {&TA_void,NULL,"DupeUniqNameOld"," duplicate so result is unique names, using old ones where dupl","CAT_Copy ","",
    0,1,-1,0,0,NULL,cssElCFun_taPtrList_impl_DupeUniqNameOld_stub,TA_taPtrList_impl_DupeUniqNameOld_MethArgs},
  {&TA_void,NULL,"Stealth_Borrow"," borrow without referencing the borrowed elements (i.e. use AddEl_())","CAT_Copy ","",
    0,1,-1,0,0,NULL,cssElCFun_taPtrList_impl_Stealth_Borrow_stub,TA_taPtrList_impl_Stealth_Borrow_MethArgs},
  {&TA_void,NULL,"Borrow"," borrow (link) elements of given list into this one","CAT_Copy ","",
    0,1,-1,0,0,NULL,cssElCFun_taPtrList_impl_Borrow_stub,TA_taPtrList_impl_Borrow_MethArgs},
  {&TA_void,NULL,"BorrowUnique"," borrow so result is unique list","CAT_Copy ","",
    0,1,-1,0,0,NULL,cssElCFun_taPtrList_impl_BorrowUnique_stub,TA_taPtrList_impl_BorrowUnique_MethArgs},
  {&TA_void,NULL,"BorrowUniqNameNew"," borrow so result is unique names, replacing with new ones where dupl","CAT_Copy ","",
    0,1,-1,0,0,NULL,cssElCFun_taPtrList_impl_BorrowUniqNameNew_stub,TA_taPtrList_impl_BorrowUniqNameNew_MethArgs},
  {&TA_void,NULL,"BorrowUniqNameOld"," borrow so result is unique names, using old ones where dupl","CAT_Copy ","",
    0,1,-1,0,0,NULL,cssElCFun_taPtrList_impl_BorrowUniqNameOld_stub,TA_taPtrList_impl_BorrowUniqNameOld_MethArgs},
  {&TA_void,NULL,"Copy_Common"," apply copy operator to only those items in common between the two lists","CAT_Copy ","",
    0,1,-1,0,0,NULL,cssElCFun_taPtrList_impl_Copy_Common_stub,TA_taPtrList_impl_Copy_Common_MethArgs},
  {&TA_void,NULL,"Copy_Duplicate"," apply copy operator to items, use duplicate to add new ones from cp (if necc)","CAT_Copy ","",
    0,1,-1,0,0,NULL,cssElCFun_taPtrList_impl_Copy_Duplicate_stub,TA_taPtrList_impl_Copy_Duplicate_MethArgs},
  {&TA_void,NULL,"Copy_Borrow"," apply copy operator to items, use borrow to add new ones from cp (if necc)","CAT_Copy ","",
    0,1,-1,0,0,NULL,cssElCFun_taPtrList_impl_Copy_Borrow_stub,TA_taPtrList_impl_Copy_Borrow_MethArgs},
  {&TA_void,NULL,"List"," List the group items","CAT_Display ","",
    0,1,0,1,0,NULL,cssElCFun_taPtrList_impl_List_stub,TA_taPtrList_impl_List_MethArgs},
  NULL};
static EnumDef_data TA_DataChangedReason_EnumDef[]={
  {"DCR_ITEM_UPDATED"," after user edits (or load) ex. taBase::UpdateAfterEdit call; ops not used","",0},
  {"DCR_ITEM_REBUILT"," for complex items that support the STRUCT updates","",1},
  {"DCR_CHILD_ITEM_UPDATED"," op1=item; can optionally be invoked by an owned object (usually a member, usually not list/group items) -- owner can ignore this, or do something with it","",2},
  {"DCR_LIST_INIT","","",3},
  {"DCR_LIST_ITEM_INSERT"," op1=item, op2=item_after, null=at beginning","",4},
  {"DCR_LIST_ITEM_UPDATE"," op1=item","",5},
  {"DCR_LIST_ITEM_REMOVE"," op1=item -- note, item not DisOwned yet, but has been removed from list","",6},
  {"DCR_LIST_ITEM_MOVED"," op1=item, op2=item_after, null=at beginning","",7},
  {"DCR_LIST_ITEMS_SWAP"," op1=item1, op2=item2","",8},
  {"DCR_LIST_SORTED"," after sorting; ops not used","",9},
  {"DCR_GROUP_INSERT"," op1=group, op2=group_after, null=at beginning","",10},
  {"DCR_GROUP_UPDATE"," op1=group, typically called for group name change","",11},
  {"DCR_GROUP_REMOVE"," op1=group -- note, item not DisOwned yet, but has been removed from list","",12},
  {"DCR_GROUP_MOVED"," op1=group, op2=group_after, null=at beginning","",13},
  {"DCR_GROUPS_SWAP"," op1=group1, op2=group2","",14},
  {"DCR_GROUP_ITEM_INSERT"," op1=item, op2=item_after, null=at beginning","",15},
  {"DCR_GROUP_ITEM_UPDATE"," op1=item","",16},
  {"DCR_GROUP_ITEM_REMOVE"," op1=item -- note, item not DisOwned yet, but has been removed from list","",17},
  {"DCR_GROUP_ITEM_MOVED"," op1=item, op2=item_after, null=at beginning","",18},
  {"DCR_GROUP_ITEMS_SWAP"," op1=item1, op2=item2","",19},
  {"DCR_GROUP_LIST_SORTED"," after sorting; ops not used","",20},
  {"DCR_UPDATE_VIEWS"," no ops; sent for UpdateAllViews","",21},
  {"DCR_STRUCT_UPDATE_BEGIN"," for some updating, like doing Layer->Build, better for gui to just do one","",22},
  {"DCR_STRUCT_UPDATE_END"," update operation at the end of everything","",23},
  {"DCR_DATA_UPDATE_BEGIN"," for some data changes, like various log updates, better for gui to just do one","",24},
  {"DCR_DATA_UPDATE_END"," update operation at the end of everything","",25},
  {"DCR_ITEM_DELETING"," NOTE: not used in standard DataChanged calls, but may be used by forwarders, ex. taDataMonitor","",26},
  NULL};
static int taHashEl::* TA_taHashEl_MbrOff;
static MemberDef_data TA_taHashEl_MemberDef[]={
  {&TA_taHashVal,NULL,"hash_code"," hash-coded value of name","","",
    *((ta_memb_ptr*)&(TA_taHashEl_MbrOff=(int taHashEl::*)(&taHashEl::hash_code))),0,NULL,0},
  {&TA_int,NULL,"list_idx"," index of item in list","","",
    *((ta_memb_ptr*)&(TA_taHashEl_MbrOff=(int taHashEl::*)(&taHashEl::list_idx))),0,NULL,0},
  NULL};
static MethodDef_data TA_taHashEl_MethodDef[]={
  {&TA_void,NULL,"Initialize","","","",
    0,0,-1,0,0,NULL,cssElCFun_taHashEl_Initialize_stub,NULL},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__SafeEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__Edit_El_MethArgs[]={
  {NULL,"::taHashEl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__FindName_MethArgs[]={
  {&TA_const_taString_ref,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","no_index"},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__AddUniqNameOld_MethArgs[]={
  {NULL,"::taHashEl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__LinkUniqNameOld_MethArgs[]={
  {NULL,"::taHashEl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__FindEl_MethArgs[]={
  {NULL,"::const_taHashEl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__AddOnly_MethArgs[]={
  {NULL,"::taHashEl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__Add_MethArgs[]={
  {NULL,"::taHashEl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__AddUnique_MethArgs[]={
  {NULL,"::taHashEl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__AddUniqNameNew_MethArgs[]={
  {NULL,"::taHashEl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__Insert_MethArgs[]={
  {NULL,"::taHashEl_ptr","item",""},
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__ReplaceEl_MethArgs[]={
  {NULL,"::taHashEl_ptr","old_it",""},
  {NULL,"::taHashEl_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__ReplaceName_MethArgs[]={
  {&TA_const_taString_ref,NULL,"old_nm",""},
  {NULL,"::taHashEl_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__ReplaceIdx_MethArgs[]={
  {&TA_int,NULL,"old_idx",""},
  {NULL,"::taHashEl_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__RemoveEl_MethArgs[]={
  {NULL,"::taHashEl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__DuplicateEl_MethArgs[]={
  {NULL,"::taHashEl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__Link_MethArgs[]={
  {NULL,"::taHashEl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__LinkUnique_MethArgs[]={
  {NULL,"::taHashEl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__LinkUniqNameNew_MethArgs[]={
  {NULL,"::taHashEl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__InsertLink_MethArgs[]={
  {NULL,"::taHashEl_ptr","item",""},
  {&TA_int,NULL,"idx"," -1"},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__ReplaceLinkEl_MethArgs[]={
  {NULL,"::taHashEl_ptr","old_it",""},
  {NULL,"::taHashEl_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__ReplaceLinkName_MethArgs[]={
  {&TA_const_taString_ref,NULL,"old_nm",""},
  {NULL,"::taHashEl_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__ReplaceLinkIdx_MethArgs[]={
  {&TA_int,NULL,"old_idx",""},
  {NULL,"::taHashEl_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__Push_MethArgs[]={
  {NULL,"::taHashEl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__MoveEl_MethArgs[]={
  {NULL,"::taHashEl_ptr","from",""},
  {NULL,"::taHashEl_ptr","to",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__Transfer_MethArgs[]={
  {NULL,"::taHashEl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__MoveBefore_MethArgs[]={
  {NULL,"::taHashEl_ptr","trg",""},
  {NULL,"::taHashEl_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashEl__MoveAfter_MethArgs[]={
  {NULL,"::taHashEl_ptr","trg",""},
  {NULL,"::taHashEl_ptr","item",""},
  NULL};
static MethodDef_data TA_taPtrList_taHashEl__MethodDef[]={
  {NULL,"::taHashEl_ptr","SafeEl"," element at index","","",
    0,1,-1,0,0,NULL,cssElCFun_taPtrList_taHashEl__SafeEl_stub,TA_taPtrList_taHashEl__SafeEl_MethArgs},
  {NULL,"::taHashEl_ptr","FastEl"," fast element (no range checking)","","",
    0,1,-1,0,0,NULL,cssElCFun_taPtrList_taHashEl__FastEl_stub,TA_taPtrList_taHashEl__FastEl_MethArgs},
  {NULL,"::taHashEl_ptr","Edit_El"," Edit given list item","MENU MENU_ON_Edit USE_RVAL ARG_ON_OBJ ","",
    0,1,-1,0,0,NULL,cssElCFun_taPtrList_taHashEl__Edit_El_stub,TA_taPtrList_taHashEl__Edit_El_MethArgs},
  {NULL,"::taHashEl_ptr","FindName"," find given named element (NULL = not here), sets idx","","",
    0,2,1,1,0,NULL,cssElCFun_taPtrList_taHashEl__FindName_stub,TA_taPtrList_taHashEl__FindName_MethArgs},
  {NULL,"::taHashEl_ptr","Pop"," pop the last element off the stack","","",
    0,0,-1,1,0,NULL,cssElCFun_taPtrList_taHashEl__Pop_stub,NULL},
  {NULL,"::taHashEl_ptr","Peek"," peek at the last element on the stack","","",
    0,0,-1,1,0,NULL,cssElCFun_taPtrList_taHashEl__Peek_stub,NULL},
  {NULL,"::taHashEl_ptr","AddUniqNameOld"," add so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,1,0,NULL,cssElCFun_taPtrList_taHashEl__AddUniqNameOld_stub,TA_taPtrList_taHashEl__AddUniqNameOld_MethArgs},
  {NULL,"::taHashEl_ptr","LinkUniqNameOld"," link so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,1,0,NULL,cssElCFun_taPtrList_taHashEl__LinkUniqNameOld_stub,TA_taPtrList_taHashEl__LinkUniqNameOld_MethArgs},
  {&TA_int,NULL,"FindEl"," find element in list (-1 if not there)","","",
    0,1,-1,1,0,NULL,cssElCFun_taPtrList_taHashEl__FindEl_stub,TA_taPtrList_taHashEl__FindEl_MethArgs},
  {&TA_void,NULL,"AddOnly"," append a new pointer to end of list, does not own it or do anything else","","",
    0,1,-1,1,0,NULL,cssElCFun_taPtrList_taHashEl__AddOnly_stub,TA_taPtrList_taHashEl__AddOnly_MethArgs},
  {&TA_void,NULL,"Add"," add element to the list and 'own' item","","",
    0,1,-1,1,0,NULL,cssElCFun_taPtrList_taHashEl__Add_stub,TA_taPtrList_taHashEl__Add_MethArgs},
  {&TA_bool,NULL,"AddUnique"," add so that object is unique, true if unique","","",
    0,1,-1,1,0,NULL,cssElCFun_taPtrList_taHashEl__AddUnique_stub,TA_taPtrList_taHashEl__AddUnique_MethArgs},
  {&TA_bool,NULL,"AddUniqNameNew"," add so that name is unique, true if unique, new replaces existing","","",
    0,1,-1,1,0,NULL,cssElCFun_taPtrList_taHashEl__AddUniqNameNew_stub,TA_taPtrList_taHashEl__AddUniqNameNew_MethArgs},
  {&TA_bool,NULL,"Insert"," Add or insert element at idx (-1 for end)","","",
    0,2,-1,1,0,NULL,cssElCFun_taPtrList_taHashEl__Insert_stub,TA_taPtrList_taHashEl__Insert_MethArgs},
  {&TA_bool,NULL,"ReplaceEl"," Replace old element with new element","","",
    0,2,-1,1,0,NULL,cssElCFun_taPtrList_taHashEl__ReplaceEl_stub,TA_taPtrList_taHashEl__ReplaceEl_MethArgs},
  {&TA_bool,NULL,"ReplaceName","","","",
    0,2,-1,1,0,NULL,cssElCFun_taPtrList_taHashEl__ReplaceName_stub,TA_taPtrList_taHashEl__ReplaceName_MethArgs},
  {&TA_bool,NULL,"ReplaceIdx"," replace element at index with the new one","","",
    0,2,-1,1,0,NULL,cssElCFun_taPtrList_taHashEl__ReplaceIdx_stub,TA_taPtrList_taHashEl__ReplaceIdx_MethArgs},
  {&TA_bool,NULL,"RemoveEl"," Remove given item from list","MENU ARG_ON_OBJ ","",
    0,1,-1,1,0,NULL,cssElCFun_taPtrList_taHashEl__RemoveEl_stub,TA_taPtrList_taHashEl__RemoveEl_MethArgs},
  {&TA_bool,NULL,"DuplicateEl"," Duplicate given list item and Add to list","MENU ARG_ON_OBJ ","",
    0,1,-1,1,0,NULL,cssElCFun_taPtrList_taHashEl__DuplicateEl_stub,TA_taPtrList_taHashEl__DuplicateEl_MethArgs},
  {&TA_void,NULL,"Link"," Link an item to list without owning it","","",
    0,1,-1,1,0,NULL,cssElCFun_taPtrList_taHashEl__Link_stub,TA_taPtrList_taHashEl__Link_MethArgs},
  {&TA_bool,NULL,"LinkUnique"," link so that object is unique, true if unique","","",
    0,1,-1,1,0,NULL,cssElCFun_taPtrList_taHashEl__LinkUnique_stub,TA_taPtrList_taHashEl__LinkUnique_MethArgs},
  {&TA_bool,NULL,"LinkUniqNameNew"," link so that name is unique, true if unique, new replaces existing","","",
    0,1,-1,1,0,NULL,cssElCFun_taPtrList_taHashEl__LinkUniqNameNew_stub,TA_taPtrList_taHashEl__LinkUniqNameNew_MethArgs},
  {&TA_bool,NULL,"InsertLink"," Insert a link at index (-1 for end)","MENU ","",
    0,2,1,1,0,NULL,cssElCFun_taPtrList_taHashEl__InsertLink_stub,TA_taPtrList_taHashEl__InsertLink_MethArgs},
  {&TA_bool,NULL,"ReplaceLinkEl"," replace given element (if on list) with the new one","","",
    0,2,-1,1,0,NULL,cssElCFun_taPtrList_taHashEl__ReplaceLinkEl_stub,TA_taPtrList_taHashEl__ReplaceLinkEl_MethArgs},
  {&TA_bool,NULL,"ReplaceLinkName"," replace given named element (if on list) with the new one","","",
    0,2,-1,1,0,NULL,cssElCFun_taPtrList_taHashEl__ReplaceLinkName_stub,TA_taPtrList_taHashEl__ReplaceLinkName_MethArgs},
  {&TA_bool,NULL,"ReplaceLinkIdx"," replace element with a link to the new one","","",
    0,2,-1,1,0,NULL,cssElCFun_taPtrList_taHashEl__ReplaceLinkIdx_stub,TA_taPtrList_taHashEl__ReplaceLinkIdx_MethArgs},
  {&TA_void,NULL,"Push"," push item on stack (for temporary use, not 'owned')","","",
    0,1,-1,1,0,NULL,cssElCFun_taPtrList_taHashEl__Push_stub,TA_taPtrList_taHashEl__Push_MethArgs},
  {&TA_bool,NULL,"MoveEl"," Move item (from) to position of (to)","MENU ARG_ON_OBJ ","",
    0,2,-1,1,0,NULL,cssElCFun_taPtrList_taHashEl__MoveEl_stub,TA_taPtrList_taHashEl__MoveEl_MethArgs},
  {&TA_bool,NULL,"Transfer"," Transfer item to this list","MENU MENU_ON_Edit NO_SCOPE ","",
    0,1,-1,1,0,NULL,cssElCFun_taPtrList_taHashEl__Transfer_stub,TA_taPtrList_taHashEl__Transfer_MethArgs},
  {&TA_bool,NULL,"MoveBefore"," move item so that it appears just before the target item trg in the list","","",
    0,2,-1,1,0,NULL,cssElCFun_taPtrList_taHashEl__MoveBefore_stub,TA_taPtrList_taHashEl__MoveBefore_MethArgs},
  {&TA_bool,NULL,"MoveAfter"," move item so that it appears just after the target item trg in the list","","",
    0,2,-1,1,0,NULL,cssElCFun_taPtrList_taHashEl__MoveAfter_stub,TA_taPtrList_taHashEl__MoveAfter_MethArgs},
  NULL};
static MethodArgs_data TA_taHashBucket_FindHashEl_MethArgs[]={
  {&TA_taHashVal,NULL,"hash",""},
  NULL};
static MethodArgs_data TA_taHashBucket_FindListEl_MethArgs[]={
  {&TA_taHashVal,NULL,"hash",""},
  NULL};
static MethodDef_data TA_taHashBucket_MethodDef[]={
  {&TA_int,NULL,"FindHashEl"," find index of item (in the bucket) with given hash code value","","",
    0,1,-1,0,0,NULL,cssElCFun_taHashBucket_FindHashEl_stub,TA_taHashBucket_FindHashEl_MethArgs},
  {&TA_int,NULL,"FindListEl"," find index of item (list_idx) with given hash code value","","",
    0,1,-1,0,0,NULL,cssElCFun_taHashBucket_FindListEl_stub,TA_taHashBucket_FindListEl_MethArgs},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__SafeEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__Edit_El_MethArgs[]={
  {NULL,"::taHashBucket_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__FindName_MethArgs[]={
  {&TA_const_taString_ref,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","no_index"},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__AddUniqNameOld_MethArgs[]={
  {NULL,"::taHashBucket_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__LinkUniqNameOld_MethArgs[]={
  {NULL,"::taHashBucket_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__FindEl_MethArgs[]={
  {NULL,"::const_taHashBucket_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__AddOnly_MethArgs[]={
  {NULL,"::taHashBucket_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__Add_MethArgs[]={
  {NULL,"::taHashBucket_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__AddUnique_MethArgs[]={
  {NULL,"::taHashBucket_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__AddUniqNameNew_MethArgs[]={
  {NULL,"::taHashBucket_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__Insert_MethArgs[]={
  {NULL,"::taHashBucket_ptr","item",""},
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__ReplaceEl_MethArgs[]={
  {NULL,"::taHashBucket_ptr","old_it",""},
  {NULL,"::taHashBucket_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__ReplaceName_MethArgs[]={
  {&TA_const_taString_ref,NULL,"old_nm",""},
  {NULL,"::taHashBucket_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__ReplaceIdx_MethArgs[]={
  {&TA_int,NULL,"old_idx",""},
  {NULL,"::taHashBucket_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__RemoveEl_MethArgs[]={
  {NULL,"::taHashBucket_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__DuplicateEl_MethArgs[]={
  {NULL,"::taHashBucket_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__Link_MethArgs[]={
  {NULL,"::taHashBucket_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__LinkUnique_MethArgs[]={
  {NULL,"::taHashBucket_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__LinkUniqNameNew_MethArgs[]={
  {NULL,"::taHashBucket_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__InsertLink_MethArgs[]={
  {NULL,"::taHashBucket_ptr","item",""},
  {&TA_int,NULL,"idx"," -1"},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__ReplaceLinkEl_MethArgs[]={
  {NULL,"::taHashBucket_ptr","old_it",""},
  {NULL,"::taHashBucket_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__ReplaceLinkName_MethArgs[]={
  {&TA_const_taString_ref,NULL,"old_nm",""},
  {NULL,"::taHashBucket_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__ReplaceLinkIdx_MethArgs[]={
  {&TA_int,NULL,"old_idx",""},
  {NULL,"::taHashBucket_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__Push_MethArgs[]={
  {NULL,"::taHashBucket_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__MoveEl_MethArgs[]={
  {NULL,"::taHashBucket_ptr","from",""},
  {NULL,"::taHashBucket_ptr","to",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__Transfer_MethArgs[]={
  {NULL,"::taHashBucket_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__MoveBefore_MethArgs[]={
  {NULL,"::taHashBucket_ptr","trg",""},
  {NULL,"::taHashBucket_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taHashBucket__MoveAfter_MethArgs[]={
  {NULL,"::taHashBucket_ptr","trg",""},
  {NULL,"::taHashBucket_ptr","item",""},
  NULL};
static MethodDef_data TA_taPtrList_taHashBucket__MethodDef[]={
  {NULL,"::taHashBucket_ptr","SafeEl"," element at index","","",
    0,1,-1,0,0,NULL,cssElCFun_taPtrList_taHashBucket__SafeEl_stub,TA_taPtrList_taHashBucket__SafeEl_MethArgs},
  {NULL,"::taHashBucket_ptr","FastEl"," fast element (no range checking)","","",
    0,1,-1,0,0,NULL,cssElCFun_taPtrList_taHashBucket__FastEl_stub,TA_taPtrList_taHashBucket__FastEl_MethArgs},
  {NULL,"::taHashBucket_ptr","Edit_El"," Edit given list item","MENU MENU_ON_Edit USE_RVAL ARG_ON_OBJ ","",
    0,1,-1,0,0,NULL,cssElCFun_taPtrList_taHashBucket__Edit_El_stub,TA_taPtrList_taHashBucket__Edit_El_MethArgs},
  {NULL,"::taHashBucket_ptr","FindName"," find given named element (NULL = not here), sets idx","","",
    0,2,1,1,0,NULL,cssElCFun_taPtrList_taHashBucket__FindName_stub,TA_taPtrList_taHashBucket__FindName_MethArgs},
  {NULL,"::taHashBucket_ptr","Pop"," pop the last element off the stack","","",
    0,0,-1,1,0,NULL,cssElCFun_taPtrList_taHashBucket__Pop_stub,NULL},
  {NULL,"::taHashBucket_ptr","Peek"," peek at the last element on the stack","","",
    0,0,-1,1,0,NULL,cssElCFun_taPtrList_taHashBucket__Peek_stub,NULL},
  {NULL,"::taHashBucket_ptr","AddUniqNameOld"," add so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,1,0,NULL,cssElCFun_taPtrList_taHashBucket__AddUniqNameOld_stub,TA_taPtrList_taHashBucket__AddUniqNameOld_MethArgs},
  {NULL,"::taHashBucket_ptr","LinkUniqNameOld"," link so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,1,0,NULL,cssElCFun_taPtrList_taHashBucket__LinkUniqNameOld_stub,TA_taPtrList_taHashBucket__LinkUniqNameOld_MethArgs},
  {&TA_int,NULL,"FindEl"," find element in list (-1 if not there)","","",
    0,1,-1,1,0,NULL,cssElCFun_taPtrList_taHashBucket__FindEl_stub,TA_taPtrList_taHashBucket__FindEl_MethArgs},
  {&TA_void,NULL,"AddOnly"," append a new pointer to end of list, does not own it or do anything else","","",
    0,1,-1,1,0,NULL,cssElCFun_taPtrList_taHashBucket__AddOnly_stub,TA_taPtrList_taHashBucket__AddOnly_MethArgs},
  {&TA_void,NULL,"Add"," add element to the list and 'own' item","","",
    0,1,-1,1,0,NULL,cssElCFun_taPtrList_taHashBucket__Add_stub,TA_taPtrList_taHashBucket__Add_MethArgs},
  {&TA_bool,NULL,"AddUnique"," add so that object is unique, true if unique","","",
    0,1,-1,1,0,NULL,cssElCFun_taPtrList_taHashBucket__AddUnique_stub,TA_taPtrList_taHashBucket__AddUnique_MethArgs},
  {&TA_bool,NULL,"AddUniqNameNew"," add so that name is unique, true if unique, new replaces existing","","",
    0,1,-1,1,0,NULL,cssElCFun_taPtrList_taHashBucket__AddUniqNameNew_stub,TA_taPtrList_taHashBucket__AddUniqNameNew_MethArgs},
  {&TA_bool,NULL,"Insert"," Add or insert element at idx (-1 for end)","","",
    0,2,-1,1,0,NULL,cssElCFun_taPtrList_taHashBucket__Insert_stub,TA_taPtrList_taHashBucket__Insert_MethArgs},
  {&TA_bool,NULL,"ReplaceEl"," Replace old element with new element","","",
    0,2,-1,1,0,NULL,cssElCFun_taPtrList_taHashBucket__ReplaceEl_stub,TA_taPtrList_taHashBucket__ReplaceEl_MethArgs},
  {&TA_bool,NULL,"ReplaceName","","","",
    0,2,-1,1,0,NULL,cssElCFun_taPtrList_taHashBucket__ReplaceName_stub,TA_taPtrList_taHashBucket__ReplaceName_MethArgs},
  {&TA_bool,NULL,"ReplaceIdx"," replace element at index with the new one","","",
    0,2,-1,1,0,NULL,cssElCFun_taPtrList_taHashBucket__ReplaceIdx_stub,TA_taPtrList_taHashBucket__ReplaceIdx_MethArgs},
  {&TA_bool,NULL,"RemoveEl"," Remove given item from list","MENU ARG_ON_OBJ ","",
    0,1,-1,1,0,NULL,cssElCFun_taPtrList_taHashBucket__RemoveEl_stub,TA_taPtrList_taHashBucket__RemoveEl_MethArgs},
  {&TA_bool,NULL,"DuplicateEl"," Duplicate given list item and Add to list","MENU ARG_ON_OBJ ","",
    0,1,-1,1,0,NULL,cssElCFun_taPtrList_taHashBucket__DuplicateEl_stub,TA_taPtrList_taHashBucket__DuplicateEl_MethArgs},
  {&TA_void,NULL,"Link"," Link an item to list without owning it","","",
    0,1,-1,1,0,NULL,cssElCFun_taPtrList_taHashBucket__Link_stub,TA_taPtrList_taHashBucket__Link_MethArgs},
  {&TA_bool,NULL,"LinkUnique"," link so that object is unique, true if unique","","",
    0,1,-1,1,0,NULL,cssElCFun_taPtrList_taHashBucket__LinkUnique_stub,TA_taPtrList_taHashBucket__LinkUnique_MethArgs},
  {&TA_bool,NULL,"LinkUniqNameNew"," link so that name is unique, true if unique, new replaces existing","","",
    0,1,-1,1,0,NULL,cssElCFun_taPtrList_taHashBucket__LinkUniqNameNew_stub,TA_taPtrList_taHashBucket__LinkUniqNameNew_MethArgs},
  {&TA_bool,NULL,"InsertLink"," Insert a link at index (-1 for end)","MENU ","",
    0,2,1,1,0,NULL,cssElCFun_taPtrList_taHashBucket__InsertLink_stub,TA_taPtrList_taHashBucket__InsertLink_MethArgs},
  {&TA_bool,NULL,"ReplaceLinkEl"," replace given element (if on list) with the new one","","",
    0,2,-1,1,0,NULL,cssElCFun_taPtrList_taHashBucket__ReplaceLinkEl_stub,TA_taPtrList_taHashBucket__ReplaceLinkEl_MethArgs},
  {&TA_bool,NULL,"ReplaceLinkName"," replace given named element (if on list) with the new one","","",
    0,2,-1,1,0,NULL,cssElCFun_taPtrList_taHashBucket__ReplaceLinkName_stub,TA_taPtrList_taHashBucket__ReplaceLinkName_MethArgs},
  {&TA_bool,NULL,"ReplaceLinkIdx"," replace element with a link to the new one","","",
    0,2,-1,1,0,NULL,cssElCFun_taPtrList_taHashBucket__ReplaceLinkIdx_stub,TA_taPtrList_taHashBucket__ReplaceLinkIdx_MethArgs},
  {&TA_void,NULL,"Push"," push item on stack (for temporary use, not 'owned')","","",
    0,1,-1,1,0,NULL,cssElCFun_taPtrList_taHashBucket__Push_stub,TA_taPtrList_taHashBucket__Push_MethArgs},
  {&TA_bool,NULL,"MoveEl"," Move item (from) to position of (to)","MENU ARG_ON_OBJ ","",
    0,2,-1,1,0,NULL,cssElCFun_taPtrList_taHashBucket__MoveEl_stub,TA_taPtrList_taHashBucket__MoveEl_MethArgs},
  {&TA_bool,NULL,"Transfer"," Transfer item to this list","MENU MENU_ON_Edit NO_SCOPE ","",
    0,1,-1,1,0,NULL,cssElCFun_taPtrList_taHashBucket__Transfer_stub,TA_taPtrList_taHashBucket__Transfer_MethArgs},
  {&TA_bool,NULL,"MoveBefore"," move item so that it appears just before the target item trg in the list","","",
    0,2,-1,1,0,NULL,cssElCFun_taPtrList_taHashBucket__MoveBefore_stub,TA_taPtrList_taHashBucket__MoveBefore_MethArgs},
  {&TA_bool,NULL,"MoveAfter"," move item so that it appears just after the target item trg in the list","","",
    0,2,-1,1,0,NULL,cssElCFun_taPtrList_taHashBucket__MoveAfter_stub,TA_taPtrList_taHashBucket__MoveAfter_MethArgs},
  NULL};
static EnumDef_data TA_taHashTable_KeyType[]={
  {"KT_NAME"," use item name; the legacy default","",0},
  {"KT_PTR"," use the item pointer","",1},
  NULL};
static int taHashTable::* TA_taHashTable_MbrOff;
static MemberDef_data TA_taHashTable_MemberDef[]={
  {&TA_int_ary,NULL,"n_bucket_primes"," prime numbers for number of buckets","","",
    (ta_memb_ptr)NULL,1,(void*)(&taHashTable::n_bucket_primes),0},
  {&TA_int,NULL,"n_primes"," number of prime numbers (86)","","",
    (ta_memb_ptr)NULL,1,(void*)(&taHashTable::n_primes),0},
  {&TA_int,NULL,"bucket_max"," maximum size of any bucket","","",
    *((ta_memb_ptr*)&(TA_taHashTable_MbrOff=(int taHashTable::*)(&taHashTable::bucket_max))),0,NULL,0},
  {NULL,"::KeyType","key_type","","","",
    *((ta_memb_ptr*)&(TA_taHashTable_MbrOff=(int taHashTable::*)(&taHashTable::key_type))),0,NULL,0},
  NULL};
static MethodArgs_data TA_taHashTable_Alloc_MethArgs[]={
  {&TA_int,NULL,"sz",""},
  NULL};
static MethodArgs_data TA_taHashTable_Add_MethArgs[]={
  {&TA_taHashVal,NULL,"hash",""},
  {&TA_int,NULL,"index",""},
  NULL};
static MethodArgs_data TA_taHashTable_FindListEl_MethArgs[]={
  {&TA_taHashVal,NULL,"hash",""},
  NULL};
static MethodArgs_data TA_taHashTable_UpdateIndex_MethArgs[]={
  {&TA_const_taString_ref,NULL,"string",""},
  {&TA_int,NULL,"index",""},
  NULL};
static MethodArgs_data TA_taHashTable_RemoveHash_MethArgs[]={
  {&TA_taHashVal,NULL,"hash",""},
  NULL};
static MethodArgs_data TA_taHashTable_RemoveString_MethArgs[]={
  {&TA_const_taString_ref,NULL,"string",""},
  NULL};
static MethodDef_data TA_taHashTable_MethodDef[]={
  {&TA_void,NULL,"Alloc"," allocate a list big enough for given number of elements (or current size) -- uses optimized memory allocation policies and generally allocates more than currently needed allocate in prime-number increments","CAT_Modify ","",
    0,1,-1,1,0,NULL,cssElCFun_taHashTable_Alloc_stub,TA_taHashTable_Alloc_MethArgs},
  {&TA_void,NULL,"RemoveAll"," Remove all elements on the list","MENU MENU_ON_Edit CONFIRM CAT_Modify ","",
    0,0,-1,1,0,NULL,cssElCFun_taHashTable_RemoveAll_stub,NULL},
  {&TA_void,NULL,"Add"," add a new item to the hash table","","",
    2,2,-1,0,0,NULL,cssElCFun_taHashTable_Add_stub,TA_taHashTable_Add_MethArgs},
  {&TA_int,NULL,"FindListEl"," find index on list from given hash value of element (-1 if not found)","","",
    0,1,-1,0,0,NULL,cssElCFun_taHashTable_FindListEl_stub,TA_taHashTable_FindListEl_MethArgs},
  {&TA_bool,NULL,"UpdateIndex"," update index associated with item","","",
    1,2,-1,0,0,NULL,cssElCFun_taHashTable_UpdateIndex_stub,TA_taHashTable_UpdateIndex_MethArgs},
  {&TA_bool,NULL,"RemoveHash"," remove given hash code from table","","",
    0,1,-1,0,0,NULL,cssElCFun_taHashTable_RemoveHash_stub,TA_taHashTable_RemoveHash_MethArgs},
  {&TA_bool,NULL,"RemoveString"," remove given string from table","","",
    0,1,-1,0,0,NULL,cssElCFun_taHashTable_RemoveString_stub,TA_taHashTable_RemoveString_MethArgs},
  {&TA_void,NULL,"InitList_","","","",
    0,0,-1,0,0,NULL,cssElCFun_taHashTable_InitList__stub,NULL},
  NULL};
static int taArray_impl::* TA_taArray_impl_MbrOff;
static MemberDef_data TA_taArray_impl_MemberDef[]={
  {&TA_int,NULL,"size"," number of elements in the array","NO_SAVE READ_ONLY ","",
    *((ta_memb_ptr*)&(TA_taArray_impl_MbrOff=(int taArray_impl::*)(&taArray_impl::size))),0,NULL,0},
  {&TA_int,NULL,"alloc_size"," allocated (physical) size","READ_ONLY NO_SAVE DETAIL ","",
    *((ta_memb_ptr*)&(TA_taArray_impl_MbrOff=(int taArray_impl::*)(&taArray_impl::alloc_size))),0,NULL,0},
  NULL};
static MethodArgs_data TA_taArray_impl_InRange_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taArray_impl_Alloc_MethArgs[]={
  {&TA_int,NULL,"n",""},
  NULL};
static MethodArgs_data TA_taArray_impl_Equal__MethArgs[]={
  {&TA_const_taArray_impl_ref,NULL,"ar",""},
  NULL};
static MethodArgs_data TA_taArray_impl_SetSize_MethArgs[]={
  {&TA_int,NULL,"sz",""},
  NULL};
static MethodArgs_data TA_taArray_impl_AddBlank_MethArgs[]={
  {&TA_int,NULL,"n_els"," 1"},
  NULL};
static MethodArgs_data TA_taArray_impl_RemoveIdx_MethArgs[]={
  {&TA_uint,NULL,"idx",""},
  {&TA_int,NULL,"n_els","1"},
  NULL};
static MethodArgs_data TA_taArray_impl_MoveIdx_MethArgs[]={
  {&TA_int,NULL,"from",""},
  {&TA_int,NULL,"to",""},
  NULL};
static MethodArgs_data TA_taArray_impl_SwapIdx_MethArgs[]={
  {&TA_int,NULL,"pos1",""},
  {&TA_int,NULL,"pos2",""},
  NULL};
static MethodArgs_data TA_taArray_impl_Sort_MethArgs[]={
  {&TA_bool,NULL,"descending","false"},
  NULL};
static MethodArgs_data TA_taArray_impl_ShiftLeft_MethArgs[]={
  {&TA_int,NULL,"nshift",""},
  NULL};
static MethodArgs_data TA_taArray_impl_ShiftLeftPct_MethArgs[]={
  {&TA_float,NULL,"pct",""},
  NULL};
static MethodArgs_data TA_taArray_impl_V_Flip_MethArgs[]={
  {&TA_int,NULL,"width",""},
  NULL};
static MethodArgs_data TA_taArray_impl_Duplicate_MethArgs[]={
  {&TA_const_taArray_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taArray_impl_DupeUnique_MethArgs[]={
  {&TA_const_taArray_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taArray_impl_Copy_Common_MethArgs[]={
  {&TA_const_taArray_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taArray_impl_Copy_Duplicate_MethArgs[]={
  {&TA_const_taArray_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taArray_impl_CopyVals_MethArgs[]={
  {&TA_const_taArray_impl_ref,NULL,"from",""},
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end","-1"},
  {&TA_int,NULL,"at","0"},
  NULL};
static MethodArgs_data TA_taArray_impl_List_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm"," cout"},
  NULL};
static MethodArgs_data TA_taArray_impl_InitFromString_MethArgs[]={
  {&TA_const_taString_ref,NULL,"val",""},
  NULL};
static MethodDef_data TA_taArray_impl_MethodDef[]={
  {&TA_bool,NULL,"InRange","","","",
    0,1,-1,0,0,NULL,cssElCFun_taArray_impl_InRange_stub,TA_taArray_impl_InRange_MethArgs},
  {&TA_void,NULL,"Alloc"," allocate storage for at least the given size","","",
    0,1,-1,1,0,NULL,cssElCFun_taArray_impl_Alloc_stub,TA_taArray_impl_Alloc_MethArgs},
  {&TA_void,NULL,"Reset"," reset the list to zero size (does not free memory)","","",
    0,0,-1,1,0,NULL,cssElCFun_taArray_impl_Reset_stub,NULL},
  {&TA_bool,NULL,"Equal_"," value equality, implements == and != operators, ar must be same type","","",
    0,1,-1,1,0,NULL,cssElCFun_taArray_impl_Equal__stub,TA_taArray_impl_Equal__MethArgs},
  {&TA_void_ptr,NULL,"BlankEl_"," address of a blank element, for initializing empty items","","",
    0,0,-1,1,0,NULL,cssElCFun_taArray_impl_BlankEl__stub,NULL},
  {&TA_void,NULL,"SetSize"," force array to be of given size by inserting blanks or removing","MENU MENU_ON_Edit ","",
    0,1,-1,1,0,NULL,cssElCFun_taArray_impl_SetSize_stub,TA_taArray_impl_SetSize_MethArgs},
  {&TA_void,NULL,"AddBlank"," Add n_els empty elements to the end of the array","MENU MENU_ON_Edit ","",
    0,1,0,1,0,NULL,cssElCFun_taArray_impl_AddBlank_stub,TA_taArray_impl_AddBlank_MethArgs},
  {&TA_bool,NULL,"RemoveIdx"," Remove (n_els) item(s) at idx, returns success","MENU MENU_ON_Edit ","",
    0,2,1,1,0,NULL,cssElCFun_taArray_impl_RemoveIdx_stub,TA_taArray_impl_RemoveIdx_MethArgs},
  {&TA_bool,NULL,"MoveIdx"," move item from index to index","MENU ","",
    0,2,-1,1,0,NULL,cssElCFun_taArray_impl_MoveIdx_stub,TA_taArray_impl_MoveIdx_MethArgs},
  {&TA_bool,NULL,"SwapIdx"," Swap the elements in the two given positions on the list","CAT_Modify ","",
    0,2,-1,1,0,NULL,cssElCFun_taArray_impl_SwapIdx_stub,TA_taArray_impl_SwapIdx_MethArgs},
  {&TA_void,NULL,"Permute"," permute the items in the list into a random order","MENU ","",
    0,0,-1,1,0,NULL,cssElCFun_taArray_impl_Permute_stub,NULL},
  {&TA_void,NULL,"Sort"," sort the list in ascending order (or descending if switched)","MENU ","",
    0,1,0,1,0,NULL,cssElCFun_taArray_impl_Sort_stub,TA_taArray_impl_Sort_MethArgs},
  {&TA_void,NULL,"ShiftLeft"," shift all the elements in the array to the left by given number of items","","",
    0,1,-1,1,0,NULL,cssElCFun_taArray_impl_ShiftLeft_stub,TA_taArray_impl_ShiftLeft_MethArgs},
  {&TA_void,NULL,"ShiftLeftPct"," shift the array to the left by given percentage of current size","","",
    0,1,-1,1,0,NULL,cssElCFun_taArray_impl_ShiftLeftPct_stub,TA_taArray_impl_ShiftLeftPct_MethArgs},
  {&TA_int,NULL,"V_Flip"," vertically flip the array as if it was arrange in a matrix of width","","",
    0,1,-1,1,0,NULL,cssElCFun_taArray_impl_V_Flip_stub,TA_taArray_impl_V_Flip_MethArgs},
  {&TA_void,NULL,"Duplicate"," duplicate the items in the list","","",
    0,1,-1,1,0,NULL,cssElCFun_taArray_impl_Duplicate_stub,TA_taArray_impl_Duplicate_MethArgs},
  {&TA_void,NULL,"DupeUnique"," duplicate so result is unique list","","",
    0,1,-1,1,0,NULL,cssElCFun_taArray_impl_DupeUnique_stub,TA_taArray_impl_DupeUnique_MethArgs},
  {&TA_void,NULL,"Copy_Common"," copy elements in common","","",
    0,1,-1,1,0,NULL,cssElCFun_taArray_impl_Copy_Common_stub,TA_taArray_impl_Copy_Common_MethArgs},
  {&TA_void,NULL,"Copy_Duplicate"," copy elements in common, duplicating (if necc) any extra on cp","","",
    0,1,-1,1,0,NULL,cssElCFun_taArray_impl_Copy_Duplicate_stub,TA_taArray_impl_Copy_Duplicate_MethArgs},
  {&TA_void,NULL,"CopyVals"," copy values from other array at given start and end points, and putting at given point in this","","",
    0,4,1,1,0,NULL,cssElCFun_taArray_impl_CopyVals_stub,TA_taArray_impl_CopyVals_MethArgs},
  {&TA_void,NULL,"List"," print out all of the elements in the array","","",
    0,1,0,1,0,NULL,cssElCFun_taArray_impl_List_stub,TA_taArray_impl_List_MethArgs},
  {&TA_void,NULL,"InitFromString"," initialize an array from given string (does reset first)","","",
    0,1,-1,1,0,NULL,cssElCFun_taArray_impl_InitFromString_stub,TA_taArray_impl_InitFromString_MethArgs},
  NULL};
static int taFixedArray_impl::* TA_taFixedArray_impl_MbrOff;
static MemberDef_data TA_taFixedArray_impl_MemberDef[]={
  {&TA_int,NULL,"size"," number of elements in the array","NO_SAVE READ_ONLY ","",
    *((ta_memb_ptr*)&(TA_taFixedArray_impl_MbrOff=(int taFixedArray_impl::*)(&taFixedArray_impl::size))),0,NULL,0},
  NULL};
static MethodArgs_data TA_taFixedArray_impl_InRange_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taFixedArray_impl_SetSize_MethArgs[]={
  {&TA_int,NULL,"sz",""},
  NULL};
static MethodDef_data TA_taFixedArray_impl_MethodDef[]={
  {&TA_bool,NULL,"InRange","","","",
    0,1,-1,0,0,NULL,cssElCFun_taFixedArray_impl_InRange_stub,TA_taFixedArray_impl_InRange_MethArgs},
  {&TA_void,NULL,"Reset"," //////////////////////////////////////////////","","",
    0,0,-1,1,0,NULL,cssElCFun_taFixedArray_impl_Reset_stub,NULL},
  {&TA_void,NULL,"SetSize"," force array to be of given size by inserting blanks or removing","MENU MENU_ON_Edit ","",
    0,1,-1,1,0,NULL,cssElCFun_taFixedArray_impl_SetSize_stub,TA_taFixedArray_impl_SetSize_MethArgs},
  NULL};
static int taFixedArray<int>::* TA_taFixedArray_int__MbrOff;
static MemberDef_data TA_taFixedArray_int__MemberDef[]={
  {NULL,"::int_ptr","el"," Pointer to actual array memory","HIDDEN NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_taFixedArray_int__MbrOff=(int taFixedArray<int>::*)(&taFixedArray<int>::el))),0,NULL,0},
  NULL};
static MethodArgs_data TA_taFixedArray_int__SafeEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taFixedArray_int__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taFixedArray_int__Set_MethArgs[]={
  {&TA_int,NULL,"i",""},
  {NULL,"::const_int_ref","item",""},
  NULL};
static MethodArgs_data TA_taFixedArray_int__Add_MethArgs[]={
  {NULL,"::const_int_ref","item",""},
  NULL};
static MethodArgs_data TA_taFixedArray_int__AddUnique_MethArgs[]={
  {NULL,"::const_int_ref","item",""},
  NULL};
static MethodArgs_data TA_taFixedArray_int__Insert_MethArgs[]={
  {NULL,"::const_int_ref","item",""},
  {&TA_int,NULL,"idx",""},
  {&TA_int,NULL,"n_els","1"},
  NULL};
static MethodArgs_data TA_taFixedArray_int__Find_MethArgs[]={
  {NULL,"::const_int_ref","item",""},
  {&TA_int,NULL,"i","0"},
  NULL};
static MethodDef_data TA_taFixedArray_int__MethodDef[]={
  {NULL,"::const_int_ref","SafeEl"," the element at the given index","","",
    0,1,-1,0,0,NULL,cssElCFun_taFixedArray_int__SafeEl_stub,TA_taFixedArray_int__SafeEl_MethArgs},
  {NULL,"::int_ref","FastEl"," fast element (no range checking)","","",
    0,1,-1,0,0,NULL,cssElCFun_taFixedArray_int__FastEl_stub,TA_taFixedArray_int__FastEl_MethArgs},
  {&TA_void,NULL,"Set"," use this for assigning values to items in the array (Set should update if needed)","","",
    0,2,-1,1,0,NULL,cssElCFun_taFixedArray_int__Set_stub,TA_taFixedArray_int__Set_MethArgs},
  {&TA_void,NULL,"Add"," add the item to the array","MENU ","",
    0,1,-1,1,0,NULL,cssElCFun_taFixedArray_int__Add_stub,TA_taFixedArray_int__Add_MethArgs},
  {&TA_bool,NULL,"AddUnique"," add the item to the array if it isn't already on it, returns true if unique","","",
    0,1,-1,1,0,NULL,cssElCFun_taFixedArray_int__AddUnique_stub,TA_taFixedArray_int__AddUnique_MethArgs},
  {&TA_void,NULL,"Insert"," Insert (n_els) item(s) at idx (-1 for end) in the array","MENU ","",
    0,3,2,1,0,NULL,cssElCFun_taFixedArray_int__Insert_stub,TA_taFixedArray_int__Insert_MethArgs},
  {&TA_int,NULL,"Find"," Find item starting from idx in the array (-1 if not there)","MENU USE_RVAL ","",
    0,2,1,1,0,NULL,cssElCFun_taFixedArray_int__Find_stub,TA_taFixedArray_int__Find_MethArgs},
  NULL};
static MemberDef_data TA_int_FixedArray_MemberDef[]={
  {&TA_int,NULL,"blank","","","",
    (ta_memb_ptr)NULL,1,(void*)(&int_FixedArray::blank),0},
  NULL};
static EnumDef_data TA_taFiler_FileOperation[]={
  {"foOpen","","",0},
  {"foSave","","",1},
  {"foSaveAs","","",2},
  {"foAppend","","",3},
  NULL};
static EnumDef_data TA_taFiler_FilerFlags[]={
  {"NO_FLAGS"," ","NO_BIT ",0},
  {"CONFIRM_OVERWRITE"," for Save/Append, warn if file already exists","",1},
  {"FILE_MUST_EXIST"," for Open, file must exist","",2},
  {"COMPRESS_ENABLE"," enables use of compression/compressed files","",4},
  {"COMPRESS_REQ"," if compr enabled, requests it by default","",8},
  {"COMPRESS_REQ_DEF"," use taiMisc default for compression","",256},
  {"DEF_FLAGS"," default flags for no compression","NO_BIT ",3},
  {"DEF_FLAGS_COMPRESS"," default flags for compression w/ autocompress","NO_BIT ",263},
  NULL};
static int taFiler::* TA_taFiler_MbrOff;
static MemberDef_data TA_taFiler_MemberDef[]={
  {&TA_int,NULL,"buf_size"," size of the buffer for input operations","HIDDEN NO_SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&taFiler::buf_size),0},
  {&TA_taString,NULL,"last_fname"," last filename processed","HIDDEN NO_SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&taFiler::last_fname),0},
  {&TA_taString,NULL,"filter"," the QFileDialog-compatible filter expression","","",
    *((ta_memb_ptr*)&(TA_taFiler_MbrOff=(int taFiler::*)(&taFiler::filter))),0,NULL,0},
  {&TA_taString,NULL,"filetype"," the filetype, ex Project","","",
    *((ta_memb_ptr*)&(TA_taFiler_MbrOff=(int taFiler::*)(&taFiler::filetype))),0,NULL,0},
  {&TA_taString,NULL,"ext"," the default extension (if any), including '.'","","",
    *((ta_memb_ptr*)&(TA_taFiler_MbrOff=(int taFiler::*)(&taFiler::ext))),0,NULL,0},
  {&TA_taString,NULL,"context"," context for this instance","","",
    *((ta_memb_ptr*)&(TA_taFiler_MbrOff=(int taFiler::*)(&taFiler::context))),0,NULL,0},
  {&TA_bool,NULL,"select_only"," file is to be selected only (not opened)","","",
    *((ta_memb_ptr*)&(TA_taFiler_MbrOff=(int taFiler::*)(&taFiler::select_only))),0,NULL,0},
  {&TA_istream_ptr,NULL,"istrm"," ","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_taFiler_MbrOff=(int taFiler::*)(&taFiler::istrm))),0,NULL,0},
  {&TA_ostream_ptr,NULL,"ostrm"," ","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_taFiler_MbrOff=(int taFiler::*)(&taFiler::ostrm))),0,NULL,0},
  {&TA_bool,NULL,"open_file"," true if there is an open file somewhere","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_taFiler_MbrOff=(int taFiler::*)(&taFiler::open_file))),0,NULL,0},
  {&TA_bool,NULL,"file_selected"," true if a file was selected last time..","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_taFiler_MbrOff=(int taFiler::*)(&taFiler::file_selected))),0,NULL,0},
  NULL};
static MethodArgs_data TA_taFiler_New_MethArgs[]={
  {&TA_const_taString_ref,NULL,"filetypes"," All"},
  {&TA_const_taString_ref,NULL,"exts"," taString()"},
  {NULL,"::FilerFlags","flags"," DEF_FLAGS"},
  {&TA_const_taString_ref,NULL,"context"," taString()"},
  NULL};
static MethodArgs_data TA_taFiler_setFileName_MethArgs[]={
  {&TA_const_taString_ref,NULL,"value",""},
  NULL};
static MethodArgs_data TA_taFiler_setFname_MethArgs[]={
  {&TA_const_taString_ref,NULL,"val",""},
  NULL};
static MethodArgs_data TA_taFiler_GetFileName_MethArgs[]={
  {NULL,"::FileOperation","filerOperation",""},
  NULL};
static MethodDef_data TA_taFiler_MethodDef[]={
  {&TA_taFiler_ptr,NULL,"New"," creates instance; filetype/ext are ,separated lists; ext items in a file are space-separated; context is for saving/restoring last_dir ('' = '(none'))","","",
    0,4,0,0,1,(ta_void_fun)(taFiler::New),cssElCFun_taFiler_New_stub,TA_taFiler_New_MethArgs},
  {&TA_bool,NULL,"compressEnabled"," true if client enabled use of compression","","",
    0,0,-1,0,0,NULL,cssElCFun_taFiler_compressEnabled_stub,NULL},
  {&TA_bool,NULL,"compressReq"," true if client requested compression AND it is enabled","","",
    0,0,-1,0,0,NULL,cssElCFun_taFiler_compressReq_stub,NULL},
  {&TA_bool,NULL,"isOpen"," true if file is open","","",
    0,0,-1,0,0,NULL,cssElCFun_taFiler_isOpen_stub,NULL},
  {&TA_bool,NULL,"isCompressed"," if open, indicates actual compr status, else indicates .gz suffix on fname","","",
    0,0,-1,0,0,NULL,cssElCFun_taFiler_isCompressed_stub,NULL},
  {&TA_taString,NULL,"fileName"," concats dir and fname","","",
    0,0,-1,0,0,NULL,cssElCFun_taFiler_fileName_stub,NULL},
  {&TA_void,NULL,"setFileName"," parses out into dir and name, setting in us","","",
    0,1,-1,0,0,NULL,cssElCFun_taFiler_setFileName_stub,TA_taFiler_setFileName_MethArgs},
  {&TA_taString,NULL,"dir"," the directory path to the file","","",
    0,0,-1,0,0,NULL,cssElCFun_taFiler_dir_stub,NULL},
  {&TA_taString,NULL,"fname"," the name (no path) of the file","","",
    0,0,-1,0,0,NULL,cssElCFun_taFiler_fname_stub,NULL},
  {&TA_void,NULL,"setFname"," the low-level api functions work directly on the fname","","",
    0,1,-1,0,0,NULL,cssElCFun_taFiler_setFname_stub,TA_taFiler_setFname_MethArgs},
  {&TA_bool,NULL,"open_write_exist_check"," returns true if file already exists for writing","","",
    0,0,-1,1,0,NULL,cssElCFun_taFiler_open_write_exist_check_stub,NULL},
  {&TA_istream_ptr,NULL,"Open"," to open an existing file for reading; starts with curr filename if any","MENU ","",
    0,0,-1,1,0,NULL,cssElCFun_taFiler_Open_stub,NULL},
  {&TA_ostream_ptr,NULL,"Save"," to save to an existing file; requests a new filename if doesn't exist","MENU ","",
    0,0,-1,1,0,NULL,cssElCFun_taFiler_Save_stub,NULL},
  {&TA_ostream_ptr,NULL,"SaveAs"," to save to a new file","MENU ","",
    0,0,-1,1,0,NULL,cssElCFun_taFiler_SaveAs_stub,NULL},
  {&TA_ostream_ptr,NULL,"Append"," to open an existing file for appending","MENU ","",
    0,0,-1,1,0,NULL,cssElCFun_taFiler_Append_stub,NULL},
  {&TA_void,NULL,"Close"," close the stream","MENU ","",
    0,0,-1,1,0,NULL,cssElCFun_taFiler_Close_stub,NULL},
  {&TA_bool,NULL,"GetFileName"," gui-dependent routine to get filename from user -- it is set in dir/fname; false if user cancels","","",
    0,1,-1,1,0,NULL,cssElCFun_taFiler_GetFileName_stub,TA_taFiler_GetFileName_MethArgs},
  {&TA_void,NULL,"FixFileName"," make sure suffix is right","","",
    0,0,-1,1,0,NULL,cssElCFun_taFiler_FixFileName_stub,NULL},
  NULL};
static int rgb_t::* TA_rgb_t_MbrOff;
static MemberDef_data TA_rgb_t_MemberDef[]={
  {&TA_uint8_t,NULL,"r","","","",
    *((ta_memb_ptr*)&(TA_rgb_t_MbrOff=(int rgb_t::*)(&rgb_t::r))),0,NULL,0},
  {&TA_uint8_t,NULL,"g","","","",
    *((ta_memb_ptr*)&(TA_rgb_t_MbrOff=(int rgb_t::*)(&rgb_t::g))),0,NULL,0},
  {&TA_uint8_t,NULL,"b","","","",
    *((ta_memb_ptr*)&(TA_rgb_t_MbrOff=(int rgb_t::*)(&rgb_t::b))),0,NULL,0},
  NULL};
static MethodArgs_data TA_rgb_t_setInt_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_rgb_t_setString_MethArgs[]={
  {&TA_const_taString_ref,NULL,"s",""},
  NULL};
static MethodDef_data TA_rgb_t_MethodDef[]={
  {&TA_int,NULL,"toInt"," returns in RRGGBB web format","","",
    0,0,-1,0,0,NULL,cssElCFun_rgb_t_toInt_stub,NULL},
  {&TA_void,NULL,"setInt"," set from RRGGBB web format","","",
    0,1,-1,0,0,NULL,cssElCFun_rgb_t_setInt_stub,TA_rgb_t_setInt_MethArgs},
  {&TA_const_taString,NULL,"toString"," returns in hex RRGGBB web format","","",
    0,0,-1,0,0,NULL,cssElCFun_rgb_t_toString_stub,NULL},
  {&TA_void,NULL,"setString"," set from hex RRGGBB web format","","",
    0,1,-1,0,0,NULL,cssElCFun_rgb_t_setString_stub,TA_rgb_t_setString_MethArgs},
  NULL};
static int taPlainArray<taString>::* TA_taPlainArray_taString__MbrOff;
static MemberDef_data TA_taPlainArray_taString__MemberDef[]={
  {NULL,"::taString_ptr","el"," Pointer to actual array memory","HIDDEN NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_taPlainArray_taString__MbrOff=(int taPlainArray<taString>::*)(&taPlainArray<taString>::el))),0,NULL,0},
  {&TA_taString,NULL,"err"," what is returned when out of range -- MUST INIT IN CONSTRUCTOR","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_taPlainArray_taString__MbrOff=(int taPlainArray<taString>::*)(&taPlainArray<taString>::err))),0,NULL,0},
  NULL};
static MethodArgs_data TA_taPlainArray_taString__SafeEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taPlainArray_taString__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taPlainArray_taString__RevEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taPlainArray_taString__Set_MethArgs[]={
  {&TA_int,NULL,"i",""},
  {NULL,"::const_taString_ref","item",""},
  NULL};
static MethodArgs_data TA_taPlainArray_taString__Add_MethArgs[]={
  {NULL,"::const_taString_ref","item",""},
  NULL};
static MethodArgs_data TA_taPlainArray_taString__AddUnique_MethArgs[]={
  {NULL,"::const_taString_ref","item",""},
  NULL};
static MethodArgs_data TA_taPlainArray_taString__Push_MethArgs[]={
  {NULL,"::const_taString_ref","item",""},
  NULL};
static MethodArgs_data TA_taPlainArray_taString__Insert_MethArgs[]={
  {NULL,"::const_taString_ref","item",""},
  {&TA_int,NULL,"idx",""},
  {&TA_int,NULL,"n_els","1"},
  NULL};
static MethodArgs_data TA_taPlainArray_taString__FindEl_MethArgs[]={
  {NULL,"::const_taString_ref","item",""},
  {&TA_int,NULL,"i","0"},
  NULL};
static MethodArgs_data TA_taPlainArray_taString__RemoveEl_MethArgs[]={
  {NULL,"::const_taString_ref","item",""},
  NULL};
static MethodDef_data TA_taPlainArray_taString__MethodDef[]={
  {NULL,"::taString_ref","SafeEl"," the element at the given index","","",
    0,1,-1,0,0,NULL,cssElCFun_taPlainArray_taString__SafeEl_stub,TA_taPlainArray_taString__SafeEl_MethArgs},
  {NULL,"::const_taString_ref","FastEl"," fast element (no range checking)","","",
    0,1,-1,0,0,NULL,cssElCFun_taPlainArray_taString__FastEl_stub,TA_taPlainArray_taString__FastEl_MethArgs},
  {NULL,"::taString_ref","RevEl"," reverse (index) element (ie. get from the back of the list first)","","",
    0,1,-1,0,0,NULL,cssElCFun_taPlainArray_taString__RevEl_stub,TA_taPlainArray_taString__RevEl_MethArgs},
  {&TA_taString,NULL,"Pop"," pop the last item in the array off","","",
    0,0,-1,1,0,NULL,cssElCFun_taPlainArray_taString__Pop_stub,NULL},
  {NULL,"::taString_ref","Peek"," peek at the last item on the array","","",
    0,0,-1,1,0,NULL,cssElCFun_taPlainArray_taString__Peek_stub,NULL},
  {&TA_void,NULL,"Set"," use this for assigning values to items in the array (Set should update if needed)","","",
    0,2,-1,1,0,NULL,cssElCFun_taPlainArray_taString__Set_stub,TA_taPlainArray_taString__Set_MethArgs},
  {&TA_void,NULL,"Add"," add the item to the array","MENU ","",
    0,1,-1,1,0,NULL,cssElCFun_taPlainArray_taString__Add_stub,TA_taPlainArray_taString__Add_MethArgs},
  {&TA_bool,NULL,"AddUnique"," add the item to the array if it isn't already on it, returns true if unique","","",
    0,1,-1,1,0,NULL,cssElCFun_taPlainArray_taString__AddUnique_stub,TA_taPlainArray_taString__AddUnique_MethArgs},
  {&TA_void,NULL,"Push"," push the item on the end of the array (same as add)","","",
    0,1,-1,1,0,NULL,cssElCFun_taPlainArray_taString__Push_stub,TA_taPlainArray_taString__Push_MethArgs},
  {&TA_void,NULL,"Insert"," Insert (n_els) item(s) at idx (-1 for end) in the array","MENU ","",
    0,3,2,1,0,NULL,cssElCFun_taPlainArray_taString__Insert_stub,TA_taPlainArray_taString__Insert_MethArgs},
  {&TA_int,NULL,"FindEl"," Find item starting from idx in the array (-1 if not there)","MENU USE_RVAL ","",
    0,2,1,1,0,NULL,cssElCFun_taPlainArray_taString__FindEl_stub,TA_taPlainArray_taString__FindEl_MethArgs},
  {&TA_bool,NULL,"RemoveEl"," remove given item, returns success","","",
    0,1,-1,1,0,NULL,cssElCFun_taPlainArray_taString__RemoveEl_stub,TA_taPlainArray_taString__RemoveEl_MethArgs},
  NULL};
static MethodArgs_data TA_String_PArray_FindContains_MethArgs[]={
  {&TA_const_taString_ref,NULL,"op",""},
  {&TA_int,NULL,"start","0"},
  NULL};
static MethodArgs_data TA_String_PArray_AsString_MethArgs[]={
  {&TA_const_taString_ref,NULL,"sep"," def_sep"},
  NULL};
static MethodArgs_data TA_String_PArray_SetFromString_MethArgs[]={
  {&TA_taString,NULL,"str",""},
  {&TA_const_taString_ref,NULL,"sep"," def_sep"},
  NULL};
static MethodDef_data TA_String_PArray_MethodDef[]={
  {&TA_int,NULL,"FindContains"," find item that contains string -- start < 0 = start from end","","",
    0,2,1,0,0,NULL,cssElCFun_String_PArray_FindContains_stub,TA_String_PArray_FindContains_MethArgs},
  {&TA_const_taString,NULL,"AsString","","","",
    0,1,0,0,0,NULL,cssElCFun_String_PArray_AsString_stub,TA_String_PArray_AsString_MethArgs},
  {&TA_void,NULL,"SetFromString","","","",
    0,2,1,0,0,NULL,cssElCFun_String_PArray_SetFromString_stub,TA_String_PArray_SetFromString_MethArgs},
  NULL};
static int taPlainArray<int>::* TA_taPlainArray_int__MbrOff;
static MemberDef_data TA_taPlainArray_int__MemberDef[]={
  {NULL,"::int_ptr","el"," Pointer to actual array memory","HIDDEN NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_taPlainArray_int__MbrOff=(int taPlainArray<int>::*)(&taPlainArray<int>::el))),0,NULL,0},
  {&TA_int,NULL,"err"," what is returned when out of range -- MUST INIT IN CONSTRUCTOR","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_taPlainArray_int__MbrOff=(int taPlainArray<int>::*)(&taPlainArray<int>::err))),0,NULL,0},
  NULL};
static MethodArgs_data TA_taPlainArray_int__SafeEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taPlainArray_int__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taPlainArray_int__RevEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taPlainArray_int__Set_MethArgs[]={
  {&TA_int,NULL,"i",""},
  {NULL,"::const_int_ref","item",""},
  NULL};
static MethodArgs_data TA_taPlainArray_int__Add_MethArgs[]={
  {NULL,"::const_int_ref","item",""},
  NULL};
static MethodArgs_data TA_taPlainArray_int__AddUnique_MethArgs[]={
  {NULL,"::const_int_ref","item",""},
  NULL};
static MethodArgs_data TA_taPlainArray_int__Push_MethArgs[]={
  {NULL,"::const_int_ref","item",""},
  NULL};
static MethodArgs_data TA_taPlainArray_int__Insert_MethArgs[]={
  {NULL,"::const_int_ref","item",""},
  {&TA_int,NULL,"idx",""},
  {&TA_int,NULL,"n_els","1"},
  NULL};
static MethodArgs_data TA_taPlainArray_int__FindEl_MethArgs[]={
  {NULL,"::const_int_ref","item",""},
  {&TA_int,NULL,"i","0"},
  NULL};
static MethodArgs_data TA_taPlainArray_int__RemoveEl_MethArgs[]={
  {NULL,"::const_int_ref","item",""},
  NULL};
static MethodDef_data TA_taPlainArray_int__MethodDef[]={
  {NULL,"::int_ref","SafeEl"," the element at the given index","","",
    0,1,-1,0,0,NULL,cssElCFun_taPlainArray_int__SafeEl_stub,TA_taPlainArray_int__SafeEl_MethArgs},
  {NULL,"::const_int_ref","FastEl"," fast element (no range checking)","","",
    0,1,-1,0,0,NULL,cssElCFun_taPlainArray_int__FastEl_stub,TA_taPlainArray_int__FastEl_MethArgs},
  {NULL,"::int_ref","RevEl"," reverse (index) element (ie. get from the back of the list first)","","",
    0,1,-1,0,0,NULL,cssElCFun_taPlainArray_int__RevEl_stub,TA_taPlainArray_int__RevEl_MethArgs},
  {&TA_int,NULL,"Pop"," pop the last item in the array off","","",
    0,0,-1,1,0,NULL,cssElCFun_taPlainArray_int__Pop_stub,NULL},
  {NULL,"::int_ref","Peek"," peek at the last item on the array","","",
    0,0,-1,1,0,NULL,cssElCFun_taPlainArray_int__Peek_stub,NULL},
  {&TA_void,NULL,"Set"," use this for assigning values to items in the array (Set should update if needed)","","",
    0,2,-1,1,0,NULL,cssElCFun_taPlainArray_int__Set_stub,TA_taPlainArray_int__Set_MethArgs},
  {&TA_void,NULL,"Add"," add the item to the array","MENU ","",
    0,1,-1,1,0,NULL,cssElCFun_taPlainArray_int__Add_stub,TA_taPlainArray_int__Add_MethArgs},
  {&TA_bool,NULL,"AddUnique"," add the item to the array if it isn't already on it, returns true if unique","","",
    0,1,-1,1,0,NULL,cssElCFun_taPlainArray_int__AddUnique_stub,TA_taPlainArray_int__AddUnique_MethArgs},
  {&TA_void,NULL,"Push"," push the item on the end of the array (same as add)","","",
    0,1,-1,1,0,NULL,cssElCFun_taPlainArray_int__Push_stub,TA_taPlainArray_int__Push_MethArgs},
  {&TA_void,NULL,"Insert"," Insert (n_els) item(s) at idx (-1 for end) in the array","MENU ","",
    0,3,2,1,0,NULL,cssElCFun_taPlainArray_int__Insert_stub,TA_taPlainArray_int__Insert_MethArgs},
  {&TA_int,NULL,"FindEl"," Find item starting from idx in the array (-1 if not there)","MENU USE_RVAL ","",
    0,2,1,1,0,NULL,cssElCFun_taPlainArray_int__FindEl_stub,TA_taPlainArray_int__FindEl_MethArgs},
  {&TA_bool,NULL,"RemoveEl"," remove given item, returns success","","",
    0,1,-1,1,0,NULL,cssElCFun_taPlainArray_int__RemoveEl_stub,TA_taPlainArray_int__RemoveEl_MethArgs},
  NULL};
static int taPlainArray<NameVar>::* TA_taPlainArray_NameVar__MbrOff;
static MemberDef_data TA_taPlainArray_NameVar__MemberDef[]={
  {NULL,"::NameVar_ptr","el"," Pointer to actual array memory","HIDDEN NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_taPlainArray_NameVar__MbrOff=(int taPlainArray<NameVar>::*)(&taPlainArray<NameVar>::el))),0,NULL,0},
  {&TA_NameVar,NULL,"err"," what is returned when out of range -- MUST INIT IN CONSTRUCTOR","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_taPlainArray_NameVar__MbrOff=(int taPlainArray<NameVar>::*)(&taPlainArray<NameVar>::err))),0,NULL,0},
  NULL};
static MethodArgs_data TA_taPlainArray_NameVar__SafeEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taPlainArray_NameVar__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taPlainArray_NameVar__RevEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taPlainArray_NameVar__Set_MethArgs[]={
  {&TA_int,NULL,"i",""},
  {NULL,"::const_NameVar_ref","item",""},
  NULL};
static MethodArgs_data TA_taPlainArray_NameVar__Add_MethArgs[]={
  {NULL,"::const_NameVar_ref","item",""},
  NULL};
static MethodArgs_data TA_taPlainArray_NameVar__AddUnique_MethArgs[]={
  {NULL,"::const_NameVar_ref","item",""},
  NULL};
static MethodArgs_data TA_taPlainArray_NameVar__Push_MethArgs[]={
  {NULL,"::const_NameVar_ref","item",""},
  NULL};
static MethodArgs_data TA_taPlainArray_NameVar__Insert_MethArgs[]={
  {NULL,"::const_NameVar_ref","item",""},
  {&TA_int,NULL,"idx",""},
  {&TA_int,NULL,"n_els","1"},
  NULL};
static MethodArgs_data TA_taPlainArray_NameVar__FindEl_MethArgs[]={
  {NULL,"::const_NameVar_ref","item",""},
  {&TA_int,NULL,"i","0"},
  NULL};
static MethodArgs_data TA_taPlainArray_NameVar__RemoveEl_MethArgs[]={
  {NULL,"::const_NameVar_ref","item",""},
  NULL};
static MethodDef_data TA_taPlainArray_NameVar__MethodDef[]={
  {NULL,"::NameVar_ref","SafeEl"," the element at the given index","","",
    0,1,-1,0,0,NULL,cssElCFun_taPlainArray_NameVar__SafeEl_stub,TA_taPlainArray_NameVar__SafeEl_MethArgs},
  {NULL,"::const_NameVar_ref","FastEl"," fast element (no range checking)","","",
    0,1,-1,0,0,NULL,cssElCFun_taPlainArray_NameVar__FastEl_stub,TA_taPlainArray_NameVar__FastEl_MethArgs},
  {NULL,"::NameVar_ref","RevEl"," reverse (index) element (ie. get from the back of the list first)","","",
    0,1,-1,0,0,NULL,cssElCFun_taPlainArray_NameVar__RevEl_stub,TA_taPlainArray_NameVar__RevEl_MethArgs},
  {&TA_NameVar,NULL,"Pop"," pop the last item in the array off","","",
    0,0,-1,1,0,NULL,cssElCFun_taPlainArray_NameVar__Pop_stub,NULL},
  {NULL,"::NameVar_ref","Peek"," peek at the last item on the array","","",
    0,0,-1,1,0,NULL,cssElCFun_taPlainArray_NameVar__Peek_stub,NULL},
  {&TA_void,NULL,"Set"," use this for assigning values to items in the array (Set should update if needed)","","",
    0,2,-1,1,0,NULL,cssElCFun_taPlainArray_NameVar__Set_stub,TA_taPlainArray_NameVar__Set_MethArgs},
  {&TA_void,NULL,"Add"," add the item to the array","MENU ","",
    0,1,-1,1,0,NULL,cssElCFun_taPlainArray_NameVar__Add_stub,TA_taPlainArray_NameVar__Add_MethArgs},
  {&TA_bool,NULL,"AddUnique"," add the item to the array if it isn't already on it, returns true if unique","","",
    0,1,-1,1,0,NULL,cssElCFun_taPlainArray_NameVar__AddUnique_stub,TA_taPlainArray_NameVar__AddUnique_MethArgs},
  {&TA_void,NULL,"Push"," push the item on the end of the array (same as add)","","",
    0,1,-1,1,0,NULL,cssElCFun_taPlainArray_NameVar__Push_stub,TA_taPlainArray_NameVar__Push_MethArgs},
  {&TA_void,NULL,"Insert"," Insert (n_els) item(s) at idx (-1 for end) in the array","MENU ","",
    0,3,2,1,0,NULL,cssElCFun_taPlainArray_NameVar__Insert_stub,TA_taPlainArray_NameVar__Insert_MethArgs},
  {&TA_int,NULL,"FindEl"," Find item starting from idx in the array (-1 if not there)","MENU USE_RVAL ","",
    0,2,1,1,0,NULL,cssElCFun_taPlainArray_NameVar__FindEl_stub,TA_taPlainArray_NameVar__FindEl_MethArgs},
  {&TA_bool,NULL,"RemoveEl"," remove given item, returns success","","",
    0,1,-1,1,0,NULL,cssElCFun_taPlainArray_NameVar__RemoveEl_stub,TA_taPlainArray_NameVar__RemoveEl_MethArgs},
  NULL};
static MethodArgs_data TA_NameVar_PArray_FindName_MethArgs[]={
  {&TA_const_taString_ref,NULL,"nm",""},
  {&TA_int,NULL,"start","0"},
  NULL};
static MethodArgs_data TA_NameVar_PArray_FindNameContains_MethArgs[]={
  {&TA_const_taString_ref,NULL,"nm",""},
  {&TA_int,NULL,"start","0"},
  NULL};
static MethodArgs_data TA_NameVar_PArray_FindValue_MethArgs[]={
  {&TA_const_Variant_ref,NULL,"var",""},
  {&TA_int,NULL,"start","0"},
  NULL};
static MethodArgs_data TA_NameVar_PArray_FindValueContains_MethArgs[]={
  {&TA_const_taString_ref,NULL,"vl",""},
  {&TA_int,NULL,"start","0"},
  NULL};
static MethodArgs_data TA_NameVar_PArray_GetVal_MethArgs[]={
  {&TA_const_taString_ref,NULL,"nm",""},
  NULL};
static MethodArgs_data TA_NameVar_PArray_GetAllVals_MethArgs[]={
  {&TA_const_taString_ref,NULL,"nm",""},
  {&TA_String_PArray_ref,NULL,"vals",""},
  NULL};
static MethodArgs_data TA_NameVar_PArray_SetVal_MethArgs[]={
  {&TA_const_taString_ref,NULL,"nm",""},
  {&TA_const_Variant_ref,NULL,"vl",""},
  NULL};
static MethodArgs_data TA_NameVar_PArray_AsString_MethArgs[]={
  {&TA_const_taString_ref,NULL,"sep"," def_sep"},
  NULL};
static MethodDef_data TA_NameVar_PArray_MethodDef[]={
  {&TA_int,NULL,"FindName"," find by name (start < 0 = from end)","","",
    0,2,1,0,0,NULL,cssElCFun_NameVar_PArray_FindName_stub,TA_NameVar_PArray_FindName_MethArgs},
  {&TA_int,NULL,"FindNameContains"," find by name containing nm (start < 0 = from end)","","",
    0,2,1,0,0,NULL,cssElCFun_NameVar_PArray_FindNameContains_stub,TA_NameVar_PArray_FindNameContains_MethArgs},
  {&TA_int,NULL,"FindValue"," find by value (start < 0 = from end) ","","",
    0,2,1,0,0,NULL,cssElCFun_NameVar_PArray_FindValue_stub,TA_NameVar_PArray_FindValue_MethArgs},
  {&TA_int,NULL,"FindValueContains"," find by value.toString() containing vl (start < 0 = from end)","","",
    0,2,1,0,0,NULL,cssElCFun_NameVar_PArray_FindValueContains_stub,TA_NameVar_PArray_FindValueContains_MethArgs},
  {&TA_Variant,NULL,"GetVal"," get value from name; isNull if not found","","",
    0,1,-1,0,0,NULL,cssElCFun_NameVar_PArray_GetVal_stub,TA_NameVar_PArray_GetVal_MethArgs},
  {&TA_bool,NULL,"GetAllVals"," get all values having given name (converts to strings)","","",
    0,2,-1,0,0,NULL,cssElCFun_NameVar_PArray_GetAllVals_stub,TA_NameVar_PArray_GetAllVals_MethArgs},
  {&TA_bool,NULL,"SetVal"," set value by name; if name already on list, it is updated (rval = true); else new item added","","",
    0,2,-1,0,0,NULL,cssElCFun_NameVar_PArray_SetVal_stub,TA_NameVar_PArray_SetVal_MethArgs},
  {&TA_const_taString,NULL,"AsString","","","",
    0,1,0,0,0,NULL,cssElCFun_NameVar_PArray_AsString_stub,TA_NameVar_PArray_AsString_MethArgs},
  NULL};
static int DumpFileCvt::* TA_DumpFileCvt_MbrOff;
static MemberDef_data TA_DumpFileCvt_MemberDef[]={
  {&TA_taString,NULL,"proj_type_base"," base name of project (e.g., 'Leabra' for 'LeabraProject')","","",
    *((ta_memb_ptr*)&(TA_DumpFileCvt_MbrOff=(int DumpFileCvt::*)(&DumpFileCvt::proj_type_base))),0,NULL,0},
  {&TA_taString,NULL,"key_srch_str"," search string to identify this project type","","",
    *((ta_memb_ptr*)&(TA_DumpFileCvt_MbrOff=(int DumpFileCvt::*)(&DumpFileCvt::key_srch_str))),0,NULL,0},
  {&TA_NameVar_PArray,NULL,"repl_strs"," search/replace strings (name -> value) ","","",
    *((ta_memb_ptr*)&(TA_DumpFileCvt_MbrOff=(int DumpFileCvt::*)(&DumpFileCvt::repl_strs))),0,NULL,0},
  NULL};
static MethodArgs_data TA_taPtrList_DumpFileCvt__SafeEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taPtrList_DumpFileCvt__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taPtrList_DumpFileCvt__Edit_El_MethArgs[]={
  {NULL,"::DumpFileCvt_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_DumpFileCvt__FindName_MethArgs[]={
  {&TA_const_taString_ref,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","no_index"},
  NULL};
static MethodArgs_data TA_taPtrList_DumpFileCvt__AddUniqNameOld_MethArgs[]={
  {NULL,"::DumpFileCvt_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_DumpFileCvt__LinkUniqNameOld_MethArgs[]={
  {NULL,"::DumpFileCvt_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_DumpFileCvt__FindEl_MethArgs[]={
  {NULL,"::const_DumpFileCvt_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_DumpFileCvt__AddOnly_MethArgs[]={
  {NULL,"::DumpFileCvt_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_DumpFileCvt__Add_MethArgs[]={
  {NULL,"::DumpFileCvt_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_DumpFileCvt__AddUnique_MethArgs[]={
  {NULL,"::DumpFileCvt_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_DumpFileCvt__AddUniqNameNew_MethArgs[]={
  {NULL,"::DumpFileCvt_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_DumpFileCvt__Insert_MethArgs[]={
  {NULL,"::DumpFileCvt_ptr","item",""},
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taPtrList_DumpFileCvt__ReplaceEl_MethArgs[]={
  {NULL,"::DumpFileCvt_ptr","old_it",""},
  {NULL,"::DumpFileCvt_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_DumpFileCvt__ReplaceName_MethArgs[]={
  {&TA_const_taString_ref,NULL,"old_nm",""},
  {NULL,"::DumpFileCvt_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_DumpFileCvt__ReplaceIdx_MethArgs[]={
  {&TA_int,NULL,"old_idx",""},
  {NULL,"::DumpFileCvt_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_DumpFileCvt__RemoveEl_MethArgs[]={
  {NULL,"::DumpFileCvt_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_DumpFileCvt__DuplicateEl_MethArgs[]={
  {NULL,"::DumpFileCvt_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_DumpFileCvt__Link_MethArgs[]={
  {NULL,"::DumpFileCvt_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_DumpFileCvt__LinkUnique_MethArgs[]={
  {NULL,"::DumpFileCvt_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_DumpFileCvt__LinkUniqNameNew_MethArgs[]={
  {NULL,"::DumpFileCvt_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_DumpFileCvt__InsertLink_MethArgs[]={
  {NULL,"::DumpFileCvt_ptr","item",""},
  {&TA_int,NULL,"idx"," -1"},
  NULL};
static MethodArgs_data TA_taPtrList_DumpFileCvt__ReplaceLinkEl_MethArgs[]={
  {NULL,"::DumpFileCvt_ptr","old_it",""},
  {NULL,"::DumpFileCvt_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_DumpFileCvt__ReplaceLinkName_MethArgs[]={
  {&TA_const_taString_ref,NULL,"old_nm",""},
  {NULL,"::DumpFileCvt_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_DumpFileCvt__ReplaceLinkIdx_MethArgs[]={
  {&TA_int,NULL,"old_idx",""},
  {NULL,"::DumpFileCvt_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_DumpFileCvt__Push_MethArgs[]={
  {NULL,"::DumpFileCvt_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_DumpFileCvt__MoveEl_MethArgs[]={
  {NULL,"::DumpFileCvt_ptr","from",""},
  {NULL,"::DumpFileCvt_ptr","to",""},
  NULL};
static MethodArgs_data TA_taPtrList_DumpFileCvt__Transfer_MethArgs[]={
  {NULL,"::DumpFileCvt_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_DumpFileCvt__MoveBefore_MethArgs[]={
  {NULL,"::DumpFileCvt_ptr","trg",""},
  {NULL,"::DumpFileCvt_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_DumpFileCvt__MoveAfter_MethArgs[]={
  {NULL,"::DumpFileCvt_ptr","trg",""},
  {NULL,"::DumpFileCvt_ptr","item",""},
  NULL};
static MethodDef_data TA_taPtrList_DumpFileCvt__MethodDef[]={
  {NULL,"::DumpFileCvt_ptr","SafeEl"," element at index","","",
    0,1,-1,0,0,NULL,cssElCFun_taPtrList_DumpFileCvt__SafeEl_stub,TA_taPtrList_DumpFileCvt__SafeEl_MethArgs},
  {NULL,"::DumpFileCvt_ptr","FastEl"," fast element (no range checking)","","",
    0,1,-1,0,0,NULL,cssElCFun_taPtrList_DumpFileCvt__FastEl_stub,TA_taPtrList_DumpFileCvt__FastEl_MethArgs},
  {NULL,"::DumpFileCvt_ptr","Edit_El"," Edit given list item","MENU MENU_ON_Edit USE_RVAL ARG_ON_OBJ ","",
    0,1,-1,0,0,NULL,cssElCFun_taPtrList_DumpFileCvt__Edit_El_stub,TA_taPtrList_DumpFileCvt__Edit_El_MethArgs},
  {NULL,"::DumpFileCvt_ptr","FindName"," find given named element (NULL = not here), sets idx","","",
    0,2,1,1,0,NULL,cssElCFun_taPtrList_DumpFileCvt__FindName_stub,TA_taPtrList_DumpFileCvt__FindName_MethArgs},
  {NULL,"::DumpFileCvt_ptr","Pop"," pop the last element off the stack","","",
    0,0,-1,1,0,NULL,cssElCFun_taPtrList_DumpFileCvt__Pop_stub,NULL},
  {NULL,"::DumpFileCvt_ptr","Peek"," peek at the last element on the stack","","",
    0,0,-1,1,0,NULL,cssElCFun_taPtrList_DumpFileCvt__Peek_stub,NULL},
  {NULL,"::DumpFileCvt_ptr","AddUniqNameOld"," add so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,1,0,NULL,cssElCFun_taPtrList_DumpFileCvt__AddUniqNameOld_stub,TA_taPtrList_DumpFileCvt__AddUniqNameOld_MethArgs},
  {NULL,"::DumpFileCvt_ptr","LinkUniqNameOld"," link so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,1,0,NULL,cssElCFun_taPtrList_DumpFileCvt__LinkUniqNameOld_stub,TA_taPtrList_DumpFileCvt__LinkUniqNameOld_MethArgs},
  {&TA_int,NULL,"FindEl"," find element in list (-1 if not there)","","",
    0,1,-1,1,0,NULL,cssElCFun_taPtrList_DumpFileCvt__FindEl_stub,TA_taPtrList_DumpFileCvt__FindEl_MethArgs},
  {&TA_void,NULL,"AddOnly"," append a new pointer to end of list, does not own it or do anything else","","",
    0,1,-1,1,0,NULL,cssElCFun_taPtrList_DumpFileCvt__AddOnly_stub,TA_taPtrList_DumpFileCvt__AddOnly_MethArgs},
  {&TA_void,NULL,"Add"," add element to the list and 'own' item","","",
    0,1,-1,1,0,NULL,cssElCFun_taPtrList_DumpFileCvt__Add_stub,TA_taPtrList_DumpFileCvt__Add_MethArgs},
  {&TA_bool,NULL,"AddUnique"," add so that object is unique, true if unique","","",
    0,1,-1,1,0,NULL,cssElCFun_taPtrList_DumpFileCvt__AddUnique_stub,TA_taPtrList_DumpFileCvt__AddUnique_MethArgs},
  {&TA_bool,NULL,"AddUniqNameNew"," add so that name is unique, true if unique, new replaces existing","","",
    0,1,-1,1,0,NULL,cssElCFun_taPtrList_DumpFileCvt__AddUniqNameNew_stub,TA_taPtrList_DumpFileCvt__AddUniqNameNew_MethArgs},
  {&TA_bool,NULL,"Insert"," Add or insert element at idx (-1 for end)","","",
    0,2,-1,1,0,NULL,cssElCFun_taPtrList_DumpFileCvt__Insert_stub,TA_taPtrList_DumpFileCvt__Insert_MethArgs},
  {&TA_bool,NULL,"ReplaceEl"," Replace old element with new element","","",
    0,2,-1,1,0,NULL,cssElCFun_taPtrList_DumpFileCvt__ReplaceEl_stub,TA_taPtrList_DumpFileCvt__ReplaceEl_MethArgs},
  {&TA_bool,NULL,"ReplaceName","","","",
    0,2,-1,1,0,NULL,cssElCFun_taPtrList_DumpFileCvt__ReplaceName_stub,TA_taPtrList_DumpFileCvt__ReplaceName_MethArgs},
  {&TA_bool,NULL,"ReplaceIdx"," replace element at index with the new one","","",
    0,2,-1,1,0,NULL,cssElCFun_taPtrList_DumpFileCvt__ReplaceIdx_stub,TA_taPtrList_DumpFileCvt__ReplaceIdx_MethArgs},
  {&TA_bool,NULL,"RemoveEl"," Remove given item from list","MENU ARG_ON_OBJ ","",
    0,1,-1,1,0,NULL,cssElCFun_taPtrList_DumpFileCvt__RemoveEl_stub,TA_taPtrList_DumpFileCvt__RemoveEl_MethArgs},
  {&TA_bool,NULL,"DuplicateEl"," Duplicate given list item and Add to list","MENU ARG_ON_OBJ ","",
    0,1,-1,1,0,NULL,cssElCFun_taPtrList_DumpFileCvt__DuplicateEl_stub,TA_taPtrList_DumpFileCvt__DuplicateEl_MethArgs},
  {&TA_void,NULL,"Link"," Link an item to list without owning it","","",
    0,1,-1,1,0,NULL,cssElCFun_taPtrList_DumpFileCvt__Link_stub,TA_taPtrList_DumpFileCvt__Link_MethArgs},
  {&TA_bool,NULL,"LinkUnique"," link so that object is unique, true if unique","","",
    0,1,-1,1,0,NULL,cssElCFun_taPtrList_DumpFileCvt__LinkUnique_stub,TA_taPtrList_DumpFileCvt__LinkUnique_MethArgs},
  {&TA_bool,NULL,"LinkUniqNameNew"," link so that name is unique, true if unique, new replaces existing","","",
    0,1,-1,1,0,NULL,cssElCFun_taPtrList_DumpFileCvt__LinkUniqNameNew_stub,TA_taPtrList_DumpFileCvt__LinkUniqNameNew_MethArgs},
  {&TA_bool,NULL,"InsertLink"," Insert a link at index (-1 for end)","MENU ","",
    0,2,1,1,0,NULL,cssElCFun_taPtrList_DumpFileCvt__InsertLink_stub,TA_taPtrList_DumpFileCvt__InsertLink_MethArgs},
  {&TA_bool,NULL,"ReplaceLinkEl"," replace given element (if on list) with the new one","","",
    0,2,-1,1,0,NULL,cssElCFun_taPtrList_DumpFileCvt__ReplaceLinkEl_stub,TA_taPtrList_DumpFileCvt__ReplaceLinkEl_MethArgs},
  {&TA_bool,NULL,"ReplaceLinkName"," replace given named element (if on list) with the new one","","",
    0,2,-1,1,0,NULL,cssElCFun_taPtrList_DumpFileCvt__ReplaceLinkName_stub,TA_taPtrList_DumpFileCvt__ReplaceLinkName_MethArgs},
  {&TA_bool,NULL,"ReplaceLinkIdx"," replace element with a link to the new one","","",
    0,2,-1,1,0,NULL,cssElCFun_taPtrList_DumpFileCvt__ReplaceLinkIdx_stub,TA_taPtrList_DumpFileCvt__ReplaceLinkIdx_MethArgs},
  {&TA_void,NULL,"Push"," push item on stack (for temporary use, not 'owned')","","",
    0,1,-1,1,0,NULL,cssElCFun_taPtrList_DumpFileCvt__Push_stub,TA_taPtrList_DumpFileCvt__Push_MethArgs},
  {&TA_bool,NULL,"MoveEl"," Move item (from) to position of (to)","MENU ARG_ON_OBJ ","",
    0,2,-1,1,0,NULL,cssElCFun_taPtrList_DumpFileCvt__MoveEl_stub,TA_taPtrList_DumpFileCvt__MoveEl_MethArgs},
  {&TA_bool,NULL,"Transfer"," Transfer item to this list","MENU MENU_ON_Edit NO_SCOPE ","",
    0,1,-1,1,0,NULL,cssElCFun_taPtrList_DumpFileCvt__Transfer_stub,TA_taPtrList_DumpFileCvt__Transfer_MethArgs},
  {&TA_bool,NULL,"MoveBefore"," move item so that it appears just before the target item trg in the list","","",
    0,2,-1,1,0,NULL,cssElCFun_taPtrList_DumpFileCvt__MoveBefore_stub,TA_taPtrList_DumpFileCvt__MoveBefore_MethArgs},
  {&TA_bool,NULL,"MoveAfter"," move item so that it appears just after the target item trg in the list","","",
    0,2,-1,1,0,NULL,cssElCFun_taPtrList_DumpFileCvt__MoveAfter_stub,TA_taPtrList_DumpFileCvt__MoveAfter_MethArgs},
  NULL};
static int UserDataItemBase::* TA_UserDataItemBase_MbrOff;
static MemberDef_data TA_UserDataItemBase_MemberDef[]={
  {&TA_taBase_ptr,NULL,"owner"," ","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_UserDataItemBase_MbrOff=(int UserDataItemBase::*)(&UserDataItemBase::owner))),0,NULL,0},
  {&TA_taString,NULL,"name","","","",
    *((ta_memb_ptr*)&(TA_UserDataItemBase_MbrOff=(int UserDataItemBase::*)(&UserDataItemBase::name))),0,NULL,0},
  NULL};
static MethodArgs_data TA_UserDataItemBase_setValueAsVariant_MethArgs[]={
  {&TA_const_Variant_ref,NULL,"value",""},
  NULL};
static MethodDef_data TA_UserDataItemBase_MethodDef[]={
  {&TA_TAPtr,NULL,"GetOwner"," ","CAT_ObjectMgmt ","",
    2,0,-1,0,0,NULL,cssElCFun_UserDataItemBase_GetOwner_stub,NULL},
  {&TA_bool,NULL,"isSimple"," only true for UserDataItem class","","",
    0,0,-1,1,0,NULL,cssElCFun_UserDataItemBase_isSimple_stub,NULL},
  {&TA_const_Variant,NULL,"valueAsVariant","","","",
    0,0,-1,1,0,NULL,cssElCFun_UserDataItemBase_valueAsVariant_stub,NULL},
  {&TA_bool,NULL,"setValueAsVariant","","","",
    0,1,-1,1,0,NULL,cssElCFun_UserDataItemBase_setValueAsVariant_stub,TA_UserDataItemBase_setValueAsVariant_MethArgs},
  NULL};
static EnumDef_data TA_CancelOp_EnumDef[]={
  {"CO_PROCEED"," tells caller to proceed with operation (typical default)","",0},
  {"CO_CANCEL"," client can set this to tell caller to cancel the operation","",1},
  {"CO_NOT_CANCELLABLE"," preset, to tell client that operation will go ahead unconditionally","",2},
  NULL};
static MethodArgs_data TA_taiMiscCore_New_MethArgs[]={
  {&TA_QObject_ptr,NULL,"parent"," __null"},
  NULL};
static MethodArgs_data TA_taiMiscCore_Quit_MethArgs[]={
  {&TA_CancelOp,NULL,"cancel_op"," CO_NOT_CANCELLABLE"},
  NULL};
static MethodArgs_data TA_taiMiscCore_OnQuitting_MethArgs[]={
  {&TA_CancelOp_ref,NULL,"cancel_op",""},
  NULL};
static MethodArgs_data TA_taiMiscCore_Busy__MethArgs[]={
  {&TA_bool,NULL,"busy",""},
  NULL};
static MethodArgs_data TA_taiMiscCore_CheckConfigResult__MethArgs[]={
  {&TA_bool,NULL,"ok",""},
  NULL};
static MethodDef_data TA_taiMiscCore_MethodDef[]={
  {&TA_taiMiscCore_ptr,NULL,"New"," either call this or call taiMisc::New ","","",
    0,1,0,0,1,(ta_void_fun)(taiMiscCore::New),cssElCFun_taiMiscCore_New_stub,TA_taiMiscCore_New_MethArgs},
  {&TA_void,NULL,"WaitProc"," the core idle loop process","","",
    0,0,-1,0,1,(ta_void_fun)(taiMiscCore::WaitProc),cssElCFun_taiMiscCore_WaitProc_stub,NULL},
  {&TA_int,NULL,"RunPending"," run any pending qt events that might need processed","","",
    0,0,-1,0,1,(ta_void_fun)(taiMiscCore::RunPending),cssElCFun_taiMiscCore_RunPending_stub,NULL},
  {&TA_void,NULL,"Quit"," call to quit, invokes Quit_impl on instance first","","",
    0,1,0,0,1,(ta_void_fun)(taiMiscCore::Quit),cssElCFun_taiMiscCore_Quit_stub,TA_taiMiscCore_Quit_MethArgs},
  {&TA_void,NULL,"OnQuitting"," call this when a quit situation is detected -- does all the save logic","","",
    0,1,-1,0,1,(ta_void_fun)(taiMiscCore::OnQuitting),cssElCFun_taiMiscCore_OnQuitting_stub,TA_taiMiscCore_OnQuitting_MethArgs},
  {&TA_const_taString,NULL,"classname"," 3.x compatability, basically the app name","","",
    0,0,-1,0,0,NULL,cssElCFun_taiMiscCore_classname_stub,NULL},
  {&TA_void,NULL,"Busy_"," impl for gui in taiMisc","","",
    0,1,-1,1,0,NULL,cssElCFun_taiMiscCore_Busy__stub,TA_taiMiscCore_Busy__MethArgs},
  {&TA_void,NULL,"CheckConfigResult_"," this is the nogui version; taiMisc does the gui version","","",
    0,1,-1,1,0,NULL,cssElCFun_taiMiscCore_CheckConfigResult__stub,TA_taiMiscCore_CheckConfigResult__MethArgs},
  NULL};
static int taVersion::* TA_taVersion_MbrOff;
static MemberDef_data TA_taVersion_MemberDef[]={
  {&TA_ushort,NULL,"major","","","",
    *((ta_memb_ptr*)&(TA_taVersion_MbrOff=(int taVersion::*)(&taVersion::major))),0,NULL,0},
  {&TA_ushort,NULL,"minor","","","",
    *((ta_memb_ptr*)&(TA_taVersion_MbrOff=(int taVersion::*)(&taVersion::minor))),0,NULL,0},
  {&TA_ushort,NULL,"step","","","",
    *((ta_memb_ptr*)&(TA_taVersion_MbrOff=(int taVersion::*)(&taVersion::step))),0,NULL,0},
  {&TA_ushort,NULL,"build","","","",
    *((ta_memb_ptr*)&(TA_taVersion_MbrOff=(int taVersion::*)(&taVersion::build))),0,NULL,0},
  NULL};
static MethodArgs_data TA_taVersion_set_MethArgs[]={
  {&TA_ushort,NULL,"mj",""},
  {&TA_ushort,NULL,"mn",""},
  {&TA_ushort,NULL,"st"," 0"},
  {&TA_ushort,NULL,"bld"," 0"},
  NULL};
static MethodDef_data TA_taVersion_MethodDef[]={
  {&TA_void,NULL,"set","","","",
    0,4,2,0,0,NULL,cssElCFun_taVersion_set_stub,TA_taVersion_set_MethArgs},
  {&TA_const_taString,NULL,"toString","","","",
    0,0,-1,0,0,NULL,cssElCFun_taVersion_toString_stub,NULL},
  {&TA_void,NULL,"Clear"," ","","",
    0,0,-1,0,0,NULL,cssElCFun_taVersion_Clear_stub,NULL},
  NULL};
static EnumDef_data TA_taMisc_ShowMembs[]={
  {"NO_HIDDEN"," don't show items marked READ_ONLY w/o SHOW or HIDDEN","",1},
  {"NO_DETAIL"," don't show items marked DETAIL (usually not relevant)","",4},
  {"NO_NORMAL"," don't show items normally shown (helps indicate, ex. EXPERT items)","",8},
  {"NO_EXPERT"," don't show items marked EXPERT (often only for advanced sims)","",16},
  {"ALL_MEMBS"," ","NO_BIT ",0},
  {"NO_HID_DET"," ","NO_BIT ",3},
  {"NORM_MEMBS"," ","NO_BIT ",21},
  {"USE_SHOW_GUI_DEF"," use default from taMisc::show_gui","NO_BIT ",64},
  {"USE_SHOW_DEF"," use default from taMisc::show","NO_BIT ",128},
  NULL};
static EnumDef_data TA_taMisc_TypeInfo[]={
  {"MEMB_OFFSETS"," display all including member offsets","",0},
  {"ALL_INFO"," display all type information","",1},
  {"NO_OPTIONS"," don't display options","",2},
  {"NO_LISTS"," don't display lists","",3},
  {"NO_OPTIONS_LISTS"," don't display options or lists","",4},
  NULL};
static EnumDef_data TA_taMisc_KeepTokens[]={
  {"Tokens"," keep tokens as specified by the type","",0},
  {"NoTokens"," don't keep any tokens","",1},
  {"ForceTokens"," force to keep all tokens","",2},
  NULL};
static EnumDef_data TA_taMisc_SaveFormat[]={
  {"PLAIN"," dump files are not formatted for easy reading","",0},
  {"PRETTY"," dump files should be more readable by humans","",1},
  NULL};
static EnumDef_data TA_taMisc_LoadVerbosity[]={
  {"QUIET"," don't say anything except errors","",0},
  {"MESSAGES"," display informative messages during load","",1},
  {"TRACE"," and show a trace of objects loaded","",2},
  {"SOURCE"," and show the source of the load as its loaded","",3},
  NULL};
static EnumDef_data TA_taMisc_AutoRevert[]={
  {"AUTO_APPLY"," automatically apply changes before auto-reverting","",0},
  {"AUTO_REVERT"," automatically revert, losing changes","",1},
  {"CONFIRM_REVERT"," put up a confirmatory message before reverting","",2},
  NULL};
static EnumDef_data TA_taMisc_TypeInfoKind[]={
  {"TIK_ENUM","","",0},
  {"TIK_MEMBER","","",1},
  {"TIK_METHOD","","",2},
  {"TIK_TYPE","","",3},
  {"TIK_ENUMSPACE","","",4},
  {"TIK_TOKENSPACE","","",5},
  {"TIK_MEMBERSPACE","","",6},
  {"TIK_METHODSPACE","","",7},
  {"TIK_TYPESPACE","","",8},
  {"TIK_UNKNOWN","","",9},
  NULL};
static EnumDef_data TA_taMisc_QuitFlag[]={
  {"QF_RUNNING"," ","",0},
  {"QF_USER_QUIT"," we can still cancel while in this state of quitting","",1},
  {"QF_FORCE_QUIT"," too late to turn back now...","",2},
  NULL};
static EnumDef_data TA_taMisc_ReadTagStatus[]={
  {"TAG_GOT"," got a starting tag <xxx...>","",0},
  {"TAG_END"," got an ending tag </xx> ","",1},
  {"TAG_NONE"," no start of < tag there","",2},
  {"TAG_EOF"," got an EOF","",3},
  NULL};
static MemberDef_data TA_taMisc_MemberDef[]={
  {&TA_taString,NULL,"app_name"," the root name of the app, ex. 'pdp++'","READ_ONLY NO_SAVE SHOW ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::app_name),0},
  {&TA_taString,NULL,"version"," version number of ta/css","READ_ONLY NO_SAVE SHOW ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::version),0},
  {&TA_taString,NULL,"font_name"," default font name to use","SAVE CAT_GUI ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::font_name),0},
  {&TA_int,NULL,"font_size"," default font size to use","SAVE CAT_GUI ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::font_size),0},
  {&TA_taString,NULL,"console_font_name"," font name for the css console","SAVE CAT_GUI ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::console_font_name),0},
  {&TA_int,NULL,"console_font_size"," font size for the css console","SAVE CAT_GUI ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::console_font_size),0},
  {&TA_int,NULL,"display_width"," width of console display (in chars) -- set automatically by gui console","SAVE HIDDEN CAT_GUI ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::display_width),0},
  {&TA_int,NULL,"sep_tabs"," number of tabs to separate items by","SAVE CAT_GUI ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::sep_tabs),0},
  {&TA_int,NULL,"max_menu"," maximum number of items in a menu","SAVE CAT_GUI ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::max_menu),0},
  {&TA_int,NULL,"search_depth"," depth recursive find will search for a path object","SAVE CAT_GUI ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::search_depth),0},
  {&TA_int,NULL,"color_scale_size"," number of colors to put in a color scale","SAVE CAT_GUI ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::color_scale_size),0},
  {&TA_int,NULL,"mono_scale_size"," number of monochrome bit-patterns to put in a color scale","SAVE CAT_GUI ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::mono_scale_size),0},
  {&TA_int,NULL,"jpeg_quality"," jpeg quality for dumping jpeg files (1-100; 95 default)","SAVE CAT_GUI ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::jpeg_quality),0},
  {&TA_ViewColor_List_ptr,NULL,"view_colors"," colors to use in the view displays -- looked up by name emitted by GetDecorateKey on objects","NO_SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::view_colors),0},
  {NULL,"::ShowMembs","show"," what to show in general (eg. css)","SAVE CAT_GUI ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::show),0},
  {NULL,"::ShowMembs","show_gui"," what to show in the gui","SAVE CAT_GUI ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::show_gui),0},
  {NULL,"::TypeInfo","type_info"," what to show when displaying type information","SAVE CAT_GUI ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::type_info),0},
  {NULL,"::KeepTokens","keep_tokens"," default for keeping tokens","SAVE CAT_GUI ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::keep_tokens),0},
  {NULL,"::SaveFormat","save_format"," format to use when saving things (dump files)","SAVE CAT_GUI ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::save_format),0},
  {&TA_bool,NULL,"auto_edit"," automatic edit dialog after creation?","SAVE CAT_GUI ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::auto_edit),0},
  {NULL,"::AutoRevert","auto_revert"," when dialogs are automatically updated (reverted), what to do about changes?","SAVE CAT_GUI ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::auto_revert),0},
  {&TA_bool,NULL,"beep_on_error"," beep when an error message is printed on the console","SAVE DEF_false CAT_GUI ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::beep_on_error),0},
  {&TA_short,NULL,"num_recent_files"," number of recent files to save","SAVE DEF_6 POS_ONLY ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::num_recent_files),0},
  {&TA_int,NULL,"strm_ver"," during dump or load, version (app v4.x=v2 stream)","READ_ONLY NO_SAVE  ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::strm_ver),0},
  {&TA_bool,NULL,"save_compress"," compress by default for files that support it (ex .proj, .net)\nNOTE: starting with v4.0, compression is no longer recommended except for large weight files or large nets with saved units","SAVE DEF_false CAT_File ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::save_compress),0},
  {&TA_TypeDef_ptr,NULL,"default_proj_type"," default type of project to create","SAVE CAT_File TYPE_taProject ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::default_proj_type),0},
  {NULL,"::LoadVerbosity","verbose_load"," report the names of things during loading","SAVE CAT_File ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::verbose_load),0},
  {NULL,"::LoadVerbosity","gui_verbose_load"," what to report in the load dialog","SAVE CAT_File ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::gui_verbose_load),0},
  {&TA_taString,NULL,"inst_prefix"," prefix for software installation (e.g., /usr/local)","SAVE CAT_File ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::inst_prefix),0},
  {&TA_taString,NULL,"pkg_dir"," directory name for current software package (e.g., ta_css or pdp++)","SAVE CAT_File ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::pkg_dir),0},
  {&TA_taString,NULL,"pkg_home"," path to location of installed system files for current software package (e.g, /usr/local/ta_css) (should be inst_prefix + pkg_dir)","SAVE CAT_File ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::pkg_home),0},
  {&TA_taString,NULL,"home_dir"," location of user's home directory","CAT_File ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::home_dir),0},
  {&TA_taString,NULL,"web_home"," url for location of web repository of package information","SAVE CAT_File ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::web_home),0},
  {&TA_taString,NULL,"prefs_dir"," location of preference files (e.g., ~/.appname)","READ_ONLY SHOW CAT_File ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::prefs_dir),0},
  {&TA_String_PArray,NULL,"css_include_paths"," paths to be used for finding css files (e.g., in or load statements -- searched in order)","NO_SAVE HIDDEN CAT_File include ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::css_include_paths),0},
  {&TA_String_PArray,NULL,"load_paths"," paths to be used for loading object files for the ta dump file system","NO_SAVE HIDDEN CAT_File ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::load_paths),0},
  {&TA_NameVar_PArray,NULL,"prog_lib_paths"," paths/url's for specific categories of program library files (e.g., System, User, Web)","NO_SAVE HIDDEN CAT_File ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::prog_lib_paths),0},
  {&TA_NameVar_PArray,NULL,"named_paths"," paths/url's for misc purposes -- search by name, value = path","NO_SAVE HIDDEN CAT_File ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::named_paths),0},
  {&TA_DumpFileCvtList,NULL,"file_converters"," conversion parameters (from v.3 to v.4)","CAT_File ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::file_converters),0},
  {&TA_taString,NULL,"compress_cmd"," command to use for compressing files","SAVE CAT_File ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::compress_cmd),0},
  {&TA_taString,NULL,"uncompress_cmd"," for uncompressing files","SAVE CAT_File ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::uncompress_cmd),0},
  {&TA_taString,NULL,"compress_sfx"," suffix to use for compressing files","SAVE CAT_File ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::compress_sfx),0},
  {&TA_taString,NULL,"help_file_tmplt"," template for converting type name into a help file (%t = type name)","SAVE CAT_File ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::help_file_tmplt),0},
  {&TA_taString,NULL,"help_cmd"," how to run html browser to get help, %s is entire path to help file","SAVE CAT_File ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::help_cmd),0},
  {&TA_taString,NULL,"edit_cmd"," how to run editor","SAVE CAT_File ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::edit_cmd),0},
  {&TA_String_PArray,NULL,"args_raw"," raw list of arguments passed to program at startup (in order, no filtering or modification)","READ_ONLY NO_SAVE HIDDEN CAT_Args ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::args_raw),0},
  {&TA_NameVar_PArray,NULL,"arg_names"," conversions between arg flags (as a String in name field, e.g., -f or --file) and a canonical functional name (in value field, e.g., CssScript)","READ_ONLY NO_SAVE HIDDEN CAT_Args ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::arg_names),0},
  {&TA_NameVar_PArray,NULL,"arg_name_descs"," descriptions of arg names for help -- name is canonical functional name (e.g., CssScript) and value is string describing what this arg does","READ_ONLY NO_SAVE HIDDEN CAT_Args ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::arg_name_descs),0},
  {&TA_NameVar_PArray,NULL,"args"," startup arguments processed by arg_names into name/value pairs -- this is the list that should be used!","READ_ONLY NO_SAVE HIDDEN CAT_Args ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::args),0},
  {&TA_String_PArray,NULL,"args_tmp"," temporary list of args; can be passed to GetAllArgsNamed in scripts..","NO_SAVE HIDDEN CAT_Args ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::args_tmp),0},
  {&TA_int,NULL,"dmem_proc"," distributed memory process number (rank in MPI, always 0 for no dmem)","READ_ONLY NO_SAVE SHOW CAT_DMem ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::dmem_proc),0},
  {&TA_int,NULL,"dmem_nprocs"," distributed memory number of processes (comm_size in MPI, 1 for no dmem)","READ_ONLY NO_SAVE SHOW CAT_DMem ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::dmem_nprocs),0},
  {&TA_int,NULL,"cpus"," number of cpus to use (<= physical cpus)","READ_ONLY NO_SAVE SHOW CAT_DMem ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::cpus),0},
  {&TA_bool,NULL,"dmem_debug"," turn on debug messages for distributed memory processing","SAVE CAT_DMem ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::dmem_debug),0},
  {&TA_TypeSpace,NULL,"types"," list of all the active types","READ_ONLY NO_SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::types),0},
  {&TA_TypeDef_ptr,NULL,"default_scope"," type of object to use to determine if two objects are in the same scope","READ_ONLY NO_SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::default_scope),0},
  {&TA_bool,NULL,"in_init"," true if in ta initialization function","READ_ONLY NO_SAVE NO_SHOW ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::in_init),0},
  {&TA_signed_char,NULL,"quitting"," true, via one of QuitFlag values, once we are quitting","READ_ONLY NO_SAVE NO_SHOW ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::quitting),0},
  {&TA_bool,NULL,"not_constr"," true if ta types are not yet constructed (or are destructed)","READ_ONLY NO_SAVE NO_SHOW ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::not_constr),0},
  {&TA_bool,NULL,"use_gui"," whether the user has specified to use the gui or not (default = true)","READ_ONLY NO_SAVE NO_SHOW ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::use_gui),0},
  {&TA_bool,NULL,"gui_active"," if gui has been started up or not","READ_ONLY NO_SAVE NO_SHOW ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::gui_active),0},
  {&TA_unsigned_char,NULL,"is_loading"," true if currently loading an object","READ_ONLY NO_SAVE NO_SHOW ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::is_loading),0},
  {&TA_unsigned_char,NULL,"is_saving"," true if currently saving an object","READ_ONLY NO_SAVE NO_SHOW ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::is_saving),0},
  {&TA_unsigned_char,NULL,"is_duplicating"," true if currently duplicating an object","READ_ONLY NO_SAVE NO_SHOW ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::is_duplicating),0},
  {&TA_unsigned_char,NULL,"is_checking"," true if currently doing batch CheckConfig on objects","READ_ONLY NO_SAVE NO_SHOW ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::is_checking),0},
  {&TA_unsigned_char,NULL,"in_plugin_init"," true if currently loading typeinfo for a plugin","READ_ONLY NO_SAVE NO_SHOW ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::in_plugin_init),0},
  {&TA_TypeDef_ptr,NULL,"plugin_loading"," the TypeDef of the plugin currently loading -- we stamp this into all formal classes","READ_ONLY NO_SAVE NO_SHOW ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::plugin_loading),0},
  {&TA_taString,NULL,"last_check_msg"," last error, or last batch of errors (if checking) by CheckConfig","READ_ONLY NO_SAVE SHOW EDIT_DIALOG ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::last_check_msg),0},
  {&TA_taString,NULL,"LexBuf"," a buffer, contains last thing read by read_ funs","HIDDEN ","",
    (ta_memb_ptr)NULL,1,(void*)(&taMisc::LexBuf),0},
  NULL};
static MethodArgs_data TA_taMisc_SuperCat_MethArgs[]={
  {&TA_const_char_ptr,NULL,"a",""},
  {&TA_const_char_ptr,NULL,"b",""},
  {&TA_const_char_ptr,NULL,"c",""},
  {&TA_const_char_ptr,NULL,"d",""},
  {&TA_const_char_ptr,NULL,"e",""},
  {&TA_const_char_ptr,NULL,"f",""},
  {&TA_const_char_ptr,NULL,"g",""},
  {&TA_const_char_ptr,NULL,"h",""},
  {&TA_const_char_ptr,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taMisc_Error_MethArgs[]={
  {&TA_const_char_ptr,NULL,"a",""},
  {&TA_const_char_ptr,NULL,"b","0"},
  {&TA_const_char_ptr,NULL,"c","0"},
  {&TA_const_char_ptr,NULL,"d","0"},
  {&TA_const_char_ptr,NULL,"e","0"},
  {&TA_const_char_ptr,NULL,"f","0"},
  {&TA_const_char_ptr,NULL,"g","0"},
  {&TA_const_char_ptr,NULL,"h","0"},
  {&TA_const_char_ptr,NULL,"i","0"},
  NULL};
static MethodArgs_data TA_taMisc_CheckError_MethArgs[]={
  {&TA_const_char_ptr,NULL,"a",""},
  {&TA_const_char_ptr,NULL,"b","0"},
  {&TA_const_char_ptr,NULL,"c","0"},
  {&TA_const_char_ptr,NULL,"d","0"},
  {&TA_const_char_ptr,NULL,"e","0"},
  {&TA_const_char_ptr,NULL,"f","0"},
  {&TA_const_char_ptr,NULL,"g","0"},
  {&TA_const_char_ptr,NULL,"h","0"},
  {&TA_const_char_ptr,NULL,"i","0"},
  NULL};
static MethodArgs_data TA_taMisc_Warning_MethArgs[]={
  {&TA_const_char_ptr,NULL,"a",""},
  {&TA_const_char_ptr,NULL,"b","0"},
  {&TA_const_char_ptr,NULL,"c","0"},
  {&TA_const_char_ptr,NULL,"d","0"},
  {&TA_const_char_ptr,NULL,"e","0"},
  {&TA_const_char_ptr,NULL,"f","0"},
  {&TA_const_char_ptr,NULL,"g","0"},
  {&TA_const_char_ptr,NULL,"h","0"},
  {&TA_const_char_ptr,NULL,"i","0"},
  NULL};
static MethodArgs_data TA_taMisc_Choice_MethArgs[]={
  {&TA_const_char_ptr,NULL,"text","Choice"},
  {&TA_const_char_ptr,NULL,"a","Ok"},
  {&TA_const_char_ptr,NULL,"b","0"},
  {&TA_const_char_ptr,NULL,"c","0"},
  {&TA_const_char_ptr,NULL,"d","0"},
  {&TA_const_char_ptr,NULL,"e","0"},
  {&TA_const_char_ptr,NULL,"f","0"},
  {&TA_const_char_ptr,NULL,"g","0"},
  {&TA_const_char_ptr,NULL,"h","0"},
  {&TA_const_char_ptr,NULL,"i","0"},
  NULL};
static MethodArgs_data TA_taMisc_Busy_MethArgs[]={
  {&TA_bool,NULL,"busy"," true"},
  NULL};
static MethodArgs_data TA_taMisc_CheckConfigStart_MethArgs[]={
  {&TA_bool,NULL,"confirm_success"," true"},
  {&TA_bool,NULL,"quiet"," false"},
  NULL};
static MethodArgs_data TA_taMisc_CheckConfigEnd_MethArgs[]={
  {&TA_bool,NULL,"ok"," true"},
  NULL};
static MethodArgs_data TA_taMisc_MallocInfo_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  NULL};
static MethodArgs_data TA_taMisc_ListAllTokens_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  NULL};
static MethodArgs_data TA_taMisc_TypeToTypeInfoKind_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"typ",""},
  NULL};
static MethodArgs_data TA_taMisc_HelpMsg_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm"," cerr"},
  NULL};
static MethodArgs_data TA_taMisc_AddArgName_MethArgs[]={
  {&TA_const_taString_ref,NULL,"flag",""},
  {&TA_const_taString_ref,NULL,"name",""},
  NULL};
static MethodArgs_data TA_taMisc_AddArgNameDesc_MethArgs[]={
  {&TA_const_taString_ref,NULL,"name",""},
  {&TA_const_taString_ref,NULL,"desc",""},
  NULL};
static MethodArgs_data TA_taMisc_CheckArgByName_MethArgs[]={
  {&TA_const_taString_ref,NULL,"nm",""},
  NULL};
static MethodArgs_data TA_taMisc_FindArgByName_MethArgs[]={
  {&TA_const_taString_ref,NULL,"nm",""},
  NULL};
static MethodArgs_data TA_taMisc_GetAllArgsNamed_MethArgs[]={
  {&TA_const_taString_ref,NULL,"nm",""},
  {&TA_String_PArray_ref,NULL,"vals",""},
  NULL};
static MethodArgs_data TA_taMisc_CheckArgValContains_MethArgs[]={
  {&TA_const_taString_ref,NULL,"vl",""},
  NULL};
static MethodArgs_data TA_taMisc_FindArgValContains_MethArgs[]={
  {&TA_const_taString_ref,NULL,"vl",""},
  NULL};
static MethodArgs_data TA_taMisc_AddUserDataSchema_MethArgs[]={
  {&TA_const_taString_ref,NULL,"type_name",""},
  {&TA_UserDataItemBase_ptr,NULL,"item",""},
  NULL};
static MethodArgs_data TA_taMisc_CharToStrArray_MethArgs[]={
  {&TA_String_PArray_ref,NULL,"sa",""},
  {&TA_const_char_ptr,NULL,"ch",""},
  NULL};
static MethodArgs_data TA_taMisc_StrArrayToChar_MethArgs[]={
  {&TA_const_String_PArray_ref,NULL,"sa",""},
  NULL};
static MethodArgs_data TA_taMisc_SpaceLabel_MethArgs[]={
  {&TA_taString_ref,NULL,"lbl",""},
  NULL};
static MethodArgs_data TA_taMisc_LeadingZeros_MethArgs[]={
  {&TA_int,NULL,"num",""},
  {&TA_int,NULL,"len",""},
  NULL};
static MethodArgs_data TA_taMisc_FormatValue_MethArgs[]={
  {&TA_float,NULL,"val",""},
  {&TA_int,NULL,"width",""},
  {&TA_int,NULL,"precision",""},
  NULL};
static MethodArgs_data TA_taMisc_StringMaxLen_MethArgs[]={
  {&TA_const_taString_ref,NULL,"str",""},
  {&TA_int,NULL,"len",""},
  NULL};
static MethodArgs_data TA_taMisc_StringEnforceLen_MethArgs[]={
  {&TA_const_taString_ref,NULL,"str",""},
  {&TA_int,NULL,"len",""},
  NULL};
static MethodArgs_data TA_taMisc_StringCVar_MethArgs[]={
  {&TA_const_taString_ref,NULL,"str",""},
  NULL};
static MethodArgs_data TA_taMisc_GetFileFmPath_MethArgs[]={
  {&TA_const_taString_ref,NULL,"path",""},
  NULL};
static MethodArgs_data TA_taMisc_GetDirFmPath_MethArgs[]={
  {&TA_const_taString_ref,NULL,"path",""},
  {&TA_int,NULL,"n_up"," 0"},
  NULL};
static MethodArgs_data TA_taMisc_SetCurrentPath_MethArgs[]={
  {&TA_const_taString_ref,NULL,"path",""},
  NULL};
static MethodArgs_data TA_taMisc_FindFileOnPath_MethArgs[]={
  {&TA_String_PArray_ref,NULL,"paths",""},
  {&TA_const_char_ptr,NULL,"fname",""},
  NULL};
static MethodArgs_data TA_taMisc_FindFileOnLoadPath_MethArgs[]={
  {&TA_const_char_ptr,NULL,"fname",""},
  NULL};
static MethodArgs_data TA_taMisc_StartRecording_MethArgs[]={
  {&TA_ostream_ptr,NULL,"strm",""},
  NULL};
static MethodArgs_data TA_taMisc_RecordScript_MethArgs[]={
  {&TA_const_char_ptr,NULL,"cmd",""},
  NULL};
static MethodArgs_data TA_taMisc_ScriptRecordAssignment_MethArgs[]={
  {&TA_taBase_ptr,NULL,"tab",""},
  {&TA_MemberDef_ptr,NULL,"md",""},
  NULL};
static MethodArgs_data TA_taMisc_SRIAssignment_MethArgs[]={
  {&TA_taBase_ptr,NULL,"tab",""},
  {&TA_MemberDef_ptr,NULL,"md",""},
  NULL};
static MethodArgs_data TA_taMisc_SREAssignment_MethArgs[]={
  {&TA_taBase_ptr,NULL,"tab",""},
  {&TA_MemberDef_ptr,NULL,"md",""},
  NULL};
static MethodArgs_data TA_taMisc_skip_white_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_bool,NULL,"peek"," false"},
  NULL};
static MethodArgs_data TA_taMisc_skip_white_noeol_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_bool,NULL,"peek"," false"},
  NULL};
static MethodArgs_data TA_taMisc_skip_till_start_quote_or_semi_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_bool,NULL,"peek"," false"},
  NULL};
static MethodArgs_data TA_taMisc_read_word_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_bool,NULL,"peek"," false"},
  NULL};
static MethodArgs_data TA_taMisc_read_nonwhite_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_bool,NULL,"peek"," false"},
  NULL};
static MethodArgs_data TA_taMisc_read_nonwhite_noeol_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_bool,NULL,"peek"," false"},
  NULL};
static MethodArgs_data TA_taMisc_read_till_eol_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_bool,NULL,"peek"," false"},
  NULL};
static MethodArgs_data TA_taMisc_read_till_semi_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_bool,NULL,"peek"," false"},
  NULL};
static MethodArgs_data TA_taMisc_read_till_lbracket_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_bool,NULL,"peek"," false"},
  NULL};
static MethodArgs_data TA_taMisc_read_till_lb_or_semi_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_bool,NULL,"peek"," false"},
  NULL};
static MethodArgs_data TA_taMisc_read_till_rbracket_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_bool,NULL,"peek"," false"},
  NULL};
static MethodArgs_data TA_taMisc_read_till_rb_or_semi_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_bool,NULL,"peek"," false"},
  NULL};
static MethodArgs_data TA_taMisc_read_till_end_quote_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_bool,NULL,"peek"," false"},
  NULL};
static MethodArgs_data TA_taMisc_read_till_end_quote_semi_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_bool,NULL,"peek"," false"},
  NULL};
static MethodArgs_data TA_taMisc_skip_past_err_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_bool,NULL,"peek"," false"},
  NULL};
static MethodArgs_data TA_taMisc_skip_past_err_rb_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_bool,NULL,"peek"," false"},
  NULL};
static MethodArgs_data TA_taMisc_replace_strings_MethArgs[]={
  {&TA_istream_ref,NULL,"istrm",""},
  {&TA_ostream_ref,NULL,"ostrm",""},
  {&TA_NameVar_PArray_ref,NULL,"repl_list",""},
  NULL};
static MethodArgs_data TA_taMisc_find_strings_MethArgs[]={
  {&TA_istream_ref,NULL,"istrm",""},
  {&TA_String_PArray_ref,NULL,"strs",""},
  NULL};
static MethodArgs_data TA_taMisc_read_tag_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_taString_ref,NULL,"tag",""},
  {&TA_taString_ref,NULL,"val",""},
  NULL};
static MethodArgs_data TA_taMisc_read_till_rangle_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_bool,NULL,"peek"," false"},
  NULL};
static MethodArgs_data TA_taMisc_indent_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  {&TA_int,NULL,"indent",""},
  {&TA_int,NULL,"tsp","2"},
  NULL};
static MethodArgs_data TA_taMisc_write_quoted_string_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  {&TA_const_taString_ref,NULL,"str",""},
  {&TA_bool,NULL,"write_if_empty"," false"},
  NULL};
static MethodArgs_data TA_taMisc_fmt_sep_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  {&TA_const_taString_ref,NULL,"itm",""},
  {&TA_int,NULL,"no",""},
  {&TA_int,NULL,"indent",""},
  {&TA_int,NULL,"tsp","2"},
  NULL};
static MethodArgs_data TA_taMisc_fancy_list_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  {&TA_const_taString_ref,NULL,"itm",""},
  {&TA_int,NULL,"no",""},
  {&TA_int,NULL,"prln",""},
  {&TA_int,NULL,"tabs",""},
  NULL};
static MethodDef_data TA_taMisc_MethodDef[]={
  {&TA_void,NULL,"SaveConfig"," save configuration defaults to <appdata>/taconfig file that is loaded automatically at startup","CAT_Config ","",
    0,0,-1,0,0,NULL,cssElCFun_taMisc_SaveConfig_stub,NULL},
  {&TA_void,NULL,"LoadConfig"," load configuration defaults from <appdata>/.taconfig file (which is loaded automatically at startup)","CAT_Config ","",
    0,0,-1,0,0,NULL,cssElCFun_taMisc_LoadConfig_stub,NULL},
  {&TA_taString,NULL,"SuperCat"," concatenate strings with spaces between","CAT_Dialog ","",
    0,9,-1,0,1,(ta_void_fun)(taMisc::SuperCat),cssElCFun_taMisc_SuperCat_stub,TA_taMisc_SuperCat_MethArgs},
  {&TA_void,NULL,"Error"," displays error either in a window+stderr if gui_active or to stderr only","CAT_Dialog ","",
    0,9,1,0,1,(ta_void_fun)(taMisc::Error),cssElCFun_taMisc_Error_stub,TA_taMisc_Error_MethArgs},
  {&TA_void,NULL,"CheckError"," called by CheckConfig routines; enables batching up of errors for display","CAT_Dialog ","",
    0,9,1,0,1,(ta_void_fun)(taMisc::CheckError),cssElCFun_taMisc_CheckError_stub,TA_taMisc_CheckError_MethArgs},
  {&TA_void,NULL,"Warning"," displays warning to stderr and/or other logging mechanism","CAT_Dialog ","",
    0,9,1,0,1,(ta_void_fun)(taMisc::Warning),cssElCFun_taMisc_Warning_stub,TA_taMisc_Warning_MethArgs},
  {&TA_int,NULL,"Choice"," allows user to choose among different options in window if iv_active or stdin/out","CAT_Dialog ","",
    0,10,0,0,1,(ta_void_fun)(taMisc::Choice),cssElCFun_taMisc_Choice_stub,TA_taMisc_Choice_MethArgs},
  {&TA_void,NULL,"FlushConsole"," flush any pending console output (cout, cerr) -- call this in situations that generate a lot of console output..","CAT_GlobalState ","",
    0,0,-1,0,1,(ta_void_fun)(taMisc::FlushConsole),cssElCFun_taMisc_FlushConsole_stub,NULL},
  {&TA_void,NULL,"Busy"," puts system in a 'busy' state","CAT_GlobalState ","",
    0,1,0,0,1,(ta_void_fun)(taMisc::Busy),cssElCFun_taMisc_Busy_stub,TA_taMisc_Busy_MethArgs},
  {&TA_void,NULL,"DoneBusy"," when no longer busy, call this function","CAT_GlobalState ","",
    0,0,-1,0,1,(ta_void_fun)(taMisc::DoneBusy),cssElCFun_taMisc_DoneBusy_stub,NULL},
  {&TA_void,NULL,"CheckConfigStart"," we are starting checkconfig, nestable, 1st guy controls params","CAT_GlobalState ","",
    0,2,0,0,1,(ta_void_fun)(taMisc::CheckConfigStart),cssElCFun_taMisc_CheckConfigStart_stub,TA_taMisc_CheckConfigStart_MethArgs},
  {&TA_void,NULL,"CheckConfigEnd"," ending checkconfig, last exit handles display etc.","CAT_GlobalState ","",
    0,1,0,0,1,(ta_void_fun)(taMisc::CheckConfigEnd),cssElCFun_taMisc_CheckConfigEnd_stub,TA_taMisc_CheckConfigEnd_MethArgs},
  {&TA_void,NULL,"MallocInfo"," generate malloc memory statistic information to given stream","CAT_GlobalState ","",
    0,1,-1,0,1,(ta_void_fun)(taMisc::MallocInfo),cssElCFun_taMisc_MallocInfo_stub,TA_taMisc_MallocInfo_MethArgs},
  {&TA_void,NULL,"ListAllTokens"," generate a list and count of all types that keep tokens, with a count of tokens","CAT_GlobalState ","",
    0,1,-1,0,1,(ta_void_fun)(taMisc::ListAllTokens),cssElCFun_taMisc_ListAllTokens_stub,TA_taMisc_ListAllTokens_MethArgs},
  {NULL,"::TypeInfoKind","TypeToTypeInfoKind"," ","CAT_GlobalState ","",
    0,1,-1,0,1,(ta_void_fun)(taMisc::TypeToTypeInfoKind),cssElCFun_taMisc_TypeToTypeInfoKind_stub,TA_taMisc_TypeToTypeInfoKind_MethArgs},
  {&TA_void,NULL,"HelpMsg"," generate a help message about program args, usage, etc","CAT_Args ","",
    0,1,0,0,1,(ta_void_fun)(taMisc::HelpMsg),cssElCFun_taMisc_HelpMsg_stub,TA_taMisc_HelpMsg_MethArgs},
  {&TA_void,NULL,"AddArgName"," add an argument flag name to be processed from startup args (e.g., flag = -f, name = CssScript; see arg_names)","CAT_Args ","",
    0,2,-1,0,1,(ta_void_fun)(taMisc::AddArgName),cssElCFun_taMisc_AddArgName_stub,TA_taMisc_AddArgName_MethArgs},
  {&TA_void,NULL,"AddArgNameDesc"," add a description of an argument flag name (see arg_name_descs)","CAT_Args ","",
    0,2,-1,0,1,(ta_void_fun)(taMisc::AddArgNameDesc),cssElCFun_taMisc_AddArgNameDesc_stub,TA_taMisc_AddArgNameDesc_MethArgs},
  {&TA_void,NULL,"UpdateArgs"," update arg information after adding new arg names","CAT_Args ","",
    0,0,-1,0,1,(ta_void_fun)(taMisc::UpdateArgs),cssElCFun_taMisc_UpdateArgs_stub,NULL},
  {&TA_bool,NULL,"CheckArgByName"," was the given arg name set?","CAT_Args ","",
    0,1,-1,0,1,(ta_void_fun)(taMisc::CheckArgByName),cssElCFun_taMisc_CheckArgByName_stub,TA_taMisc_CheckArgByName_MethArgs},
  {&TA_taString,NULL,"FindArgByName"," get the value for given named argument (argv[x] for unnamed args)","CAT_Args ","",
    0,1,-1,0,1,(ta_void_fun)(taMisc::FindArgByName),cssElCFun_taMisc_FindArgByName_stub,TA_taMisc_FindArgByName_MethArgs},
  {&TA_bool,NULL,"GetAllArgsNamed"," get the values for all args with given name tag","CAT_Args ","",
    0,2,-1,0,1,(ta_void_fun)(taMisc::GetAllArgsNamed),cssElCFun_taMisc_GetAllArgsNamed_stub,TA_taMisc_GetAllArgsNamed_MethArgs},
  {&TA_bool,NULL,"CheckArgValContains"," check if there is an arg that contains string fragment in its value","CAT_Args ","",
    0,1,-1,0,1,(ta_void_fun)(taMisc::CheckArgValContains),cssElCFun_taMisc_CheckArgValContains_stub,TA_taMisc_CheckArgValContains_MethArgs},
  {&TA_taString,NULL,"FindArgValContains"," get full arg value that contains string fragment","CAT_Args ","",
    0,1,-1,0,1,(ta_void_fun)(taMisc::FindArgValContains),cssElCFun_taMisc_FindArgValContains_stub,TA_taMisc_FindArgValContains_MethArgs},
  {&TA_void,NULL,"AddUserDataSchema"," adds the item as schema, putting on deferred list if type not avail yet","CAT_UserData ","",
    0,2,-1,0,1,(ta_void_fun)(taMisc::AddUserDataSchema),cssElCFun_taMisc_AddUserDataSchema_stub,TA_taMisc_AddUserDataSchema_MethArgs},
  {&TA_void,NULL,"CharToStrArray"," convert space-delimeted character string to a string array","CAT_Utility ","",
    0,2,-1,0,1,(ta_void_fun)(taMisc::CharToStrArray),cssElCFun_taMisc_CharToStrArray_stub,TA_taMisc_CharToStrArray_MethArgs},
  {&TA_taString,NULL,"StrArrayToChar"," convert a string array to a space-delimeted character string","CAT_Utility ","",
    0,1,-1,0,1,(ta_void_fun)(taMisc::StrArrayToChar),cssElCFun_taMisc_StrArrayToChar_stub,TA_taMisc_StrArrayToChar_MethArgs},
  {&TA_void,NULL,"SpaceLabel"," add spaces to a label in place of _'s and upper-lower transitions","CAT_Utility ","",
    0,1,-1,0,1,(ta_void_fun)(taMisc::SpaceLabel),cssElCFun_taMisc_SpaceLabel_stub,TA_taMisc_SpaceLabel_MethArgs},
  {&TA_taString,NULL,"LeadingZeros"," returns num converted to a string with leading zeros up to len","CAT_Utility ","",
    0,2,-1,0,1,(ta_void_fun)(taMisc::LeadingZeros),cssElCFun_taMisc_LeadingZeros_stub,TA_taMisc_LeadingZeros_MethArgs},
  {&TA_taString,NULL,"FormatValue"," format output of value according to width and precision","CAT_Utility ","",
    0,3,-1,0,1,(ta_void_fun)(taMisc::FormatValue),cssElCFun_taMisc_FormatValue_stub,TA_taMisc_FormatValue_MethArgs},
  {&TA_taString,NULL,"StringMaxLen"," returns string up to maximum length given (enforces string to be len or less in length)","CAT_Utility ","",
    0,2,-1,0,1,(ta_void_fun)(taMisc::StringMaxLen),cssElCFun_taMisc_StringMaxLen_stub,TA_taMisc_StringMaxLen_MethArgs},
  {&TA_taString,NULL,"StringEnforceLen"," returns string enforced to given length (spaces added to make length)","CAT_Utility ","",
    0,2,-1,0,1,(ta_void_fun)(taMisc::StringEnforceLen),cssElCFun_taMisc_StringEnforceLen_stub,TA_taMisc_StringEnforceLen_MethArgs},
  {&TA_taString,NULL,"StringCVar"," make return string in a form that would be valid as a variable name in C (i.e., alpha + numeric (not at start) + _","CAT_Utility ","",
    0,1,-1,0,1,(ta_void_fun)(taMisc::StringCVar),cssElCFun_taMisc_StringCVar_stub,TA_taMisc_StringCVar_MethArgs},
  {&TA_taString,NULL,"GetFileFmPath"," get file name component from full path","CAT_File ","",
    0,1,-1,0,1,(ta_void_fun)(taMisc::GetFileFmPath),cssElCFun_taMisc_GetFileFmPath_stub,TA_taMisc_GetFileFmPath_MethArgs},
  {&TA_taString,NULL,"GetDirFmPath"," get directory component from full path, n_up is number of directories to go up from the final directory","CAT_File ","",
    0,2,1,0,1,(ta_void_fun)(taMisc::GetDirFmPath),cssElCFun_taMisc_GetDirFmPath_stub,TA_taMisc_GetDirFmPath_MethArgs},
  {&TA_taString,NULL,"GetHomePath"," get user's home directory path","CAT_File ","",
    0,0,-1,0,1,(ta_void_fun)(taMisc::GetHomePath),cssElCFun_taMisc_GetHomePath_stub,NULL},
  {&TA_taString,NULL,"GetCurrentPath"," get current working directory path","CAT_File ","",
    0,0,-1,0,1,(ta_void_fun)(taMisc::GetCurrentPath),cssElCFun_taMisc_GetCurrentPath_stub,NULL},
  {&TA_bool,NULL,"SetCurrentPath"," set current working directory to given path; returns success","CAT_File ","",
    0,1,-1,0,1,(ta_void_fun)(taMisc::SetCurrentPath),cssElCFun_taMisc_SetCurrentPath_stub,TA_taMisc_SetCurrentPath_MethArgs},
  {&TA_taString,NULL,"FindFileOnPath"," helper function: try to find file fnm in one of the load_include paths -- returns complete path to file (or empty str if not found)","CAT_File ","",
    0,2,-1,0,1,(ta_void_fun)(taMisc::FindFileOnPath),cssElCFun_taMisc_FindFileOnPath_stub,TA_taMisc_FindFileOnPath_MethArgs},
  {&TA_taString,NULL,"FindFileOnLoadPath"," try to find file fnm in one of the load_include paths -- returns complete path to file (or empty str if not found)","CAT_File ","",
    0,1,-1,0,1,(ta_void_fun)(taMisc::FindFileOnLoadPath),cssElCFun_taMisc_FindFileOnLoadPath_stub,TA_taMisc_FindFileOnLoadPath_MethArgs},
  {&TA_void,NULL,"StartRecording"," sets record_strm and record_cursor","CAT_Script ","",
    0,1,-1,0,1,(ta_void_fun)(taMisc::StartRecording),cssElCFun_taMisc_StartRecording_stub,TA_taMisc_StartRecording_MethArgs},
  {&TA_void,NULL,"StopRecording"," unsets record_strm and record_cursor","CAT_Script ","",
    0,0,-1,0,1,(ta_void_fun)(taMisc::StopRecording),cssElCFun_taMisc_StopRecording_stub,NULL},
  {&TA_bool,NULL,"RecordScript"," record the given script command, if the script is open (just sends cmd to stream)","CAT_Script ","",
    0,1,-1,0,1,(ta_void_fun)(taMisc::RecordScript),cssElCFun_taMisc_RecordScript_stub,TA_taMisc_RecordScript_MethArgs},
  {&TA_void,NULL,"ScriptRecordAssignment"," record last script assignment of tab's md value;","CAT_Script ","",
    0,2,-1,0,1,(ta_void_fun)(taMisc::ScriptRecordAssignment),cssElCFun_taMisc_ScriptRecordAssignment_stub,TA_taMisc_ScriptRecordAssignment_MethArgs},
  {&TA_void,NULL,"SRIAssignment"," record inline md assignment","CAT_Script ","",
    0,2,-1,0,1,(ta_void_fun)(taMisc::SRIAssignment),cssElCFun_taMisc_SRIAssignment_stub,TA_taMisc_SRIAssignment_MethArgs},
  {&TA_void,NULL,"SREAssignment"," record enum md assignment","CAT_Script ","",
    0,2,-1,0,1,(ta_void_fun)(taMisc::SREAssignment),cssElCFun_taMisc_SREAssignment_stub,TA_taMisc_SREAssignment_MethArgs},
  {&TA_int,NULL,"skip_white"," skip over all whitespace","CAT_Parse ","",
    0,2,1,0,1,(ta_void_fun)(taMisc::skip_white),cssElCFun_taMisc_skip_white_stub,TA_taMisc_skip_white_MethArgs},
  {&TA_int,NULL,"skip_white_noeol"," don't skip end-of-line","CAT_Parse ","",
    0,2,1,0,1,(ta_void_fun)(taMisc::skip_white_noeol),cssElCFun_taMisc_skip_white_noeol_stub,TA_taMisc_skip_white_noeol_MethArgs},
  {&TA_int,NULL,"skip_till_start_quote_or_semi"," used to seek up to an opening ' for a string; will terminate on a ;","CAT_Parse ","",
    0,2,1,0,1,(ta_void_fun)(taMisc::skip_till_start_quote_or_semi),cssElCFun_taMisc_skip_till_start_quote_or_semi_stub,TA_taMisc_skip_till_start_quote_or_semi_MethArgs},
  {&TA_int,NULL,"read_word"," reads only contiguous 'isalnum' and _ -- does skip_white first","CAT_Parse ","",
    0,2,1,0,1,(ta_void_fun)(taMisc::read_word),cssElCFun_taMisc_read_word_stub,TA_taMisc_read_word_MethArgs},
  {&TA_int,NULL,"read_nonwhite"," read any contiguous non-whitespace string -- does skip_white first","CAT_Parse ","",
    0,2,1,0,1,(ta_void_fun)(taMisc::read_nonwhite),cssElCFun_taMisc_read_nonwhite_stub,TA_taMisc_read_nonwhite_MethArgs},
  {&TA_int,NULL,"read_nonwhite_noeol"," read any contiguous non-whitespace string, does skip_white_noeol first (string must be on this line)","CAT_Parse ","",
    0,2,1,0,1,(ta_void_fun)(taMisc::read_nonwhite_noeol),cssElCFun_taMisc_read_nonwhite_noeol_stub,TA_taMisc_read_nonwhite_noeol_MethArgs},
  {&TA_int,NULL,"read_till_eol"," eol = end of line","CAT_Parse ","",
    0,2,1,0,1,(ta_void_fun)(taMisc::read_till_eol),cssElCFun_taMisc_read_till_eol_stub,TA_taMisc_read_till_eol_MethArgs},
  {&TA_int,NULL,"read_till_semi"," semi = ;","CAT_Parse ","",
    0,2,1,0,1,(ta_void_fun)(taMisc::read_till_semi),cssElCFun_taMisc_read_till_semi_stub,TA_taMisc_read_till_semi_MethArgs},
  {&TA_int,NULL,"read_till_lbracket"," lbracket = {","CAT_Parse ","",
    0,2,1,0,1,(ta_void_fun)(taMisc::read_till_lbracket),cssElCFun_taMisc_read_till_lbracket_stub,TA_taMisc_read_till_lbracket_MethArgs},
  {&TA_int,NULL,"read_till_lb_or_semi"," lb = { or ;","CAT_Parse ","",
    0,2,1,0,1,(ta_void_fun)(taMisc::read_till_lb_or_semi),cssElCFun_taMisc_read_till_lb_or_semi_stub,TA_taMisc_read_till_lb_or_semi_MethArgs},
  {&TA_int,NULL,"read_till_rbracket"," rbracket = } -- does depth counting to skip over intervening paired { }","CAT_Parse ","",
    0,2,1,0,1,(ta_void_fun)(taMisc::read_till_rbracket),cssElCFun_taMisc_read_till_rbracket_stub,TA_taMisc_read_till_rbracket_MethArgs},
  {&TA_int,NULL,"read_till_rb_or_semi"," rbracket } or ; -- does depth counting to skip over intervening paired { }","CAT_Parse ","",
    0,2,1,0,1,(ta_void_fun)(taMisc::read_till_rb_or_semi),cssElCFun_taMisc_read_till_rb_or_semi_stub,TA_taMisc_read_till_rb_or_semi_MethArgs},
  {&TA_int,NULL,"read_till_end_quote"," ","CAT_Parse ","",
    0,2,1,0,1,(ta_void_fun)(taMisc::read_till_end_quote),cssElCFun_taMisc_read_till_end_quote_stub,TA_taMisc_read_till_end_quote_MethArgs},
  {&TA_int,NULL,"read_till_end_quote_semi"," read-counterpart to write_quoted_string; read-escaping, until '; (can be ws btwn ' and ;)","CAT_Parse ","",
    0,2,1,0,1,(ta_void_fun)(taMisc::read_till_end_quote_semi),cssElCFun_taMisc_read_till_end_quote_semi_stub,TA_taMisc_read_till_end_quote_semi_MethArgs},
  {&TA_int,NULL,"skip_past_err"," skips to next rb or semi (robust)","CAT_Parse ","",
    0,2,1,0,1,(ta_void_fun)(taMisc::skip_past_err),cssElCFun_taMisc_skip_past_err_stub,TA_taMisc_skip_past_err_MethArgs},
  {&TA_int,NULL,"skip_past_err_rb"," skips to next rbracket (robust)","CAT_Parse ","",
    0,2,1,0,1,(ta_void_fun)(taMisc::skip_past_err_rb),cssElCFun_taMisc_skip_past_err_rb_stub,TA_taMisc_skip_past_err_rb_MethArgs},
  {&TA_int,NULL,"replace_strings"," replace a list of strings (no regexp) in input file istrm to output file ostrm (name -> value) -- reads one line at a time; returns number replaced","CAT_File ","",
    0,3,-1,0,1,(ta_void_fun)(taMisc::replace_strings),cssElCFun_taMisc_replace_strings_stub,TA_taMisc_replace_strings_MethArgs},
  {&TA_int,NULL,"find_strings"," find first occurrence of any of the given strings in file (reading one line at a time); returns index of string or -1 if none found","CAT_File ","",
    0,2,-1,0,1,(ta_void_fun)(taMisc::find_strings),cssElCFun_taMisc_find_strings_stub,TA_taMisc_find_strings_MethArgs},
  {NULL,"::ReadTagStatus","read_tag"," read an html-style tag from the file: <XXX ...> tag = XXX, val = ... (optional)","CAT_Parse ","",
    0,3,-1,0,1,(ta_void_fun)(taMisc::read_tag),cssElCFun_taMisc_read_tag_stub,TA_taMisc_read_tag_MethArgs},
  {&TA_int,NULL,"read_till_rangle"," rangle = >","CAT_Parse ","",
    0,2,1,0,1,(ta_void_fun)(taMisc::read_till_rangle),cssElCFun_taMisc_read_till_rangle_stub,TA_taMisc_read_till_rangle_MethArgs},
  {&TA_ostream_ref,NULL,"indent"," ","CAT_File ","",
    0,3,2,0,1,(ta_void_fun)(taMisc::indent),cssElCFun_taMisc_indent_stub,TA_taMisc_indent_MethArgs},
  {&TA_ostream_ref,NULL,"write_quoted_string"," writes the string, including enclosing quotes, escaping so we can read back using read_till_end_quote funcs","CAT_File ","",
    0,3,2,0,1,(ta_void_fun)(taMisc::write_quoted_string),cssElCFun_taMisc_write_quoted_string_stub,TA_taMisc_write_quoted_string_MethArgs},
  {&TA_ostream_ref,NULL,"fmt_sep"," ","CAT_File ","",
    0,5,4,0,1,(ta_void_fun)(taMisc::fmt_sep),cssElCFun_taMisc_fmt_sep_stub,TA_taMisc_fmt_sep_MethArgs},
  {&TA_ostream_ref,NULL,"fancy_list"," ","CAT_File ","",
    0,5,-1,0,1,(ta_void_fun)(taMisc::fancy_list),cssElCFun_taMisc_fancy_list_stub,TA_taMisc_fancy_list_MethArgs},
  NULL};
static MethodArgs_data TA_DataChangeHelper_UpdateFromDataChanged_MethArgs[]={
  {&TA_int,NULL,"dcr",""},
  NULL};
static MethodDef_data TA_DataChangeHelper_MethodDef[]={
  {&TA_bool,NULL,"doStructUpdate"," after update, will be true if struct changed; CLEARED ON READ, and if true, clears DataUpdate, so check this one first if separately handling struct changes","","",
    0,0,-1,0,0,NULL,cssElCFun_DataChangeHelper_doStructUpdate_stub,NULL},
  {&TA_bool,NULL,"doDataUpdate"," after update, will be true if data or structure changed; CLEARED ON READ","","",
    0,0,-1,0,0,NULL,cssElCFun_DataChangeHelper_doDataUpdate_stub,NULL},
  {&TA_void,NULL,"UpdateFromDataChanged"," pass the DataDataChanged dcr value in","","",
    0,1,-1,0,0,NULL,cssElCFun_DataChangeHelper_UpdateFromDataChanged_stub,TA_DataChangeHelper_UpdateFromDataChanged_MethArgs},
  {&TA_void,NULL,"Reset"," reset everything; normally not needed","","",
    0,0,-1,0,0,NULL,cssElCFun_DataChangeHelper_Reset_stub,NULL},
  NULL};
static MethodArgs_data TA_taSmartRef_DataLinkDestroying_MethArgs[]={
  {&TA_taDataLink_ptr,NULL,"dl",""},
  NULL};
static MethodArgs_data TA_taSmartRef_DataDataChanged_MethArgs[]={
  {&TA_taDataLink_ptr,NULL,"na",""},
  {&TA_int,NULL,"dcr",""},
  {&TA_void_ptr,NULL,"op1",""},
  {&TA_void_ptr,NULL,"op2",""},
  NULL};
static MethodArgs_data TA_taSmartRef_set_MethArgs[]={
  {&TA_taBase_ptr,NULL,"src",""},
  NULL};
static MethodArgs_data TA_taSmartRef_Init_MethArgs[]={
  {&TA_taBase_ptr,NULL,"own_",""},
  NULL};
static MethodDef_data TA_taSmartRef_MethodDef[]={
  {&TA_void_ptr,NULL,"This"," reference to the 'this' pointer of the client object ","","",
    0,0,-1,1,0,NULL,cssElCFun_taSmartRef_This_stub,NULL},
  {&TA_TypeDef_ptr,NULL,"GetTypeDef"," typedef of the dlc note: only one typedef for all","","",
    0,0,-1,1,0,NULL,cssElCFun_taSmartRef_GetTypeDef_stub,NULL},
  {&TA_TypeDef_ptr,NULL,"GetDataTypeDef"," convenience function, default gets data type from link TypeDef of the data","","",
    0,0,-1,1,0,NULL,cssElCFun_taSmartRef_GetDataTypeDef_stub,NULL},
  {&TA_void,NULL,"DataLinkDestroying"," called by DataLink when destroying; it will remove datalink ref in dlc upon return","","",
    0,1,-1,1,0,NULL,cssElCFun_taSmartRef_DataLinkDestroying_stub,TA_taSmartRef_DataLinkDestroying_MethArgs},
  {&TA_void,NULL,"DataDataChanged"," ","","",
    0,4,-1,1,0,NULL,cssElCFun_taSmartRef_DataDataChanged_stub,TA_taSmartRef_DataDataChanged_MethArgs},
  {&TA_taBase_ptr,NULL,"ptr","","","",
    0,0,-1,0,0,NULL,cssElCFun_taSmartRef_ptr_stub,NULL},
  {&TA_void,NULL,"set","","","",
    0,1,-1,0,0,NULL,cssElCFun_taSmartRef_set_stub,TA_taSmartRef_set_MethArgs},
  {&TA_TypeDef_ptr,NULL,"GetBaseType","","","",
    0,0,-1,1,0,NULL,cssElCFun_taSmartRef_GetBaseType_stub,NULL},
  {&TA_void,NULL,"Init"," call in owner's Initialize or InitLinks","","",
    0,1,-1,0,0,NULL,cssElCFun_taSmartRef_Init_stub,TA_taSmartRef_Init_MethArgs},
  {&TA_void,NULL,"CutLinks","","","",
    0,0,-1,0,0,NULL,cssElCFun_taSmartRef_CutLinks_stub,NULL},
  NULL};
static MethodArgs_data TA_taSmartPtr_GetBaseType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"this_typ",""},
  NULL};
static MethodArgs_data TA_taSmartPtr_set_MethArgs[]={
  {&TA_taBase_ptr,NULL,"src",""},
  NULL};
static MethodDef_data TA_taSmartPtr_MethodDef[]={
  {&TA_TypeDef_ptr,NULL,"GetBaseType"," returns a best-guess min type -- hacks by looking at the name","","",
    0,1,-1,0,1,(ta_void_fun)(taSmartPtr::GetBaseType),cssElCFun_taSmartPtr_GetBaseType_stub,TA_taSmartPtr_GetBaseType_MethArgs},
  {&TA_taBase_ptr,NULL,"ptr","","","",
    0,0,-1,0,0,NULL,cssElCFun_taSmartPtr_ptr_stub,NULL},
  {&TA_void,NULL,"set","","","",
    0,1,-1,0,0,NULL,cssElCFun_taSmartPtr_set_stub,TA_taSmartPtr_set_MethArgs},
  NULL};
static int taOBase::* TA_taOBase_MbrOff;
static MemberDef_data TA_taOBase_MemberDef[]={
  {&TA_TAPtr,NULL,"owner"," pointer to owner","NO_SHOW READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_taOBase_MbrOff=(int taOBase::*)(&taOBase::owner))),0,NULL,0},
  {&TA_UserDataItem_List_ptr,NULL,"user_data_"," storage for user data (created if needed)","OWN_POINTER NO_SHOW_EDIT SHOW_TREE NO_SAVE_EMPTY ","",
    *((ta_memb_ptr*)&(TA_taOBase_MbrOff=(int taOBase::*)(&taOBase::user_data_))),0,NULL,0},
  NULL};
static MethodArgs_data TA_taOBase_GetOwner_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"tp",""},
  NULL};
static MethodArgs_data TA_taOBase_GetUserDataList_MethArgs[]={
  {&TA_bool,NULL,"fc"," false"},
  NULL};
static MethodDef_data TA_taOBase_MethodDef[]={
  {&TA_TAPtr,NULL,"GetOwner","","","",
    3,1,-1,0,0,NULL,cssElCFun_taOBase_GetOwner_stub,TA_taOBase_GetOwner_MethArgs},
  {&TA_UserDataItem_List_ptr,NULL,"GetUserDataList"," gets the userdatalist for this class","CAT_UserData EXPERT ","",
    0,1,0,1,0,NULL,cssElCFun_taOBase_GetUserDataList_stub,TA_taOBase_GetUserDataList_MethArgs},
  NULL};
static MethodArgs_data TA_taOABase_SetAdapter_MethArgs[]={
  {&TA_taBaseAdapter_ptr,NULL,"adapter_",""},
  NULL};
static MethodDef_data TA_taOABase_MethodDef[]={
  {&TA_void,NULL,"SetAdapter","","","",
    0,1,-1,0,0,NULL,cssElCFun_taOABase_SetAdapter_stub,TA_taOABase_SetAdapter_MethArgs},
  NULL};
static EnumDef_data TA_taDataView_DataViewAction[]={
  {"CONSTR_POST"," (only used by DataViewer)","BIT ",1},
  {"CLEAR_IMPL"," (only used by T3DataView)","BIT ",2},
  {"RENDER_PRE"," ","BIT ",4},
  {"RENDER_IMPL"," ","BIT ",8},
  {"RENDER_POST"," ","BIT ",16},
  {"CLOSE_WIN_IMPL"," (only used by DataViewer)","BIT ",32},
  {"RESET_IMPL"," ","BIT ",64},
  {"UNBIND_IMPL"," disconnect everyone from a data source","BIT ",128},
  NULL};
static int taDataView::* TA_taDataView_MbrOff;
static MemberDef_data TA_taDataView_MemberDef[]={
  {&TA_taBase_ptr,NULL,"m_data"," data -- referent of the item (not ref'ed)","READ_ONLY NO_SET_POINTER ","",
    *((ta_memb_ptr*)&(TA_taDataView_MbrOff=(int taDataView::*)(&taDataView::m_data))),0,NULL,0},
  {&TA_TypeDef_ptr,NULL,"data_base"," Minimum type for data object","READ_ONLY NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_taDataView_MbrOff=(int taDataView::*)(&taDataView::data_base))),0,NULL,0},
  NULL};
static MethodArgs_data TA_taDataView_New_MethArgs[]={
  {&TA_int,NULL,"n_objs","1"},
  {&TA_TypeDef_ptr,NULL,"type","__null"},
  NULL};
static MethodArgs_data TA_taDataView_HasBaseFlag_MethArgs[]={
  {&TA_int,NULL,"flag",""},
  NULL};
static MethodArgs_data TA_taDataView_SetBaseFlag_MethArgs[]={
  {&TA_int,NULL,"flag",""},
  NULL};
static MethodArgs_data TA_taDataView_ClearBaseFlag_MethArgs[]={
  {&TA_int,NULL,"flag",""},
  NULL};
static MethodArgs_data TA_taDataView_SetEnabled_MethArgs[]={
  {&TA_bool,NULL,"value",""},
  NULL};
static MethodArgs_data TA_taDataView_GetOwner_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"tp",""},
  NULL};
static MethodArgs_data TA_taDataView_GetPath_MethArgs[]={
  {&TA_TAPtr,NULL,"ta","__null"},
  {&TA_TAPtr,NULL,"par_stop","__null"},
  NULL};
static MethodArgs_data TA_taDataView_FindFromPath_MethArgs[]={
  {&TA_const_taString_ref,NULL,"path",""},
  {&TA_MemberDef_ptr_ref,NULL,"ret_md","no_mdef"},
  {&TA_int,NULL,"start","0"},
  NULL};
static MethodArgs_data TA_taDataView_SetFileName_MethArgs[]={
  {&TA_const_taString_ref,NULL,"val",""},
  NULL};
static MethodArgs_data TA_taDataView_GetFileNameFmProject_MethArgs[]={
  {&TA_const_taString_ref,NULL,"ext",""},
  {&TA_const_taString_ref,NULL,"tag"," "},
  {&TA_const_taString_ref,NULL,"subdir"," "},
  {&TA_bool,NULL,"dmem_proc_no"," false"},
  NULL};
static MethodArgs_data TA_taDataView_Load_strm_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_TAPtr,NULL,"par","__null"},
  {&TA_taBase_ptr_ptr,NULL,"loaded_obj_ptr"," __null"},
  NULL};
static MethodArgs_data TA_taDataView_Load_MethArgs[]={
  {&TA_const_taString_ref,NULL,"fname",""},
  {&TA_taBase_ptr_ptr,NULL,"loaded_obj_ptr"," __null"},
  {&TA_taString,NULL,"context"," taString()"},
  NULL};
static MethodArgs_data TA_taDataView_Save_strm_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  {&TA_TAPtr,NULL,"par","__null"},
  {&TA_int,NULL,"indent","0"},
  NULL};
static MethodArgs_data TA_taDataView_Save_MethArgs[]={
  {&TA_taString,NULL,"context"," taString()"},
  NULL};
static MethodArgs_data TA_taDataView_SaveAs_MethArgs[]={
  {&TA_const_taString_ref,NULL,"fname"," taString()"},
  {&TA_taString,NULL,"context"," taString()"},
  NULL};
static MethodArgs_data TA_taDataView_StructUpdate_MethArgs[]={
  {&TA_bool,NULL,"begin",""},
  NULL};
static MethodArgs_data TA_taDataView_DataUpdate_MethArgs[]={
  {&TA_bool,NULL,"begin",""},
  NULL};
static MethodArgs_data TA_taDataView_setDirty_MethArgs[]={
  {&TA_bool,NULL,"value",""},
  NULL};
static MethodArgs_data TA_taDataView_CheckConfig_MethArgs[]={
  {&TA_bool,NULL,"quiet"," false"},
  NULL};
static MethodArgs_data TA_taDataView_CheckConfig_Gui_MethArgs[]={
  {&TA_bool,NULL,"confirm_success"," true"},
  {&TA_bool,NULL,"quiet"," false"},
  NULL};
static MethodArgs_data TA_taDataView_CopyFrom_MethArgs[]={
  {&TA_TAPtr,NULL,"cpy_from",""},
  NULL};
static MethodArgs_data TA_taDataView_CopyTo_MethArgs[]={
  {&TA_TAPtr,NULL,"cpy_to",""},
  NULL};
static MethodArgs_data TA_taDataView_ChangeMyType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"new_type",""},
  NULL};
static MethodArgs_data TA_taDataView_InheritsFrom_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"it",""},
  NULL};
static MethodArgs_data TA_taDataView_InheritsFromName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"nm",""},
  NULL};
static MethodArgs_data TA_taDataView_GetEnumString_MethArgs[]={
  {&TA_const_taString_ref,NULL,"enum_tp_nm",""},
  {&TA_int,NULL,"enum_val",""},
  NULL};
static MethodArgs_data TA_taDataView_GetEnumVal_MethArgs[]={
  {&TA_const_taString_ref,NULL,"enum_nm",""},
  {&TA_taString_ref,NULL,"enum_tp_nm"," no_name"},
  NULL};
static MethodArgs_data TA_taDataView_GetUserDataList_MethArgs[]={
  {&TA_bool,NULL,"fc"," false"},
  NULL};
static MethodArgs_data TA_taDataView_HasUserData_MethArgs[]={
  {&TA_const_taString_ref,NULL,"key",""},
  NULL};
static MethodArgs_data TA_taDataView_GetUserData_MethArgs[]={
  {&TA_const_taString_ref,NULL,"key",""},
  NULL};
static MethodArgs_data TA_taDataView_GetUserDataAsBool_MethArgs[]={
  {&TA_const_taString_ref,NULL,"key",""},
  NULL};
static MethodArgs_data TA_taDataView_GetUserDataAsInt_MethArgs[]={
  {&TA_const_taString_ref,NULL,"key",""},
  NULL};
static MethodArgs_data TA_taDataView_GetUserDataAsFloat_MethArgs[]={
  {&TA_const_taString_ref,NULL,"key",""},
  NULL};
static MethodArgs_data TA_taDataView_GetUserDataAsDouble_MethArgs[]={
  {&TA_const_taString_ref,NULL,"key",""},
  NULL};
static MethodArgs_data TA_taDataView_GetUserDataAsString_MethArgs[]={
  {&TA_const_taString_ref,NULL,"key",""},
  NULL};
static MethodArgs_data TA_taDataView_SetUserData_MethArgs[]={
  {&TA_const_taString_ref,NULL,"key",""},
  {&TA_const_Variant_ref,NULL,"value",""},
  NULL};
static MethodArgs_data TA_taDataView_EditDialog_MethArgs[]={
  {&TA_bool,NULL,"modal"," false"},
  NULL};
static MethodArgs_data TA_taDataView_ReShowEdit_MethArgs[]={
  {&TA_bool,NULL,"force"," false"},
  NULL};
static MethodArgs_data TA_taDataView_CallFun_MethArgs[]={
  {&TA_const_taString_ref,NULL,"fun_name",""},
  NULL};
static MethodArgs_data TA_taDataView_SelectForEdit_MethArgs[]={
  {&TA_MemberDef_ptr,NULL,"member",""},
  {&TA_SelectEdit_ptr,NULL,"editor",""},
  {&TA_const_taString_ref,NULL,"extra_label",""},
  NULL};
static MethodArgs_data TA_taDataView_SelectForEditNm_MethArgs[]={
  {&TA_const_taString_ref,NULL,"memb_nm",""},
  {&TA_SelectEdit_ptr,NULL,"editor",""},
  {&TA_const_taString_ref,NULL,"extra_label",""},
  NULL};
static MethodArgs_data TA_taDataView_SelectForEditSearch_MethArgs[]={
  {&TA_const_taString_ref,NULL,"memb_contains",""},
  {&TA_SelectEdit_ptr_ref,NULL,"editor",""},
  NULL};
static MethodArgs_data TA_taDataView_SelectFunForEdit_MethArgs[]={
  {&TA_MethodDef_ptr,NULL,"function",""},
  {&TA_SelectEdit_ptr,NULL,"editor",""},
  {&TA_const_taString_ref,NULL,"extra_label",""},
  NULL};
static MethodArgs_data TA_taDataView_SelectFunForEditNm_MethArgs[]={
  {&TA_const_taString_ref,NULL,"function_nm",""},
  {&TA_SelectEdit_ptr,NULL,"editor",""},
  {&TA_const_taString_ref,NULL,"extra_label",""},
  NULL};
static MethodArgs_data TA_taDataView_DataLinkDestroying_MethArgs[]={
  {&TA_taDataLink_ptr,NULL,"dl",""},
  NULL};
static MethodArgs_data TA_taDataView_DataDataChanged_MethArgs[]={
  {&TA_taDataLink_ptr,NULL,"dl",""},
  {&TA_int,NULL,"dcr",""},
  {&TA_void_ptr,NULL,"op1",""},
  {&TA_void_ptr,NULL,"op2",""},
  NULL};
static MethodArgs_data TA_taDataView_SetData_MethArgs[]={
  {&TA_taBase_ptr,NULL,"ta",""},
  NULL};
static MethodArgs_data TA_taDataView_DataUpdateAfterEdit_Child_MethArgs[]={
  {&TA_taDataView_ptr,NULL,"chld",""},
  NULL};
static MethodArgs_data TA_taDataView_ChildClearing_MethArgs[]={
  {&TA_taDataView_ptr,NULL,"child",""},
  NULL};
static MethodArgs_data TA_taDataView_ChildRendered_MethArgs[]={
  {&TA_taDataView_ptr,NULL,"child",""},
  NULL};
static MethodArgs_data TA_taDataView_CloseChild_MethArgs[]={
  {&TA_taDataView_ptr,NULL,"child",""},
  NULL};
static MethodArgs_data TA_taDataView_Clear_MethArgs[]={
  {&TA_taDataView_ptr,NULL,"par"," __null"},
  NULL};
static MethodArgs_data TA_taDataView_DoActions_MethArgs[]={
  {NULL,"::DataViewAction","acts",""},
  NULL};
static MethodArgs_data TA_taDataView_ItemRemoving_MethArgs[]={
  {&TA_taDataView_ptr,NULL,"item",""},
  NULL};
static MethodDef_data TA_taDataView_MethodDef[]={
  {&TA_taBase_ptr,NULL,"New"," Create n_objs objects of given type (type is optional)","CAT_ObjectMgmt ","",
    0,2,0,1,0,NULL,cssElCFun_taDataView_New_stub,TA_taDataView_New_MethArgs},
  {&TA_bool,NULL,"HasBaseFlag"," true if flag set, or if multiple, any set","CAT_ObjectMgmt ","",
    0,1,-1,0,0,NULL,cssElCFun_taDataView_HasBaseFlag_stub,TA_taDataView_HasBaseFlag_MethArgs},
  {&TA_void,NULL,"SetBaseFlag"," sets the flag(s)","CAT_ObjectMgmt ","",
    0,1,-1,0,0,NULL,cssElCFun_taDataView_SetBaseFlag_stub,TA_taDataView_SetBaseFlag_MethArgs},
  {&TA_void,NULL,"ClearBaseFlag"," clears the flag(s)","CAT_ObjectMgmt ","",
    0,1,-1,0,0,NULL,cssElCFun_taDataView_ClearBaseFlag_stub,TA_taDataView_ClearBaseFlag_MethArgs},
  {&TA_int,NULL,"GetIndex"," object's index within an owner list. cached by some objs.","CAT_ObjectMgmt ","",
    0,0,-1,1,0,NULL,cssElCFun_taDataView_GetIndex_stub,NULL},
  {&TA_int,NULL,"GetEnabled"," for items that support an enabled/disabled state; -1=n/a, 0=disabled, 1=enabled (note: (bool)-1 = true)","","",
    0,0,-1,1,0,NULL,cssElCFun_taDataView_GetEnabled_stub,NULL},
  {&TA_void,NULL,"SetEnabled","","","",
    0,1,-1,1,0,NULL,cssElCFun_taDataView_SetEnabled_stub,TA_taDataView_SetEnabled_MethArgs},
  {&TA_taList_impl_ptr,NULL,"children_"," for lists, and for taOBase w/ default children","","",
    0,0,-1,1,0,NULL,cssElCFun_taDataView_children__stub,NULL},
  {&TA_TAPtr,NULL,"GetOwner","","","",
    3,1,-1,0,0,NULL,cssElCFun_taDataView_GetOwner_stub,TA_taDataView_GetOwner_MethArgs},
  {&TA_taString,NULL,"GetPath"," get path without name informtation, stop at par_stop if non-null","CAT_ObjectMgmt ","",
    0,2,0,1,0,NULL,cssElCFun_taDataView_GetPath_stub,TA_taDataView_GetPath_MethArgs},
  {&TA_TAPtr,NULL,"FindFromPath"," find object from path (starting from this, and position start of the path)","CAT_ObjectMgmt ","",
    0,3,1,1,0,NULL,cssElCFun_taDataView_FindFromPath_stub,TA_taDataView_FindFromPath_MethArgs},
  {&TA_bool,NULL,"SetFileName"," set file name for object","CAT_File ","",
    0,1,-1,1,0,NULL,cssElCFun_taDataView_SetFileName_stub,TA_taDataView_SetFileName_MethArgs},
  {&TA_taString,NULL,"GetFileName"," get file name object was last saved with","CAT_File ","",
    0,0,-1,1,0,NULL,cssElCFun_taDataView_GetFileName_stub,NULL},
  {&TA_taString,NULL,"GetFileNameFmProject"," get file name from project file name -- useful for saving files associated with the project; ext = extension; tag = additional tag; subdir = additional directory after any existing in project name; fname = proj->base_name (subdir) + tag + ext; if dmem_proc_no, add dmem proc no to file name. empty if project not found","CAT_File ","",
    0,4,1,1,0,NULL,cssElCFun_taDataView_GetFileNameFmProject_stub,TA_taDataView_GetFileNameFmProject_MethArgs},
  {&TA_int,NULL,"Load_strm"," Load object data from a file -- sets pointer to loaded obj if non-null: could actually load a different object than this (e.g. if this is a list or group)","CAT_File ","",
    0,3,1,1,0,NULL,cssElCFun_taDataView_Load_strm_stub,TA_taDataView_Load_strm_MethArgs},
  {&TA_int,NULL,"Load"," Load object data from given file name (if empty, prompt user for a name) -- sets pointer to loaded obj if non-null: could actually load a different object than this (e.g. if this is a list or group)","MENU MENU_ON_Object ARGC_0 CAT_File ","",
    0,3,0,1,0,NULL,cssElCFun_taDataView_Load_stub,TA_taDataView_Load_MethArgs},
  {&TA_int,NULL,"Save_strm"," Save object data to a file stream","CAT_File ","",
    0,3,1,1,0,NULL,cssElCFun_taDataView_Save_strm_stub,TA_taDataView_Save_strm_MethArgs},
  {&TA_int,NULL,"Save"," saves the object to a file using current file name (from GetFileName() function); if context='' then default is used","MENU MENU_ON_Object ARGC_0 CAT_File ","",
    0,1,0,1,0,NULL,cssElCFun_taDataView_Save_stub,TA_taDataView_Save_MethArgs},
  {&TA_int,NULL,"SaveAs"," Saves object data to a new file -- if fname is empty, it prompts the user; if context='' then default is used","MENU ARGC_0 CAT_File ","",
    0,2,0,1,0,NULL,cssElCFun_taDataView_SaveAs_stub,TA_taDataView_SaveAs_MethArgs},
  {&TA_void,NULL,"UpdateAfterEdit"," called after editing, or any user change to members (eg. in the interface, script)","CAT_ObjectMgmt ","",
    0,0,-1,1,0,NULL,cssElCFun_taDataView_UpdateAfterEdit_stub,NULL},
  {&TA_void,NULL,"UpdateAllViews"," called after data changes, to update views","CAT_Display ","",
    0,0,-1,1,0,NULL,cssElCFun_taDataView_UpdateAllViews_stub,NULL},
  {&TA_void,NULL,"StructUpdate"," bracket structural changes with (nestable) true/false calls;","CAT_ObjectMgmt ","",
    0,1,-1,0,0,NULL,cssElCFun_taDataView_StructUpdate_stub,TA_taDataView_StructUpdate_MethArgs},
  {&TA_void,NULL,"DataUpdate"," bracket data value changes with (nestable) true/false calls;","CAT_ObjectMgmt ","",
    0,1,-1,0,0,NULL,cssElCFun_taDataView_DataUpdate_stub,TA_taDataView_DataUpdate_MethArgs},
  {&TA_void,NULL,"setDirty"," set the dirty flag indicating a change in object values; 'true' gets forwarded up; 'false' does nothing","CAT_ObjectMgmt ","",
    0,1,-1,1,0,NULL,cssElCFun_taDataView_setDirty_stub,TA_taDataView_setDirty_MethArgs},
  {&TA_bool,NULL,"CheckConfig"," check the configuration of this object and all its children (defaults to no confirm of success)","CAT_ObjectMgmt ","",
    0,1,0,0,0,NULL,cssElCFun_taDataView_CheckConfig_stub,TA_taDataView_CheckConfig_MethArgs},
  {&TA_bool,NULL,"CheckConfig_Gui"," check the configuration of this object and all its children -- failed items highlighted in red, items with failed children in yellow","MENU MENU_ON_Object CAT_ObjectMgmt ARGC_0 LABEL_CheckConfig ","",
    0,2,0,0,0,NULL,cssElCFun_taDataView_CheckConfig_Gui_stub,TA_taDataView_CheckConfig_Gui_MethArgs},
  {&TA_bool,NULL,"CopyFrom"," Copy from given object into this object","MENU MENU_ON_Object MENU_SEP_BEFORE TYPE_ON_this NO_SCOPE CAT_ObjectMgmt ","",
    0,1,-1,1,0,NULL,cssElCFun_taDataView_CopyFrom_stub,TA_taDataView_CopyFrom_MethArgs},
  {&TA_bool,NULL,"CopyTo"," Copy to given object from this object","MENU TYPE_ON_this NO_SCOPE CAT_ObjectMgmt ","",
    0,1,-1,1,0,NULL,cssElCFun_taDataView_CopyTo_stub,TA_taDataView_CopyTo_MethArgs},
  {&TA_bool,NULL,"DuplicateMe"," Make another copy of myself (done through owner)","MENU CONFIRM CAT_ObjectMgmt ","",
    0,0,-1,1,0,NULL,cssElCFun_taDataView_DuplicateMe_stub,NULL},
  {&TA_bool,NULL,"ChangeMyType"," Change me into a different type of object, copying current info (done through owner)","MENU TYPE_this CAT_ObjectMgmt ","",
    0,1,-1,1,0,NULL,cssElCFun_taDataView_ChangeMyType_stub,TA_taDataView_ChangeMyType_MethArgs},
  {&TA_bool,NULL,"InheritsFrom"," does this inherit from given type ","CAT_ObjectMgmt ","",
    1,1,-1,0,0,NULL,cssElCFun_taDataView_InheritsFrom_stub,TA_taDataView_InheritsFrom_MethArgs},
  {&TA_bool,NULL,"InheritsFromName"," does this inherit from given type name?","CAT_ObjectMgmt ","",
    0,1,-1,0,0,NULL,cssElCFun_taDataView_InheritsFromName_stub,TA_taDataView_InheritsFromName_MethArgs},
  {&TA_taString,NULL,"GetEnumString"," get the name corresponding to given enum value in enum type enum_tp_nm","CAT_ObjectMgmt ","",
    0,2,-1,1,0,NULL,cssElCFun_taDataView_GetEnumString_stub,TA_taDataView_GetEnumString_MethArgs},
  {&TA_int,NULL,"GetEnumVal"," get the enum value corresponding to the given enum name (-1 if not found), and sets enum_tp_nm to name of type this enum belongs in (empty if not found)","CAT_ObjectMgmt ","",
    0,2,1,1,0,NULL,cssElCFun_taDataView_GetEnumVal_stub,TA_taDataView_GetEnumVal_MethArgs},
  {&TA_UserDataItem_List_ptr,NULL,"GetUserDataList"," gets the userdatalist for this class","CAT_UserData EXPERT ","",
    0,1,0,1,0,NULL,cssElCFun_taDataView_GetUserDataList_stub,TA_taDataView_GetUserDataList_MethArgs},
  {&TA_bool,NULL,"HasUserData"," returns true if UserData exists for this key (case sens)","CAT_UserData EXPERT ","",
    0,1,-1,1,0,NULL,cssElCFun_taDataView_HasUserData_stub,TA_taDataView_HasUserData_MethArgs},
  {&TA_const_Variant,NULL,"GetUserData"," get specified user data; returns class default value if not present, or nilVariant if no default user data or class doesn't support UserData","CAT_UserData ","",
    0,1,-1,1,0,NULL,cssElCFun_taDataView_GetUserData_stub,TA_taDataView_GetUserData_MethArgs},
  {&TA_bool,NULL,"GetUserDataAsBool"," get specified user data as bool (see GetUserData)","CAT_UserData EXPERT ","",
    0,1,-1,0,0,NULL,cssElCFun_taDataView_GetUserDataAsBool_stub,TA_taDataView_GetUserDataAsBool_MethArgs},
  {&TA_int,NULL,"GetUserDataAsInt"," get specified user data as int (see GetUserData)","CAT_UserData EXPERT ","",
    0,1,-1,0,0,NULL,cssElCFun_taDataView_GetUserDataAsInt_stub,TA_taDataView_GetUserDataAsInt_MethArgs},
  {&TA_float,NULL,"GetUserDataAsFloat"," get specified user data as float (see GetUserData)","CAT_UserData EXPERT ","",
    0,1,-1,0,0,NULL,cssElCFun_taDataView_GetUserDataAsFloat_stub,TA_taDataView_GetUserDataAsFloat_MethArgs},
  {&TA_double,NULL,"GetUserDataAsDouble"," get specified user data as double (see GetUserData)","CAT_UserData EXPERT ","",
    0,1,-1,0,0,NULL,cssElCFun_taDataView_GetUserDataAsDouble_stub,TA_taDataView_GetUserDataAsDouble_MethArgs},
  {&TA_const_taString,NULL,"GetUserDataAsString"," get specified user data as String (see GetUserData)","CAT_UserData EXPERT ","",
    0,1,-1,0,0,NULL,cssElCFun_taDataView_GetUserDataAsString_stub,TA_taDataView_GetUserDataAsString_MethArgs},
  {&TA_void,NULL,"SetUserData"," set user data; ignored if class does not support user data","CAT_UserData EXPERT ","",
    0,2,-1,1,0,NULL,cssElCFun_taDataView_SetUserData_stub,TA_taDataView_SetUserData_MethArgs},
  {&TA_int,NULL,"Edit"," Edit this object using the gui","MENU ARGC_0 MENU_ON_Object MENU_CONTEXT NO_SCRIPT CAT_Display ","",
    0,0,-1,1,0,NULL,cssElCFun_taDataView_Edit_stub,NULL},
  {&TA_int,NULL,"EditDialog"," Edit this object in a popup dialog using the gui","MENU ARGC_0 MENU_ON_Object MENU_CONTEXT NO_SCRIPT CAT_Display ","",
    0,1,0,1,0,NULL,cssElCFun_taDataView_EditDialog_stub,TA_taDataView_EditDialog_MethArgs},
  {&TA_void,NULL,"BrowseMe"," show this object in its own browser ","MENU MENU_ON_Object MENU_SEP_AFTER MENU_CONTEXT CAT_Display ","",
    0,0,-1,1,0,NULL,cssElCFun_taDataView_BrowseMe_stub,NULL},
  {&TA_bool,NULL,"ReShowEdit"," reshows any open edit dialogs for this object","CAT_Display ","",
    0,1,0,1,0,NULL,cssElCFun_taDataView_ReShowEdit_stub,TA_taDataView_ReShowEdit_MethArgs},
  {&TA_void,NULL,"CallFun"," call function of given name on this object, prompting for args using gui interface","CAT_ObjectMgmt ","",
    0,1,-1,1,0,NULL,cssElCFun_taDataView_CallFun_stub,TA_taDataView_CallFun_MethArgs},
  {&TA_bool,NULL,"SelectForEdit"," select a given member for editing in an edit dialog that collects selected members and methods from different objects (if editor is NULL, a new one is created in .edits). returns false if method was already selected","MENU CAT_Display NULL_OK ","",
    0,3,-1,1,0,NULL,cssElCFun_taDataView_SelectForEdit_stub,TA_taDataView_SelectForEdit_MethArgs},
  {&TA_bool,NULL,"SelectForEditNm"," select a given member (by name) for editing in an edit dialog that collects selected members from different objects (if editor is NULL, a new one is created in .edits). returns false if method was already selected","","",
    0,3,-1,1,0,NULL,cssElCFun_taDataView_SelectForEditNm_stub,TA_taDataView_SelectForEditNm_MethArgs},
  {&TA_int,NULL,"SelectForEditSearch"," search among this object and any sub-objects for members containing given string, and add to given select editor (if NULL, a new one is created in .edits). returns number found","MENU NULL_OK CAT_Display ","",
    0,2,-1,1,0,NULL,cssElCFun_taDataView_SelectForEditSearch_stub,TA_taDataView_SelectForEditSearch_MethArgs},
  {&TA_bool,NULL,"SelectFunForEdit"," select a given function (method) for calling in a select edit dialog that collects selected members and methods from different objects (if editor is NULL, a new one is created in .edits). returns false if method was already selected","MENU NULL_OK CAT_Display ","",
    0,3,-1,1,0,NULL,cssElCFun_taDataView_SelectFunForEdit_stub,TA_taDataView_SelectFunForEdit_MethArgs},
  {&TA_bool,NULL,"SelectFunForEditNm"," select a given method (by name) for editing in an edit dialog that collects selected members from different objects (if editor is NULL, a new one is created in .edits) returns false if method was already selected","","",
    0,3,-1,1,0,NULL,cssElCFun_taDataView_SelectFunForEditNm_stub,TA_taDataView_SelectFunForEditNm_MethArgs},
  {&TA_void,NULL,"CloseLater"," PERMANENTLY Destroy this object! This is not Iconify.","MENU CONFIRM NO_REVERT_AFTER LABEL_Close_(Destroy) NO_MENU_CONTEXT CAT_ObjectMgmt ","",
    0,0,-1,1,0,NULL,cssElCFun_taDataView_CloseLater_stub,NULL},
  {&TA_void,NULL,"Help"," get help on using this object","MENU CAT_Display ","",
    0,0,-1,1,0,NULL,cssElCFun_taDataView_Help_stub,NULL},
  {&TA_void_ptr,NULL,"This"," reference to the 'this' pointer of the client object in taBase virtual TypeDef*	GetTypeDef() const;","","",
    0,0,-1,1,0,NULL,cssElCFun_taDataView_This_stub,NULL},
  {&TA_taiDataLink_ptr,NULL,"link","","","",
    0,0,-1,1,0,NULL,cssElCFun_taDataView_link_stub,NULL},
  {&TA_TypeDef_ptr,NULL,"GetDataTypeDef"," convenience function, default gets data type from link TypeDef of the data","","",
    0,0,-1,1,0,NULL,cssElCFun_taDataView_GetDataTypeDef_stub,NULL},
  {&TA_taDataLink_ptr,NULL,"link_","","","",
    0,0,-1,0,0,NULL,cssElCFun_taDataView_link__stub,NULL},
  {&TA_void,NULL,"DataLinkDestroying"," called by DataLink when destroying; it will remove datalink ref in dlc upon return called by DataLink when destroying; it will remove ","","",
    0,1,-1,1,0,NULL,cssElCFun_taDataView_DataLinkDestroying_stub,TA_taDataView_DataLinkDestroying_MethArgs},
  {&TA_void,NULL,"DataDataChanged","  called when the data item has changed, esp. ex lists and groups; dispatches to the DataXxx_impl's","","",
    0,4,-1,1,0,NULL,cssElCFun_taDataView_DataDataChanged_stub,TA_taDataView_DataDataChanged_MethArgs},
  {&TA_taBase_ptr,NULL,"data"," subclasses usually redefine a strongly typed version","","",
    0,0,-1,0,0,NULL,cssElCFun_taDataView_data_stub,NULL},
  {&TA_void,NULL,"SetData"," set the data to which this points -- must be subclass of data_base","MENU ","",
    0,1,-1,0,0,NULL,cssElCFun_taDataView_SetData_stub,TA_taDataView_SetData_MethArgs},
  {&TA_int,NULL,"dbuCnt"," batch update: -ve:data, 0:none, +ve:struct","","",
    0,0,-1,0,0,NULL,cssElCFun_taDataView_dbuCnt_stub,NULL},
  {&TA_int,NULL,"index"," convenience accessor","","",
    0,0,-1,0,0,NULL,cssElCFun_taDataView_index_stub,NULL},
  {&TA_bool,NULL,"isMapped"," for DataView classes, or anything w/ separate gui classes that get created distinct from view hierarchy","","",
    0,0,-1,1,0,NULL,cssElCFun_taDataView_isMapped_stub,NULL},
  {&TA_MemberDef_ptr,NULL,"md"," ISelectable property member stub","","",
    0,0,-1,1,0,NULL,cssElCFun_taDataView_md_stub,NULL},
  {&TA_int,NULL,"parDbuCnt"," dbu of parent(s); note: only sign is accurate, not necessarily value (optimized)","","",
    0,0,-1,1,0,NULL,cssElCFun_taDataView_parDbuCnt_stub,NULL},
  {&TA_bool,NULL,"hasParent"," encapsulated way to check for a par","","",
    0,0,-1,0,0,NULL,cssElCFun_taDataView_hasParent_stub,NULL},
  {&TA_taDataView_ptr,NULL,"parent"," typically lex override with strong type","","",
    0,0,-1,0,0,NULL,cssElCFun_taDataView_parent_stub,NULL},
  {&TA_TypeDef_ptr,NULL,"parentType"," the controlling parent -- note that when in a list, this is the list owner, not the list; overrride for strong check in SetOwner","","",
    0,0,-1,1,0,NULL,cssElCFun_taDataView_parentType_stub,NULL},
  {&TA_MemberDef_ptr,NULL,"GetDataMemberDef"," returns md if known and/or knowable (ex. NULL for list members)","","",
    0,0,-1,1,0,NULL,cssElCFun_taDataView_GetDataMemberDef_stub,NULL},
  {&TA_taString,NULL,"GetLabel"," returns a label suitable for tabview tabs, etc.","","",
    0,0,-1,1,0,NULL,cssElCFun_taDataView_GetLabel_stub,NULL},
  {&TA_void,NULL,"DataUpdateAfterEdit"," note: normally overrride the _impl","","",
    0,0,-1,1,0,NULL,cssElCFun_taDataView_DataUpdateAfterEdit_stub,NULL},
  {&TA_void,NULL,"DataUpdateAfterEdit_Child"," optionally called by child in its DUAE routine; must be added manually","","",
    0,1,-1,1,0,NULL,cssElCFun_taDataView_DataUpdateAfterEdit_Child_stub,TA_taDataView_DataUpdateAfterEdit_Child_MethArgs},
  {&TA_void,NULL,"ChildClearing"," override to implement par's portion of clear","","",
    0,1,-1,1,0,NULL,cssElCFun_taDataView_ChildClearing_stub,TA_taDataView_ChildClearing_MethArgs},
  {&TA_void,NULL,"ChildRendered"," override to implement par's portion of render","","",
    0,1,-1,1,0,NULL,cssElCFun_taDataView_ChildRendered_stub,TA_taDataView_ChildRendered_MethArgs},
  {&TA_void,NULL,"CloseChild","","","",
    0,1,-1,1,0,NULL,cssElCFun_taDataView_CloseChild_stub,TA_taDataView_CloseChild_MethArgs},
  {&TA_void,NULL,"Render"," renders the visible contents (usually override the _impls) -- MUST BE DEFINED IN SUB","","",
    0,0,-1,1,0,NULL,cssElCFun_taDataView_Render_stub,NULL},
  {&TA_void,NULL,"Clear"," clears the view (but doesn't delete any components) (usually override _impl)","","",
    0,1,0,1,0,NULL,cssElCFun_taDataView_Clear_stub,TA_taDataView_Clear_MethArgs},
  {&TA_void,NULL,"Reset"," clears, and deletes any components (usually override _impls)","","",
    0,0,-1,1,0,NULL,cssElCFun_taDataView_Reset_stub,NULL},
  {&TA_void,NULL,"Refresh"," for manual refreshes -- just the impl stuff, not structural stuff","","",
    0,0,-1,1,0,NULL,cssElCFun_taDataView_Refresh_stub,NULL},
  {&TA_void,NULL,"Unbind"," clears, and deletes any components (usually override _impls)","","",
    0,0,-1,1,0,NULL,cssElCFun_taDataView_Unbind_stub,NULL},
  {&TA_void,NULL,"DoActions"," do the indicated action(s) if safe in this context (ex loading, whether gui exists, etc.); par only needed when a _impl needs it","","",
    0,1,-1,1,0,NULL,cssElCFun_taDataView_DoActions_stub,TA_taDataView_DoActions_MethArgs},
  {&TA_void,NULL,"ItemRemoving"," items call this on the root item -- usually used by a viewer to insure item removed from things like sel lists","","",
    0,1,-1,1,0,NULL,cssElCFun_taDataView_ItemRemoving_stub,TA_taDataView_ItemRemoving_MethArgs},
  {&TA_void,NULL,"DataDestroying"," called when data is destroying (m_data will already be NULL)","","",
    0,0,-1,1,0,NULL,cssElCFun_taDataView_DataDestroying_stub,NULL},
  NULL};
static int taNBase::* TA_taNBase_MbrOff;
static MemberDef_data TA_taNBase_MemberDef[]={
  {&TA_taString,NULL,"name"," name of the object","","",
    *((ta_memb_ptr*)&(TA_taNBase_MbrOff=(int taNBase::*)(&taNBase::name))),0,NULL,0},
  NULL};
static int UserDataItem::* TA_UserDataItem_MbrOff;
static MemberDef_data TA_UserDataItem_MemberDef[]={
  {&TA_Variant,NULL,"value","","","",
    *((ta_memb_ptr*)&(TA_UserDataItem_MbrOff=(int UserDataItem::*)(&UserDataItem::value))),0,NULL,0},
  {&TA_taString,NULL,"desc"," optional description (typ. used for schema, not items)","NO_SAVE_EMPTY ","",
    *((ta_memb_ptr*)&(TA_UserDataItem_MbrOff=(int UserDataItem::*)(&UserDataItem::desc))),0,NULL,0},
  NULL};
static MethodArgs_data TA_UserDataItem_setValueAsVariant_MethArgs[]={
  {&TA_const_Variant_ref,NULL,"v",""},
  NULL};
static MethodDef_data TA_UserDataItem_MethodDef[]={
  {&TA_bool,NULL,"isSimple"," only true for UserDataItem class","","",
    0,0,-1,1,0,NULL,cssElCFun_UserDataItem_isSimple_stub,NULL},
  {&TA_const_Variant,NULL,"valueAsVariant","","","",
    0,0,-1,1,0,NULL,cssElCFun_UserDataItem_valueAsVariant_stub,NULL},
  {&TA_bool,NULL,"setValueAsVariant","","","",
    0,1,-1,1,0,NULL,cssElCFun_UserDataItem_setValueAsVariant_stub,TA_UserDataItem_setValueAsVariant_MethArgs},
  NULL};
static MemberDef_data TA_tabMisc_MemberDef[]={
  {&TA_taRootBase_ptr,NULL,"root"," root of the structural object hierarchy","","",
    (ta_memb_ptr)NULL,1,(void*)(&tabMisc::root),0},
  {&TA_taBase_PtrList,NULL,"delayed_remove"," list of objs to be removed in the wait process (e.g. when objs delete themselves)","","",
    (ta_memb_ptr)NULL,1,(void*)(&tabMisc::delayed_remove),0},
  {&TA_taBase_PtrList,NULL,"delayed_updateafteredit"," list of objs to be update-after-edit'd in the wait process","","",
    (ta_memb_ptr)NULL,1,(void*)(&tabMisc::delayed_updateafteredit),0},
  {&TA_taBase_PtrList,NULL,"post_load_opr"," objects that need to have operations performed on them after loading","HIDDEN ","",
    (ta_memb_ptr)NULL,1,(void*)(&tabMisc::post_load_opr),0},
  NULL};
static MethodArgs_data TA_tabMisc_Close_Obj_MethArgs[]={
  {&TA_TAPtr,NULL,"obj",""},
  NULL};
static MethodArgs_data TA_tabMisc_DelayedUpdateAfterEdit_MethArgs[]={
  {&TA_TAPtr,NULL,"obj",""},
  NULL};
static MethodDef_data TA_tabMisc_MethodDef[]={
  {&TA_void,NULL,"Close_Obj"," call this to implement closing object function","","",
    0,1,-1,0,1,(ta_void_fun)(tabMisc::Close_Obj),cssElCFun_tabMisc_Close_Obj_stub,TA_tabMisc_Close_Obj_MethArgs},
  {&TA_void,NULL,"DeleteRoot"," get rid of root, if not nuked already","","",
    0,0,-1,0,1,(ta_void_fun)(tabMisc::DeleteRoot),cssElCFun_tabMisc_DeleteRoot_stub,NULL},
  {&TA_void,NULL,"WaitProc"," wait process function: remove objects from groups, update others","","",
    0,0,-1,0,1,(ta_void_fun)(tabMisc::WaitProc),cssElCFun_tabMisc_WaitProc_stub,NULL},
  {&TA_void,NULL,"DelayedUpdateAfterEdit"," call update-after-edit on object in wait process (in case this does other kinds of damage..)","","",
    0,1,-1,0,1,(ta_void_fun)(tabMisc::DelayedUpdateAfterEdit),cssElCFun_tabMisc_DelayedUpdateAfterEdit_stub,TA_tabMisc_DelayedUpdateAfterEdit_MethArgs},
  NULL};
static MethodDef_data TA_taSmartRefT_taBase__MethodDef[]={
  {NULL,"::taBase_ptr","ptr"," typed alias for the base version","","",
    0,0,-1,0,0,NULL,cssElCFun_taSmartRefT_taBase__ptr_stub,NULL},
  {&TA_TypeDef_ptr,NULL,"GetBaseType","","","",
    0,0,-1,1,0,NULL,cssElCFun_taSmartRefT_taBase__GetBaseType_stub,NULL},
  NULL};
static MethodDef_data TA_taBaseRef_MethodDef[]={
  {&TA_TypeDef_ptr,NULL,"GetDataTypeDef"," convenience function, default gets data type from link TypeDef of the data","","",
    0,0,-1,1,0,NULL,cssElCFun_taBaseRef_GetDataTypeDef_stub,NULL},
  NULL};
static int taFBase::* TA_taFBase_MbrOff;
static MemberDef_data TA_taFBase_MemberDef[]={
  {&TA_taString,NULL,"desc"," description of this object: what does it do, how should it be used, etc","EDIT_DIALOG ","",
    *((ta_memb_ptr*)&(TA_taFBase_MbrOff=(int taFBase::*)(&taFBase::desc))),0,NULL,0},
  {&TA_taString,NULL,"file_name"," the current filename for this object","READ_ONLY NO_SAVE SHOW ","",
    *((ta_memb_ptr*)&(TA_taFBase_MbrOff=(int taFBase::*)(&taFBase::file_name))),0,NULL,0},
  NULL};
static MethodArgs_data TA_taPtrList_taBase__SafeEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taPtrList_taBase__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taPtrList_taBase__Edit_El_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taBase__FindName_MethArgs[]={
  {&TA_const_taString_ref,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","no_index"},
  NULL};
static MethodArgs_data TA_taPtrList_taBase__AddUniqNameOld_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taBase__LinkUniqNameOld_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taBase__FindEl_MethArgs[]={
  {NULL,"::const_taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taBase__AddOnly_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taBase__Add_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taBase__AddUnique_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taBase__AddUniqNameNew_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taBase__Insert_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taPtrList_taBase__ReplaceEl_MethArgs[]={
  {NULL,"::taBase_ptr","old_it",""},
  {NULL,"::taBase_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_taBase__ReplaceName_MethArgs[]={
  {&TA_const_taString_ref,NULL,"old_nm",""},
  {NULL,"::taBase_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_taBase__ReplaceIdx_MethArgs[]={
  {&TA_int,NULL,"old_idx",""},
  {NULL,"::taBase_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_taBase__RemoveEl_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taBase__DuplicateEl_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taBase__Link_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taBase__LinkUnique_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taBase__LinkUniqNameNew_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taBase__InsertLink_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  {&TA_int,NULL,"idx"," -1"},
  NULL};
static MethodArgs_data TA_taPtrList_taBase__ReplaceLinkEl_MethArgs[]={
  {NULL,"::taBase_ptr","old_it",""},
  {NULL,"::taBase_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_taBase__ReplaceLinkName_MethArgs[]={
  {&TA_const_taString_ref,NULL,"old_nm",""},
  {NULL,"::taBase_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_taBase__ReplaceLinkIdx_MethArgs[]={
  {&TA_int,NULL,"old_idx",""},
  {NULL,"::taBase_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_taBase__Push_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taBase__MoveEl_MethArgs[]={
  {NULL,"::taBase_ptr","from",""},
  {NULL,"::taBase_ptr","to",""},
  NULL};
static MethodArgs_data TA_taPtrList_taBase__Transfer_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taBase__MoveBefore_MethArgs[]={
  {NULL,"::taBase_ptr","trg",""},
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_taBase__MoveAfter_MethArgs[]={
  {NULL,"::taBase_ptr","trg",""},
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodDef_data TA_taPtrList_taBase__MethodDef[]={
  {NULL,"::taBase_ptr","SafeEl"," element at index","","",
    0,1,-1,0,0,NULL,cssElCFun_taPtrList_taBase__SafeEl_stub,TA_taPtrList_taBase__SafeEl_MethArgs},
  {NULL,"::taBase_ptr","FastEl"," fast element (no range checking)","","",
    0,1,-1,0,0,NULL,cssElCFun_taPtrList_taBase__FastEl_stub,TA_taPtrList_taBase__FastEl_MethArgs},
  {NULL,"::taBase_ptr","Edit_El"," Edit given list item","MENU MENU_ON_Edit USE_RVAL ARG_ON_OBJ ","",
    0,1,-1,0,0,NULL,cssElCFun_taPtrList_taBase__Edit_El_stub,TA_taPtrList_taBase__Edit_El_MethArgs},
  {NULL,"::taBase_ptr","FindName"," find given named element (NULL = not here), sets idx","","",
    0,2,1,1,0,NULL,cssElCFun_taPtrList_taBase__FindName_stub,TA_taPtrList_taBase__FindName_MethArgs},
  {NULL,"::taBase_ptr","Pop"," pop the last element off the stack","","",
    0,0,-1,1,0,NULL,cssElCFun_taPtrList_taBase__Pop_stub,NULL},
  {NULL,"::taBase_ptr","Peek"," peek at the last element on the stack","","",
    0,0,-1,1,0,NULL,cssElCFun_taPtrList_taBase__Peek_stub,NULL},
  {NULL,"::taBase_ptr","AddUniqNameOld"," add so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,1,0,NULL,cssElCFun_taPtrList_taBase__AddUniqNameOld_stub,TA_taPtrList_taBase__AddUniqNameOld_MethArgs},
  {NULL,"::taBase_ptr","LinkUniqNameOld"," link so that name is unique, old used if dupl, returns one used","","",
    0,1,-1,1,0,NULL,cssElCFun_taPtrList_taBase__LinkUniqNameOld_stub,TA_taPtrList_taBase__LinkUniqNameOld_MethArgs},
  {&TA_int,NULL,"FindEl"," find element in list (-1 if not there)","","",
    0,1,-1,1,0,NULL,cssElCFun_taPtrList_taBase__FindEl_stub,TA_taPtrList_taBase__FindEl_MethArgs},
  {&TA_void,NULL,"AddOnly"," append a new pointer to end of list, does not own it or do anything else","","",
    0,1,-1,1,0,NULL,cssElCFun_taPtrList_taBase__AddOnly_stub,TA_taPtrList_taBase__AddOnly_MethArgs},
  {&TA_void,NULL,"Add"," add element to the list and 'own' item","","",
    0,1,-1,1,0,NULL,cssElCFun_taPtrList_taBase__Add_stub,TA_taPtrList_taBase__Add_MethArgs},
  {&TA_bool,NULL,"AddUnique"," add so that object is unique, true if unique","","",
    0,1,-1,1,0,NULL,cssElCFun_taPtrList_taBase__AddUnique_stub,TA_taPtrList_taBase__AddUnique_MethArgs},
  {&TA_bool,NULL,"AddUniqNameNew"," add so that name is unique, true if unique, new replaces existing","","",
    0,1,-1,1,0,NULL,cssElCFun_taPtrList_taBase__AddUniqNameNew_stub,TA_taPtrList_taBase__AddUniqNameNew_MethArgs},
  {&TA_bool,NULL,"Insert"," Add or insert element at idx (-1 for end)","","",
    0,2,-1,1,0,NULL,cssElCFun_taPtrList_taBase__Insert_stub,TA_taPtrList_taBase__Insert_MethArgs},
  {&TA_bool,NULL,"ReplaceEl"," Replace old element with new element","","",
    0,2,-1,1,0,NULL,cssElCFun_taPtrList_taBase__ReplaceEl_stub,TA_taPtrList_taBase__ReplaceEl_MethArgs},
  {&TA_bool,NULL,"ReplaceName","","","",
    0,2,-1,1,0,NULL,cssElCFun_taPtrList_taBase__ReplaceName_stub,TA_taPtrList_taBase__ReplaceName_MethArgs},
  {&TA_bool,NULL,"ReplaceIdx"," replace element at index with the new one","","",
    0,2,-1,1,0,NULL,cssElCFun_taPtrList_taBase__ReplaceIdx_stub,TA_taPtrList_taBase__ReplaceIdx_MethArgs},
  {&TA_bool,NULL,"RemoveEl"," Remove given item from list","MENU ARG_ON_OBJ ","",
    0,1,-1,1,0,NULL,cssElCFun_taPtrList_taBase__RemoveEl_stub,TA_taPtrList_taBase__RemoveEl_MethArgs},
  {&TA_bool,NULL,"DuplicateEl"," Duplicate given list item and Add to list","MENU ARG_ON_OBJ ","",
    0,1,-1,1,0,NULL,cssElCFun_taPtrList_taBase__DuplicateEl_stub,TA_taPtrList_taBase__DuplicateEl_MethArgs},
  {&TA_void,NULL,"Link"," Link an item to list without owning it","","",
    0,1,-1,1,0,NULL,cssElCFun_taPtrList_taBase__Link_stub,TA_taPtrList_taBase__Link_MethArgs},
  {&TA_bool,NULL,"LinkUnique"," link so that object is unique, true if unique","","",
    0,1,-1,1,0,NULL,cssElCFun_taPtrList_taBase__LinkUnique_stub,TA_taPtrList_taBase__LinkUnique_MethArgs},
  {&TA_bool,NULL,"LinkUniqNameNew"," link so that name is unique, true if unique, new replaces existing","","",
    0,1,-1,1,0,NULL,cssElCFun_taPtrList_taBase__LinkUniqNameNew_stub,TA_taPtrList_taBase__LinkUniqNameNew_MethArgs},
  {&TA_bool,NULL,"InsertLink"," Insert a link at index (-1 for end)","MENU ","",
    0,2,1,1,0,NULL,cssElCFun_taPtrList_taBase__InsertLink_stub,TA_taPtrList_taBase__InsertLink_MethArgs},
  {&TA_bool,NULL,"ReplaceLinkEl"," replace given element (if on list) with the new one","","",
    0,2,-1,1,0,NULL,cssElCFun_taPtrList_taBase__ReplaceLinkEl_stub,TA_taPtrList_taBase__ReplaceLinkEl_MethArgs},
  {&TA_bool,NULL,"ReplaceLinkName"," replace given named element (if on list) with the new one","","",
    0,2,-1,1,0,NULL,cssElCFun_taPtrList_taBase__ReplaceLinkName_stub,TA_taPtrList_taBase__ReplaceLinkName_MethArgs},
  {&TA_bool,NULL,"ReplaceLinkIdx"," replace element with a link to the new one","","",
    0,2,-1,1,0,NULL,cssElCFun_taPtrList_taBase__ReplaceLinkIdx_stub,TA_taPtrList_taBase__ReplaceLinkIdx_MethArgs},
  {&TA_void,NULL,"Push"," push item on stack (for temporary use, not 'owned')","","",
    0,1,-1,1,0,NULL,cssElCFun_taPtrList_taBase__Push_stub,TA_taPtrList_taBase__Push_MethArgs},
  {&TA_bool,NULL,"MoveEl"," Move item (from) to position of (to)","MENU ARG_ON_OBJ ","",
    0,2,-1,1,0,NULL,cssElCFun_taPtrList_taBase__MoveEl_stub,TA_taPtrList_taBase__MoveEl_MethArgs},
  {&TA_bool,NULL,"Transfer"," Transfer item to this list","MENU MENU_ON_Edit NO_SCOPE ","",
    0,1,-1,1,0,NULL,cssElCFun_taPtrList_taBase__Transfer_stub,TA_taPtrList_taBase__Transfer_MethArgs},
  {&TA_bool,NULL,"MoveBefore"," move item so that it appears just before the target item trg in the list","","",
    0,2,-1,1,0,NULL,cssElCFun_taPtrList_taBase__MoveBefore_stub,TA_taPtrList_taBase__MoveBefore_MethArgs},
  {&TA_bool,NULL,"MoveAfter"," move item so that it appears just after the target item trg in the list","","",
    0,2,-1,1,0,NULL,cssElCFun_taPtrList_taBase__MoveAfter_stub,TA_taPtrList_taBase__MoveAfter_MethArgs},
  NULL};
static MethodArgs_data TA_taPtrList_base_taBase__FindEl_MethArgs[]={
  {NULL,"::const_taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_base_taBase__AddOnly_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_base_taBase__Add_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_base_taBase__AddUnique_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_base_taBase__AddUniqNameNew_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_base_taBase__Insert_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  {&TA_int,NULL,"where",""},
  NULL};
static MethodArgs_data TA_taPtrList_base_taBase__ReplaceEl_MethArgs[]={
  {NULL,"::taBase_ptr","old_it",""},
  {NULL,"::taBase_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_base_taBase__ReplaceName_MethArgs[]={
  {&TA_const_taString_ref,NULL,"old_nm",""},
  {NULL,"::taBase_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_base_taBase__ReplaceIdx_MethArgs[]={
  {&TA_int,NULL,"old_idx",""},
  {NULL,"::taBase_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_base_taBase__RemoveEl_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_base_taBase__DuplicateEl_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_base_taBase__Link_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_base_taBase__LinkUnique_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_base_taBase__LinkUniqNameNew_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_base_taBase__InsertLink_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  {&TA_int,NULL,"idx"," -1"},
  NULL};
static MethodArgs_data TA_taPtrList_base_taBase__ReplaceLinkEl_MethArgs[]={
  {NULL,"::taBase_ptr","old_it",""},
  {NULL,"::taBase_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_base_taBase__ReplaceLinkName_MethArgs[]={
  {&TA_const_taString_ref,NULL,"old_nm",""},
  {NULL,"::taBase_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_base_taBase__ReplaceLinkIdx_MethArgs[]={
  {&TA_int,NULL,"old_idx",""},
  {NULL,"::taBase_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taPtrList_base_taBase__Push_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_base_taBase__MoveEl_MethArgs[]={
  {NULL,"::taBase_ptr","from",""},
  {NULL,"::taBase_ptr","to",""},
  NULL};
static MethodArgs_data TA_taPtrList_base_taBase__Transfer_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_base_taBase__MoveBefore_MethArgs[]={
  {NULL,"::taBase_ptr","trg",""},
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taPtrList_base_taBase__MoveAfter_MethArgs[]={
  {NULL,"::taBase_ptr","trg",""},
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodDef_data TA_taPtrList_base_taBase__MethodDef[]={
  {&TA_int,NULL,"FindEl"," find element in list (-1 if not there)","CAT_Access ","",
    0,1,-1,1,0,NULL,cssElCFun_taPtrList_base_taBase__FindEl_stub,TA_taPtrList_base_taBase__FindEl_MethArgs},
  {&TA_void,NULL,"AddOnly"," append a new pointer to end of list -- does not own","CAT_Modify ","",
    0,1,-1,1,0,NULL,cssElCFun_taPtrList_base_taBase__AddOnly_stub,TA_taPtrList_base_taBase__AddOnly_MethArgs},
  {&TA_void,NULL,"Add"," add element to the list and 'own' item","CAT_Modify ","",
    0,1,-1,1,0,NULL,cssElCFun_taPtrList_base_taBase__Add_stub,TA_taPtrList_base_taBase__Add_MethArgs},
  {&TA_bool,NULL,"AddUnique"," add so that object is unique, true if unique","CAT_Modify ","",
    0,1,-1,1,0,NULL,cssElCFun_taPtrList_base_taBase__AddUnique_stub,TA_taPtrList_base_taBase__AddUnique_MethArgs},
  {&TA_bool,NULL,"AddUniqNameNew"," add so that name is unique, true if unique, new replaces existing","CAT_Modify ","",
    0,1,-1,1,0,NULL,cssElCFun_taPtrList_base_taBase__AddUniqNameNew_stub,TA_taPtrList_base_taBase__AddUniqNameNew_MethArgs},
  {&TA_bool,NULL,"Insert"," insert element at index (-1 for end)","CAT_Modify ","",
    0,2,-1,1,0,NULL,cssElCFun_taPtrList_base_taBase__Insert_stub,TA_taPtrList_base_taBase__Insert_MethArgs},
  {&TA_bool,NULL,"ReplaceEl"," replace given element with the new one","CAT_Modify ","",
    0,2,-1,1,0,NULL,cssElCFun_taPtrList_base_taBase__ReplaceEl_stub,TA_taPtrList_base_taBase__ReplaceEl_MethArgs},
  {&TA_bool,NULL,"ReplaceName"," replace named element with the new one","CAT_Modify ","",
    0,2,-1,1,0,NULL,cssElCFun_taPtrList_base_taBase__ReplaceName_stub,TA_taPtrList_base_taBase__ReplaceName_MethArgs},
  {&TA_bool,NULL,"ReplaceIdx"," replace element at index with the new one","CAT_Modify ","",
    0,2,-1,1,0,NULL,cssElCFun_taPtrList_base_taBase__ReplaceIdx_stub,TA_taPtrList_base_taBase__ReplaceIdx_MethArgs},
  {&TA_bool,NULL,"RemoveEl"," Remove given item from list","MENU ARG_ON_OBJ CAT_Modify ","",
    0,1,-1,1,0,NULL,cssElCFun_taPtrList_base_taBase__RemoveEl_stub,TA_taPtrList_base_taBase__RemoveEl_MethArgs},
  {&TA_bool,NULL,"DuplicateEl"," Duplicate given list item and Add to list","MENU ARG_ON_OBJ CAT_Modify ","",
    0,1,-1,1,0,NULL,cssElCFun_taPtrList_base_taBase__DuplicateEl_stub,TA_taPtrList_base_taBase__DuplicateEl_MethArgs},
  {&TA_void,NULL,"Link"," Link an item to list without owning it","CAT_Modify ","",
    0,1,-1,1,0,NULL,cssElCFun_taPtrList_base_taBase__Link_stub,TA_taPtrList_base_taBase__Link_MethArgs},
  {&TA_bool,NULL,"LinkUnique"," link so that object is unique, true if unique","CAT_Modify ","",
    0,1,-1,1,0,NULL,cssElCFun_taPtrList_base_taBase__LinkUnique_stub,TA_taPtrList_base_taBase__LinkUnique_MethArgs},
  {&TA_bool,NULL,"LinkUniqNameNew"," link so that name is unique, true if unique, new replaces existing","CAT_Modify ","",
    0,1,-1,1,0,NULL,cssElCFun_taPtrList_base_taBase__LinkUniqNameNew_stub,TA_taPtrList_base_taBase__LinkUniqNameNew_MethArgs},
  {&TA_bool,NULL,"InsertLink"," Insert a link at index (-1 for end)","MENU CAT_Modify ","",
    0,2,1,1,0,NULL,cssElCFun_taPtrList_base_taBase__InsertLink_stub,TA_taPtrList_base_taBase__InsertLink_MethArgs},
  {&TA_bool,NULL,"ReplaceLinkEl"," replace given element (if on list) with the new one","CAT_Modify ","",
    0,2,-1,1,0,NULL,cssElCFun_taPtrList_base_taBase__ReplaceLinkEl_stub,TA_taPtrList_base_taBase__ReplaceLinkEl_MethArgs},
  {&TA_bool,NULL,"ReplaceLinkName"," replace given named element (if on list) with the new one","CAT_Modify ","",
    0,2,-1,1,0,NULL,cssElCFun_taPtrList_base_taBase__ReplaceLinkName_stub,TA_taPtrList_base_taBase__ReplaceLinkName_MethArgs},
  {&TA_bool,NULL,"ReplaceLinkIdx"," replace element with a link to the new one","CAT_Modify ","",
    0,2,-1,1,0,NULL,cssElCFun_taPtrList_base_taBase__ReplaceLinkIdx_stub,TA_taPtrList_base_taBase__ReplaceLinkIdx_MethArgs},
  {&TA_void,NULL,"Push"," push item on stack (for temporary use, not 'owned')","CAT_Modify ","",
    0,1,-1,1,0,NULL,cssElCFun_taPtrList_base_taBase__Push_stub,TA_taPtrList_base_taBase__Push_MethArgs},
  {&TA_bool,NULL,"MoveEl"," Move item (from) to position of (to)","MENU ARG_ON_OBJ CAT_Modify ","",
    0,2,-1,1,0,NULL,cssElCFun_taPtrList_base_taBase__MoveEl_stub,TA_taPtrList_base_taBase__MoveEl_MethArgs},
  {&TA_bool,NULL,"Transfer"," Transfer element to this list","MENU MENU_ON_Edit NO_SCOPE CAT_Modify ","",
    0,1,-1,1,0,NULL,cssElCFun_taPtrList_base_taBase__Transfer_stub,TA_taPtrList_base_taBase__Transfer_MethArgs},
  {&TA_bool,NULL,"MoveBefore"," move item so that it appears just before the target item trg in the list","CAT_Modify ","",
    0,2,-1,1,0,NULL,cssElCFun_taPtrList_base_taBase__MoveBefore_stub,TA_taPtrList_base_taBase__MoveBefore_MethArgs},
  {&TA_bool,NULL,"MoveAfter"," move item so that it appears just after the target item trg in the list","CAT_Modify ","",
    0,2,-1,1,0,NULL,cssElCFun_taPtrList_base_taBase__MoveAfter_stub,TA_taPtrList_base_taBase__MoveAfter_MethArgs},
  NULL};
static int taList_impl::* TA_taList_impl_MbrOff;
static MemberDef_data TA_taList_impl_MemberDef[]={
  {&TA_MemberDef_ptr,NULL,"find_md"," return value for findmember of data","HIDDEN NO_SHOW_TREE NO_SAVE ","",
    (ta_memb_ptr)NULL,1,(void*)(&taList_impl::find_md),0},
  {&TA_taString,NULL,"name"," name of the object ","","",
    *((ta_memb_ptr*)&(TA_taList_impl_MbrOff=(int taList_impl::*)(&taList_impl::name))),0,NULL,0},
  {&TA_TypeDef_ptr,NULL,"el_base"," Base type for objects in group","DETAIL NO_SHOW_TREE READ_ONLY_GUI NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_taList_impl_MbrOff=(int taList_impl::*)(&taList_impl::el_base))),0,NULL,0},
  {&TA_TypeDef_ptr,NULL,"el_typ"," Default type for objects in group","TYPE_ON_el_base NO_SHOW_TREE ","",
    *((ta_memb_ptr*)&(TA_taList_impl_MbrOff=(int taList_impl::*)(&taList_impl::el_typ))),0,NULL,0},
  {&TA_int,NULL,"el_def"," Index of default element in group","DETAIL ","",
    *((ta_memb_ptr*)&(TA_taList_impl_MbrOff=(int taList_impl::*)(&taList_impl::el_def))),0,NULL,0},
  NULL};
static MethodArgs_data TA_taList_impl_New_MethArgs[]={
  {&TA_int,NULL,"n_objs","1"},
  {&TA_TypeDef_ptr,NULL,"typ","__null"},
  NULL};
static MethodArgs_data TA_taList_impl_HasBaseFlag_MethArgs[]={
  {&TA_int,NULL,"flag",""},
  NULL};
static MethodArgs_data TA_taList_impl_SetBaseFlag_MethArgs[]={
  {&TA_int,NULL,"flag",""},
  NULL};
static MethodArgs_data TA_taList_impl_ClearBaseFlag_MethArgs[]={
  {&TA_int,NULL,"flag",""},
  NULL};
static MethodArgs_data TA_taList_impl_SetEnabled_MethArgs[]={
  {&TA_bool,NULL,"value",""},
  NULL};
static MethodArgs_data TA_taList_impl_GetOwner_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"tp",""},
  NULL};
static MethodArgs_data TA_taList_impl_GetPath_MethArgs[]={
  {&TA_TAPtr,NULL,"ta","__null"},
  {&TA_TAPtr,NULL,"par_stop"," __null"},
  NULL};
static MethodArgs_data TA_taList_impl_FindFromPath_MethArgs[]={
  {&TA_const_taString_ref,NULL,"path",""},
  {&TA_MemberDef_ptr_ref,NULL,"ret_md","no_mdef"},
  {&TA_int,NULL,"start","0"},
  NULL};
static MethodArgs_data TA_taList_impl_SetFileName_MethArgs[]={
  {&TA_const_taString_ref,NULL,"val",""},
  NULL};
static MethodArgs_data TA_taList_impl_GetFileNameFmProject_MethArgs[]={
  {&TA_const_taString_ref,NULL,"ext",""},
  {&TA_const_taString_ref,NULL,"tag"," "},
  {&TA_const_taString_ref,NULL,"subdir"," "},
  {&TA_bool,NULL,"dmem_proc_no"," false"},
  NULL};
static MethodArgs_data TA_taList_impl_Load_strm_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_TAPtr,NULL,"par","__null"},
  {&TA_taBase_ptr_ptr,NULL,"loaded_obj_ptr"," __null"},
  NULL};
static MethodArgs_data TA_taList_impl_Load_MethArgs[]={
  {&TA_const_taString_ref,NULL,"fname",""},
  {&TA_taBase_ptr_ptr,NULL,"loaded_obj_ptr"," __null"},
  {&TA_taString,NULL,"context"," taString()"},
  NULL};
static MethodArgs_data TA_taList_impl_Save_strm_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  {&TA_TAPtr,NULL,"par","__null"},
  {&TA_int,NULL,"indent","0"},
  NULL};
static MethodArgs_data TA_taList_impl_Save_MethArgs[]={
  {&TA_taString,NULL,"context"," taString()"},
  NULL};
static MethodArgs_data TA_taList_impl_SaveAs_MethArgs[]={
  {&TA_const_taString_ref,NULL,"fname"," taString()"},
  {&TA_taString,NULL,"context"," taString()"},
  NULL};
static MethodArgs_data TA_taList_impl_StructUpdate_MethArgs[]={
  {&TA_bool,NULL,"begin",""},
  NULL};
static MethodArgs_data TA_taList_impl_DataUpdate_MethArgs[]={
  {&TA_bool,NULL,"begin",""},
  NULL};
static MethodArgs_data TA_taList_impl_setDirty_MethArgs[]={
  {&TA_bool,NULL,"value",""},
  NULL};
static MethodArgs_data TA_taList_impl_CheckConfig_MethArgs[]={
  {&TA_bool,NULL,"quiet"," false"},
  NULL};
static MethodArgs_data TA_taList_impl_CheckConfig_Gui_MethArgs[]={
  {&TA_bool,NULL,"confirm_success"," true"},
  {&TA_bool,NULL,"quiet"," false"},
  NULL};
static MethodArgs_data TA_taList_impl_CopyFrom_MethArgs[]={
  {&TA_TAPtr,NULL,"cpy_from",""},
  NULL};
static MethodArgs_data TA_taList_impl_CopyTo_MethArgs[]={
  {&TA_TAPtr,NULL,"cpy_to",""},
  NULL};
static MethodArgs_data TA_taList_impl_ChangeMyType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"new_type",""},
  NULL};
static MethodArgs_data TA_taList_impl_InheritsFrom_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"it",""},
  NULL};
static MethodArgs_data TA_taList_impl_InheritsFromName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"nm",""},
  NULL};
static MethodArgs_data TA_taList_impl_GetEnumString_MethArgs[]={
  {&TA_const_taString_ref,NULL,"enum_tp_nm",""},
  {&TA_int,NULL,"enum_val",""},
  NULL};
static MethodArgs_data TA_taList_impl_GetEnumVal_MethArgs[]={
  {&TA_const_taString_ref,NULL,"enum_nm",""},
  {&TA_taString_ref,NULL,"enum_tp_nm"," no_name"},
  NULL};
static MethodArgs_data TA_taList_impl_GetUserDataList_MethArgs[]={
  {&TA_bool,NULL,"fc"," false"},
  NULL};
static MethodArgs_data TA_taList_impl_HasUserData_MethArgs[]={
  {&TA_const_taString_ref,NULL,"key",""},
  NULL};
static MethodArgs_data TA_taList_impl_GetUserData_MethArgs[]={
  {&TA_const_taString_ref,NULL,"key",""},
  NULL};
static MethodArgs_data TA_taList_impl_GetUserDataAsBool_MethArgs[]={
  {&TA_const_taString_ref,NULL,"key",""},
  NULL};
static MethodArgs_data TA_taList_impl_GetUserDataAsInt_MethArgs[]={
  {&TA_const_taString_ref,NULL,"key",""},
  NULL};
static MethodArgs_data TA_taList_impl_GetUserDataAsFloat_MethArgs[]={
  {&TA_const_taString_ref,NULL,"key",""},
  NULL};
static MethodArgs_data TA_taList_impl_GetUserDataAsDouble_MethArgs[]={
  {&TA_const_taString_ref,NULL,"key",""},
  NULL};
static MethodArgs_data TA_taList_impl_GetUserDataAsString_MethArgs[]={
  {&TA_const_taString_ref,NULL,"key",""},
  NULL};
static MethodArgs_data TA_taList_impl_SetUserData_MethArgs[]={
  {&TA_const_taString_ref,NULL,"key",""},
  {&TA_const_Variant_ref,NULL,"value",""},
  NULL};
static MethodArgs_data TA_taList_impl_EditDialog_MethArgs[]={
  {&TA_bool,NULL,"modal"," false"},
  NULL};
static MethodArgs_data TA_taList_impl_ReShowEdit_MethArgs[]={
  {&TA_bool,NULL,"force"," false"},
  NULL};
static MethodArgs_data TA_taList_impl_CallFun_MethArgs[]={
  {&TA_const_taString_ref,NULL,"fun_name",""},
  NULL};
static MethodArgs_data TA_taList_impl_SelectForEdit_MethArgs[]={
  {&TA_MemberDef_ptr,NULL,"member",""},
  {&TA_SelectEdit_ptr,NULL,"editor",""},
  {&TA_const_taString_ref,NULL,"extra_label",""},
  NULL};
static MethodArgs_data TA_taList_impl_SelectForEditNm_MethArgs[]={
  {&TA_const_taString_ref,NULL,"memb_nm",""},
  {&TA_SelectEdit_ptr,NULL,"editor",""},
  {&TA_const_taString_ref,NULL,"extra_label",""},
  NULL};
static MethodArgs_data TA_taList_impl_SelectForEditSearch_MethArgs[]={
  {&TA_const_taString_ref,NULL,"memb_contains",""},
  {&TA_SelectEdit_ptr_ref,NULL,"editor",""},
  NULL};
static MethodArgs_data TA_taList_impl_SelectFunForEdit_MethArgs[]={
  {&TA_MethodDef_ptr,NULL,"function",""},
  {&TA_SelectEdit_ptr,NULL,"editor",""},
  {&TA_const_taString_ref,NULL,"extra_label",""},
  NULL};
static MethodArgs_data TA_taList_impl_SelectFunForEditNm_MethArgs[]={
  {&TA_const_taString_ref,NULL,"function_nm",""},
  {&TA_SelectEdit_ptr,NULL,"editor",""},
  {&TA_const_taString_ref,NULL,"extra_label",""},
  NULL};
static MethodArgs_data TA_taList_impl_InRange_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taList_impl_Alloc_MethArgs[]={
  {&TA_int,NULL,"sz",""},
  NULL};
static MethodArgs_data TA_taList_impl_AllocExact_MethArgs[]={
  {&TA_int,NULL,"sz",""},
  NULL};
static MethodArgs_data TA_taList_impl_BuildHashTable_MethArgs[]={
  {&TA_int,NULL,"n_buckets",""},
  NULL};
static MethodArgs_data TA_taList_impl_RemoveName_MethArgs[]={
  {&TA_const_taString_ref,NULL,"item_nm",""},
  NULL};
static MethodArgs_data TA_taList_impl_RemoveIdx_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taList_impl_MoveIdx_MethArgs[]={
  {&TA_int,NULL,"from",""},
  {&TA_int,NULL,"to",""},
  NULL};
static MethodArgs_data TA_taList_impl_SwapIdx_MethArgs[]={
  {&TA_int,NULL,"pos1",""},
  {&TA_int,NULL,"pos2",""},
  NULL};
static MethodArgs_data TA_taList_impl_Sort_MethArgs[]={
  {&TA_bool,NULL,"descending","false"},
  NULL};
static MethodArgs_data TA_taList_impl_FirstEl_MethArgs[]={
  {&TA_taListItr_ref,NULL,"itr",""},
  NULL};
static MethodArgs_data TA_taList_impl_NextEl_MethArgs[]={
  {&TA_taListItr_ref,NULL,"itr",""},
  NULL};
static MethodArgs_data TA_taList_impl_Duplicate_MethArgs[]={
  {&TA_const_taPtrList_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taList_impl_DupeUniqNameNew_MethArgs[]={
  {&TA_const_taPtrList_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taList_impl_DupeUniqNameOld_MethArgs[]={
  {&TA_const_taPtrList_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taList_impl_Stealth_Borrow_MethArgs[]={
  {&TA_const_taPtrList_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taList_impl_Borrow_MethArgs[]={
  {&TA_const_taPtrList_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taList_impl_BorrowUnique_MethArgs[]={
  {&TA_const_taPtrList_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taList_impl_BorrowUniqNameNew_MethArgs[]={
  {&TA_const_taPtrList_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taList_impl_BorrowUniqNameOld_MethArgs[]={
  {&TA_const_taPtrList_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taList_impl_Copy_Common_MethArgs[]={
  {&TA_const_taPtrList_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taList_impl_Copy_Duplicate_MethArgs[]={
  {&TA_const_taPtrList_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taList_impl_Copy_Borrow_MethArgs[]={
  {&TA_const_taPtrList_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taList_impl_List_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm","cout"},
  NULL};
static MethodArgs_data TA_taList_impl_FindEl_MethArgs[]={
  {NULL,"taPtrList_base_taBase_::const_taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_impl_AddOnly_MethArgs[]={
  {NULL,"taPtrList_base_taBase_::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_impl_Add_MethArgs[]={
  {NULL,"taPtrList_base_taBase_::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_impl_AddUnique_MethArgs[]={
  {NULL,"taPtrList_base_taBase_::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_impl_AddUniqNameNew_MethArgs[]={
  {NULL,"taPtrList_base_taBase_::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_impl_Insert_MethArgs[]={
  {NULL,"taPtrList_base_taBase_::taBase_ptr","item",""},
  {&TA_int,NULL,"where",""},
  NULL};
static MethodArgs_data TA_taList_impl_ReplaceEl_MethArgs[]={
  {NULL,"taPtrList_base_taBase_::taBase_ptr","old_it",""},
  {NULL,"taPtrList_base_taBase_::taBase_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taList_impl_ReplaceName_MethArgs[]={
  {&TA_const_taString_ref,NULL,"old_nm",""},
  {NULL,"taPtrList_base_taBase_::taBase_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taList_impl_ReplaceIdx_MethArgs[]={
  {&TA_int,NULL,"old_idx",""},
  {NULL,"taPtrList_base_taBase_::taBase_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taList_impl_RemoveEl_MethArgs[]={
  {NULL,"taPtrList_base_taBase_::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_impl_DuplicateEl_MethArgs[]={
  {NULL,"taPtrList_base_taBase_::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_impl_Link_MethArgs[]={
  {NULL,"taPtrList_base_taBase_::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_impl_LinkUnique_MethArgs[]={
  {NULL,"taPtrList_base_taBase_::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_impl_LinkUniqNameNew_MethArgs[]={
  {NULL,"taPtrList_base_taBase_::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_impl_InsertLink_MethArgs[]={
  {NULL,"taPtrList_base_taBase_::taBase_ptr","item",""},
  {&TA_int,NULL,"idx"," -1"},
  NULL};
static MethodArgs_data TA_taList_impl_ReplaceLinkEl_MethArgs[]={
  {NULL,"taPtrList_base_taBase_::taBase_ptr","old_it",""},
  {NULL,"taPtrList_base_taBase_::taBase_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taList_impl_ReplaceLinkName_MethArgs[]={
  {&TA_const_taString_ref,NULL,"old_nm",""},
  {NULL,"taPtrList_base_taBase_::taBase_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taList_impl_ReplaceLinkIdx_MethArgs[]={
  {&TA_int,NULL,"old_idx",""},
  {NULL,"taPtrList_base_taBase_::taBase_ptr","new_it",""},
  NULL};
static MethodArgs_data TA_taList_impl_Push_MethArgs[]={
  {NULL,"taPtrList_base_taBase_::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_impl_MoveEl_MethArgs[]={
  {NULL,"taPtrList_base_taBase_::taBase_ptr","from",""},
  {NULL,"taPtrList_base_taBase_::taBase_ptr","to",""},
  NULL};
static MethodArgs_data TA_taList_impl_Transfer_MethArgs[]={
  {NULL,"taPtrList_base_taBase_::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_impl_MoveBefore_MethArgs[]={
  {NULL,"taPtrList_base_taBase_::taBase_ptr","trg",""},
  {NULL,"taPtrList_base_taBase_::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_impl_MoveAfter_MethArgs[]={
  {NULL,"taPtrList_base_taBase_::taBase_ptr","trg",""},
  {NULL,"taPtrList_base_taBase_::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_impl_SetDefaultElType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"it",""},
  NULL};
static MethodArgs_data TA_taList_impl_SetDefaultElName_MethArgs[]={
  {&TA_const_taString_ref,NULL,"nm",""},
  NULL};
static MethodArgs_data TA_taList_impl_SetDefaultEl_MethArgs[]={
  {&TA_TAPtr,NULL,"it",""},
  NULL};
static MethodArgs_data TA_taList_impl_SetSize_MethArgs[]={
  {&TA_int,NULL,"sz",""},
  NULL};
static MethodArgs_data TA_taList_impl_EnforceSameStru_MethArgs[]={
  {&TA_const_taList_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taList_impl_ChangeType_MethArgs[]={
  {&TA_TAPtr,NULL,"itm",""},
  {&TA_TypeDef_ptr,NULL,"new_type",""},
  NULL};
static MethodArgs_data TA_taList_impl_ReplaceType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"old_type",""},
  {&TA_TypeDef_ptr,NULL,"new_type",""},
  NULL};
static MethodArgs_data TA_taList_impl_SetBaseType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"it",""},
  NULL};
static MethodDef_data TA_taList_impl_MethodDef[]={
  {&TA_taBase_ptr,NULL,"New"," Create n_objs objects of given type (type is optional) create n_objs new objects of given type in list (NULL = default type, el_typ)","CAT_ObjectMgmt MENU MENU_ON_Edit MENU_CONTEXT TYPE_ON_el_base CAT_Modify ","",
    0,2,0,1,0,NULL,cssElCFun_taList_impl_New_stub,TA_taList_impl_New_MethArgs},
  {&TA_bool,NULL,"HasBaseFlag"," true if flag set, or if multiple, any set","CAT_ObjectMgmt ","",
    0,1,-1,0,0,NULL,cssElCFun_taList_impl_HasBaseFlag_stub,TA_taList_impl_HasBaseFlag_MethArgs},
  {&TA_void,NULL,"SetBaseFlag"," sets the flag(s)","CAT_ObjectMgmt ","",
    0,1,-1,0,0,NULL,cssElCFun_taList_impl_SetBaseFlag_stub,TA_taList_impl_SetBaseFlag_MethArgs},
  {&TA_void,NULL,"ClearBaseFlag"," clears the flag(s)","CAT_ObjectMgmt ","",
    0,1,-1,0,0,NULL,cssElCFun_taList_impl_ClearBaseFlag_stub,TA_taList_impl_ClearBaseFlag_MethArgs},
  {&TA_int,NULL,"GetIndex"," object's index within an owner list. cached by some objs.","CAT_ObjectMgmt ","",
    0,0,-1,1,0,NULL,cssElCFun_taList_impl_GetIndex_stub,NULL},
  {&TA_int,NULL,"GetEnabled"," for items that support an enabled/disabled state; -1=n/a, 0=disabled, 1=enabled (note: (bool)-1 = true)","","",
    0,0,-1,1,0,NULL,cssElCFun_taList_impl_GetEnabled_stub,NULL},
  {&TA_void,NULL,"SetEnabled","","","",
    0,1,-1,1,0,NULL,cssElCFun_taList_impl_SetEnabled_stub,TA_taList_impl_SetEnabled_MethArgs},
  {&TA_taList_impl_ptr,NULL,"children_"," for lists, and for taOBase w/ default children","","",
    0,0,-1,1,0,NULL,cssElCFun_taList_impl_children__stub,NULL},
  {&TA_TAPtr,NULL,"GetOwner","","","",
    3,1,-1,0,0,NULL,cssElCFun_taList_impl_GetOwner_stub,TA_taList_impl_GetOwner_MethArgs},
  {&TA_taString,NULL,"GetPath"," get path without name informtation, stop at par_stop if non-null","CAT_ObjectMgmt ","",
    0,2,0,1,0,NULL,cssElCFun_taList_impl_GetPath_stub,TA_taList_impl_GetPath_MethArgs},
  {&TA_TAPtr,NULL,"FindFromPath"," find object from path (starting from this, and position start of the path)","CAT_ObjectMgmt ","",
    0,3,1,1,0,NULL,cssElCFun_taList_impl_FindFromPath_stub,TA_taList_impl_FindFromPath_MethArgs},
  {&TA_bool,NULL,"SetFileName"," set file name for object","CAT_File ","",
    0,1,-1,1,0,NULL,cssElCFun_taList_impl_SetFileName_stub,TA_taList_impl_SetFileName_MethArgs},
  {&TA_taString,NULL,"GetFileName"," get file name object was last saved with","CAT_File ","",
    0,0,-1,1,0,NULL,cssElCFun_taList_impl_GetFileName_stub,NULL},
  {&TA_taString,NULL,"GetFileNameFmProject"," get file name from project file name -- useful for saving files associated with the project; ext = extension; tag = additional tag; subdir = additional directory after any existing in project name; fname = proj->base_name (subdir) + tag + ext; if dmem_proc_no, add dmem proc no to file name. empty if project not found","CAT_File ","",
    0,4,1,1,0,NULL,cssElCFun_taList_impl_GetFileNameFmProject_stub,TA_taList_impl_GetFileNameFmProject_MethArgs},
  {&TA_int,NULL,"Load_strm"," Load object data from a file -- sets pointer to loaded obj if non-null: could actually load a different object than this (e.g. if this is a list or group)","CAT_File ","",
    0,3,1,1,0,NULL,cssElCFun_taList_impl_Load_strm_stub,TA_taList_impl_Load_strm_MethArgs},
  {&TA_int,NULL,"Load"," Load object data from given file name (if empty, prompt user for a name) -- sets pointer to loaded obj if non-null: could actually load a different object than this (e.g. if this is a list or group)","MENU MENU_ON_Object ARGC_0 CAT_File ","",
    0,3,0,1,0,NULL,cssElCFun_taList_impl_Load_stub,TA_taList_impl_Load_MethArgs},
  {&TA_int,NULL,"Save_strm"," Save object data to a file stream","CAT_File ","",
    0,3,1,1,0,NULL,cssElCFun_taList_impl_Save_strm_stub,TA_taList_impl_Save_strm_MethArgs},
  {&TA_int,NULL,"Save"," saves the object to a file using current file name (from GetFileName() function); if context='' then default is used","MENU MENU_ON_Object ARGC_0 CAT_File ","",
    0,1,0,1,0,NULL,cssElCFun_taList_impl_Save_stub,TA_taList_impl_Save_MethArgs},
  {&TA_int,NULL,"SaveAs"," Saves object data to a new file -- if fname is empty, it prompts the user; if context='' then default is used","MENU ARGC_0 CAT_File ","",
    0,2,0,1,0,NULL,cssElCFun_taList_impl_SaveAs_stub,TA_taList_impl_SaveAs_MethArgs},
  {&TA_void,NULL,"UpdateAfterEdit"," called after editing, or any user change to members (eg. in the interface, script) we skip the taOBase version, and inherit only taBase","CAT_ObjectMgmt ","",
    0,0,-1,1,0,NULL,cssElCFun_taList_impl_UpdateAfterEdit_stub,NULL},
  {&TA_void,NULL,"UpdateAllViews"," called after data changes, to update views","CAT_Display ","",
    0,0,-1,1,0,NULL,cssElCFun_taList_impl_UpdateAllViews_stub,NULL},
  {&TA_void,NULL,"StructUpdate"," bracket structural changes with (nestable) true/false calls;","CAT_ObjectMgmt ","",
    0,1,-1,0,0,NULL,cssElCFun_taList_impl_StructUpdate_stub,TA_taList_impl_StructUpdate_MethArgs},
  {&TA_void,NULL,"DataUpdate"," bracket data value changes with (nestable) true/false calls;","CAT_ObjectMgmt ","",
    0,1,-1,0,0,NULL,cssElCFun_taList_impl_DataUpdate_stub,TA_taList_impl_DataUpdate_MethArgs},
  {&TA_void,NULL,"setDirty"," set the dirty flag indicating a change in object values; 'true' gets forwarded up; 'false' does nothing","CAT_ObjectMgmt ","",
    0,1,-1,1,0,NULL,cssElCFun_taList_impl_setDirty_stub,TA_taList_impl_setDirty_MethArgs},
  {&TA_bool,NULL,"CheckConfig"," check the configuration of this object and all its children (defaults to no confirm of success)","CAT_ObjectMgmt ","",
    0,1,0,0,0,NULL,cssElCFun_taList_impl_CheckConfig_stub,TA_taList_impl_CheckConfig_MethArgs},
  {&TA_bool,NULL,"CheckConfig_Gui"," check the configuration of this object and all its children -- failed items highlighted in red, items with failed children in yellow","MENU MENU_ON_Object CAT_ObjectMgmt ARGC_0 LABEL_CheckConfig ","",
    0,2,0,0,0,NULL,cssElCFun_taList_impl_CheckConfig_Gui_stub,TA_taList_impl_CheckConfig_Gui_MethArgs},
  {&TA_bool,NULL,"CopyFrom"," Copy from given object into this object","MENU MENU_ON_Object MENU_SEP_BEFORE TYPE_ON_this NO_SCOPE CAT_ObjectMgmt ","",
    0,1,-1,1,0,NULL,cssElCFun_taList_impl_CopyFrom_stub,TA_taList_impl_CopyFrom_MethArgs},
  {&TA_bool,NULL,"CopyTo"," Copy to given object from this object","MENU TYPE_ON_this NO_SCOPE CAT_ObjectMgmt ","",
    0,1,-1,1,0,NULL,cssElCFun_taList_impl_CopyTo_stub,TA_taList_impl_CopyTo_MethArgs},
  {&TA_bool,NULL,"DuplicateMe"," Make another copy of myself (done through owner)","MENU CONFIRM CAT_ObjectMgmt ","",
    0,0,-1,1,0,NULL,cssElCFun_taList_impl_DuplicateMe_stub,NULL},
  {&TA_bool,NULL,"ChangeMyType"," Change me into a different type of object, copying current info (done through owner)","MENU TYPE_this CAT_ObjectMgmt ","",
    0,1,-1,1,0,NULL,cssElCFun_taList_impl_ChangeMyType_stub,TA_taList_impl_ChangeMyType_MethArgs},
  {&TA_bool,NULL,"InheritsFrom"," does this inherit from given type ","CAT_ObjectMgmt ","",
    1,1,-1,0,0,NULL,cssElCFun_taList_impl_InheritsFrom_stub,TA_taList_impl_InheritsFrom_MethArgs},
  {&TA_bool,NULL,"InheritsFromName"," does this inherit from given type name?","CAT_ObjectMgmt ","",
    0,1,-1,0,0,NULL,cssElCFun_taList_impl_InheritsFromName_stub,TA_taList_impl_InheritsFromName_MethArgs},
  {&TA_taString,NULL,"GetEnumString"," get the name corresponding to given enum value in enum type enum_tp_nm","CAT_ObjectMgmt ","",
    0,2,-1,1,0,NULL,cssElCFun_taList_impl_GetEnumString_stub,TA_taList_impl_GetEnumString_MethArgs},
  {&TA_int,NULL,"GetEnumVal"," get the enum value corresponding to the given enum name (-1 if not found), and sets enum_tp_nm to name of type this enum belongs in (empty if not found)","CAT_ObjectMgmt ","",
    0,2,1,1,0,NULL,cssElCFun_taList_impl_GetEnumVal_stub,TA_taList_impl_GetEnumVal_MethArgs},
  {&TA_UserDataItem_List_ptr,NULL,"GetUserDataList"," gets the userdatalist for this class","CAT_UserData EXPERT ","",
    0,1,0,1,0,NULL,cssElCFun_taList_impl_GetUserDataList_stub,TA_taList_impl_GetUserDataList_MethArgs},
  {&TA_bool,NULL,"HasUserData"," returns true if UserData exists for this key (case sens)","CAT_UserData EXPERT ","",
    0,1,-1,1,0,NULL,cssElCFun_taList_impl_HasUserData_stub,TA_taList_impl_HasUserData_MethArgs},
  {&TA_const_Variant,NULL,"GetUserData"," get specified user data; returns class default value if not present, or nilVariant if no default user data or class doesn't support UserData","CAT_UserData ","",
    0,1,-1,1,0,NULL,cssElCFun_taList_impl_GetUserData_stub,TA_taList_impl_GetUserData_MethArgs},
  {&TA_bool,NULL,"GetUserDataAsBool"," get specified user data as bool (see GetUserData)","CAT_UserData EXPERT ","",
    0,1,-1,0,0,NULL,cssElCFun_taList_impl_GetUserDataAsBool_stub,TA_taList_impl_GetUserDataAsBool_MethArgs},
  {&TA_int,NULL,"GetUserDataAsInt"," get specified user data as int (see GetUserData)","CAT_UserData EXPERT ","",
    0,1,-1,0,0,NULL,cssElCFun_taList_impl_GetUserDataAsInt_stub,TA_taList_impl_GetUserDataAsInt_MethArgs},
  {&TA_float,NULL,"GetUserDataAsFloat"," get specified user data as float (see GetUserData)","CAT_UserData EXPERT ","",
    0,1,-1,0,0,NULL,cssElCFun_taList_impl_GetUserDataAsFloat_stub,TA_taList_impl_GetUserDataAsFloat_MethArgs},
  {&TA_double,NULL,"GetUserDataAsDouble"," get specified user data as double (see GetUserData)","CAT_UserData EXPERT ","",
    0,1,-1,0,0,NULL,cssElCFun_taList_impl_GetUserDataAsDouble_stub,TA_taList_impl_GetUserDataAsDouble_MethArgs},
  {&TA_const_taString,NULL,"GetUserDataAsString"," get specified user data as String (see GetUserData)","CAT_UserData EXPERT ","",
    0,1,-1,0,0,NULL,cssElCFun_taList_impl_GetUserDataAsString_stub,TA_taList_impl_GetUserDataAsString_MethArgs},
  {&TA_void,NULL,"SetUserData"," set user data; ignored if class does not support user data","CAT_UserData EXPERT ","",
    0,2,-1,1,0,NULL,cssElCFun_taList_impl_SetUserData_stub,TA_taList_impl_SetUserData_MethArgs},
  {&TA_int,NULL,"Edit"," Edit this object using the gui","MENU ARGC_0 MENU_ON_Object MENU_CONTEXT NO_SCRIPT CAT_Display ","",
    0,0,-1,1,0,NULL,cssElCFun_taList_impl_Edit_stub,NULL},
  {&TA_int,NULL,"EditDialog"," Edit this object in a popup dialog using the gui","MENU ARGC_0 MENU_ON_Object MENU_CONTEXT NO_SCRIPT CAT_Display ","",
    0,1,0,1,0,NULL,cssElCFun_taList_impl_EditDialog_stub,TA_taList_impl_EditDialog_MethArgs},
  {&TA_void,NULL,"BrowseMe"," show this object in its own browser ","MENU MENU_ON_Object MENU_SEP_AFTER MENU_CONTEXT CAT_Display ","",
    0,0,-1,1,0,NULL,cssElCFun_taList_impl_BrowseMe_stub,NULL},
  {&TA_bool,NULL,"ReShowEdit"," reshows any open edit dialogs for this object","CAT_Display ","",
    0,1,0,1,0,NULL,cssElCFun_taList_impl_ReShowEdit_stub,TA_taList_impl_ReShowEdit_MethArgs},
  {&TA_void,NULL,"CallFun"," call function of given name on this object, prompting for args using gui interface","CAT_ObjectMgmt ","",
    0,1,-1,1,0,NULL,cssElCFun_taList_impl_CallFun_stub,TA_taList_impl_CallFun_MethArgs},
  {&TA_bool,NULL,"SelectForEdit"," select a given member for editing in an edit dialog that collects selected members and methods from different objects (if editor is NULL, a new one is created in .edits). returns false if method was already selected","MENU CAT_Display NULL_OK ","",
    0,3,-1,1,0,NULL,cssElCFun_taList_impl_SelectForEdit_stub,TA_taList_impl_SelectForEdit_MethArgs},
  {&TA_bool,NULL,"SelectForEditNm"," select a given member (by name) for editing in an edit dialog that collects selected members from different objects (if editor is NULL, a new one is created in .edits). returns false if method was already selected","","",
    0,3,-1,1,0,NULL,cssElCFun_taList_impl_SelectForEditNm_stub,TA_taList_impl_SelectForEditNm_MethArgs},
  {&TA_int,NULL,"SelectForEditSearch"," search among this object and any sub-objects for members containing given string, and add to given select editor (if NULL, a new one is created in .edits). returns number found","MENU NULL_OK CAT_Display ","",
    0,2,-1,1,0,NULL,cssElCFun_taList_impl_SelectForEditSearch_stub,TA_taList_impl_SelectForEditSearch_MethArgs},
  {&TA_bool,NULL,"SelectFunForEdit"," select a given function (method) for calling in a select edit dialog that collects selected members and methods from different objects (if editor is NULL, a new one is created in .edits). returns false if method was already selected","MENU NULL_OK CAT_Display ","",
    0,3,-1,1,0,NULL,cssElCFun_taList_impl_SelectFunForEdit_stub,TA_taList_impl_SelectFunForEdit_MethArgs},
  {&TA_bool,NULL,"SelectFunForEditNm"," select a given method (by name) for editing in an edit dialog that collects selected members from different objects (if editor is NULL, a new one is created in .edits) returns false if method was already selected","","",
    0,3,-1,1,0,NULL,cssElCFun_taList_impl_SelectFunForEditNm_stub,TA_taList_impl_SelectFunForEditNm_MethArgs},
  {&TA_void,NULL,"CloseLater"," PERMANENTLY Destroy this object! This is not Iconify.","MENU CONFIRM NO_REVERT_AFTER LABEL_Close_(Destroy) NO_MENU_CONTEXT CAT_ObjectMgmt ","",
    0,0,-1,1,0,NULL,cssElCFun_taList_impl_CloseLater_stub,NULL},
  {&TA_void,NULL,"Help"," get help on using this object","MENU CAT_Display ","",
    0,0,-1,1,0,NULL,cssElCFun_taList_impl_Help_stub,NULL},
  {&TA_bool,NULL,"InRange","","","",
    0,1,-1,0,0,NULL,cssElCFun_taList_impl_InRange_stub,TA_taList_impl_InRange_MethArgs},
  {&TA_void,NULL,"Alloc"," allocate a list big enough for given number of elements (or current size) -- uses optimized memory allocation policies and generally allocates more than currently needed","CAT_Modify ","",
    0,1,-1,1,0,NULL,cssElCFun_taList_impl_Alloc_stub,TA_taList_impl_Alloc_MethArgs},
  {&TA_void,NULL,"AllocExact"," allocate exact number specified","CAT_Modify ","",
    0,1,-1,1,0,NULL,cssElCFun_taList_impl_AllocExact_stub,TA_taList_impl_AllocExact_MethArgs},
  {&TA_void,NULL,"Reset"," reset the list (remove all elements)","CAT_Modify ","",
    0,0,-1,1,0,NULL,cssElCFun_taList_impl_Reset_stub,NULL},
  {&TA_bool,NULL,"IsEmpty"," is the list empty of elements (i.e., size == 0)","CAT_Access ","",
    0,0,-1,1,0,NULL,cssElCFun_taList_impl_IsEmpty_stub,NULL},
  {&TA_void,NULL,"BuildHashTable"," build a hash table with given number of buckets (not dynamic, so make it big)","CAT_Modify ","",
    0,1,-1,1,0,NULL,cssElCFun_taList_impl_BuildHashTable_stub,TA_taList_impl_BuildHashTable_MethArgs},
  {&TA_bool,NULL,"RemoveName"," remove (and delete) named element from list","CAT_Modify ","",
    0,1,-1,1,0,NULL,cssElCFun_taList_impl_RemoveName_stub,TA_taList_impl_RemoveName_MethArgs},
  {&TA_bool,NULL,"RemoveIdx"," remove (and delete) element from list at index","CAT_Modify ","",
    0,1,-1,1,0,NULL,cssElCFun_taList_impl_RemoveIdx_stub,TA_taList_impl_RemoveIdx_MethArgs},
  {&TA_bool,NULL,"RemoveLast"," remove the last element on the list","CAT_Modify ","",
    0,0,-1,1,0,NULL,cssElCFun_taList_impl_RemoveLast_stub,NULL},
  {&TA_void,NULL,"RemoveAll"," Remove all elements on the list","MENU MENU_ON_Edit CONFIRM CAT_Modify ","",
    0,0,-1,1,0,NULL,cssElCFun_taList_impl_RemoveAll_stub,NULL},
  {&TA_bool,NULL,"MoveIdx"," Move element from index (from) to position (to) in list","CAT_Modify ","",
    0,2,-1,1,0,NULL,cssElCFun_taList_impl_MoveIdx_stub,TA_taList_impl_MoveIdx_MethArgs},
  {&TA_bool,NULL,"SwapIdx"," Swap the elements in the two given positions on the list","CAT_Modify ","",
    0,2,-1,1,0,NULL,cssElCFun_taList_impl_SwapIdx_stub,TA_taList_impl_SwapIdx_MethArgs},
  {&TA_void,NULL,"PopAll"," pop all elements off the stack","CAT_Modify ","",
    0,0,-1,1,0,NULL,cssElCFun_taList_impl_PopAll_stub,NULL},
  {&TA_void,NULL,"Permute"," permute the items in the list into a random order","MENU CONFIRM CAT_Order ","",
    0,0,-1,1,0,NULL,cssElCFun_taList_impl_Permute_stub,NULL},
  {&TA_void,NULL,"Sort"," sort the items in the list in alpha order according to name (or El_Compare_)","MENU CONFIRM CAT_Order ","",
    0,1,0,1,0,NULL,cssElCFun_taList_impl_Sort_stub,TA_taList_impl_Sort_MethArgs},
  {&TA_void_ptr,NULL,"FirstEl"," get the first item on the list, initialize iterator","CAT_Access ","",
    0,1,-1,0,0,NULL,cssElCFun_taList_impl_FirstEl_stub,TA_taList_impl_FirstEl_MethArgs},
  {&TA_void_ptr,NULL,"NextEl"," get the next item on the list according to iterator","CAT_Access ","",
    0,1,-1,0,0,NULL,cssElCFun_taList_impl_NextEl_stub,TA_taList_impl_NextEl_MethArgs},
  {&TA_void,NULL,"Duplicate"," duplicate (clone & add) elements of given list into this one","CAT_Copy ","",
    0,1,-1,0,0,NULL,cssElCFun_taList_impl_Duplicate_stub,TA_taList_impl_Duplicate_MethArgs},
  {&TA_void,NULL,"DupeUniqNameNew"," duplicate so result is unique names, replacing with new ones where dupl","CAT_Copy ","",
    0,1,-1,0,0,NULL,cssElCFun_taList_impl_DupeUniqNameNew_stub,TA_taList_impl_DupeUniqNameNew_MethArgs},
  {&TA_void,NULL,"DupeUniqNameOld"," duplicate so result is unique names, using old ones where dupl","CAT_Copy ","",
    0,1,-1,0,0,NULL,cssElCFun_taList_impl_DupeUniqNameOld_stub,TA_taList_impl_DupeUniqNameOld_MethArgs},
  {&TA_void,NULL,"Stealth_Borrow"," borrow without referencing the borrowed elements (i.e. use AddEl_())","CAT_Copy ","",
    0,1,-1,0,0,NULL,cssElCFun_taList_impl_Stealth_Borrow_stub,TA_taList_impl_Stealth_Borrow_MethArgs},
  {&TA_void,NULL,"Borrow"," borrow (link) elements of given list into this one","CAT_Copy ","",
    0,1,-1,0,0,NULL,cssElCFun_taList_impl_Borrow_stub,TA_taList_impl_Borrow_MethArgs},
  {&TA_void,NULL,"BorrowUnique"," borrow so result is unique list","CAT_Copy ","",
    0,1,-1,0,0,NULL,cssElCFun_taList_impl_BorrowUnique_stub,TA_taList_impl_BorrowUnique_MethArgs},
  {&TA_void,NULL,"BorrowUniqNameNew"," borrow so result is unique names, replacing with new ones where dupl","CAT_Copy ","",
    0,1,-1,0,0,NULL,cssElCFun_taList_impl_BorrowUniqNameNew_stub,TA_taList_impl_BorrowUniqNameNew_MethArgs},
  {&TA_void,NULL,"BorrowUniqNameOld"," borrow so result is unique names, using old ones where dupl","CAT_Copy ","",
    0,1,-1,0,0,NULL,cssElCFun_taList_impl_BorrowUniqNameOld_stub,TA_taList_impl_BorrowUniqNameOld_MethArgs},
  {&TA_void,NULL,"Copy_Common"," apply copy operator to only those items in common between the two lists","CAT_Copy ","",
    0,1,-1,0,0,NULL,cssElCFun_taList_impl_Copy_Common_stub,TA_taList_impl_Copy_Common_MethArgs},
  {&TA_void,NULL,"Copy_Duplicate"," apply copy operator to items, use duplicate to add new ones from cp (if necc)","CAT_Copy ","",
    0,1,-1,0,0,NULL,cssElCFun_taList_impl_Copy_Duplicate_stub,TA_taList_impl_Copy_Duplicate_MethArgs},
  {&TA_void,NULL,"Copy_Borrow"," apply copy operator to items, use borrow to add new ones from cp (if necc)","CAT_Copy ","",
    0,1,-1,0,0,NULL,cssElCFun_taList_impl_Copy_Borrow_stub,TA_taList_impl_Copy_Borrow_MethArgs},
  {&TA_void,NULL,"List"," List the group items","CAT_Display ","",
    0,1,0,1,0,NULL,cssElCFun_taList_impl_List_stub,TA_taList_impl_List_MethArgs},
  {&TA_int,NULL,"FindEl"," find element in list (-1 if not there)","CAT_Access ","",
    0,1,-1,1,0,NULL,cssElCFun_taList_impl_FindEl_stub,TA_taList_impl_FindEl_MethArgs},
  {&TA_void,NULL,"AddOnly"," append a new pointer to end of list -- does not own","CAT_Modify ","",
    0,1,-1,1,0,NULL,cssElCFun_taList_impl_AddOnly_stub,TA_taList_impl_AddOnly_MethArgs},
  {&TA_void,NULL,"Add"," add element to the list and 'own' item","CAT_Modify ","",
    0,1,-1,1,0,NULL,cssElCFun_taList_impl_Add_stub,TA_taList_impl_Add_MethArgs},
  {&TA_bool,NULL,"AddUnique"," add so that object is unique, true if unique","CAT_Modify ","",
    0,1,-1,1,0,NULL,cssElCFun_taList_impl_AddUnique_stub,TA_taList_impl_AddUnique_MethArgs},
  {&TA_bool,NULL,"AddUniqNameNew"," add so that name is unique, true if unique, new replaces existing","CAT_Modify ","",
    0,1,-1,1,0,NULL,cssElCFun_taList_impl_AddUniqNameNew_stub,TA_taList_impl_AddUniqNameNew_MethArgs},
  {&TA_bool,NULL,"Insert"," insert element at index (-1 for end)","CAT_Modify ","",
    0,2,-1,1,0,NULL,cssElCFun_taList_impl_Insert_stub,TA_taList_impl_Insert_MethArgs},
  {&TA_bool,NULL,"ReplaceEl"," replace given element with the new one","CAT_Modify ","",
    0,2,-1,1,0,NULL,cssElCFun_taList_impl_ReplaceEl_stub,TA_taList_impl_ReplaceEl_MethArgs},
  {&TA_bool,NULL,"ReplaceName"," replace named element with the new one","CAT_Modify ","",
    0,2,-1,1,0,NULL,cssElCFun_taList_impl_ReplaceName_stub,TA_taList_impl_ReplaceName_MethArgs},
  {&TA_bool,NULL,"ReplaceIdx"," replace element at index with the new one","CAT_Modify ","",
    0,2,-1,1,0,NULL,cssElCFun_taList_impl_ReplaceIdx_stub,TA_taList_impl_ReplaceIdx_MethArgs},
  {&TA_bool,NULL,"RemoveEl"," Remove given item from list","MENU ARG_ON_OBJ CAT_Modify ","",
    0,1,-1,1,0,NULL,cssElCFun_taList_impl_RemoveEl_stub,TA_taList_impl_RemoveEl_MethArgs},
  {&TA_bool,NULL,"DuplicateEl"," Duplicate given list item and Add to list","MENU ARG_ON_OBJ CAT_Modify ","",
    0,1,-1,1,0,NULL,cssElCFun_taList_impl_DuplicateEl_stub,TA_taList_impl_DuplicateEl_MethArgs},
  {&TA_void,NULL,"Link"," Link an item to list without owning it","CAT_Modify ","",
    0,1,-1,1,0,NULL,cssElCFun_taList_impl_Link_stub,TA_taList_impl_Link_MethArgs},
  {&TA_bool,NULL,"LinkUnique"," link so that object is unique, true if unique","CAT_Modify ","",
    0,1,-1,1,0,NULL,cssElCFun_taList_impl_LinkUnique_stub,TA_taList_impl_LinkUnique_MethArgs},
  {&TA_bool,NULL,"LinkUniqNameNew"," link so that name is unique, true if unique, new replaces existing","CAT_Modify ","",
    0,1,-1,1,0,NULL,cssElCFun_taList_impl_LinkUniqNameNew_stub,TA_taList_impl_LinkUniqNameNew_MethArgs},
  {&TA_bool,NULL,"InsertLink"," Insert a link at index (-1 for end)","MENU CAT_Modify ","",
    0,2,1,1,0,NULL,cssElCFun_taList_impl_InsertLink_stub,TA_taList_impl_InsertLink_MethArgs},
  {&TA_bool,NULL,"ReplaceLinkEl"," replace given element (if on list) with the new one","CAT_Modify ","",
    0,2,-1,1,0,NULL,cssElCFun_taList_impl_ReplaceLinkEl_stub,TA_taList_impl_ReplaceLinkEl_MethArgs},
  {&TA_bool,NULL,"ReplaceLinkName"," replace given named element (if on list) with the new one","CAT_Modify ","",
    0,2,-1,1,0,NULL,cssElCFun_taList_impl_ReplaceLinkName_stub,TA_taList_impl_ReplaceLinkName_MethArgs},
  {&TA_bool,NULL,"ReplaceLinkIdx"," replace element with a link to the new one","CAT_Modify ","",
    0,2,-1,1,0,NULL,cssElCFun_taList_impl_ReplaceLinkIdx_stub,TA_taList_impl_ReplaceLinkIdx_MethArgs},
  {&TA_void,NULL,"Push"," push item on stack (for temporary use, not 'owned')","CAT_Modify ","",
    0,1,-1,1,0,NULL,cssElCFun_taList_impl_Push_stub,TA_taList_impl_Push_MethArgs},
  {&TA_bool,NULL,"MoveEl"," Move item (from) to position of (to)","MENU ARG_ON_OBJ CAT_Modify ","",
    0,2,-1,1,0,NULL,cssElCFun_taList_impl_MoveEl_stub,TA_taList_impl_MoveEl_MethArgs},
  {&TA_bool,NULL,"Transfer"," Transfer element to this list","MENU MENU_ON_Edit NO_SCOPE CAT_Modify ","",
    0,1,-1,1,0,NULL,cssElCFun_taList_impl_Transfer_stub,TA_taList_impl_Transfer_MethArgs},
  {&TA_bool,NULL,"MoveBefore"," move item so that it appears just before the target item trg in the list","CAT_Modify ","",
    0,2,-1,1,0,NULL,cssElCFun_taList_impl_MoveBefore_stub,TA_taList_impl_MoveBefore_MethArgs},
  {&TA_bool,NULL,"MoveAfter"," move item so that it appears just after the target item trg in the list","CAT_Modify ","",
    0,2,-1,1,0,NULL,cssElCFun_taList_impl_MoveAfter_stub,TA_taList_impl_MoveAfter_MethArgs},
  {&TA_int,NULL,"SetDefaultElType"," set the default element to be item with given type","CAT_Access ","",
    0,1,-1,1,0,NULL,cssElCFun_taList_impl_SetDefaultElType_stub,TA_taList_impl_SetDefaultElType_MethArgs},
  {&TA_int,NULL,"SetDefaultElName"," set the default element to be item with given name","CAT_Access ","",
    0,1,-1,1,0,NULL,cssElCFun_taList_impl_SetDefaultElName_stub,TA_taList_impl_SetDefaultElName_MethArgs},
  {&TA_int,NULL,"SetDefaultEl"," set the default element to be given item","CAT_Access ","",
    0,1,-1,1,0,NULL,cssElCFun_taList_impl_SetDefaultEl_stub,TA_taList_impl_SetDefaultEl_MethArgs},
  {&TA_void,NULL,"SetSize"," add or remove elements to force list to be of given size","MENU MENU_ON_Edit CAT_Modify ","",
    0,1,-1,1,0,NULL,cssElCFun_taList_impl_SetSize_stub,TA_taList_impl_SetSize_MethArgs},
  {&TA_void,NULL,"EnforceType"," enforce current type (all elements have to be of this type)","CAT_Modify ","",
    0,0,-1,1,0,NULL,cssElCFun_taList_impl_EnforceType_stub,NULL},
  {&TA_void,NULL,"EnforceSameStru"," make the two lists identical in terms of size and types of objects","CAT_Modify ","",
    0,1,-1,0,0,NULL,cssElCFun_taList_impl_EnforceSameStru_stub,TA_taList_impl_EnforceSameStru_MethArgs},
  {&TA_bool,NULL,"ChangeType"," change type of item to new type, copying current info","MENU ARG_ON_OBJ CAT_Modify TYPE_ON_el_base ","",
    1,2,-1,1,0,NULL,cssElCFun_taList_impl_ChangeType_stub,TA_taList_impl_ChangeType_MethArgs},
  {&TA_int,NULL,"ReplaceType"," replace all items of old type with new type (returns number changed)","MENU USE_RVAL CAT_Modify TYPE_ON_el_base ","",
    0,2,-1,1,0,NULL,cssElCFun_taList_impl_ReplaceType_stub,TA_taList_impl_ReplaceType_MethArgs},
  {&TA_void,NULL,"SetBaseType"," set base (and default) type to given td","CAT_Modify ","",
    0,1,-1,0,0,NULL,cssElCFun_taList_impl_SetBaseType_stub,TA_taList_impl_SetBaseType_MethArgs},
  NULL};
static EnumDef_data TA_taList_taBase__Orientation[]={
  {"Horizontal","","",1},
  {"Vertical","","",2},
  NULL};
static EnumDef_data TA_taList_taBase__ValType[]={
  {"VT_STRING"," an ANSI string of any length","",0},
  {"VT_DOUBLE"," a 8-byte floating point value (aprox 15 sig decimal digits)","",1},
  {"VT_FLOAT"," a 4-byte floating point value (aprox 7 sig decimal digits)","",2},
  {"VT_INT"," a 32-bit signed integer","",3},
  {"VT_BYTE"," an unsigned 8-bit integer; used mostly for image components (rgb)","",4},
  {"VT_VARIANT"," a Variant, which can hold scalars, matrices, and objects","",5},
  NULL};
static EnumDef_data TA_taList_taBase__BaseFlags[]={
  {"THIS_INVALID"," CheckThisConfig_impl has detected a problem","",1},
  {"CHILD_INVALID"," CheckChildConfig_impl returns issue with a child","",2},
  {"DESTROYING"," Set in Destroying at the very beginning of destroy","",64},
  {"DESTROYED"," set in base destroy (DEBUG only); lets us detect multi destroys","",128},
  NULL};
static EnumDef_data TA_taList_taBase__DumpQueryResult[]={
  {"DQR_NO_SAVE"," definitely do not save","",0},
  {"DQR_SAVE"," definitely save","",1},
  {"DQR_DEFAULT"," do default for this member (this is the base result)","",2},
  NULL};
static MethodArgs_data TA_taList_taBase__MoveBefore_MethArgs[]={
  {NULL,"::taBase_ptr","trg",""},
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_taBase__MoveAfter_MethArgs[]={
  {NULL,"::taBase_ptr","trg",""},
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_taBase__SafeEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taList_taBase__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taList_taBase__Edit_El_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_taBase__FindName_MethArgs[]={
  {&TA_const_taString_ref,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","no_idx"},
  NULL};
static MethodArgs_data TA_taList_taBase__FindType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"item_tp",""},
  {&TA_int_ref,NULL,"idx","no_idx"},
  NULL};
static MethodArgs_data TA_taList_taBase__AddUniqNameOld_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_taBase__LinkUniqNameOld_MethArgs[]={
  {NULL,"::taBase_ptr","item",""},
  NULL};
static MethodDef_data TA_taList_taBase__MethodDef[]={
  {&TA_bool,NULL,"MoveBefore"," move item so that it appears just before the target item trg in the list","CAT_Modify ","",
    1,2,-1,1,0,NULL,cssElCFun_taList_taBase__MoveBefore_stub,TA_taList_taBase__MoveBefore_MethArgs},
  {&TA_bool,NULL,"MoveAfter"," move item so that it appears just after the target item trg in the list","CAT_Modify ","",
    1,2,-1,1,0,NULL,cssElCFun_taList_taBase__MoveAfter_stub,TA_taList_taBase__MoveAfter_MethArgs},
  {NULL,"::taBase_ptr","SafeEl"," get element at index","CAT_Access ","",
    0,1,-1,0,0,NULL,cssElCFun_taList_taBase__SafeEl_stub,TA_taList_taBase__SafeEl_MethArgs},
  {NULL,"::taBase_ptr","FastEl"," fast element (no range checking)","CAT_Access ","",
    0,1,-1,0,0,NULL,cssElCFun_taList_taBase__FastEl_stub,TA_taList_taBase__FastEl_MethArgs},
  {NULL,"::taBase_ptr","DefaultEl"," returns the element specified as the default for this list","CAT_Access ","",
    0,0,-1,0,0,NULL,cssElCFun_taList_taBase__DefaultEl_stub,NULL},
  {NULL,"::taBase_ptr","Edit_El"," Edit given list item","MENU MENU_ON_Edit USE_RVAL ARG_ON_OBJ CAT_Access ","",
    0,1,-1,0,0,NULL,cssElCFun_taList_taBase__Edit_El_stub,TA_taList_taBase__Edit_El_MethArgs},
  {NULL,"::taBase_ptr","FindName"," Find element with given name (item_nm)","MENU USE_RVAL ARGC_1 CAT_Access ","",
    0,2,1,1,0,NULL,cssElCFun_taList_taBase__FindName_stub,TA_taList_taBase__FindName_MethArgs},
  {NULL,"::taBase_ptr","FindType"," find given type element (NULL = not here), sets idx","CAT_Access ","",
    0,2,1,1,0,NULL,cssElCFun_taList_taBase__FindType_stub,TA_taList_taBase__FindType_MethArgs},
  {NULL,"::taBase_ptr","First"," look at the first element; NULL if none","CAT_Access ","",
    0,0,-1,0,0,NULL,cssElCFun_taList_taBase__First_stub,NULL},
  {NULL,"::taBase_ptr","Pop"," pop the last element off the stack","CAT_Modify ","",
    0,0,-1,1,0,NULL,cssElCFun_taList_taBase__Pop_stub,NULL},
  {NULL,"::taBase_ptr","Peek"," peek at the last element on the stack, if any","CAT_Access ","",
    0,0,-1,1,0,NULL,cssElCFun_taList_taBase__Peek_stub,NULL},
  {NULL,"::taBase_ptr","AddUniqNameOld"," add so that name is unique, old used if dupl, returns one used","CAT_Modify ","",
    0,1,-1,1,0,NULL,cssElCFun_taList_taBase__AddUniqNameOld_stub,TA_taList_taBase__AddUniqNameOld_MethArgs},
  {NULL,"::taBase_ptr","LinkUniqNameOld"," link so that name is unique, old used if dupl, returns one used","CAT_Modify ","",
    0,1,-1,1,0,NULL,cssElCFun_taList_taBase__LinkUniqNameOld_stub,TA_taList_taBase__LinkUniqNameOld_MethArgs},
  NULL};
static EnumDef_data TA_taList_taDataView__Orientation[]={
  {"Horizontal","","",1},
  {"Vertical","","",2},
  NULL};
static EnumDef_data TA_taList_taDataView__ValType[]={
  {"VT_STRING"," an ANSI string of any length","",0},
  {"VT_DOUBLE"," a 8-byte floating point value (aprox 15 sig decimal digits)","",1},
  {"VT_FLOAT"," a 4-byte floating point value (aprox 7 sig decimal digits)","",2},
  {"VT_INT"," a 32-bit signed integer","",3},
  {"VT_BYTE"," an unsigned 8-bit integer; used mostly for image components (rgb)","",4},
  {"VT_VARIANT"," a Variant, which can hold scalars, matrices, and objects","",5},
  NULL};
static EnumDef_data TA_taList_taDataView__BaseFlags[]={
  {"THIS_INVALID"," CheckThisConfig_impl has detected a problem","",1},
  {"CHILD_INVALID"," CheckChildConfig_impl returns issue with a child","",2},
  {"DESTROYING"," Set in Destroying at the very beginning of destroy","",64},
  {"DESTROYED"," set in base destroy (DEBUG only); lets us detect multi destroys","",128},
  NULL};
static EnumDef_data TA_taList_taDataView__DumpQueryResult[]={
  {"DQR_NO_SAVE"," definitely do not save","",0},
  {"DQR_SAVE"," definitely save","",1},
  {"DQR_DEFAULT"," do default for this member (this is the base result)","",2},
  NULL};
static MethodArgs_data TA_taList_taDataView__MoveBefore_MethArgs[]={
  {NULL,"::taDataView_ptr","trg",""},
  {NULL,"::taDataView_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_taDataView__MoveAfter_MethArgs[]={
  {NULL,"::taDataView_ptr","trg",""},
  {NULL,"::taDataView_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_taDataView__SafeEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taList_taDataView__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taList_taDataView__Edit_El_MethArgs[]={
  {NULL,"::taDataView_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_taDataView__FindName_MethArgs[]={
  {&TA_const_taString_ref,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","no_idx"},
  NULL};
static MethodArgs_data TA_taList_taDataView__FindType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"item_tp",""},
  {&TA_int_ref,NULL,"idx","no_idx"},
  NULL};
static MethodArgs_data TA_taList_taDataView__AddUniqNameOld_MethArgs[]={
  {NULL,"::taDataView_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_taDataView__LinkUniqNameOld_MethArgs[]={
  {NULL,"::taDataView_ptr","item",""},
  NULL};
static MethodDef_data TA_taList_taDataView__MethodDef[]={
  {&TA_bool,NULL,"MoveBefore"," move item so that it appears just before the target item trg in the list","CAT_Modify ","",
    1,2,-1,1,0,NULL,cssElCFun_taList_taDataView__MoveBefore_stub,TA_taList_taDataView__MoveBefore_MethArgs},
  {&TA_bool,NULL,"MoveAfter"," move item so that it appears just after the target item trg in the list","CAT_Modify ","",
    1,2,-1,1,0,NULL,cssElCFun_taList_taDataView__MoveAfter_stub,TA_taList_taDataView__MoveAfter_MethArgs},
  {NULL,"::taDataView_ptr","SafeEl"," get element at index","CAT_Access ","",
    0,1,-1,0,0,NULL,cssElCFun_taList_taDataView__SafeEl_stub,TA_taList_taDataView__SafeEl_MethArgs},
  {NULL,"::taDataView_ptr","FastEl"," fast element (no range checking)","CAT_Access ","",
    0,1,-1,0,0,NULL,cssElCFun_taList_taDataView__FastEl_stub,TA_taList_taDataView__FastEl_MethArgs},
  {NULL,"::taDataView_ptr","DefaultEl"," returns the element specified as the default for this list","CAT_Access ","",
    0,0,-1,0,0,NULL,cssElCFun_taList_taDataView__DefaultEl_stub,NULL},
  {NULL,"::taDataView_ptr","Edit_El"," Edit given list item","MENU MENU_ON_Edit USE_RVAL ARG_ON_OBJ CAT_Access ","",
    0,1,-1,0,0,NULL,cssElCFun_taList_taDataView__Edit_El_stub,TA_taList_taDataView__Edit_El_MethArgs},
  {NULL,"::taDataView_ptr","FindName"," Find element with given name (item_nm)","MENU USE_RVAL ARGC_1 CAT_Access ","",
    0,2,1,1,0,NULL,cssElCFun_taList_taDataView__FindName_stub,TA_taList_taDataView__FindName_MethArgs},
  {NULL,"::taDataView_ptr","FindType"," find given type element (NULL = not here), sets idx","CAT_Access ","",
    0,2,1,1,0,NULL,cssElCFun_taList_taDataView__FindType_stub,TA_taList_taDataView__FindType_MethArgs},
  {NULL,"::taDataView_ptr","First"," look at the first element; NULL if none","CAT_Access ","",
    0,0,-1,0,0,NULL,cssElCFun_taList_taDataView__First_stub,NULL},
  {NULL,"::taDataView_ptr","Pop"," pop the last element off the stack","CAT_Modify ","",
    0,0,-1,1,0,NULL,cssElCFun_taList_taDataView__Pop_stub,NULL},
  {NULL,"::taDataView_ptr","Peek"," peek at the last element on the stack, if any","CAT_Access ","",
    0,0,-1,1,0,NULL,cssElCFun_taList_taDataView__Peek_stub,NULL},
  {NULL,"::taDataView_ptr","AddUniqNameOld"," add so that name is unique, old used if dupl, returns one used","CAT_Modify ","",
    0,1,-1,1,0,NULL,cssElCFun_taList_taDataView__AddUniqNameOld_stub,TA_taList_taDataView__AddUniqNameOld_MethArgs},
  {NULL,"::taDataView_ptr","LinkUniqNameOld"," link so that name is unique, old used if dupl, returns one used","CAT_Modify ","",
    0,1,-1,1,0,NULL,cssElCFun_taList_taDataView__LinkUniqNameOld_stub,TA_taList_taDataView__LinkUniqNameOld_MethArgs},
  NULL};
static MethodArgs_data TA_DataView_List_SafeEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_DataView_List_FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_DataView_List_DoAction_MethArgs[]={
  {NULL,"taDataView::DataViewAction","act",""},
  NULL};
static MethodDef_data TA_DataView_List_MethodDef[]={
  {&TA_taDataView_ptr,NULL,"SafeEl","","","",
    0,1,-1,0,0,NULL,cssElCFun_DataView_List_SafeEl_stub,TA_DataView_List_SafeEl_MethArgs},
  {&TA_taDataView_ptr,NULL,"FastEl","","","",
    0,1,-1,0,0,NULL,cssElCFun_DataView_List_FastEl_stub,TA_DataView_List_FastEl_MethArgs},
  {&TA_void,NULL,"DoAction"," do a single action on all items; we also do self->Reset on Reset_impl","","",
    0,1,-1,1,0,NULL,cssElCFun_DataView_List_DoAction_stub,TA_DataView_List_DoAction_MethArgs},
  NULL};
static MethodArgs_data TA_taArray_base_New_MethArgs[]={
  {&TA_int,NULL,"n_objs","1"},
  {&TA_TypeDef_ptr,NULL,"type","__null"},
  NULL};
static MethodArgs_data TA_taArray_base_HasBaseFlag_MethArgs[]={
  {&TA_int,NULL,"flag",""},
  NULL};
static MethodArgs_data TA_taArray_base_SetBaseFlag_MethArgs[]={
  {&TA_int,NULL,"flag",""},
  NULL};
static MethodArgs_data TA_taArray_base_ClearBaseFlag_MethArgs[]={
  {&TA_int,NULL,"flag",""},
  NULL};
static MethodArgs_data TA_taArray_base_SetEnabled_MethArgs[]={
  {&TA_bool,NULL,"value",""},
  NULL};
static MethodArgs_data TA_taArray_base_GetOwner_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"tp",""},
  NULL};
static MethodArgs_data TA_taArray_base_GetPath_MethArgs[]={
  {&TA_TAPtr,NULL,"ta","__null"},
  {&TA_TAPtr,NULL,"par_stop","__null"},
  NULL};
static MethodArgs_data TA_taArray_base_FindFromPath_MethArgs[]={
  {&TA_const_taString_ref,NULL,"path",""},
  {&TA_MemberDef_ptr_ref,NULL,"ret_md","no_mdef"},
  {&TA_int,NULL,"start","0"},
  NULL};
static MethodArgs_data TA_taArray_base_SetFileName_MethArgs[]={
  {&TA_const_taString_ref,NULL,"val",""},
  NULL};
static MethodArgs_data TA_taArray_base_GetFileNameFmProject_MethArgs[]={
  {&TA_const_taString_ref,NULL,"ext",""},
  {&TA_const_taString_ref,NULL,"tag"," "},
  {&TA_const_taString_ref,NULL,"subdir"," "},
  {&TA_bool,NULL,"dmem_proc_no"," false"},
  NULL};
static MethodArgs_data TA_taArray_base_Load_strm_MethArgs[]={
  {&TA_istream_ref,NULL,"strm",""},
  {&TA_TAPtr,NULL,"par","__null"},
  {&TA_taBase_ptr_ptr,NULL,"loaded_obj_ptr"," __null"},
  NULL};
static MethodArgs_data TA_taArray_base_Load_MethArgs[]={
  {&TA_const_taString_ref,NULL,"fname",""},
  {&TA_taBase_ptr_ptr,NULL,"loaded_obj_ptr"," __null"},
  {&TA_taString,NULL,"context"," taString()"},
  NULL};
static MethodArgs_data TA_taArray_base_Save_strm_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm",""},
  {&TA_TAPtr,NULL,"par","__null"},
  {&TA_int,NULL,"indent","0"},
  NULL};
static MethodArgs_data TA_taArray_base_Save_MethArgs[]={
  {&TA_taString,NULL,"context"," taString()"},
  NULL};
static MethodArgs_data TA_taArray_base_SaveAs_MethArgs[]={
  {&TA_const_taString_ref,NULL,"fname"," taString()"},
  {&TA_taString,NULL,"context"," taString()"},
  NULL};
static MethodArgs_data TA_taArray_base_StructUpdate_MethArgs[]={
  {&TA_bool,NULL,"begin",""},
  NULL};
static MethodArgs_data TA_taArray_base_DataUpdate_MethArgs[]={
  {&TA_bool,NULL,"begin",""},
  NULL};
static MethodArgs_data TA_taArray_base_setDirty_MethArgs[]={
  {&TA_bool,NULL,"value",""},
  NULL};
static MethodArgs_data TA_taArray_base_CheckConfig_MethArgs[]={
  {&TA_bool,NULL,"quiet"," false"},
  NULL};
static MethodArgs_data TA_taArray_base_CheckConfig_Gui_MethArgs[]={
  {&TA_bool,NULL,"confirm_success"," true"},
  {&TA_bool,NULL,"quiet"," false"},
  NULL};
static MethodArgs_data TA_taArray_base_CopyFrom_MethArgs[]={
  {&TA_TAPtr,NULL,"cpy_from",""},
  NULL};
static MethodArgs_data TA_taArray_base_CopyTo_MethArgs[]={
  {&TA_TAPtr,NULL,"cpy_to",""},
  NULL};
static MethodArgs_data TA_taArray_base_ChangeMyType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"new_type",""},
  NULL};
static MethodArgs_data TA_taArray_base_InheritsFrom_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"it",""},
  NULL};
static MethodArgs_data TA_taArray_base_InheritsFromName_MethArgs[]={
  {&TA_const_char_ptr,NULL,"nm",""},
  NULL};
static MethodArgs_data TA_taArray_base_GetEnumString_MethArgs[]={
  {&TA_const_taString_ref,NULL,"enum_tp_nm",""},
  {&TA_int,NULL,"enum_val",""},
  NULL};
static MethodArgs_data TA_taArray_base_GetEnumVal_MethArgs[]={
  {&TA_const_taString_ref,NULL,"enum_nm",""},
  {&TA_taString_ref,NULL,"enum_tp_nm"," no_name"},
  NULL};
static MethodArgs_data TA_taArray_base_GetUserDataList_MethArgs[]={
  {&TA_bool,NULL,"fc"," false"},
  NULL};
static MethodArgs_data TA_taArray_base_HasUserData_MethArgs[]={
  {&TA_const_taString_ref,NULL,"key",""},
  NULL};
static MethodArgs_data TA_taArray_base_GetUserData_MethArgs[]={
  {&TA_const_taString_ref,NULL,"key",""},
  NULL};
static MethodArgs_data TA_taArray_base_GetUserDataAsBool_MethArgs[]={
  {&TA_const_taString_ref,NULL,"key",""},
  NULL};
static MethodArgs_data TA_taArray_base_GetUserDataAsInt_MethArgs[]={
  {&TA_const_taString_ref,NULL,"key",""},
  NULL};
static MethodArgs_data TA_taArray_base_GetUserDataAsFloat_MethArgs[]={
  {&TA_const_taString_ref,NULL,"key",""},
  NULL};
static MethodArgs_data TA_taArray_base_GetUserDataAsDouble_MethArgs[]={
  {&TA_const_taString_ref,NULL,"key",""},
  NULL};
static MethodArgs_data TA_taArray_base_GetUserDataAsString_MethArgs[]={
  {&TA_const_taString_ref,NULL,"key",""},
  NULL};
static MethodArgs_data TA_taArray_base_SetUserData_MethArgs[]={
  {&TA_const_taString_ref,NULL,"key",""},
  {&TA_const_Variant_ref,NULL,"value",""},
  NULL};
static MethodArgs_data TA_taArray_base_EditDialog_MethArgs[]={
  {&TA_bool,NULL,"modal"," false"},
  NULL};
static MethodArgs_data TA_taArray_base_ReShowEdit_MethArgs[]={
  {&TA_bool,NULL,"force"," false"},
  NULL};
static MethodArgs_data TA_taArray_base_CallFun_MethArgs[]={
  {&TA_const_taString_ref,NULL,"fun_name",""},
  NULL};
static MethodArgs_data TA_taArray_base_SelectForEdit_MethArgs[]={
  {&TA_MemberDef_ptr,NULL,"member",""},
  {&TA_SelectEdit_ptr,NULL,"editor",""},
  {&TA_const_taString_ref,NULL,"extra_label",""},
  NULL};
static MethodArgs_data TA_taArray_base_SelectForEditNm_MethArgs[]={
  {&TA_const_taString_ref,NULL,"memb_nm",""},
  {&TA_SelectEdit_ptr,NULL,"editor",""},
  {&TA_const_taString_ref,NULL,"extra_label",""},
  NULL};
static MethodArgs_data TA_taArray_base_SelectForEditSearch_MethArgs[]={
  {&TA_const_taString_ref,NULL,"memb_contains",""},
  {&TA_SelectEdit_ptr_ref,NULL,"editor",""},
  NULL};
static MethodArgs_data TA_taArray_base_SelectFunForEdit_MethArgs[]={
  {&TA_MethodDef_ptr,NULL,"function",""},
  {&TA_SelectEdit_ptr,NULL,"editor",""},
  {&TA_const_taString_ref,NULL,"extra_label",""},
  NULL};
static MethodArgs_data TA_taArray_base_SelectFunForEditNm_MethArgs[]={
  {&TA_const_taString_ref,NULL,"function_nm",""},
  {&TA_SelectEdit_ptr,NULL,"editor",""},
  {&TA_const_taString_ref,NULL,"extra_label",""},
  NULL};
static MethodArgs_data TA_taArray_base_InRange_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taArray_base_Alloc_MethArgs[]={
  {&TA_int,NULL,"n",""},
  NULL};
static MethodArgs_data TA_taArray_base_Equal__MethArgs[]={
  {&TA_const_taArray_impl_ref,NULL,"ar",""},
  NULL};
static MethodArgs_data TA_taArray_base_SetSize_MethArgs[]={
  {&TA_int,NULL,"sz",""},
  NULL};
static MethodArgs_data TA_taArray_base_AddBlank_MethArgs[]={
  {&TA_int,NULL,"n_els"," 1"},
  NULL};
static MethodArgs_data TA_taArray_base_RemoveIdx_MethArgs[]={
  {&TA_uint,NULL,"idx",""},
  {&TA_int,NULL,"n_els","1"},
  NULL};
static MethodArgs_data TA_taArray_base_MoveIdx_MethArgs[]={
  {&TA_int,NULL,"from",""},
  {&TA_int,NULL,"to",""},
  NULL};
static MethodArgs_data TA_taArray_base_SwapIdx_MethArgs[]={
  {&TA_int,NULL,"pos1",""},
  {&TA_int,NULL,"pos2",""},
  NULL};
static MethodArgs_data TA_taArray_base_Sort_MethArgs[]={
  {&TA_bool,NULL,"descending","false"},
  NULL};
static MethodArgs_data TA_taArray_base_ShiftLeft_MethArgs[]={
  {&TA_int,NULL,"nshift",""},
  NULL};
static MethodArgs_data TA_taArray_base_ShiftLeftPct_MethArgs[]={
  {&TA_float,NULL,"pct",""},
  NULL};
static MethodArgs_data TA_taArray_base_V_Flip_MethArgs[]={
  {&TA_int,NULL,"width",""},
  NULL};
static MethodArgs_data TA_taArray_base_Duplicate_MethArgs[]={
  {&TA_const_taArray_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taArray_base_DupeUnique_MethArgs[]={
  {&TA_const_taArray_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taArray_base_Copy_Common_MethArgs[]={
  {&TA_const_taArray_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taArray_base_Copy_Duplicate_MethArgs[]={
  {&TA_const_taArray_impl_ref,NULL,"cp",""},
  NULL};
static MethodArgs_data TA_taArray_base_CopyVals_MethArgs[]={
  {&TA_const_taArray_impl_ref,NULL,"from",""},
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end","-1"},
  {&TA_int,NULL,"at","0"},
  NULL};
static MethodArgs_data TA_taArray_base_List_MethArgs[]={
  {&TA_ostream_ref,NULL,"strm"," cout"},
  NULL};
static MethodArgs_data TA_taArray_base_InitFromString_MethArgs[]={
  {&TA_const_taString_ref,NULL,"val",""},
  NULL};
static MethodDef_data TA_taArray_base_MethodDef[]={
  {&TA_taBase_ptr,NULL,"New"," Create n_objs objects of given type (type is optional)","CAT_ObjectMgmt ","",
    0,2,0,1,0,NULL,cssElCFun_taArray_base_New_stub,TA_taArray_base_New_MethArgs},
  {&TA_bool,NULL,"HasBaseFlag"," true if flag set, or if multiple, any set","CAT_ObjectMgmt ","",
    0,1,-1,0,0,NULL,cssElCFun_taArray_base_HasBaseFlag_stub,TA_taArray_base_HasBaseFlag_MethArgs},
  {&TA_void,NULL,"SetBaseFlag"," sets the flag(s)","CAT_ObjectMgmt ","",
    0,1,-1,0,0,NULL,cssElCFun_taArray_base_SetBaseFlag_stub,TA_taArray_base_SetBaseFlag_MethArgs},
  {&TA_void,NULL,"ClearBaseFlag"," clears the flag(s)","CAT_ObjectMgmt ","",
    0,1,-1,0,0,NULL,cssElCFun_taArray_base_ClearBaseFlag_stub,TA_taArray_base_ClearBaseFlag_MethArgs},
  {&TA_int,NULL,"GetIndex"," object's index within an owner list. cached by some objs.","CAT_ObjectMgmt ","",
    0,0,-1,1,0,NULL,cssElCFun_taArray_base_GetIndex_stub,NULL},
  {&TA_int,NULL,"GetEnabled"," for items that support an enabled/disabled state; -1=n/a, 0=disabled, 1=enabled (note: (bool)-1 = true)","","",
    0,0,-1,1,0,NULL,cssElCFun_taArray_base_GetEnabled_stub,NULL},
  {&TA_void,NULL,"SetEnabled","","","",
    0,1,-1,1,0,NULL,cssElCFun_taArray_base_SetEnabled_stub,TA_taArray_base_SetEnabled_MethArgs},
  {&TA_taList_impl_ptr,NULL,"children_"," for lists, and for taOBase w/ default children","","",
    0,0,-1,1,0,NULL,cssElCFun_taArray_base_children__stub,NULL},
  {&TA_TAPtr,NULL,"GetOwner","","","",
    3,1,-1,0,0,NULL,cssElCFun_taArray_base_GetOwner_stub,TA_taArray_base_GetOwner_MethArgs},
  {&TA_taString,NULL,"GetPath"," get path without name informtation, stop at par_stop if non-null","CAT_ObjectMgmt ","",
    0,2,0,1,0,NULL,cssElCFun_taArray_base_GetPath_stub,TA_taArray_base_GetPath_MethArgs},
  {&TA_TAPtr,NULL,"FindFromPath"," find object from path (starting from this, and position start of the path)","CAT_ObjectMgmt ","",
    0,3,1,1,0,NULL,cssElCFun_taArray_base_FindFromPath_stub,TA_taArray_base_FindFromPath_MethArgs},
  {&TA_bool,NULL,"SetFileName"," set file name for object","CAT_File ","",
    0,1,-1,1,0,NULL,cssElCFun_taArray_base_SetFileName_stub,TA_taArray_base_SetFileName_MethArgs},
  {&TA_taString,NULL,"GetFileName"," get file name object was last saved with","CAT_File ","",
    0,0,-1,1,0,NULL,cssElCFun_taArray_base_GetFileName_stub,NULL},
  {&TA_taString,NULL,"GetFileNameFmProject"," get file name from project file name -- useful for saving files associated with the project; ext = extension; tag = additional tag; subdir = additional directory after any existing in project name; fname = proj->base_name (subdir) + tag + ext; if dmem_proc_no, add dmem proc no to file name. empty if project not found","CAT_File ","",
    0,4,1,1,0,NULL,cssElCFun_taArray_base_GetFileNameFmProject_stub,TA_taArray_base_GetFileNameFmProject_MethArgs},
  {&TA_int,NULL,"Load_strm"," Load object data from a file -- sets pointer to loaded obj if non-null: could actually load a different object than this (e.g. if this is a list or group)","CAT_File ","",
    0,3,1,1,0,NULL,cssElCFun_taArray_base_Load_strm_stub,TA_taArray_base_Load_strm_MethArgs},
  {&TA_int,NULL,"Load"," Load object data from given file name (if empty, prompt user for a name) -- sets pointer to loaded obj if non-null: could actually load a different object than this (e.g. if this is a list or group)","MENU MENU_ON_Object ARGC_0 CAT_File ","",
    0,3,0,1,0,NULL,cssElCFun_taArray_base_Load_stub,TA_taArray_base_Load_MethArgs},
  {&TA_int,NULL,"Save_strm"," Save object data to a file stream","CAT_File ","",
    0,3,1,1,0,NULL,cssElCFun_taArray_base_Save_strm_stub,TA_taArray_base_Save_strm_MethArgs},
  {&TA_int,NULL,"Save"," saves the object to a file using current file name (from GetFileName() function); if context='' then default is used","MENU MENU_ON_Object ARGC_0 CAT_File ","",
    0,1,0,1,0,NULL,cssElCFun_taArray_base_Save_stub,TA_taArray_base_Save_MethArgs},
  {&TA_int,NULL,"SaveAs"," Saves object data to a new file -- if fname is empty, it prompts the user; if context='' then default is used","MENU ARGC_0 CAT_File ","",
    0,2,0,1,0,NULL,cssElCFun_taArray_base_SaveAs_stub,TA_taArray_base_SaveAs_MethArgs},
  {&TA_void,NULL,"UpdateAfterEdit"," called after editing, or any user change to members (eg. in the interface, script)","CAT_ObjectMgmt ","",
    0,0,-1,1,0,NULL,cssElCFun_taArray_base_UpdateAfterEdit_stub,NULL},
  {&TA_void,NULL,"UpdateAllViews"," called after data changes, to update views","CAT_Display ","",
    0,0,-1,1,0,NULL,cssElCFun_taArray_base_UpdateAllViews_stub,NULL},
  {&TA_void,NULL,"StructUpdate"," bracket structural changes with (nestable) true/false calls;","CAT_ObjectMgmt ","",
    0,1,-1,0,0,NULL,cssElCFun_taArray_base_StructUpdate_stub,TA_taArray_base_StructUpdate_MethArgs},
  {&TA_void,NULL,"DataUpdate"," bracket data value changes with (nestable) true/false calls;","CAT_ObjectMgmt ","",
    0,1,-1,0,0,NULL,cssElCFun_taArray_base_DataUpdate_stub,TA_taArray_base_DataUpdate_MethArgs},
  {&TA_void,NULL,"setDirty"," set the dirty flag indicating a change in object values; 'true' gets forwarded up; 'false' does nothing","CAT_ObjectMgmt ","",
    0,1,-1,1,0,NULL,cssElCFun_taArray_base_setDirty_stub,TA_taArray_base_setDirty_MethArgs},
  {&TA_bool,NULL,"CheckConfig"," check the configuration of this object and all its children (defaults to no confirm of success)","CAT_ObjectMgmt ","",
    0,1,0,0,0,NULL,cssElCFun_taArray_base_CheckConfig_stub,TA_taArray_base_CheckConfig_MethArgs},
  {&TA_bool,NULL,"CheckConfig_Gui"," check the configuration of this object and all its children -- failed items highlighted in red, items with failed children in yellow","MENU MENU_ON_Object CAT_ObjectMgmt ARGC_0 LABEL_CheckConfig ","",
    0,2,0,0,0,NULL,cssElCFun_taArray_base_CheckConfig_Gui_stub,TA_taArray_base_CheckConfig_Gui_MethArgs},
  {&TA_bool,NULL,"CopyFrom"," Copy from given object into this object","MENU MENU_ON_Object MENU_SEP_BEFORE TYPE_ON_this NO_SCOPE CAT_ObjectMgmt ","",
    0,1,-1,1,0,NULL,cssElCFun_taArray_base_CopyFrom_stub,TA_taArray_base_CopyFrom_MethArgs},
  {&TA_bool,NULL,"CopyTo"," Copy to given object from this object","MENU TYPE_ON_this NO_SCOPE CAT_ObjectMgmt ","",
    0,1,-1,1,0,NULL,cssElCFun_taArray_base_CopyTo_stub,TA_taArray_base_CopyTo_MethArgs},
  {&TA_bool,NULL,"DuplicateMe"," Make another copy of myself (done through owner)","MENU CONFIRM CAT_ObjectMgmt ","",
    0,0,-1,1,0,NULL,cssElCFun_taArray_base_DuplicateMe_stub,NULL},
  {&TA_bool,NULL,"ChangeMyType"," Change me into a different type of object, copying current info (done through owner)","MENU TYPE_this CAT_ObjectMgmt ","",
    0,1,-1,1,0,NULL,cssElCFun_taArray_base_ChangeMyType_stub,TA_taArray_base_ChangeMyType_MethArgs},
  {&TA_bool,NULL,"InheritsFrom"," does this inherit from given type ","CAT_ObjectMgmt ","",
    1,1,-1,0,0,NULL,cssElCFun_taArray_base_InheritsFrom_stub,TA_taArray_base_InheritsFrom_MethArgs},
  {&TA_bool,NULL,"InheritsFromName"," does this inherit from given type name?","CAT_ObjectMgmt ","",
    0,1,-1,0,0,NULL,cssElCFun_taArray_base_InheritsFromName_stub,TA_taArray_base_InheritsFromName_MethArgs},
  {&TA_taString,NULL,"GetEnumString"," get the name corresponding to given enum value in enum type enum_tp_nm","CAT_ObjectMgmt ","",
    0,2,-1,1,0,NULL,cssElCFun_taArray_base_GetEnumString_stub,TA_taArray_base_GetEnumString_MethArgs},
  {&TA_int,NULL,"GetEnumVal"," get the enum value corresponding to the given enum name (-1 if not found), and sets enum_tp_nm to name of type this enum belongs in (empty if not found)","CAT_ObjectMgmt ","",
    0,2,1,1,0,NULL,cssElCFun_taArray_base_GetEnumVal_stub,TA_taArray_base_GetEnumVal_MethArgs},
  {&TA_UserDataItem_List_ptr,NULL,"GetUserDataList"," gets the userdatalist for this class","CAT_UserData EXPERT ","",
    0,1,0,1,0,NULL,cssElCFun_taArray_base_GetUserDataList_stub,TA_taArray_base_GetUserDataList_MethArgs},
  {&TA_bool,NULL,"HasUserData"," returns true if UserData exists for this key (case sens)","CAT_UserData EXPERT ","",
    0,1,-1,1,0,NULL,cssElCFun_taArray_base_HasUserData_stub,TA_taArray_base_HasUserData_MethArgs},
  {&TA_const_Variant,NULL,"GetUserData"," get specified user data; returns class default value if not present, or nilVariant if no default user data or class doesn't support UserData","CAT_UserData ","",
    0,1,-1,1,0,NULL,cssElCFun_taArray_base_GetUserData_stub,TA_taArray_base_GetUserData_MethArgs},
  {&TA_bool,NULL,"GetUserDataAsBool"," get specified user data as bool (see GetUserData)","CAT_UserData EXPERT ","",
    0,1,-1,0,0,NULL,cssElCFun_taArray_base_GetUserDataAsBool_stub,TA_taArray_base_GetUserDataAsBool_MethArgs},
  {&TA_int,NULL,"GetUserDataAsInt"," get specified user data as int (see GetUserData)","CAT_UserData EXPERT ","",
    0,1,-1,0,0,NULL,cssElCFun_taArray_base_GetUserDataAsInt_stub,TA_taArray_base_GetUserDataAsInt_MethArgs},
  {&TA_float,NULL,"GetUserDataAsFloat"," get specified user data as float (see GetUserData)","CAT_UserData EXPERT ","",
    0,1,-1,0,0,NULL,cssElCFun_taArray_base_GetUserDataAsFloat_stub,TA_taArray_base_GetUserDataAsFloat_MethArgs},
  {&TA_double,NULL,"GetUserDataAsDouble"," get specified user data as double (see GetUserData)","CAT_UserData EXPERT ","",
    0,1,-1,0,0,NULL,cssElCFun_taArray_base_GetUserDataAsDouble_stub,TA_taArray_base_GetUserDataAsDouble_MethArgs},
  {&TA_const_taString,NULL,"GetUserDataAsString"," get specified user data as String (see GetUserData)","CAT_UserData EXPERT ","",
    0,1,-1,0,0,NULL,cssElCFun_taArray_base_GetUserDataAsString_stub,TA_taArray_base_GetUserDataAsString_MethArgs},
  {&TA_void,NULL,"SetUserData"," set user data; ignored if class does not support user data","CAT_UserData EXPERT ","",
    0,2,-1,1,0,NULL,cssElCFun_taArray_base_SetUserData_stub,TA_taArray_base_SetUserData_MethArgs},
  {&TA_int,NULL,"Edit"," Edit this object using the gui","MENU ARGC_0 MENU_ON_Object MENU_CONTEXT NO_SCRIPT CAT_Display ","",
    0,0,-1,1,0,NULL,cssElCFun_taArray_base_Edit_stub,NULL},
  {&TA_int,NULL,"EditDialog"," Edit this object in a popup dialog using the gui","MENU ARGC_0 MENU_ON_Object MENU_CONTEXT NO_SCRIPT CAT_Display ","",
    0,1,0,1,0,NULL,cssElCFun_taArray_base_EditDialog_stub,TA_taArray_base_EditDialog_MethArgs},
  {&TA_void,NULL,"BrowseMe"," show this object in its own browser ","MENU MENU_ON_Object MENU_SEP_AFTER MENU_CONTEXT CAT_Display ","",
    0,0,-1,1,0,NULL,cssElCFun_taArray_base_BrowseMe_stub,NULL},
  {&TA_bool,NULL,"ReShowEdit"," reshows any open edit dialogs for this object","CAT_Display ","",
    0,1,0,1,0,NULL,cssElCFun_taArray_base_ReShowEdit_stub,TA_taArray_base_ReShowEdit_MethArgs},
  {&TA_void,NULL,"CallFun"," call function of given name on this object, prompting for args using gui interface","CAT_ObjectMgmt ","",
    0,1,-1,1,0,NULL,cssElCFun_taArray_base_CallFun_stub,TA_taArray_base_CallFun_MethArgs},
  {&TA_bool,NULL,"SelectForEdit"," select a given member for editing in an edit dialog that collects selected members and methods from different objects (if editor is NULL, a new one is created in .edits). returns false if method was already selected","MENU CAT_Display NULL_OK ","",
    0,3,-1,1,0,NULL,cssElCFun_taArray_base_SelectForEdit_stub,TA_taArray_base_SelectForEdit_MethArgs},
  {&TA_bool,NULL,"SelectForEditNm"," select a given member (by name) for editing in an edit dialog that collects selected members from different objects (if editor is NULL, a new one is created in .edits). returns false if method was already selected","","",
    0,3,-1,1,0,NULL,cssElCFun_taArray_base_SelectForEditNm_stub,TA_taArray_base_SelectForEditNm_MethArgs},
  {&TA_int,NULL,"SelectForEditSearch"," search among this object and any sub-objects for members containing given string, and add to given select editor (if NULL, a new one is created in .edits). returns number found","MENU NULL_OK CAT_Display ","",
    0,2,-1,1,0,NULL,cssElCFun_taArray_base_SelectForEditSearch_stub,TA_taArray_base_SelectForEditSearch_MethArgs},
  {&TA_bool,NULL,"SelectFunForEdit"," select a given function (method) for calling in a select edit dialog that collects selected members and methods from different objects (if editor is NULL, a new one is created in .edits). returns false if method was already selected","MENU NULL_OK CAT_Display ","",
    0,3,-1,1,0,NULL,cssElCFun_taArray_base_SelectFunForEdit_stub,TA_taArray_base_SelectFunForEdit_MethArgs},
  {&TA_bool,NULL,"SelectFunForEditNm"," select a given method (by name) for editing in an edit dialog that collects selected members from different objects (if editor is NULL, a new one is created in .edits) returns false if method was already selected","","",
    0,3,-1,1,0,NULL,cssElCFun_taArray_base_SelectFunForEditNm_stub,TA_taArray_base_SelectFunForEditNm_MethArgs},
  {&TA_void,NULL,"CloseLater"," PERMANENTLY Destroy this object! This is not Iconify.","MENU CONFIRM NO_REVERT_AFTER LABEL_Close_(Destroy) NO_MENU_CONTEXT CAT_ObjectMgmt ","",
    0,0,-1,1,0,NULL,cssElCFun_taArray_base_CloseLater_stub,NULL},
  {&TA_void,NULL,"Help"," get help on using this object","MENU CAT_Display ","",
    0,0,-1,1,0,NULL,cssElCFun_taArray_base_Help_stub,NULL},
  {&TA_bool,NULL,"InRange","","","",
    0,1,-1,0,0,NULL,cssElCFun_taArray_base_InRange_stub,TA_taArray_base_InRange_MethArgs},
  {&TA_void,NULL,"Alloc"," allocate storage for at least the given size","","",
    0,1,-1,1,0,NULL,cssElCFun_taArray_base_Alloc_stub,TA_taArray_base_Alloc_MethArgs},
  {&TA_void,NULL,"Reset"," reset the list to zero size (does not free memory)","","",
    0,0,-1,1,0,NULL,cssElCFun_taArray_base_Reset_stub,NULL},
  {&TA_bool,NULL,"Equal_"," value equality, implements == and != operators, ar must be same type","","",
    0,1,-1,1,0,NULL,cssElCFun_taArray_base_Equal__stub,TA_taArray_base_Equal__MethArgs},
  {&TA_void_ptr,NULL,"BlankEl_"," address of a blank element, for initializing empty items","","",
    0,0,-1,1,0,NULL,cssElCFun_taArray_base_BlankEl__stub,NULL},
  {&TA_void,NULL,"SetSize"," force array to be of given size by inserting blanks or removing","MENU MENU_ON_Edit ","",
    0,1,-1,1,0,NULL,cssElCFun_taArray_base_SetSize_stub,TA_taArray_base_SetSize_MethArgs},
  {&TA_void,NULL,"AddBlank"," Add n_els empty elements to the end of the array","MENU MENU_ON_Edit ","",
    0,1,0,1,0,NULL,cssElCFun_taArray_base_AddBlank_stub,TA_taArray_base_AddBlank_MethArgs},
  {&TA_bool,NULL,"RemoveIdx"," Remove (n_els) item(s) at idx, returns success","MENU MENU_ON_Edit ","",
    0,2,1,1,0,NULL,cssElCFun_taArray_base_RemoveIdx_stub,TA_taArray_base_RemoveIdx_MethArgs},
  {&TA_bool,NULL,"MoveIdx"," move item from index to index","MENU ","",
    0,2,-1,1,0,NULL,cssElCFun_taArray_base_MoveIdx_stub,TA_taArray_base_MoveIdx_MethArgs},
  {&TA_bool,NULL,"SwapIdx"," Swap the elements in the two given positions on the list","CAT_Modify ","",
    0,2,-1,1,0,NULL,cssElCFun_taArray_base_SwapIdx_stub,TA_taArray_base_SwapIdx_MethArgs},
  {&TA_void,NULL,"Permute"," permute the items in the list into a random order","MENU ","",
    0,0,-1,1,0,NULL,cssElCFun_taArray_base_Permute_stub,NULL},
  {&TA_void,NULL,"Sort"," sort the list in ascending order (or descending if switched)","MENU ","",
    0,1,0,1,0,NULL,cssElCFun_taArray_base_Sort_stub,TA_taArray_base_Sort_MethArgs},
  {&TA_void,NULL,"ShiftLeft"," shift all the elements in the array to the left by given number of items","","",
    0,1,-1,1,0,NULL,cssElCFun_taArray_base_ShiftLeft_stub,TA_taArray_base_ShiftLeft_MethArgs},
  {&TA_void,NULL,"ShiftLeftPct"," shift the array to the left by given percentage of current size","","",
    0,1,-1,1,0,NULL,cssElCFun_taArray_base_ShiftLeftPct_stub,TA_taArray_base_ShiftLeftPct_MethArgs},
  {&TA_int,NULL,"V_Flip"," vertically flip the array as if it was arrange in a matrix of width","","",
    0,1,-1,1,0,NULL,cssElCFun_taArray_base_V_Flip_stub,TA_taArray_base_V_Flip_MethArgs},
  {&TA_void,NULL,"Duplicate"," duplicate the items in the list","","",
    0,1,-1,1,0,NULL,cssElCFun_taArray_base_Duplicate_stub,TA_taArray_base_Duplicate_MethArgs},
  {&TA_void,NULL,"DupeUnique"," duplicate so result is unique list","","",
    0,1,-1,1,0,NULL,cssElCFun_taArray_base_DupeUnique_stub,TA_taArray_base_DupeUnique_MethArgs},
  {&TA_void,NULL,"Copy_Common"," copy elements in common","","",
    0,1,-1,1,0,NULL,cssElCFun_taArray_base_Copy_Common_stub,TA_taArray_base_Copy_Common_MethArgs},
  {&TA_void,NULL,"Copy_Duplicate"," copy elements in common, duplicating (if necc) any extra on cp","","",
    0,1,-1,1,0,NULL,cssElCFun_taArray_base_Copy_Duplicate_stub,TA_taArray_base_Copy_Duplicate_MethArgs},
  {&TA_void,NULL,"CopyVals"," copy values from other array at given start and end points, and putting at given point in this","","",
    0,4,1,1,0,NULL,cssElCFun_taArray_base_CopyVals_stub,TA_taArray_base_CopyVals_MethArgs},
  {&TA_void,NULL,"List"," print out all of the elements in the array","","",
    0,1,0,1,0,NULL,cssElCFun_taArray_base_List_stub,TA_taArray_base_List_MethArgs},
  {&TA_void,NULL,"InitFromString"," initialize an array from given string (does reset first)","","",
    0,1,-1,1,0,NULL,cssElCFun_taArray_base_InitFromString_stub,TA_taArray_base_InitFromString_MethArgs},
  NULL};
static EnumDef_data TA_taArray_int__Orientation[]={
  {"Horizontal","","",1},
  {"Vertical","","",2},
  NULL};
static EnumDef_data TA_taArray_int__ValType[]={
  {"VT_STRING"," an ANSI string of any length","",0},
  {"VT_DOUBLE"," a 8-byte floating point value (aprox 15 sig decimal digits)","",1},
  {"VT_FLOAT"," a 4-byte floating point value (aprox 7 sig decimal digits)","",2},
  {"VT_INT"," a 32-bit signed integer","",3},
  {"VT_BYTE"," an unsigned 8-bit integer; used mostly for image components (rgb)","",4},
  {"VT_VARIANT"," a Variant, which can hold scalars, matrices, and objects","",5},
  NULL};
static EnumDef_data TA_taArray_int__BaseFlags[]={
  {"THIS_INVALID"," CheckThisConfig_impl has detected a problem","",1},
  {"CHILD_INVALID"," CheckChildConfig_impl returns issue with a child","",2},
  {"DESTROYING"," Set in Destroying at the very beginning of destroy","",64},
  {"DESTROYED"," set in base destroy (DEBUG only); lets us detect multi destroys","",128},
  NULL};
static EnumDef_data TA_taArray_int__DumpQueryResult[]={
  {"DQR_NO_SAVE"," definitely do not save","",0},
  {"DQR_SAVE"," definitely save","",1},
  {"DQR_DEFAULT"," do default for this member (this is the base result)","",2},
  NULL};
static int taArray<int>::* TA_taArray_int__MbrOff;
static MemberDef_data TA_taArray_int__MemberDef[]={
  {NULL,"::int_ptr","el"," Pointer to actual array memory","NO_SHOW NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_taArray_int__MbrOff=(int taArray<int>::*)(&taArray<int>::el))),0,NULL,0},
  {&TA_int,NULL,"err"," what is returned when out of range; MUST INIT IN CONSTRUCTOR","NO_SHOW ","",
    *((ta_memb_ptr*)&(TA_taArray_int__MbrOff=(int taArray<int>::*)(&taArray<int>::err))),0,NULL,0},
  NULL};
static MethodArgs_data TA_taArray_int__SafeEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taArray_int__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taArray_int__RevEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taArray_int__Set_MethArgs[]={
  {&TA_int,NULL,"i",""},
  {NULL,"::const_int_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_int__Add_MethArgs[]={
  {NULL,"::const_int_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_int__AddUnique_MethArgs[]={
  {NULL,"::const_int_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_int__Push_MethArgs[]={
  {NULL,"::const_int_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_int__Insert_MethArgs[]={
  {NULL,"::const_int_ref","item",""},
  {&TA_int,NULL,"indx",""},
  {&TA_int,NULL,"n_els","1"},
  NULL};
static MethodArgs_data TA_taArray_int__FindEl_MethArgs[]={
  {NULL,"::const_int_ref","item",""},
  {&TA_int,NULL,"indx","0"},
  NULL};
static MethodArgs_data TA_taArray_int__RemoveEl_MethArgs[]={
  {NULL,"::const_int_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_int__InitVals_MethArgs[]={
  {NULL,"::const_int_ref","item",""},
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end","-1"},
  NULL};
static MethodDef_data TA_taArray_int__MethodDef[]={
  {NULL,"::const_int_ref","SafeEl"," the element at the given index","MENU MENU_ON_Edit USE_RVAL ","",
    0,1,-1,0,0,NULL,cssElCFun_taArray_int__SafeEl_stub,TA_taArray_int__SafeEl_MethArgs},
  {NULL,"::const_int_ref","FastEl"," fast element (no range checking)","","",
    0,1,-1,0,0,NULL,cssElCFun_taArray_int__FastEl_stub,TA_taArray_int__FastEl_MethArgs},
  {NULL,"::const_int_ref","RevEl"," reverse (index) element (ie. get from the back of the list first)","","",
    0,1,-1,0,0,NULL,cssElCFun_taArray_int__RevEl_stub,TA_taArray_int__RevEl_MethArgs},
  {NULL,"::const_int","Pop"," pop the last item in the array off","","",
    0,0,-1,0,0,NULL,cssElCFun_taArray_int__Pop_stub,NULL},
  {NULL,"::const_int_ref","Peek"," peek at the last item on the array","","",
    0,0,-1,0,0,NULL,cssElCFun_taArray_int__Peek_stub,NULL},
  {&TA_void,NULL,"Set"," use this for safely assigning values to items in the array (Set should update if needed)","","",
    0,2,-1,0,0,NULL,cssElCFun_taArray_int__Set_stub,TA_taArray_int__Set_MethArgs},
  {&TA_void,NULL,"Add"," add the item to the array","MENU ","",
    0,1,-1,0,0,NULL,cssElCFun_taArray_int__Add_stub,TA_taArray_int__Add_MethArgs},
  {&TA_bool,NULL,"AddUnique"," add the item to the array if it isn't already on it, returns true if unique","","",
    0,1,-1,0,0,NULL,cssElCFun_taArray_int__AddUnique_stub,TA_taArray_int__AddUnique_MethArgs},
  {&TA_void,NULL,"Push"," push the item on the end of the array (same as add)","CAT_Modify ","",
    0,1,-1,0,0,NULL,cssElCFun_taArray_int__Push_stub,TA_taArray_int__Push_MethArgs},
  {&TA_void,NULL,"Insert"," Insert (n_els) item(s) at indx (-1 for end) in the array","MENU ","",
    0,3,2,0,0,NULL,cssElCFun_taArray_int__Insert_stub,TA_taArray_int__Insert_MethArgs},
  {&TA_int,NULL,"FindEl"," Find item starting from indx in the array (-1 if not there)","MENU USE_RVAL ","",
    0,2,1,0,0,NULL,cssElCFun_taArray_int__FindEl_stub,TA_taArray_int__FindEl_MethArgs},
  {&TA_bool,NULL,"RemoveEl"," remove given item, returns success","","",
    0,1,-1,1,0,NULL,cssElCFun_taArray_int__RemoveEl_stub,TA_taArray_int__RemoveEl_MethArgs},
  {&TA_void,NULL,"InitVals"," set array elements to specified value starting at start through end (-1 = size)","","",
    0,3,1,1,0,NULL,cssElCFun_taArray_int__InitVals_stub,TA_taArray_int__InitVals_MethArgs},
  NULL};
static MemberDef_data TA_int_Array_MemberDef[]={
  {&TA_int,NULL,"blank"," ","HIDDEN READ_ONLY ","",
    (ta_memb_ptr)NULL,1,(void*)(&int_Array::blank),0},
  NULL};
static MethodArgs_data TA_int_Array_FillSeq_MethArgs[]={
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"inc","1"},
  NULL};
static MethodDef_data TA_int_Array_MethodDef[]={
  {&TA_void,NULL,"FillSeq"," fill array with sequential values starting at start, incrementing by inc","","",
    0,2,0,1,0,NULL,cssElCFun_int_Array_FillSeq_stub,TA_int_Array_FillSeq_MethArgs},
  NULL};
static EnumDef_data TA_taArray_float__Orientation[]={
  {"Horizontal","","",1},
  {"Vertical","","",2},
  NULL};
static EnumDef_data TA_taArray_float__ValType[]={
  {"VT_STRING"," an ANSI string of any length","",0},
  {"VT_DOUBLE"," a 8-byte floating point value (aprox 15 sig decimal digits)","",1},
  {"VT_FLOAT"," a 4-byte floating point value (aprox 7 sig decimal digits)","",2},
  {"VT_INT"," a 32-bit signed integer","",3},
  {"VT_BYTE"," an unsigned 8-bit integer; used mostly for image components (rgb)","",4},
  {"VT_VARIANT"," a Variant, which can hold scalars, matrices, and objects","",5},
  NULL};
static EnumDef_data TA_taArray_float__BaseFlags[]={
  {"THIS_INVALID"," CheckThisConfig_impl has detected a problem","",1},
  {"CHILD_INVALID"," CheckChildConfig_impl returns issue with a child","",2},
  {"DESTROYING"," Set in Destroying at the very beginning of destroy","",64},
  {"DESTROYED"," set in base destroy (DEBUG only); lets us detect multi destroys","",128},
  NULL};
static EnumDef_data TA_taArray_float__DumpQueryResult[]={
  {"DQR_NO_SAVE"," definitely do not save","",0},
  {"DQR_SAVE"," definitely save","",1},
  {"DQR_DEFAULT"," do default for this member (this is the base result)","",2},
  NULL};
static int taArray<float>::* TA_taArray_float__MbrOff;
static MemberDef_data TA_taArray_float__MemberDef[]={
  {NULL,"::float_ptr","el"," Pointer to actual array memory","NO_SHOW NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_taArray_float__MbrOff=(int taArray<float>::*)(&taArray<float>::el))),0,NULL,0},
  {&TA_float,NULL,"err"," what is returned when out of range; MUST INIT IN CONSTRUCTOR","NO_SHOW ","",
    *((ta_memb_ptr*)&(TA_taArray_float__MbrOff=(int taArray<float>::*)(&taArray<float>::err))),0,NULL,0},
  NULL};
static MethodArgs_data TA_taArray_float__SafeEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taArray_float__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taArray_float__RevEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taArray_float__Set_MethArgs[]={
  {&TA_int,NULL,"i",""},
  {NULL,"::const_float_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_float__Add_MethArgs[]={
  {NULL,"::const_float_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_float__AddUnique_MethArgs[]={
  {NULL,"::const_float_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_float__Push_MethArgs[]={
  {NULL,"::const_float_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_float__Insert_MethArgs[]={
  {NULL,"::const_float_ref","item",""},
  {&TA_int,NULL,"indx",""},
  {&TA_int,NULL,"n_els","1"},
  NULL};
static MethodArgs_data TA_taArray_float__FindEl_MethArgs[]={
  {NULL,"::const_float_ref","item",""},
  {&TA_int,NULL,"indx","0"},
  NULL};
static MethodArgs_data TA_taArray_float__RemoveEl_MethArgs[]={
  {NULL,"::const_float_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_float__InitVals_MethArgs[]={
  {NULL,"::const_float_ref","item",""},
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end","-1"},
  NULL};
static MethodDef_data TA_taArray_float__MethodDef[]={
  {NULL,"::const_float_ref","SafeEl"," the element at the given index","MENU MENU_ON_Edit USE_RVAL ","",
    0,1,-1,0,0,NULL,cssElCFun_taArray_float__SafeEl_stub,TA_taArray_float__SafeEl_MethArgs},
  {NULL,"::const_float_ref","FastEl"," fast element (no range checking)","","",
    0,1,-1,0,0,NULL,cssElCFun_taArray_float__FastEl_stub,TA_taArray_float__FastEl_MethArgs},
  {NULL,"::const_float_ref","RevEl"," reverse (index) element (ie. get from the back of the list first)","","",
    0,1,-1,0,0,NULL,cssElCFun_taArray_float__RevEl_stub,TA_taArray_float__RevEl_MethArgs},
  {NULL,"::const_float","Pop"," pop the last item in the array off","","",
    0,0,-1,0,0,NULL,cssElCFun_taArray_float__Pop_stub,NULL},
  {NULL,"::const_float_ref","Peek"," peek at the last item on the array","","",
    0,0,-1,0,0,NULL,cssElCFun_taArray_float__Peek_stub,NULL},
  {&TA_void,NULL,"Set"," use this for safely assigning values to items in the array (Set should update if needed)","","",
    0,2,-1,0,0,NULL,cssElCFun_taArray_float__Set_stub,TA_taArray_float__Set_MethArgs},
  {&TA_void,NULL,"Add"," add the item to the array","MENU ","",
    0,1,-1,0,0,NULL,cssElCFun_taArray_float__Add_stub,TA_taArray_float__Add_MethArgs},
  {&TA_bool,NULL,"AddUnique"," add the item to the array if it isn't already on it, returns true if unique","","",
    0,1,-1,0,0,NULL,cssElCFun_taArray_float__AddUnique_stub,TA_taArray_float__AddUnique_MethArgs},
  {&TA_void,NULL,"Push"," push the item on the end of the array (same as add)","CAT_Modify ","",
    0,1,-1,0,0,NULL,cssElCFun_taArray_float__Push_stub,TA_taArray_float__Push_MethArgs},
  {&TA_void,NULL,"Insert"," Insert (n_els) item(s) at indx (-1 for end) in the array","MENU ","",
    0,3,2,0,0,NULL,cssElCFun_taArray_float__Insert_stub,TA_taArray_float__Insert_MethArgs},
  {&TA_int,NULL,"FindEl"," Find item starting from indx in the array (-1 if not there)","MENU USE_RVAL ","",
    0,2,1,0,0,NULL,cssElCFun_taArray_float__FindEl_stub,TA_taArray_float__FindEl_MethArgs},
  {&TA_bool,NULL,"RemoveEl"," remove given item, returns success","","",
    0,1,-1,1,0,NULL,cssElCFun_taArray_float__RemoveEl_stub,TA_taArray_float__RemoveEl_MethArgs},
  {&TA_void,NULL,"InitVals"," set array elements to specified value starting at start through end (-1 = size)","","",
    0,3,1,1,0,NULL,cssElCFun_taArray_float__InitVals_stub,TA_taArray_float__InitVals_MethArgs},
  NULL};
static MemberDef_data TA_float_Array_MemberDef[]={
  {&TA_float,NULL,"blank"," ","HIDDEN READ_ONLY ","",
    (ta_memb_ptr)NULL,1,(void*)(&float_Array::blank),0},
  NULL};
static EnumDef_data TA_taArray_double__Orientation[]={
  {"Horizontal","","",1},
  {"Vertical","","",2},
  NULL};
static EnumDef_data TA_taArray_double__ValType[]={
  {"VT_STRING"," an ANSI string of any length","",0},
  {"VT_DOUBLE"," a 8-byte floating point value (aprox 15 sig decimal digits)","",1},
  {"VT_FLOAT"," a 4-byte floating point value (aprox 7 sig decimal digits)","",2},
  {"VT_INT"," a 32-bit signed integer","",3},
  {"VT_BYTE"," an unsigned 8-bit integer; used mostly for image components (rgb)","",4},
  {"VT_VARIANT"," a Variant, which can hold scalars, matrices, and objects","",5},
  NULL};
static EnumDef_data TA_taArray_double__BaseFlags[]={
  {"THIS_INVALID"," CheckThisConfig_impl has detected a problem","",1},
  {"CHILD_INVALID"," CheckChildConfig_impl returns issue with a child","",2},
  {"DESTROYING"," Set in Destroying at the very beginning of destroy","",64},
  {"DESTROYED"," set in base destroy (DEBUG only); lets us detect multi destroys","",128},
  NULL};
static EnumDef_data TA_taArray_double__DumpQueryResult[]={
  {"DQR_NO_SAVE"," definitely do not save","",0},
  {"DQR_SAVE"," definitely save","",1},
  {"DQR_DEFAULT"," do default for this member (this is the base result)","",2},
  NULL};
static int taArray<double>::* TA_taArray_double__MbrOff;
static MemberDef_data TA_taArray_double__MemberDef[]={
  {NULL,"::double_ptr","el"," Pointer to actual array memory","NO_SHOW NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_taArray_double__MbrOff=(int taArray<double>::*)(&taArray<double>::el))),0,NULL,0},
  {&TA_double,NULL,"err"," what is returned when out of range; MUST INIT IN CONSTRUCTOR","NO_SHOW ","",
    *((ta_memb_ptr*)&(TA_taArray_double__MbrOff=(int taArray<double>::*)(&taArray<double>::err))),0,NULL,0},
  NULL};
static MethodArgs_data TA_taArray_double__SafeEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taArray_double__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taArray_double__RevEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taArray_double__Set_MethArgs[]={
  {&TA_int,NULL,"i",""},
  {NULL,"::const_double_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_double__Add_MethArgs[]={
  {NULL,"::const_double_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_double__AddUnique_MethArgs[]={
  {NULL,"::const_double_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_double__Push_MethArgs[]={
  {NULL,"::const_double_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_double__Insert_MethArgs[]={
  {NULL,"::const_double_ref","item",""},
  {&TA_int,NULL,"indx",""},
  {&TA_int,NULL,"n_els","1"},
  NULL};
static MethodArgs_data TA_taArray_double__FindEl_MethArgs[]={
  {NULL,"::const_double_ref","item",""},
  {&TA_int,NULL,"indx","0"},
  NULL};
static MethodArgs_data TA_taArray_double__RemoveEl_MethArgs[]={
  {NULL,"::const_double_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_double__InitVals_MethArgs[]={
  {NULL,"::const_double_ref","item",""},
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end","-1"},
  NULL};
static MethodDef_data TA_taArray_double__MethodDef[]={
  {NULL,"::const_double_ref","SafeEl"," the element at the given index","MENU MENU_ON_Edit USE_RVAL ","",
    0,1,-1,0,0,NULL,cssElCFun_taArray_double__SafeEl_stub,TA_taArray_double__SafeEl_MethArgs},
  {NULL,"::const_double_ref","FastEl"," fast element (no range checking)","","",
    0,1,-1,0,0,NULL,cssElCFun_taArray_double__FastEl_stub,TA_taArray_double__FastEl_MethArgs},
  {NULL,"::const_double_ref","RevEl"," reverse (index) element (ie. get from the back of the list first)","","",
    0,1,-1,0,0,NULL,cssElCFun_taArray_double__RevEl_stub,TA_taArray_double__RevEl_MethArgs},
  {NULL,"::const_double","Pop"," pop the last item in the array off","","",
    0,0,-1,0,0,NULL,cssElCFun_taArray_double__Pop_stub,NULL},
  {NULL,"::const_double_ref","Peek"," peek at the last item on the array","","",
    0,0,-1,0,0,NULL,cssElCFun_taArray_double__Peek_stub,NULL},
  {&TA_void,NULL,"Set"," use this for safely assigning values to items in the array (Set should update if needed)","","",
    0,2,-1,0,0,NULL,cssElCFun_taArray_double__Set_stub,TA_taArray_double__Set_MethArgs},
  {&TA_void,NULL,"Add"," add the item to the array","MENU ","",
    0,1,-1,0,0,NULL,cssElCFun_taArray_double__Add_stub,TA_taArray_double__Add_MethArgs},
  {&TA_bool,NULL,"AddUnique"," add the item to the array if it isn't already on it, returns true if unique","","",
    0,1,-1,0,0,NULL,cssElCFun_taArray_double__AddUnique_stub,TA_taArray_double__AddUnique_MethArgs},
  {&TA_void,NULL,"Push"," push the item on the end of the array (same as add)","CAT_Modify ","",
    0,1,-1,0,0,NULL,cssElCFun_taArray_double__Push_stub,TA_taArray_double__Push_MethArgs},
  {&TA_void,NULL,"Insert"," Insert (n_els) item(s) at indx (-1 for end) in the array","MENU ","",
    0,3,2,0,0,NULL,cssElCFun_taArray_double__Insert_stub,TA_taArray_double__Insert_MethArgs},
  {&TA_int,NULL,"FindEl"," Find item starting from indx in the array (-1 if not there)","MENU USE_RVAL ","",
    0,2,1,0,0,NULL,cssElCFun_taArray_double__FindEl_stub,TA_taArray_double__FindEl_MethArgs},
  {&TA_bool,NULL,"RemoveEl"," remove given item, returns success","","",
    0,1,-1,1,0,NULL,cssElCFun_taArray_double__RemoveEl_stub,TA_taArray_double__RemoveEl_MethArgs},
  {&TA_void,NULL,"InitVals"," set array elements to specified value starting at start through end (-1 = size)","","",
    0,3,1,1,0,NULL,cssElCFun_taArray_double__InitVals_stub,TA_taArray_double__InitVals_MethArgs},
  NULL};
static MemberDef_data TA_double_Array_MemberDef[]={
  {&TA_double,NULL,"blank"," ","HIDDEN READ_ONLY ","",
    (ta_memb_ptr)NULL,1,(void*)(&double_Array::blank),0},
  NULL};
static EnumDef_data TA_taArray_char__Orientation[]={
  {"Horizontal","","",1},
  {"Vertical","","",2},
  NULL};
static EnumDef_data TA_taArray_char__ValType[]={
  {"VT_STRING"," an ANSI string of any length","",0},
  {"VT_DOUBLE"," a 8-byte floating point value (aprox 15 sig decimal digits)","",1},
  {"VT_FLOAT"," a 4-byte floating point value (aprox 7 sig decimal digits)","",2},
  {"VT_INT"," a 32-bit signed integer","",3},
  {"VT_BYTE"," an unsigned 8-bit integer; used mostly for image components (rgb)","",4},
  {"VT_VARIANT"," a Variant, which can hold scalars, matrices, and objects","",5},
  NULL};
static EnumDef_data TA_taArray_char__BaseFlags[]={
  {"THIS_INVALID"," CheckThisConfig_impl has detected a problem","",1},
  {"CHILD_INVALID"," CheckChildConfig_impl returns issue with a child","",2},
  {"DESTROYING"," Set in Destroying at the very beginning of destroy","",64},
  {"DESTROYED"," set in base destroy (DEBUG only); lets us detect multi destroys","",128},
  NULL};
static EnumDef_data TA_taArray_char__DumpQueryResult[]={
  {"DQR_NO_SAVE"," definitely do not save","",0},
  {"DQR_SAVE"," definitely save","",1},
  {"DQR_DEFAULT"," do default for this member (this is the base result)","",2},
  NULL};
static int taArray<char>::* TA_taArray_char__MbrOff;
static MemberDef_data TA_taArray_char__MemberDef[]={
  {NULL,"::char_ptr","el"," Pointer to actual array memory","NO_SHOW NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_taArray_char__MbrOff=(int taArray<char>::*)(&taArray<char>::el))),0,NULL,0},
  {&TA_char,NULL,"err"," what is returned when out of range; MUST INIT IN CONSTRUCTOR","NO_SHOW ","",
    *((ta_memb_ptr*)&(TA_taArray_char__MbrOff=(int taArray<char>::*)(&taArray<char>::err))),0,NULL,0},
  NULL};
static MethodArgs_data TA_taArray_char__SafeEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taArray_char__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taArray_char__RevEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taArray_char__Set_MethArgs[]={
  {&TA_int,NULL,"i",""},
  {NULL,"::const_char_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_char__Add_MethArgs[]={
  {NULL,"::const_char_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_char__AddUnique_MethArgs[]={
  {NULL,"::const_char_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_char__Push_MethArgs[]={
  {NULL,"::const_char_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_char__Insert_MethArgs[]={
  {NULL,"::const_char_ref","item",""},
  {&TA_int,NULL,"indx",""},
  {&TA_int,NULL,"n_els","1"},
  NULL};
static MethodArgs_data TA_taArray_char__FindEl_MethArgs[]={
  {NULL,"::const_char_ref","item",""},
  {&TA_int,NULL,"indx","0"},
  NULL};
static MethodArgs_data TA_taArray_char__RemoveEl_MethArgs[]={
  {NULL,"::const_char_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_char__InitVals_MethArgs[]={
  {NULL,"::const_char_ref","item",""},
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end","-1"},
  NULL};
static MethodDef_data TA_taArray_char__MethodDef[]={
  {NULL,"::const_char_ref","SafeEl"," the element at the given index","MENU MENU_ON_Edit USE_RVAL ","",
    0,1,-1,0,0,NULL,cssElCFun_taArray_char__SafeEl_stub,TA_taArray_char__SafeEl_MethArgs},
  {NULL,"::const_char_ref","FastEl"," fast element (no range checking)","","",
    0,1,-1,0,0,NULL,cssElCFun_taArray_char__FastEl_stub,TA_taArray_char__FastEl_MethArgs},
  {NULL,"::const_char_ref","RevEl"," reverse (index) element (ie. get from the back of the list first)","","",
    0,1,-1,0,0,NULL,cssElCFun_taArray_char__RevEl_stub,TA_taArray_char__RevEl_MethArgs},
  {NULL,"::const_char","Pop"," pop the last item in the array off","","",
    0,0,-1,0,0,NULL,cssElCFun_taArray_char__Pop_stub,NULL},
  {NULL,"::const_char_ref","Peek"," peek at the last item on the array","","",
    0,0,-1,0,0,NULL,cssElCFun_taArray_char__Peek_stub,NULL},
  {&TA_void,NULL,"Set"," use this for safely assigning values to items in the array (Set should update if needed)","","",
    0,2,-1,0,0,NULL,cssElCFun_taArray_char__Set_stub,TA_taArray_char__Set_MethArgs},
  {&TA_void,NULL,"Add"," add the item to the array","MENU ","",
    0,1,-1,0,0,NULL,cssElCFun_taArray_char__Add_stub,TA_taArray_char__Add_MethArgs},
  {&TA_bool,NULL,"AddUnique"," add the item to the array if it isn't already on it, returns true if unique","","",
    0,1,-1,0,0,NULL,cssElCFun_taArray_char__AddUnique_stub,TA_taArray_char__AddUnique_MethArgs},
  {&TA_void,NULL,"Push"," push the item on the end of the array (same as add)","CAT_Modify ","",
    0,1,-1,0,0,NULL,cssElCFun_taArray_char__Push_stub,TA_taArray_char__Push_MethArgs},
  {&TA_void,NULL,"Insert"," Insert (n_els) item(s) at indx (-1 for end) in the array","MENU ","",
    0,3,2,0,0,NULL,cssElCFun_taArray_char__Insert_stub,TA_taArray_char__Insert_MethArgs},
  {&TA_int,NULL,"FindEl"," Find item starting from indx in the array (-1 if not there)","MENU USE_RVAL ","",
    0,2,1,0,0,NULL,cssElCFun_taArray_char__FindEl_stub,TA_taArray_char__FindEl_MethArgs},
  {&TA_bool,NULL,"RemoveEl"," remove given item, returns success","","",
    0,1,-1,1,0,NULL,cssElCFun_taArray_char__RemoveEl_stub,TA_taArray_char__RemoveEl_MethArgs},
  {&TA_void,NULL,"InitVals"," set array elements to specified value starting at start through end (-1 = size)","","",
    0,3,1,1,0,NULL,cssElCFun_taArray_char__InitVals_stub,TA_taArray_char__InitVals_MethArgs},
  NULL};
static MemberDef_data TA_char_Array_MemberDef[]={
  {&TA_char,NULL,"blank"," ","HIDDEN READ_ONLY ","",
    (ta_memb_ptr)NULL,1,(void*)(&char_Array::blank),0},
  NULL};
static EnumDef_data TA_taArray_taString__Orientation[]={
  {"Horizontal","","",1},
  {"Vertical","","",2},
  NULL};
static EnumDef_data TA_taArray_taString__ValType[]={
  {"VT_STRING"," an ANSI string of any length","",0},
  {"VT_DOUBLE"," a 8-byte floating point value (aprox 15 sig decimal digits)","",1},
  {"VT_FLOAT"," a 4-byte floating point value (aprox 7 sig decimal digits)","",2},
  {"VT_INT"," a 32-bit signed integer","",3},
  {"VT_BYTE"," an unsigned 8-bit integer; used mostly for image components (rgb)","",4},
  {"VT_VARIANT"," a Variant, which can hold scalars, matrices, and objects","",5},
  NULL};
static EnumDef_data TA_taArray_taString__BaseFlags[]={
  {"THIS_INVALID"," CheckThisConfig_impl has detected a problem","",1},
  {"CHILD_INVALID"," CheckChildConfig_impl returns issue with a child","",2},
  {"DESTROYING"," Set in Destroying at the very beginning of destroy","",64},
  {"DESTROYED"," set in base destroy (DEBUG only); lets us detect multi destroys","",128},
  NULL};
static EnumDef_data TA_taArray_taString__DumpQueryResult[]={
  {"DQR_NO_SAVE"," definitely do not save","",0},
  {"DQR_SAVE"," definitely save","",1},
  {"DQR_DEFAULT"," do default for this member (this is the base result)","",2},
  NULL};
static int taArray<taString>::* TA_taArray_taString__MbrOff;
static MemberDef_data TA_taArray_taString__MemberDef[]={
  {NULL,"::taString_ptr","el"," Pointer to actual array memory","NO_SHOW NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_taArray_taString__MbrOff=(int taArray<taString>::*)(&taArray<taString>::el))),0,NULL,0},
  {&TA_taString,NULL,"err"," what is returned when out of range; MUST INIT IN CONSTRUCTOR","NO_SHOW ","",
    *((ta_memb_ptr*)&(TA_taArray_taString__MbrOff=(int taArray<taString>::*)(&taArray<taString>::err))),0,NULL,0},
  NULL};
static MethodArgs_data TA_taArray_taString__SafeEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taArray_taString__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taArray_taString__RevEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taArray_taString__Set_MethArgs[]={
  {&TA_int,NULL,"i",""},
  {NULL,"::const_taString_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_taString__Add_MethArgs[]={
  {NULL,"::const_taString_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_taString__AddUnique_MethArgs[]={
  {NULL,"::const_taString_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_taString__Push_MethArgs[]={
  {NULL,"::const_taString_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_taString__Insert_MethArgs[]={
  {NULL,"::const_taString_ref","item",""},
  {&TA_int,NULL,"indx",""},
  {&TA_int,NULL,"n_els","1"},
  NULL};
static MethodArgs_data TA_taArray_taString__FindEl_MethArgs[]={
  {NULL,"::const_taString_ref","item",""},
  {&TA_int,NULL,"indx","0"},
  NULL};
static MethodArgs_data TA_taArray_taString__RemoveEl_MethArgs[]={
  {NULL,"::const_taString_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_taString__InitVals_MethArgs[]={
  {NULL,"::const_taString_ref","item",""},
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end","-1"},
  NULL};
static MethodDef_data TA_taArray_taString__MethodDef[]={
  {NULL,"::const_taString_ref","SafeEl"," the element at the given index","MENU MENU_ON_Edit USE_RVAL ","",
    0,1,-1,0,0,NULL,cssElCFun_taArray_taString__SafeEl_stub,TA_taArray_taString__SafeEl_MethArgs},
  {NULL,"::const_taString_ref","FastEl"," fast element (no range checking)","","",
    0,1,-1,0,0,NULL,cssElCFun_taArray_taString__FastEl_stub,TA_taArray_taString__FastEl_MethArgs},
  {NULL,"::const_taString_ref","RevEl"," reverse (index) element (ie. get from the back of the list first)","","",
    0,1,-1,0,0,NULL,cssElCFun_taArray_taString__RevEl_stub,TA_taArray_taString__RevEl_MethArgs},
  {NULL,"::const_taString","Pop"," pop the last item in the array off","","",
    0,0,-1,0,0,NULL,cssElCFun_taArray_taString__Pop_stub,NULL},
  {NULL,"::const_taString_ref","Peek"," peek at the last item on the array","","",
    0,0,-1,0,0,NULL,cssElCFun_taArray_taString__Peek_stub,NULL},
  {&TA_void,NULL,"Set"," use this for safely assigning values to items in the array (Set should update if needed)","","",
    0,2,-1,0,0,NULL,cssElCFun_taArray_taString__Set_stub,TA_taArray_taString__Set_MethArgs},
  {&TA_void,NULL,"Add"," add the item to the array","MENU ","",
    0,1,-1,0,0,NULL,cssElCFun_taArray_taString__Add_stub,TA_taArray_taString__Add_MethArgs},
  {&TA_bool,NULL,"AddUnique"," add the item to the array if it isn't already on it, returns true if unique","","",
    0,1,-1,0,0,NULL,cssElCFun_taArray_taString__AddUnique_stub,TA_taArray_taString__AddUnique_MethArgs},
  {&TA_void,NULL,"Push"," push the item on the end of the array (same as add)","CAT_Modify ","",
    0,1,-1,0,0,NULL,cssElCFun_taArray_taString__Push_stub,TA_taArray_taString__Push_MethArgs},
  {&TA_void,NULL,"Insert"," Insert (n_els) item(s) at indx (-1 for end) in the array","MENU ","",
    0,3,2,0,0,NULL,cssElCFun_taArray_taString__Insert_stub,TA_taArray_taString__Insert_MethArgs},
  {&TA_int,NULL,"FindEl"," Find item starting from indx in the array (-1 if not there)","MENU USE_RVAL ","",
    0,2,1,0,0,NULL,cssElCFun_taArray_taString__FindEl_stub,TA_taArray_taString__FindEl_MethArgs},
  {&TA_bool,NULL,"RemoveEl"," remove given item, returns success","","",
    0,1,-1,1,0,NULL,cssElCFun_taArray_taString__RemoveEl_stub,TA_taArray_taString__RemoveEl_MethArgs},
  {&TA_void,NULL,"InitVals"," set array elements to specified value starting at start through end (-1 = size)","","",
    0,3,1,1,0,NULL,cssElCFun_taArray_taString__InitVals_stub,TA_taArray_taString__InitVals_MethArgs},
  NULL};
static MemberDef_data TA_String_Array_MemberDef[]={
  {&TA_taString,NULL,"blank"," ","HIDDEN READ_ONLY ","",
    (ta_memb_ptr)NULL,1,(void*)(&String_Array::blank),0},
  NULL};
static int SArg_Array::* TA_SArg_Array_MbrOff;
static MemberDef_data TA_SArg_Array_MemberDef[]={
  {&TA_String_Array,NULL,"labels"," labels for each argument","HIDDEN ","",
    *((ta_memb_ptr*)&(TA_SArg_Array_MbrOff=(int SArg_Array::*)(&SArg_Array::labels))),0,NULL,0},
  NULL};
static MethodArgs_data TA_SArg_Array_HasValue_MethArgs[]={
  {&TA_const_taString_ref,NULL,"key",""},
  NULL};
static MethodArgs_data TA_SArg_Array_GetValue_MethArgs[]={
  {&TA_const_taString_ref,NULL,"key",""},
  NULL};
static MethodArgs_data TA_SArg_Array_SetValue_MethArgs[]={
  {&TA_const_taString_ref,NULL,"key",""},
  {&TA_const_taString_ref,NULL,"value",""},
  NULL};
static MethodDef_data TA_SArg_Array_MethodDef[]={
  {&TA_void,NULL,"UpdateAfterEdit"," called after editing, or any user change to members (eg. in the interface, script)","CAT_ObjectMgmt ","",
    0,0,-1,1,0,NULL,cssElCFun_SArg_Array_UpdateAfterEdit_stub,NULL},
  {&TA_bool,NULL,"HasValue"," returns true if there is an entry for the key","","",
    0,1,-1,0,0,NULL,cssElCFun_SArg_Array_HasValue_stub,TA_SArg_Array_HasValue_MethArgs},
  {&TA_taString,NULL,"GetValue"," return the value for the key, or nil if none","","",
    0,1,-1,0,0,NULL,cssElCFun_SArg_Array_GetValue_stub,TA_SArg_Array_GetValue_MethArgs},
  {&TA_void,NULL,"SetValue"," set or update the value for the key","","",
    0,2,-1,0,0,NULL,cssElCFun_SArg_Array_SetValue_stub,TA_SArg_Array_SetValue_MethArgs},
  NULL};
static EnumDef_data TA_taArray_Variant__Orientation[]={
  {"Horizontal","","",1},
  {"Vertical","","",2},
  NULL};
static EnumDef_data TA_taArray_Variant__ValType[]={
  {"VT_STRING"," an ANSI string of any length","",0},
  {"VT_DOUBLE"," a 8-byte floating point value (aprox 15 sig decimal digits)","",1},
  {"VT_FLOAT"," a 4-byte floating point value (aprox 7 sig decimal digits)","",2},
  {"VT_INT"," a 32-bit signed integer","",3},
  {"VT_BYTE"," an unsigned 8-bit integer; used mostly for image components (rgb)","",4},
  {"VT_VARIANT"," a Variant, which can hold scalars, matrices, and objects","",5},
  NULL};
static EnumDef_data TA_taArray_Variant__BaseFlags[]={
  {"THIS_INVALID"," CheckThisConfig_impl has detected a problem","",1},
  {"CHILD_INVALID"," CheckChildConfig_impl returns issue with a child","",2},
  {"DESTROYING"," Set in Destroying at the very beginning of destroy","",64},
  {"DESTROYED"," set in base destroy (DEBUG only); lets us detect multi destroys","",128},
  NULL};
static EnumDef_data TA_taArray_Variant__DumpQueryResult[]={
  {"DQR_NO_SAVE"," definitely do not save","",0},
  {"DQR_SAVE"," definitely save","",1},
  {"DQR_DEFAULT"," do default for this member (this is the base result)","",2},
  NULL};
static int taArray<Variant>::* TA_taArray_Variant__MbrOff;
static MemberDef_data TA_taArray_Variant__MemberDef[]={
  {NULL,"::Variant_ptr","el"," Pointer to actual array memory","NO_SHOW NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_taArray_Variant__MbrOff=(int taArray<Variant>::*)(&taArray<Variant>::el))),0,NULL,0},
  {&TA_Variant,NULL,"err"," what is returned when out of range; MUST INIT IN CONSTRUCTOR","NO_SHOW ","",
    *((ta_memb_ptr*)&(TA_taArray_Variant__MbrOff=(int taArray<Variant>::*)(&taArray<Variant>::err))),0,NULL,0},
  NULL};
static MethodArgs_data TA_taArray_Variant__SafeEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taArray_Variant__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taArray_Variant__RevEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taArray_Variant__Set_MethArgs[]={
  {&TA_int,NULL,"i",""},
  {NULL,"::const_Variant_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_Variant__Add_MethArgs[]={
  {NULL,"::const_Variant_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_Variant__AddUnique_MethArgs[]={
  {NULL,"::const_Variant_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_Variant__Push_MethArgs[]={
  {NULL,"::const_Variant_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_Variant__Insert_MethArgs[]={
  {NULL,"::const_Variant_ref","item",""},
  {&TA_int,NULL,"indx",""},
  {&TA_int,NULL,"n_els","1"},
  NULL};
static MethodArgs_data TA_taArray_Variant__FindEl_MethArgs[]={
  {NULL,"::const_Variant_ref","item",""},
  {&TA_int,NULL,"indx","0"},
  NULL};
static MethodArgs_data TA_taArray_Variant__RemoveEl_MethArgs[]={
  {NULL,"::const_Variant_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_Variant__InitVals_MethArgs[]={
  {NULL,"::const_Variant_ref","item",""},
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end","-1"},
  NULL};
static MethodDef_data TA_taArray_Variant__MethodDef[]={
  {NULL,"::const_Variant_ref","SafeEl"," the element at the given index","MENU MENU_ON_Edit USE_RVAL ","",
    0,1,-1,0,0,NULL,cssElCFun_taArray_Variant__SafeEl_stub,TA_taArray_Variant__SafeEl_MethArgs},
  {NULL,"::const_Variant_ref","FastEl"," fast element (no range checking)","","",
    0,1,-1,0,0,NULL,cssElCFun_taArray_Variant__FastEl_stub,TA_taArray_Variant__FastEl_MethArgs},
  {NULL,"::const_Variant_ref","RevEl"," reverse (index) element (ie. get from the back of the list first)","","",
    0,1,-1,0,0,NULL,cssElCFun_taArray_Variant__RevEl_stub,TA_taArray_Variant__RevEl_MethArgs},
  {NULL,"::const_Variant","Pop"," pop the last item in the array off","","",
    0,0,-1,0,0,NULL,cssElCFun_taArray_Variant__Pop_stub,NULL},
  {NULL,"::const_Variant_ref","Peek"," peek at the last item on the array","","",
    0,0,-1,0,0,NULL,cssElCFun_taArray_Variant__Peek_stub,NULL},
  {&TA_void,NULL,"Set"," use this for safely assigning values to items in the array (Set should update if needed)","","",
    0,2,-1,0,0,NULL,cssElCFun_taArray_Variant__Set_stub,TA_taArray_Variant__Set_MethArgs},
  {&TA_void,NULL,"Add"," add the item to the array","MENU ","",
    0,1,-1,0,0,NULL,cssElCFun_taArray_Variant__Add_stub,TA_taArray_Variant__Add_MethArgs},
  {&TA_bool,NULL,"AddUnique"," add the item to the array if it isn't already on it, returns true if unique","","",
    0,1,-1,0,0,NULL,cssElCFun_taArray_Variant__AddUnique_stub,TA_taArray_Variant__AddUnique_MethArgs},
  {&TA_void,NULL,"Push"," push the item on the end of the array (same as add)","CAT_Modify ","",
    0,1,-1,0,0,NULL,cssElCFun_taArray_Variant__Push_stub,TA_taArray_Variant__Push_MethArgs},
  {&TA_void,NULL,"Insert"," Insert (n_els) item(s) at indx (-1 for end) in the array","MENU ","",
    0,3,2,0,0,NULL,cssElCFun_taArray_Variant__Insert_stub,TA_taArray_Variant__Insert_MethArgs},
  {&TA_int,NULL,"FindEl"," Find item starting from indx in the array (-1 if not there)","MENU USE_RVAL ","",
    0,2,1,0,0,NULL,cssElCFun_taArray_Variant__FindEl_stub,TA_taArray_Variant__FindEl_MethArgs},
  {&TA_bool,NULL,"RemoveEl"," remove given item, returns success","","",
    0,1,-1,1,0,NULL,cssElCFun_taArray_Variant__RemoveEl_stub,TA_taArray_Variant__RemoveEl_MethArgs},
  {&TA_void,NULL,"InitVals"," set array elements to specified value starting at start through end (-1 = size)","","",
    0,3,1,1,0,NULL,cssElCFun_taArray_Variant__InitVals_stub,TA_taArray_Variant__InitVals_MethArgs},
  NULL};
static MemberDef_data TA_Variant_Array_MemberDef[]={
  {&TA_Variant,NULL,"blank"," ","HIDDEN READ_ONLY ","",
    (ta_memb_ptr)NULL,1,(void*)(&Variant_Array::blank),0},
  NULL};
static EnumDef_data TA_taArray_voidptr__Orientation[]={
  {"Horizontal","","",1},
  {"Vertical","","",2},
  NULL};
static EnumDef_data TA_taArray_voidptr__ValType[]={
  {"VT_STRING"," an ANSI string of any length","",0},
  {"VT_DOUBLE"," a 8-byte floating point value (aprox 15 sig decimal digits)","",1},
  {"VT_FLOAT"," a 4-byte floating point value (aprox 7 sig decimal digits)","",2},
  {"VT_INT"," a 32-bit signed integer","",3},
  {"VT_BYTE"," an unsigned 8-bit integer; used mostly for image components (rgb)","",4},
  {"VT_VARIANT"," a Variant, which can hold scalars, matrices, and objects","",5},
  NULL};
static EnumDef_data TA_taArray_voidptr__BaseFlags[]={
  {"THIS_INVALID"," CheckThisConfig_impl has detected a problem","",1},
  {"CHILD_INVALID"," CheckChildConfig_impl returns issue with a child","",2},
  {"DESTROYING"," Set in Destroying at the very beginning of destroy","",64},
  {"DESTROYED"," set in base destroy (DEBUG only); lets us detect multi destroys","",128},
  NULL};
static EnumDef_data TA_taArray_voidptr__DumpQueryResult[]={
  {"DQR_NO_SAVE"," definitely do not save","",0},
  {"DQR_SAVE"," definitely save","",1},
  {"DQR_DEFAULT"," do default for this member (this is the base result)","",2},
  NULL};
static int taArray<void*>::* TA_taArray_voidptr__MbrOff;
static MemberDef_data TA_taArray_voidptr__MemberDef[]={
  {NULL,"::voidptr_ptr","el"," Pointer to actual array memory","NO_SHOW NO_SAVE ","",
    *((ta_memb_ptr*)&(TA_taArray_voidptr__MbrOff=(int taArray<void*>::*)(&taArray<void*>::el))),0,NULL,0},
  {&TA_voidptr,NULL,"err"," what is returned when out of range; MUST INIT IN CONSTRUCTOR","NO_SHOW ","",
    *((ta_memb_ptr*)&(TA_taArray_voidptr__MbrOff=(int taArray<void*>::*)(&taArray<void*>::err))),0,NULL,0},
  NULL};
static MethodArgs_data TA_taArray_voidptr__SafeEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taArray_voidptr__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taArray_voidptr__RevEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taArray_voidptr__Set_MethArgs[]={
  {&TA_int,NULL,"i",""},
  {NULL,"::const_voidptr_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_voidptr__Add_MethArgs[]={
  {NULL,"::const_voidptr_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_voidptr__AddUnique_MethArgs[]={
  {NULL,"::const_voidptr_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_voidptr__Push_MethArgs[]={
  {NULL,"::const_voidptr_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_voidptr__Insert_MethArgs[]={
  {NULL,"::const_voidptr_ref","item",""},
  {&TA_int,NULL,"indx",""},
  {&TA_int,NULL,"n_els","1"},
  NULL};
static MethodArgs_data TA_taArray_voidptr__FindEl_MethArgs[]={
  {NULL,"::const_voidptr_ref","item",""},
  {&TA_int,NULL,"indx","0"},
  NULL};
static MethodArgs_data TA_taArray_voidptr__RemoveEl_MethArgs[]={
  {NULL,"::const_voidptr_ref","item",""},
  NULL};
static MethodArgs_data TA_taArray_voidptr__InitVals_MethArgs[]={
  {NULL,"::const_voidptr_ref","item",""},
  {&TA_int,NULL,"start","0"},
  {&TA_int,NULL,"end","-1"},
  NULL};
static MethodDef_data TA_taArray_voidptr__MethodDef[]={
  {NULL,"::const_voidptr_ref","SafeEl"," the element at the given index","MENU MENU_ON_Edit USE_RVAL ","",
    0,1,-1,0,0,NULL,cssElCFun_taArray_voidptr__SafeEl_stub,TA_taArray_voidptr__SafeEl_MethArgs},
  {NULL,"::const_voidptr_ref","FastEl"," fast element (no range checking)","","",
    0,1,-1,0,0,NULL,cssElCFun_taArray_voidptr__FastEl_stub,TA_taArray_voidptr__FastEl_MethArgs},
  {NULL,"::const_voidptr_ref","RevEl"," reverse (index) element (ie. get from the back of the list first)","","",
    0,1,-1,0,0,NULL,cssElCFun_taArray_voidptr__RevEl_stub,TA_taArray_voidptr__RevEl_MethArgs},
  {NULL,"::const_voidptr","Pop"," pop the last item in the array off","","",
    0,0,-1,0,0,NULL,cssElCFun_taArray_voidptr__Pop_stub,NULL},
  {NULL,"::const_voidptr_ref","Peek"," peek at the last item on the array","","",
    0,0,-1,0,0,NULL,cssElCFun_taArray_voidptr__Peek_stub,NULL},
  {&TA_void,NULL,"Set"," use this for safely assigning values to items in the array (Set should update if needed)","","",
    0,2,-1,0,0,NULL,cssElCFun_taArray_voidptr__Set_stub,TA_taArray_voidptr__Set_MethArgs},
  {&TA_void,NULL,"Add"," add the item to the array","MENU ","",
    0,1,-1,0,0,NULL,cssElCFun_taArray_voidptr__Add_stub,TA_taArray_voidptr__Add_MethArgs},
  {&TA_bool,NULL,"AddUnique"," add the item to the array if it isn't already on it, returns true if unique","","",
    0,1,-1,0,0,NULL,cssElCFun_taArray_voidptr__AddUnique_stub,TA_taArray_voidptr__AddUnique_MethArgs},
  {&TA_void,NULL,"Push"," push the item on the end of the array (same as add)","CAT_Modify ","",
    0,1,-1,0,0,NULL,cssElCFun_taArray_voidptr__Push_stub,TA_taArray_voidptr__Push_MethArgs},
  {&TA_void,NULL,"Insert"," Insert (n_els) item(s) at indx (-1 for end) in the array","MENU ","",
    0,3,2,0,0,NULL,cssElCFun_taArray_voidptr__Insert_stub,TA_taArray_voidptr__Insert_MethArgs},
  {&TA_int,NULL,"FindEl"," Find item starting from indx in the array (-1 if not there)","MENU USE_RVAL ","",
    0,2,1,0,0,NULL,cssElCFun_taArray_voidptr__FindEl_stub,TA_taArray_voidptr__FindEl_MethArgs},
  {&TA_bool,NULL,"RemoveEl"," remove given item, returns success","","",
    0,1,-1,1,0,NULL,cssElCFun_taArray_voidptr__RemoveEl_stub,TA_taArray_voidptr__RemoveEl_MethArgs},
  {&TA_void,NULL,"InitVals"," set array elements to specified value starting at start through end (-1 = size)","","",
    0,3,1,1,0,NULL,cssElCFun_taArray_voidptr__InitVals_stub,TA_taArray_voidptr__InitVals_MethArgs},
  NULL};
static MemberDef_data TA_voidptr_Array_MemberDef[]={
  {&TA_voidptr,NULL,"blank"," ","HIDDEN READ_ONLY ","",
    (ta_memb_ptr)NULL,1,(void*)(&voidptr_Array::blank),0},
  NULL};
static EnumDef_data TA_taList_UserDataItemBase__Orientation[]={
  {"Horizontal","","",1},
  {"Vertical","","",2},
  NULL};
static EnumDef_data TA_taList_UserDataItemBase__ValType[]={
  {"VT_STRING"," an ANSI string of any length","",0},
  {"VT_DOUBLE"," a 8-byte floating point value (aprox 15 sig decimal digits)","",1},
  {"VT_FLOAT"," a 4-byte floating point value (aprox 7 sig decimal digits)","",2},
  {"VT_INT"," a 32-bit signed integer","",3},
  {"VT_BYTE"," an unsigned 8-bit integer; used mostly for image components (rgb)","",4},
  {"VT_VARIANT"," a Variant, which can hold scalars, matrices, and objects","",5},
  NULL};
static EnumDef_data TA_taList_UserDataItemBase__BaseFlags[]={
  {"THIS_INVALID"," CheckThisConfig_impl has detected a problem","",1},
  {"CHILD_INVALID"," CheckChildConfig_impl returns issue with a child","",2},
  {"DESTROYING"," Set in Destroying at the very beginning of destroy","",64},
  {"DESTROYED"," set in base destroy (DEBUG only); lets us detect multi destroys","",128},
  NULL};
static EnumDef_data TA_taList_UserDataItemBase__DumpQueryResult[]={
  {"DQR_NO_SAVE"," definitely do not save","",0},
  {"DQR_SAVE"," definitely save","",1},
  {"DQR_DEFAULT"," do default for this member (this is the base result)","",2},
  NULL};
static MethodArgs_data TA_taList_UserDataItemBase__MoveBefore_MethArgs[]={
  {NULL,"::UserDataItemBase_ptr","trg",""},
  {NULL,"::UserDataItemBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_UserDataItemBase__MoveAfter_MethArgs[]={
  {NULL,"::UserDataItemBase_ptr","trg",""},
  {NULL,"::UserDataItemBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_UserDataItemBase__SafeEl_MethArgs[]={
  {&TA_int,NULL,"idx",""},
  NULL};
static MethodArgs_data TA_taList_UserDataItemBase__FastEl_MethArgs[]={
  {&TA_int,NULL,"i",""},
  NULL};
static MethodArgs_data TA_taList_UserDataItemBase__Edit_El_MethArgs[]={
  {NULL,"::UserDataItemBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_UserDataItemBase__FindName_MethArgs[]={
  {&TA_const_taString_ref,NULL,"item_nm",""},
  {&TA_int_ref,NULL,"idx","no_idx"},
  NULL};
static MethodArgs_data TA_taList_UserDataItemBase__FindType_MethArgs[]={
  {&TA_TypeDef_ptr,NULL,"item_tp",""},
  {&TA_int_ref,NULL,"idx","no_idx"},
  NULL};
static MethodArgs_data TA_taList_UserDataItemBase__AddUniqNameOld_MethArgs[]={
  {NULL,"::UserDataItemBase_ptr","item",""},
  NULL};
static MethodArgs_data TA_taList_UserDataItemBase__LinkUniqNameOld_MethArgs[]={
  {NULL,"::UserDataItemBase_ptr","item",""},
  NULL};
static MethodDef_data TA_taList_UserDataItemBase__MethodDef[]={
  {&TA_bool,NULL,"MoveBefore"," move item so that it appears just before the target item trg in the list","CAT_Modify ","",
    1,2,-1,1,0,NULL,cssElCFun_taList_UserDataItemBase__MoveBefore_stub,TA_taList_UserDataItemBase__MoveBefore_MethArgs},
  {&TA_bool,NULL,"MoveAfter"," move item so that it appears just after the target item trg in the list","CAT_Modify ","",
    1,2,-1,1,0,NULL,cssElCFun_taList_UserDataItemBase__MoveAfter_stub,TA_taList_UserDataItemBase__MoveAfter_MethArgs},
  {NULL,"::UserDataItemBase_ptr","SafeEl"," get element at index","CAT_Access ","",
    0,1,-1,0,0,NULL,cssElCFun_taList_UserDataItemBase__SafeEl_stub,TA_taList_UserDataItemBase__SafeEl_MethArgs},
  {NULL,"::UserDataItemBase_ptr","FastEl"," fast element (no range checking)","CAT_Access ","",
    0,1,-1,0,0,NULL,cssElCFun_taList_UserDataItemBase__FastEl_stub,TA_taList_UserDataItemBase__FastEl_MethArgs},
  {NULL,"::UserDataItemBase_ptr","DefaultEl"," returns the element specified as the default for this list","CAT_Access ","",
    0,0,-1,0,0,NULL,cssElCFun_taList_UserDataItemBase__DefaultEl_stub,NULL},
  {NULL,"::UserDataItemBase_ptr","Edit_El"," Edit given list item","MENU MENU_ON_Edit USE_RVAL ARG_ON_OBJ CAT_Access ","",
    0,1,-1,0,0,NULL,cssElCFun_taList_UserDataItemBase__Edit_El_stub,TA_taList_UserDataItemBase__Edit_El_MethArgs},
  {NULL,"::UserDataItemBase_ptr","FindName"," Find element with given name (item_nm)","MENU USE_RVAL ARGC_1 CAT_Access ","",
    0,2,1,1,0,NULL,cssElCFun_taList_UserDataItemBase__FindName_stub,TA_taList_UserDataItemBase__FindName_MethArgs},
  {NULL,"::UserDataItemBase_ptr","FindType"," find given type element (NULL = not here), sets idx","CAT_Access ","",
    0,2,1,1,0,NULL,cssElCFun_taList_UserDataItemBase__FindType_stub,TA_taList_UserDataItemBase__FindType_MethArgs},
  {NULL,"::UserDataItemBase_ptr","First"," look at the first element; NULL if none","CAT_Access ","",
    0,0,-1,0,0,NULL,cssElCFun_taList_UserDataItemBase__First_stub,NULL},
  {NULL,"::UserDataItemBase_ptr","Pop"," pop the last element off the stack","CAT_Modify ","",
    0,0,-1,1,0,NULL,cssElCFun_taList_UserDataItemBase__Pop_stub,NULL},
  {NULL,"::UserDataItemBase_ptr","Peek"," peek at the last element on the stack, if any","CAT_Access ","",
    0,0,-1,1,0,NULL,cssElCFun_taList_UserDataItemBase__Peek_stub,NULL},
  {NULL,"::UserDataItemBase_ptr","AddUniqNameOld"," add so that name is unique, old used if dupl, returns one used","CAT_Modify ","",
    0,1,-1,1,0,NULL,cssElCFun_taList_UserDataItemBase__AddUniqNameOld_stub,TA_taList_UserDataItemBase__AddUniqNameOld_MethArgs},
  {NULL,"::UserDataItemBase_ptr","LinkUniqNameOld"," link so that name is unique, old used if dupl, returns one used","CAT_Modify ","",
    0,1,-1,1,0,NULL,cssElCFun_taList_UserDataItemBase__LinkUniqNameOld_stub,TA_taList_UserDataItemBase__LinkUniqNameOld_MethArgs},
  NULL};
static MethodDef_data TA_taSmartPtrT_UserDataItem_List__MethodDef[]={
  {NULL,"::UserDataItem_List_ptr","ptr"," typed alias for the base version","","",
    0,0,-1,0,0,NULL,cssElCFun_taSmartPtrT_UserDataItem_List__ptr_stub,NULL},
  NULL};

// Init Function


static bool ta_Init_ta_done = false;

void ta_Init_ta() {
  TypeDef* sbt;

  if(ta_Init_ta_done) return;
  ta_Init_ta_done = true;


  taMisc::in_init = true;

  taMisc::types.Add(&TA_void);
  taMisc::types.Add(&TA_char);
  taMisc::types.Add(&TA_signed_char);
  taMisc::types.Add(&TA_unsigned_char);
  taMisc::types.Add(&TA_short);
  taMisc::types.Add(&TA_signed_short);
    TA_signed_short.AddParents(&TA_short);
  taMisc::types.Add(&TA_short_int);
    TA_short_int.AddParents(&TA_short);
  taMisc::types.Add(&TA_signed_short_int);
    TA_signed_short_int.AddParents(&TA_short);
  taMisc::types.Add(&TA_unsigned_short);
  taMisc::types.Add(&TA_unsigned_short_int);
    TA_unsigned_short_int.AddParents(&TA_unsigned_short);
  taMisc::types.Add(&TA_int);
  taMisc::types.Add(&TA_signed_int);
    TA_signed_int.AddParents(&TA_int);
  taMisc::types.Add(&TA_signed);
    TA_signed.AddParents(&TA_int);
  taMisc::types.Add(&TA_int32_t);
    TA_int32_t.AddParents(&TA_int);
  taMisc::types.Add(&TA_unsigned_int);
  taMisc::types.Add(&TA_unsigned);
    TA_unsigned.AddParents(&TA_unsigned_int);
  taMisc::types.Add(&TA_int64_t);
  taMisc::types.Add(&TA_long_long);
    TA_long_long.AddParents(&TA_int64_t);
  taMisc::types.Add(&TA_signed_long_long);
    TA_signed_long_long.AddParents(&TA_int64_t);
  taMisc::types.Add(&TA_uint64_t);
  taMisc::types.Add(&TA_unsigned_long_long);
    TA_unsigned_long_long.AddParents(&TA_uint64_t);
  taMisc::types.Add(&TA_long);
    if (sizeof(long) == sizeof(int)) TA_long.AddParents(&TA_int);
    else TA_long.AddParents(&TA_int64_t);
  taMisc::types.Add(&TA_signed_long);
    TA_signed_long.AddParents(&TA_long);
  taMisc::types.Add(&TA_long_int);
    TA_long_int.AddParents(&TA_long);
  taMisc::types.Add(&TA_signed_long_int);
    TA_signed_long_int.AddParents(&TA_long);
  taMisc::types.Add(&TA_unsigned_long);
    if (sizeof(unsigned long) == sizeof(unsigned int)) TA_unsigned_long.AddParents(&TA_unsigned_int);
    else TA_unsigned_long.AddParents(&TA_uint64_t);
  taMisc::types.Add(&TA_unsigned_long_int);
    TA_unsigned_long_int.AddParents(&TA_unsigned_long);
  taMisc::types.Add(&TA_intptr_t);
    if (sizeof(intptr_t) == sizeof(int)) TA_intptr_t.AddParents(&TA_int);
    else TA_intptr_t.AddParents(&TA_int64_t);
  taMisc::types.Add(&TA_uintptr_t);
    if (sizeof(uintptr_t) == sizeof(unsigned int)) TA_uintptr_t.AddParents(&TA_unsigned_int);
    else TA_uintptr_t.AddParents(&TA_uint64_t);
  taMisc::types.Add(&TA_float);
  taMisc::types.Add(&TA_double);
  taMisc::types.Add(&TA_bool);
  taMisc::types.Add(&TA_const);
  taMisc::types.Add(&TA_enum);
  taMisc::types.Add(&TA_struct);
  taMisc::types.Add(&TA_union);
  taMisc::types.Add(&TA_class);
  taMisc::types.Add(&TA_template);
  taMisc::types.Add(&TA_templ_inst);
  taMisc::types.Add(&TA_ta_array);
  taMisc::types.Add(&TA_taBase);
    TAI_taBase = new taBase;
    TA_taBase.AddParFormal(&TA_class);
    tac_AddEnum(TA_taBase, "Orientation", " must be same values as Qt::Orientation", "", "", "", TA_taBase_Orientation);
    tac_AddEnum(TA_taBase, "ValType", " the basic data types widely supported by data-handling api's, esp. matrices", "", "", "", TA_taBase_ValType);
    tac_AddEnum(TA_taBase, "BaseFlags", " control flags ", "BITS ", "", "", TA_taBase_BaseFlags);
    tac_AddEnum(TA_taBase, "DumpQueryResult", " Dump_QuerySaveMember response", "IGNORE ", "", "", TA_taBase_DumpQueryResult);
    tac_AddMethods(TA_taBase,TA_taBase_MethodDef);
  taMisc::types.Add(&TA_taRegFun);
  taMisc::types.Add(&TA_taString);
    TA_taString.AddParFormal(&TA_class);
    tac_AddMethods(TA_taString,TA_taString_MethodDef);
  taMisc::types.Add(&TA_Variant);
    TA_Variant.AddParFormal(&TA_class);
    tac_AddEnum(TA_Variant, "VarType", "", "", "", "", TA_Variant_VarType);
    tac_AddMethods(TA_Variant,TA_Variant_MethodDef);
  taMisc::types.Add(&TA_void_ptr);
    TA_void_ptr.AddParents(&TA_void);
  taMisc::types.Add(&TA_int_ref);
    TA_int_ref.AddParents(&TA_int);
  taMisc::types.Add(&TA_const_QPoint_ref);
  taMisc::types.Add(&TA_const_SbVec2s_ref);
  taMisc::types.Add(&TA_iPoint);
    TAI_iPoint = new iPoint;
    TA_iPoint.AddParFormal(&TA_class);
    tac_AddMembers(TA_iPoint,TA_iPoint_MemberDef);
    tac_AddMethods(TA_iPoint,TA_iPoint_MethodDef);
  taMisc::types.Add(&TA_iVec2i);
    TA_iVec2i.AddParFormal(&TA_class);
    TA_iVec2i.AddClassPar(&TA_iPoint,0);
  taMisc::types.Add(&TA_iPoint_ref);
    TA_iPoint_ref.AddParents(&TA_iPoint);
  taMisc::types.Add(&TA_const_iPoint);
    TA_const_iPoint.AddParents(&TA_const, &TA_iPoint);
  taMisc::types.Add(&TA_const_iPoint_ref);
    TA_const_iPoint_ref.AddParents(&TA_const_iPoint);
  taMisc::types.Add(&TA_const_SbVec3s_ref);
  taMisc::types.Add(&TA_iVec3i);
    TAI_iVec3i = new iVec3i;
    TA_iVec3i.AddParFormal(&TA_class);
    TA_iVec3i.AddClassPar(&TA_iVec2i,0);
    tac_AddMembers(TA_iVec3i,TA_iVec3i_MemberDef);
    tac_AddMethods(TA_iVec3i,TA_iVec3i_MethodDef);
  taMisc::types.Add(&TA_const_QSize_ref);
  taMisc::types.Add(&TA_iVec3i_ref);
    TA_iVec3i_ref.AddParents(&TA_iVec3i);
  taMisc::types.Add(&TA_const_iVec3i);
    TA_const_iVec3i.AddParents(&TA_const, &TA_iVec3i);
  taMisc::types.Add(&TA_iSize);
    TAI_iSize = new iSize;
    TA_iSize.AddParFormal(&TA_class);
    tac_AddMembers(TA_iSize,TA_iSize_MemberDef);
    tac_AddMethods(TA_iSize,TA_iSize_MethodDef);
  taMisc::types.Add(&TA_const_iVec3i_ref);
    TA_const_iVec3i_ref.AddParents(&TA_const_iVec3i);
  taMisc::types.Add(&TA_const_iSize);
    TA_const_iSize.AddParents(&TA_const, &TA_iSize);
  taMisc::types.Add(&TA_iSize_ref);
    TA_iSize_ref.AddParents(&TA_iSize);
  taMisc::types.Add(&TA_const_iSize_ref);
    TA_const_iSize_ref.AddParents(&TA_const_iSize);
  taMisc::types.Add(&TA_const_QRect_ref);
  taMisc::types.Add(&TA_iRect);
    TAI_iRect = new iRect;
    TA_iRect.AddParFormal(&TA_class);
    tac_AddMembers(TA_iRect,TA_iRect_MemberDef);
    tac_AddMethods(TA_iRect,TA_iRect_MethodDef);
  taMisc::types.Add(&TA_iRect_ref);
    TA_iRect_ref.AddParents(&TA_iRect);
  taMisc::types.Add(&TA_const_SbVec3f_ref);
  taMisc::types.Add(&TA_iVec3f);
    TAI_iVec3f = new iVec3f;
    TA_iVec3f.AddParFormal(&TA_class);
    tac_AddMembers(TA_iVec3f,TA_iVec3f_MemberDef);
    tac_AddMethods(TA_iVec3f,TA_iVec3f_MethodDef);
  taMisc::types.Add(&TA_const_iVec3f);
    TA_const_iVec3f.AddParents(&TA_const, &TA_iVec3f);
  taMisc::types.Add(&TA_iVec3f_ref);
    TA_iVec3f_ref.AddParents(&TA_iVec3f);
  taMisc::types.Add(&TA_const_iVec3f_ref);
    TA_const_iVec3f_ref.AddParents(&TA_const_iVec3f);
  taMisc::types.Add(&TA_iBox3f);
    TAI_iBox3f = new iBox3f;
    TA_iBox3f.AddParFormal(&TA_class);
    tac_AddMembers(TA_iBox3f,TA_iBox3f_MemberDef);
    tac_AddMethods(TA_iBox3f,TA_iBox3f_MethodDef);
  taMisc::types.Add(&TA_iBox3f_ref);
    TA_iBox3f_ref.AddParents(&TA_iBox3f);
  taMisc::types.Add(&TA_const_iBox3f);
    TA_const_iBox3f.AddParents(&TA_const, &TA_iBox3f);
  taMisc::types.Add(&TA_const_iBox3f_ref);
    TA_const_iBox3f_ref.AddParents(&TA_const_iBox3f);
  taMisc::types.Add(&TA_streambuf);
    TA_streambuf.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_signed_long_long_int);
    TA_signed_long_long_int.AddParents(&TA_signed_long_long, &TA_int);
  taMisc::types.Add(&TA_streampos);
    TA_streampos.AddParents(&TA_signed_long_long_int);
  taMisc::types.Add(&TA_streamoff);
    TA_streamoff.AddParents(&TA_signed_long_long_int);
  taMisc::types.Add(&TA_streamsize);
    TA_streamsize.AddParents(&TA_int);
  taMisc::types.Add(&TA__Ios_Fmtflags);
    TA__Ios_Fmtflags.AddParFormal(&TA_enum);
    tac_ThisEnum(TA__Ios_Fmtflags, TA__Ios_Fmtflags_EnumDef);
  taMisc::types.Add(&TA__Ios_Openmode);
    TA__Ios_Openmode.AddParFormal(&TA_enum);
    tac_ThisEnum(TA__Ios_Openmode, TA__Ios_Openmode_EnumDef);
  taMisc::types.Add(&TA__Ios_Iostate);
    TA__Ios_Iostate.AddParFormal(&TA_enum);
    tac_ThisEnum(TA__Ios_Iostate, TA__Ios_Iostate_EnumDef);
  taMisc::types.Add(&TA__Ios_Seekdir);
    TA__Ios_Seekdir.AddParFormal(&TA_enum);
    tac_ThisEnum(TA__Ios_Seekdir, TA__Ios_Seekdir_EnumDef);
  taMisc::types.Add(&TA_void_ptr_ref);
    TA_void_ptr_ref.AddParents(&TA_void_ptr);
  taMisc::types.Add(&TA_long_ref);
    TA_long_ref.AddParents(&TA_long);
  taMisc::types.Add(&TA_ios);
    TA_ios.AddParFormal(&TA_class);
    tac_AddEnum(TA_ios, "fmtflags", "", "", "", "", TA_ios_fmtflags);
    tac_AddEnum(TA_ios, "iostate", "", "", "", "", TA_ios_iostate);
    tac_AddEnum(TA_ios, "openmode", "", "", "", "", TA_ios_openmode);
    tac_AddEnum(TA_ios, "seekdir", "", "", "", "", TA_ios_seekdir);
    tac_AddMethods(TA_ios,TA_ios_MethodDef);
  taMisc::types.Add(&TA_ostream);
    TA_ostream.AddParFormal(&TA_class);
    TA_ostream.AddClassPar(&TA_ios,0);
    tac_AddMethods(TA_ostream,TA_ostream_MethodDef);
  taMisc::types.Add(&TA_istream);
    TA_istream.AddParFormal(&TA_class);
    TA_istream.AddClassPar(&TA_ios,0);
    tac_AddMethods(TA_istream,TA_istream_MethodDef);
  taMisc::types.Add(&TA_ostream_ref);
    TA_ostream_ref.AddParents(&TA_ostream);
  taMisc::types.Add(&TA_ostream_ptr);
    TA_ostream_ptr.AddParents(&TA_ostream);
  taMisc::types.Add(&TA_const_char);
    TA_const_char.AddParents(&TA_const, &TA_char);
  taMisc::types.Add(&TA_const_char_ptr);
    TA_const_char_ptr.AddParents(&TA_const_char);
  taMisc::types.Add(&TA_istream_ref);
    TA_istream_ref.AddParents(&TA_istream);
  taMisc::types.Add(&TA_char_ptr);
    TA_char_ptr.AddParents(&TA_char);
  taMisc::types.Add(&TA_iostream);
    TA_iostream.AddParFormal(&TA_class);
    TA_iostream.AddClassPar(&TA_istream,0, &TA_ostream,0);
    tac_AddMethods(TA_iostream,TA_iostream_MethodDef);
  taMisc::types.Add(&TA_ifstream);
    TA_ifstream.AddParFormal(&TA_class);
    TA_ifstream.AddClassPar(&TA_istream,0);
    tac_AddMethods(TA_ifstream,TA_ifstream_MethodDef);
  taMisc::types.Add(&TA_ofstream);
    TA_ofstream.AddParFormal(&TA_class);
    TA_ofstream.AddClassPar(&TA_ostream,0);
    tac_AddMethods(TA_ofstream,TA_ofstream_MethodDef);
  taMisc::types.Add(&TA_fstream);
    TA_fstream.AddParFormal(&TA_class);
    TA_fstream.AddClassPar(&TA_iostream,0);
    tac_AddMethods(TA_fstream,TA_fstream_MethodDef);
  taMisc::types.Add(&TA_istringstream);
    TA_istringstream.AddParFormal(&TA_class);
    TA_istringstream.AddClassPar(&TA_istream,0);
  taMisc::types.Add(&TA_ostringstream);
    TA_ostringstream.AddParFormal(&TA_class);
    TA_ostringstream.AddClassPar(&TA_ostream,0);
  taMisc::types.Add(&TA_stringstream);
    TA_stringstream.AddParFormal(&TA_class);
    TA_stringstream.AddClassPar(&TA_iostream,0);
  taMisc::types.Add(&TA_const_taString);
    TA_const_taString.AddParents(&TA_const, &TA_taString);
  taMisc::types.Add(&TA_const_taString_ref);
    TA_const_taString_ref.AddParents(&TA_const_taString);
  taMisc::types.Add(&TA_taPlatform);
    TA_taPlatform.AddParFormal(&TA_class);
    tac_AddMethods(TA_taPlatform,TA_taPlatform_MethodDef);
  taMisc::types.Add(&TA_taAtomic);
    TA_taAtomic.AddParFormal(&TA_class);
    tac_AddMethods(TA_taAtomic,TA_taAtomic_MethodDef);
  taMisc::types.Add(&TA_taStrRep);
    TA_taStrRep.AddParFormal(&TA_class);
    tac_AddMembers(TA_taStrRep,TA_taStrRep_MemberDef);
  taMisc::types.Add(&TA_char_ary);
    TA_char_ary.AddParFormal(&TA_ta_array);
    TA_char_ary.AddParents(&TA_char);
  taMisc::types.Add(&TA_taString_ref);
    TA_taString_ref.AddParents(&TA_taString);
  taMisc::types.Add(&TA_const_taString_ptr);
    TA_const_taString_ptr.AddParents(&TA_const_taString);
  taMisc::types.Add(&TA_taStrRep_ptr);
    TA_taStrRep_ptr.AddParents(&TA_taStrRep);
  taMisc::types.Add(&TA_const_QString_ref);
  taMisc::types.Add(&TA_bool_ptr);
    TA_bool_ptr.AddParents(&TA_bool);
  taMisc::types.Add(&TA_char_ref);
    TA_char_ref.AddParents(&TA_char);
  taMisc::types.Add(&TA_taMatrix);
    TA_taMatrix.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_const_Variant);
    TA_const_Variant.AddParents(&TA_const, &TA_Variant);
  taMisc::types.Add(&TA_const_Variant_ref);
    TA_const_Variant_ref.AddParents(&TA_const_Variant);
  taMisc::types.Add(&TA_const_void);
    TA_const_void.AddParents(&TA_const, &TA_void);
  taMisc::types.Add(&TA_const_void_ptr);
    TA_const_void_ptr.AddParents(&TA_const_void);
  taMisc::types.Add(&TA_taBase_ptr);
    TA_taBase_ptr.AddParents(&TA_taBase);
  taMisc::types.Add(&TA_taMatrix_ptr);
    TA_taMatrix_ptr.AddParents(&TA_taMatrix);
  taMisc::types.Add(&TA_const_taBase);
    TA_const_taBase.AddParents(&TA_const, &TA_taBase);
  taMisc::types.Add(&TA_const_taBase_ptr);
    TA_const_taBase_ptr.AddParents(&TA_const_taBase);
  taMisc::types.Add(&TA_const_taMatrix);
    TA_const_taMatrix.AddParents(&TA_const, &TA_taMatrix);
  taMisc::types.Add(&TA_const_taMatrix_ptr);
    TA_const_taMatrix_ptr.AddParents(&TA_const_taMatrix);
  taMisc::types.Add(&TA_Variant_ref);
    TA_Variant_ref.AddParents(&TA_Variant);
  taMisc::types.Add(&TA_const_QVariant_ref);
  taMisc::types.Add(&TA_unsigned_char_ary);
    TA_unsigned_char_ary.AddParFormal(&TA_ta_array);
    TA_unsigned_char_ary.AddParents(&TA_unsigned_char);
  taMisc::types.Add(&TA_NameVar);
    TA_NameVar.AddParFormal(&TA_class);
    tac_AddMembers(TA_NameVar,TA_NameVar_MemberDef);
    tac_AddMethods(TA_NameVar,TA_NameVar_MethodDef);
  taMisc::types.Add(&TA_const_NameVar);
    TA_const_NameVar.AddParents(&TA_const, &TA_NameVar);
  taMisc::types.Add(&TA_const_NameVar_ref);
    TA_const_NameVar_ref.AddParents(&TA_const_NameVar);
  taMisc::types.Add(&TA_const_QFont_ref);
  taMisc::types.Add(&TA_iFont);
    TA_iFont.AddParFormal(&TA_class);
    tac_AddEnum(TA_iFont, "Attributes", " ", "BITS ", "", "", TA_iFont_Attributes);
    tac_AddMembers(TA_iFont,TA_iFont_MemberDef);
    tac_AddMethods(TA_iFont,TA_iFont_MethodDef);
  taMisc::types.Add(&TA_taDataLink);
    TA_taDataLink.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_iFont_ref);
    TA_iFont_ref.AddParents(&TA_iFont);
  taMisc::types.Add(&TA_const_iFont);
    TA_const_iFont.AddParents(&TA_const, &TA_iFont);
  taMisc::types.Add(&TA_taPtrList_impl);
    TA_taPtrList_impl.AddParFormal(&TA_class);
    tac_AddMembers(TA_taPtrList_impl,TA_taPtrList_impl_MemberDef);
    tac_AddMethods(TA_taPtrList_impl,TA_taPtrList_impl_MethodDef);
  taMisc::types.Add(&TA_const_iFont_ref);
    TA_const_iFont_ref.AddParents(&TA_const_iFont);
  taMisc::types.Add(&TA_taPtrList_impl_ptr);
    TA_taPtrList_impl_ptr.AddParents(&TA_taPtrList_impl);
  taMisc::types.Add(&TA_TALPtr);
    TA_TALPtr.AddParents(&TA_taPtrList_impl_ptr);
  taMisc::types.Add(&TA_DataChangedReason);
    TA_DataChangedReason.AddParFormal(&TA_enum);
    tac_ThisEnum(TA_DataChangedReason, TA_DataChangedReason_EnumDef);
  taMisc::types.Add(&TA_taListItr);
    TA_taListItr.AddParents(&TA_int);
  taMisc::types.Add(&TA_taHashVal);
    TA_taHashVal.AddParents(&TA_unsigned_long);
  taMisc::types.Add(&TA_void_ptr_ptr);
    TA_void_ptr_ptr.AddParents(&TA_void);
  taMisc::types.Add(&TA_const_taPtrList_impl);
    TA_const_taPtrList_impl.AddParents(&TA_const, &TA_taPtrList_impl);
  taMisc::types.Add(&TA_const_taPtrList_impl_ref);
    TA_const_taPtrList_impl_ref.AddParents(&TA_const_taPtrList_impl);
  taMisc::types.Add(&TA_taListItr_ref);
    TA_taListItr_ref.AddParents(&TA_taListItr);
  taMisc::types.Add(&TA_taPtrList);
    TA_taPtrList.AddParFormal(&TA_class, &TA_template);
    TA_taPtrList.AddParents(&TA_taPtrList_impl);
  taMisc::types.Add(&TA_const_taPtrList);
    TA_const_taPtrList.AddParents(&TA_const, &TA_taPtrList);
  taMisc::types.Add(&TA_taPtrList_base);
    TA_taPtrList_base.AddParFormal(&TA_class, &TA_template);
    TA_taPtrList_base.AddParents(&TA_taPtrList_impl);
  taMisc::types.Add(&TA_const_taPtrList_ref);
    TA_const_taPtrList_ref.AddParents(&TA_const_taPtrList);
  taMisc::types.Add(&TA_taHashEl);
    TA_taHashEl.AddParFormal(&TA_class);
    tac_AddMembers(TA_taHashEl,TA_taHashEl_MemberDef);
    tac_AddMethods(TA_taHashEl,TA_taHashEl_MethodDef);
  taMisc::types.Add(&TA_const_taPtrList_base);
    TA_const_taPtrList_base.AddParents(&TA_const, &TA_taPtrList_base);
  taMisc::types.Add(&TA_taPtrList_taHashEl_);
    TAI_taPtrList_taHashEl_ = new taPtrList<taHashEl>;
    TA_taPtrList_taHashEl_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taPtrList_taHashEl_.AddClassPar(&TA_taPtrList,0);
    sbt = new TypeDef("taHashEl_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taHashEl);
    TA_taPtrList_taHashEl_.sub_types.Add(sbt);
    sbt = new TypeDef("const_taHashEl", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_taHashEl);
    TA_taPtrList_taHashEl_.sub_types.Add(sbt);
    sbt = new TypeDef("const_taHashEl_ptr", 1, 1, 0);
    sbt->AddParents(TA_taPtrList_taHashEl_.sub_types.FindName("const_taHashEl"));
    TA_taPtrList_taHashEl_.sub_types.Add(sbt);
    tac_AddMethods(TA_taPtrList_taHashEl_,TA_taPtrList_taHashEl__MethodDef);
  taMisc::types.Add(&TA_const_taPtrList_base_ref);
    TA_const_taPtrList_base_ref.AddParents(&TA_const_taPtrList_base);
  taMisc::types.Add(&TA_taHashBucket);
    TA_taHashBucket.AddParFormal(&TA_class);
    TA_taHashBucket.AddClassPar(&TA_taPtrList_taHashEl_,0);
    tac_AddMethods(TA_taHashBucket,TA_taHashBucket_MethodDef);
  taMisc::types.Add(&TA_taPtrList_taHashBucket_);
    TAI_taPtrList_taHashBucket_ = new taPtrList<taHashBucket>;
    TA_taPtrList_taHashBucket_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taPtrList_taHashBucket_.AddClassPar(&TA_taPtrList,0);
    sbt = new TypeDef("taHashBucket_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taHashBucket);
    TA_taPtrList_taHashBucket_.sub_types.Add(sbt);
    sbt = new TypeDef("const_taHashBucket", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_taHashBucket);
    TA_taPtrList_taHashBucket_.sub_types.Add(sbt);
    sbt = new TypeDef("const_taHashBucket_ptr", 1, 1, 0);
    sbt->AddParents(TA_taPtrList_taHashBucket_.sub_types.FindName("const_taHashBucket"));
    TA_taPtrList_taHashBucket_.sub_types.Add(sbt);
    tac_AddMethods(TA_taPtrList_taHashBucket_,TA_taPtrList_taHashBucket__MethodDef);
  taMisc::types.Add(&TA_int_ary);
    TA_int_ary.AddParFormal(&TA_ta_array);
    TA_int_ary.AddParents(&TA_int);
  taMisc::types.Add(&TA_taHashTable);
    TA_taHashTable.AddParFormal(&TA_class);
    TA_taHashTable.AddClassPar(&TA_taPtrList_taHashBucket_,0);
    tac_AddEnum(TA_taHashTable, "KeyType", "", "", "", "", TA_taHashTable_KeyType);
    tac_AddMembers(TA_taHashTable,TA_taHashTable_MemberDef);
    tac_AddMethods(TA_taHashTable,TA_taHashTable_MethodDef);
  taMisc::types.Add(&TA_taHashBucket_ptr);
    TA_taHashBucket_ptr.AddParents(&TA_taHashBucket);
  taMisc::types.Add(&TA_taHashTable_ptr);
    TA_taHashTable_ptr.AddParents(&TA_taHashTable);
  taMisc::types.Add(&TA_const_taHashTable);
    TA_const_taHashTable.AddParents(&TA_const, &TA_taHashTable);
  taMisc::types.Add(&TA_const_taHashTable_ref);
    TA_const_taHashTable_ref.AddParents(&TA_const_taHashTable);
  taMisc::types.Add(&TA_taArray_impl);
    TA_taArray_impl.AddParFormal(&TA_class);
    tac_AddMembers(TA_taArray_impl,TA_taArray_impl_MemberDef);
    tac_AddMethods(TA_taArray_impl,TA_taArray_impl_MethodDef);
  taMisc::types.Add(&TA_const_taArray_impl);
    TA_const_taArray_impl.AddParents(&TA_const, &TA_taArray_impl);
  taMisc::types.Add(&TA_taPlainArray);
    TA_taPlainArray.AddParFormal(&TA_class, &TA_template);
    TA_taPlainArray.AddParents(&TA_taArray_impl);
  taMisc::types.Add(&TA_const_taArray_impl_ref);
    TA_const_taArray_impl_ref.AddParents(&TA_const_taArray_impl);
  taMisc::types.Add(&TA_const_taPlainArray);
    TA_const_taPlainArray.AddParents(&TA_const, &TA_taPlainArray);
  taMisc::types.Add(&TA_const_taPlainArray_ref);
    TA_const_taPlainArray_ref.AddParents(&TA_const_taPlainArray);
  taMisc::types.Add(&TA_taFixedArray_impl);
    TA_taFixedArray_impl.AddParFormal(&TA_class);
    tac_AddMembers(TA_taFixedArray_impl,TA_taFixedArray_impl_MemberDef);
    tac_AddMethods(TA_taFixedArray_impl,TA_taFixedArray_impl_MethodDef);
  taMisc::types.Add(&TA_const_taFixedArray_impl);
    TA_const_taFixedArray_impl.AddParents(&TA_const, &TA_taFixedArray_impl);
  taMisc::types.Add(&TA_const_taFixedArray_impl_ref);
    TA_const_taFixedArray_impl_ref.AddParents(&TA_const_taFixedArray_impl);
  taMisc::types.Add(&TA_taFixedArray);
    TA_taFixedArray.AddParFormal(&TA_class, &TA_template);
    TA_taFixedArray.AddParents(&TA_taFixedArray_impl);
  taMisc::types.Add(&TA_taFixedArray_int_);
    TA_taFixedArray_int_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taFixedArray_int_.AddClassPar(&TA_taFixedArray,0);
    sbt = new TypeDef("int_ptr", 1, 1, 0);
    sbt->AddParents(&TA_int);
    TA_taFixedArray_int_.sub_types.Add(sbt);
    sbt = new TypeDef("const_int", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_int);
    TA_taFixedArray_int_.sub_types.Add(sbt);
    sbt = new TypeDef("const_int_ref", 1, 0, 1);
    sbt->AddParents(TA_taFixedArray_int_.sub_types.FindName("const_int"));
    TA_taFixedArray_int_.sub_types.Add(sbt);
    sbt = new TypeDef("int_ref", 1, 0, 1);
    sbt->AddParents(&TA_int);
    TA_taFixedArray_int_.sub_types.Add(sbt);
    tac_AddMembers(TA_taFixedArray_int_,TA_taFixedArray_int__MemberDef);
    tac_AddMethods(TA_taFixedArray_int_,TA_taFixedArray_int__MethodDef);
  taMisc::types.Add(&TA_const_taFixedArray);
    TA_const_taFixedArray.AddParents(&TA_const, &TA_taFixedArray);
  taMisc::types.Add(&TA_const_int);
    TA_const_int.AddParents(&TA_const, &TA_int);
  taMisc::types.Add(&TA_const_taFixedArray_ref);
    TA_const_taFixedArray_ref.AddParents(&TA_const_taFixedArray);
  taMisc::types.Add(&TA_const_int_ref);
    TA_const_int_ref.AddParents(&TA_const_int);
  taMisc::types.Add(&TA_int_FixedArray);
    TA_int_FixedArray.AddParFormal(&TA_class);
    TA_int_FixedArray.AddClassPar(&TA_taFixedArray_int_,0);
    tac_AddMembers(TA_int_FixedArray,TA_int_FixedArray_MemberDef);
  taMisc::types.Add(&TA_int_FixedArray_ref);
    TA_int_FixedArray_ref.AddParents(&TA_int_FixedArray);
  taMisc::types.Add(&TA_const_int_FixedArray);
    TA_const_int_FixedArray.AddParents(&TA_const, &TA_int_FixedArray);
  taMisc::types.Add(&TA_istream_ptr);
    TA_istream_ptr.AddParents(&TA_istream);
  taMisc::types.Add(&TA_const_int_FixedArray_ref);
    TA_const_int_FixedArray_ref.AddParents(&TA_const_int_FixedArray);
  taMisc::types.Add(&TA_fstream_ptr);
    TA_fstream_ptr.AddParents(&TA_fstream);
  taMisc::types.Add(&TA_taFiler);
    TA_taFiler.AddParFormal(&TA_class);
    TA_taFiler.AddClassPar(&TA_class,0);
    tac_AddEnum(TA_taFiler, "FileOperation", "", "", "", "", TA_taFiler_FileOperation);
    tac_AddEnum(TA_taFiler, "FilerFlags", " flags to control operations", "BITS ", "", "", TA_taFiler_FilerFlags);
    tac_AddMembers(TA_taFiler,TA_taFiler_MemberDef);
    tac_AddMethods(TA_taFiler,TA_taFiler_MethodDef);
  taMisc::types.Add(&TA_rgb_t);
    TA_rgb_t.AddParFormal(&TA_class);
    tac_AddMembers(TA_rgb_t,TA_rgb_t_MemberDef);
    tac_AddMethods(TA_rgb_t,TA_rgb_t_MethodDef);
  taMisc::types.Add(&TA_const_taFiler);
    TA_const_taFiler.AddParents(&TA_const, &TA_taFiler);
  taMisc::types.Add(&TA_taFiler_ref);
    TA_taFiler_ref.AddParents(&TA_taFiler);
  taMisc::types.Add(&TA_const_taFiler_ref);
    TA_const_taFiler_ref.AddParents(&TA_const_taFiler);
  taMisc::types.Add(&TA_taFiler_ptr);
    TA_taFiler_ptr.AddParents(&TA_taFiler);
  taMisc::types.Add(&TA_const_iColor_ptr);
  taMisc::types.Add(&TA_float_ref);
    TA_float_ref.AddParents(&TA_float);
  taMisc::types.Add(&TA_const_iColor_ref);
  taMisc::types.Add(&TA_const_QColor_ref);
  taMisc::types.Add(&TA_const_QColor_ptr);
  taMisc::types.Add(&TA_taDataLinkItr);
    TAI_taDataLinkItr = new taDataLinkItr;
    TA_taDataLinkItr.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_taiDataLink);
    TA_taiDataLink.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_taiType);
    TA_taiType.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_taiEdit);
    TA_taiEdit.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_taiViewType);
    TA_taiViewType.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_taiMember);
    TA_taiMember.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_taiMethod);
    TA_taiMethod.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_css_fun_stub_ptr);
    TA_css_fun_stub_ptr.AddParents(&TA_void_ptr);
  taMisc::types.Add(&TA_ta_void_fun);
    TA_ta_void_fun.AddParents(&TA_void_ptr);
  taMisc::types.Add(&TA_ta_memb_ptr_class);
    TA_ta_memb_ptr_class.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_int_ta_memb_ptr_class);
    TA_int_ta_memb_ptr_class.AddParents(&TA_int, &TA_ta_memb_ptr_class);
  taMisc::types.Add(&TA_ta_memb_ptr);
    TA_ta_memb_ptr.AddParents(&TA_void_ptr);
  taMisc::types.Add(&TA_TAPtr);
    TAI_TAPtr = new taBase*;
    TA_TAPtr.AddParents(&TA_taBase_ptr);
  taMisc::types.Add(&TA_taPlainArray_taString_);
    TAI_taPlainArray_taString_ = new taPlainArray<taString>;
    TA_taPlainArray_taString_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taPlainArray_taString_.AddClassPar(&TA_taPlainArray,0);
    sbt = new TypeDef("taString_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taString);
    TA_taPlainArray_taString_.sub_types.Add(sbt);
    sbt = new TypeDef("taString_ref", 1, 0, 1);
    sbt->AddParents(&TA_taString);
    TA_taPlainArray_taString_.sub_types.Add(sbt);
    sbt = new TypeDef("const_taString", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_taString);
    TA_taPlainArray_taString_.sub_types.Add(sbt);
    sbt = new TypeDef("const_taString_ref", 1, 0, 1);
    sbt->AddParents(TA_taPlainArray_taString_.sub_types.FindName("const_taString"));
    TA_taPlainArray_taString_.sub_types.Add(sbt);
    tac_AddMembers(TA_taPlainArray_taString_,TA_taPlainArray_taString__MemberDef);
    tac_AddMethods(TA_taPlainArray_taString_,TA_taPlainArray_taString__MethodDef);
  taMisc::types.Add(&TA_String_PArray);
    TA_String_PArray.AddParFormal(&TA_class);
    TA_String_PArray.AddClassPar(&TA_taPlainArray_taString_,0);
    tac_AddMethods(TA_String_PArray,TA_String_PArray_MethodDef);
  taMisc::types.Add(&TA_taPlainArray_int_);
    TAI_taPlainArray_int_ = new taPlainArray<int>;
    TA_taPlainArray_int_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taPlainArray_int_.AddClassPar(&TA_taPlainArray,0);
    sbt = new TypeDef("int_ptr", 1, 1, 0);
    sbt->AddParents(&TA_int);
    TA_taPlainArray_int_.sub_types.Add(sbt);
    sbt = new TypeDef("int_ref", 1, 0, 1);
    sbt->AddParents(&TA_int);
    TA_taPlainArray_int_.sub_types.Add(sbt);
    sbt = new TypeDef("const_int", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_int);
    TA_taPlainArray_int_.sub_types.Add(sbt);
    sbt = new TypeDef("const_int_ref", 1, 0, 1);
    sbt->AddParents(TA_taPlainArray_int_.sub_types.FindName("const_int"));
    TA_taPlainArray_int_.sub_types.Add(sbt);
    tac_AddMembers(TA_taPlainArray_int_,TA_taPlainArray_int__MemberDef);
    tac_AddMethods(TA_taPlainArray_int_,TA_taPlainArray_int__MethodDef);
  taMisc::types.Add(&TA_const_String_PArray);
    TA_const_String_PArray.AddParents(&TA_const, &TA_String_PArray);
  taMisc::types.Add(&TA_const_String_PArray_ref);
    TA_const_String_PArray_ref.AddParents(&TA_const_String_PArray);
  taMisc::types.Add(&TA_int_PArray);
    TA_int_PArray.AddParFormal(&TA_class);
    TA_int_PArray.AddClassPar(&TA_taPlainArray_int_,0);
  taMisc::types.Add(&TA_taPlainArray_NameVar_);
    TAI_taPlainArray_NameVar_ = new taPlainArray<NameVar>;
    TA_taPlainArray_NameVar_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taPlainArray_NameVar_.AddClassPar(&TA_taPlainArray,0);
    sbt = new TypeDef("NameVar_ptr", 1, 1, 0);
    sbt->AddParents(&TA_NameVar);
    TA_taPlainArray_NameVar_.sub_types.Add(sbt);
    sbt = new TypeDef("NameVar_ref", 1, 0, 1);
    sbt->AddParents(&TA_NameVar);
    TA_taPlainArray_NameVar_.sub_types.Add(sbt);
    sbt = new TypeDef("const_NameVar", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_NameVar);
    TA_taPlainArray_NameVar_.sub_types.Add(sbt);
    sbt = new TypeDef("const_NameVar_ref", 1, 0, 1);
    sbt->AddParents(TA_taPlainArray_NameVar_.sub_types.FindName("const_NameVar"));
    TA_taPlainArray_NameVar_.sub_types.Add(sbt);
    tac_AddMembers(TA_taPlainArray_NameVar_,TA_taPlainArray_NameVar__MemberDef);
    tac_AddMethods(TA_taPlainArray_NameVar_,TA_taPlainArray_NameVar__MethodDef);
  taMisc::types.Add(&TA_const_int_PArray);
    TA_const_int_PArray.AddParents(&TA_const, &TA_int_PArray);
  taMisc::types.Add(&TA_String_PArray_ref);
    TA_String_PArray_ref.AddParents(&TA_String_PArray);
  taMisc::types.Add(&TA_const_int_PArray_ref);
    TA_const_int_PArray_ref.AddParents(&TA_const_int_PArray);
  taMisc::types.Add(&TA_NameVar_PArray);
    TA_NameVar_PArray.AddParFormal(&TA_class);
    TA_NameVar_PArray.AddClassPar(&TA_taPlainArray_NameVar_,0);
    tac_AddMethods(TA_NameVar_PArray,TA_NameVar_PArray_MethodDef);
  taMisc::types.Add(&TA_DumpFileCvt);
    TA_DumpFileCvt.AddParFormal(&TA_class);
    tac_AddMembers(TA_DumpFileCvt,TA_DumpFileCvt_MemberDef);
  taMisc::types.Add(&TA_taPtrList_DumpFileCvt_);
    TAI_taPtrList_DumpFileCvt_ = new taPtrList<DumpFileCvt>;
    TA_taPtrList_DumpFileCvt_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taPtrList_DumpFileCvt_.AddClassPar(&TA_taPtrList,0);
    sbt = new TypeDef("DumpFileCvt_ptr", 1, 1, 0);
    sbt->AddParents(&TA_DumpFileCvt);
    TA_taPtrList_DumpFileCvt_.sub_types.Add(sbt);
    sbt = new TypeDef("const_DumpFileCvt", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_DumpFileCvt);
    TA_taPtrList_DumpFileCvt_.sub_types.Add(sbt);
    sbt = new TypeDef("const_DumpFileCvt_ptr", 1, 1, 0);
    sbt->AddParents(TA_taPtrList_DumpFileCvt_.sub_types.FindName("const_DumpFileCvt"));
    TA_taPtrList_DumpFileCvt_.sub_types.Add(sbt);
    tac_AddMethods(TA_taPtrList_DumpFileCvt_,TA_taPtrList_DumpFileCvt__MethodDef);
  taMisc::types.Add(&TA_DumpFileCvtList);
    TA_DumpFileCvtList.AddParFormal(&TA_class);
    TA_DumpFileCvtList.AddClassPar(&TA_taPtrList_DumpFileCvt_,0);
  taMisc::types.Add(&TA_UserDataItemBase);
    TAI_UserDataItemBase = new UserDataItemBase;
    TA_UserDataItemBase.AddParFormal(&TA_class);
    TA_UserDataItemBase.AddParCache(&TA_taBase);
    TA_UserDataItemBase.AddClassPar(&TA_taBase,0);
    tac_AddMembers(TA_UserDataItemBase,TA_UserDataItemBase_MemberDef);
    tac_AddMethods(TA_UserDataItemBase,TA_UserDataItemBase_MethodDef);
  taMisc::types.Add(&TA_ViewColor_List);
    TA_ViewColor_List.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_CancelOp);
    TA_CancelOp.AddParFormal(&TA_enum);
    tac_ThisEnum(TA_CancelOp, TA_CancelOp_EnumDef);
  taMisc::types.Add(&TA_CancelOp_ref);
    TA_CancelOp_ref.AddParents(&TA_CancelOp);
  taMisc::types.Add(&TA_taiMiscCore);
    TA_taiMiscCore.AddParFormal(&TA_class);
    tac_AddMethods(TA_taiMiscCore,TA_taiMiscCore_MethodDef);
  taMisc::types.Add(&TA_init_proc_t);
    TA_init_proc_t.AddParents(&TA_void_ptr);
  taMisc::types.Add(&TA_taiMiscCore_ptr);
    TA_taiMiscCore_ptr.AddParents(&TA_taiMiscCore);
  taMisc::types.Add(&TA_const_InitProcRegistrar_ref);
  taMisc::types.Add(&TA_taVersion);
    TA_taVersion.AddParFormal(&TA_class);
    tac_AddMembers(TA_taVersion,TA_taVersion_MemberDef);
    tac_AddMethods(TA_taVersion,TA_taVersion_MethodDef);
  taMisc::types.Add(&TA_const_taVersion);
    TA_const_taVersion.AddParents(&TA_const, &TA_taVersion);
  taMisc::types.Add(&TA_ViewColor_List_ptr);
    TA_ViewColor_List_ptr.AddParents(&TA_ViewColor_List);
  taMisc::types.Add(&TA_UserDataItemBase_ptr);
    TA_UserDataItemBase_ptr.AddParents(&TA_UserDataItemBase);
  taMisc::types.Add(&TA_String_PArray_ptr);
    TA_String_PArray_ptr.AddParents(&TA_String_PArray);
  taMisc::types.Add(&TA_NameVar_PArray_ref);
    TA_NameVar_PArray_ref.AddParents(&TA_NameVar_PArray);
  taMisc::types.Add(&TA_taMisc);
    TAI_taMisc = new taMisc;
    TA_taMisc.AddParFormal(&TA_class);
    tac_AddEnum(TA_taMisc, "ShowMembs", " ", "BITS ", "", "", TA_taMisc_ShowMembs);
    tac_AddEnum(TA_taMisc, "TypeInfo", "", "", "", "", TA_taMisc_TypeInfo);
    tac_AddEnum(TA_taMisc, "KeepTokens", "", "", "", "", TA_taMisc_KeepTokens);
    tac_AddEnum(TA_taMisc, "SaveFormat", "", "", "", "", TA_taMisc_SaveFormat);
    tac_AddEnum(TA_taMisc, "LoadVerbosity", "", "", "", "", TA_taMisc_LoadVerbosity);
    tac_AddEnum(TA_taMisc, "AutoRevert", "", "", "", "", TA_taMisc_AutoRevert);
    tac_AddEnum(TA_taMisc, "TypeInfoKind", " used in switch statements to particularize instances", "", "", "", TA_taMisc_TypeInfoKind);
    tac_AddEnum(TA_taMisc, "QuitFlag", " helps during shutdown to know whether we can cancel", "", "", "", TA_taMisc_QuitFlag);
    tac_AddEnum(TA_taMisc, "ReadTagStatus", "", "", "", "", TA_taMisc_ReadTagStatus);
    tac_AddMembers(TA_taMisc,TA_taMisc_MemberDef);
    tac_AddMethods(TA_taMisc,TA_taMisc_MethodDef);
  taMisc::types.Add(&TA_taRefN);
    TA_taRefN.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_ITypedObject);
    TA_ITypedObject.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_taRefN_ref);
    TA_taRefN_ref.AddParents(&TA_taRefN);
  taMisc::types.Add(&TA_taRefN_ptr);
    TA_taRefN_ptr.AddParents(&TA_taRefN);
  taMisc::types.Add(&TA_taiDataLink_ptr);
    TA_taiDataLink_ptr.AddParents(&TA_taiDataLink);
  taMisc::types.Add(&TA_taRefN_ptr_ref);
    TA_taRefN_ptr_ref.AddParents(&TA_taRefN_ptr);
  taMisc::types.Add(&TA_IDataLinkProxy);
    TA_IDataLinkProxy.AddParFormal(&TA_class);
    TA_IDataLinkProxy.AddClassPar(&TA_ITypedObject,0);
  taMisc::types.Add(&TA_taDataLink_ptr);
    TA_taDataLink_ptr.AddParents(&TA_taDataLink);
  taMisc::types.Add(&TA_IDataLinkClient);
    TA_IDataLinkClient.AddParFormal(&TA_class);
    TA_IDataLinkClient.AddClassPar(&TA_IDataLinkProxy,0);
  taMisc::types.Add(&TA_taPtrList_IDataLinkClient_);
    TA_taPtrList_IDataLinkClient_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taPtrList_IDataLinkClient_.AddClassPar(&TA_taPtrList,0);
  taMisc::types.Add(&TA_IDataLinkClient_PtrList);
    TA_IDataLinkClient_PtrList.AddParFormal(&TA_class);
    TA_IDataLinkClient_PtrList.AddClassPar(&TA_taPtrList_IDataLinkClient_,0);
  taMisc::types.Add(&TA_IDataLinkClient_ptr);
    TA_IDataLinkClient_ptr.AddParents(&TA_IDataLinkClient);
  taMisc::types.Add(&TA_taDataLink_ptr_ref);
    TA_taDataLink_ptr_ref.AddParents(&TA_taDataLink_ptr);
  taMisc::types.Add(&TA_taDataLink_ptr_ptr);
    TA_taDataLink_ptr_ptr.AddParents(&TA_taDataLink);
  taMisc::types.Add(&TA_DataChangeHelper);
    TA_DataChangeHelper.AddParFormal(&TA_class);
    tac_AddMethods(TA_DataChangeHelper,TA_DataChangeHelper_MethodDef);
  taMisc::types.Add(&TA_taPtrList_EnumDef_);
    TAI_taPtrList_EnumDef_ = new taPtrList<EnumDef>;
    TA_taPtrList_EnumDef_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taPtrList_EnumDef_.AddClassPar(&TA_taPtrList,0);
  taMisc::types.Add(&TA_EnumSpace);
    TAI_EnumSpace = new EnumSpace;
    TA_EnumSpace.AddParFormal(&TA_class);
    TA_EnumSpace.AddClassPar(&TA_taPtrList_EnumDef_,0);
  taMisc::types.Add(&TA_const_EnumSpace);
    TA_const_EnumSpace.AddParents(&TA_const, &TA_EnumSpace);
  taMisc::types.Add(&TA_const_EnumSpace_ref);
    TA_const_EnumSpace_ref.AddParents(&TA_const_EnumSpace);
  taMisc::types.Add(&TA_taPtrList_void_);
    TAI_taPtrList_void_ = new taPtrList<void>;
    TA_taPtrList_void_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taPtrList_void_.AddClassPar(&TA_taPtrList,0);
  taMisc::types.Add(&TA_TokenSpace);
    TAI_TokenSpace = new TokenSpace;
    TA_TokenSpace.AddParFormal(&TA_class);
    TA_TokenSpace.AddClassPar(&TA_taPtrList_void_,0);
  taMisc::types.Add(&TA_taPtrList_MemberDef_);
    TAI_taPtrList_MemberDef_ = new taPtrList<MemberDef>;
    TA_taPtrList_MemberDef_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taPtrList_MemberDef_.AddClassPar(&TA_taPtrList,0);
  taMisc::types.Add(&TA_const_TokenSpace);
    TA_const_TokenSpace.AddParents(&TA_const, &TA_TokenSpace);
  taMisc::types.Add(&TA_Member_List);
    TAI_Member_List = new Member_List;
    TA_Member_List.AddParFormal(&TA_class);
    TA_Member_List.AddClassPar(&TA_taPtrList_MemberDef_,0);
  taMisc::types.Add(&TA_const_TokenSpace_ref);
    TA_const_TokenSpace_ref.AddParents(&TA_const_TokenSpace);
  taMisc::types.Add(&TA_MemberSpace);
    TAI_MemberSpace = new MemberSpace;
    TA_MemberSpace.AddParFormal(&TA_class);
    TA_MemberSpace.AddClassPar(&TA_Member_List,0);
  taMisc::types.Add(&TA_const_MemberSpace);
    TA_const_MemberSpace.AddParents(&TA_const, &TA_MemberSpace);
  taMisc::types.Add(&TA_taPtrList_MethodDef_);
    TAI_taPtrList_MethodDef_ = new taPtrList<MethodDef>;
    TA_taPtrList_MethodDef_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taPtrList_MethodDef_.AddClassPar(&TA_taPtrList,0);
  taMisc::types.Add(&TA_const_MemberSpace_ref);
    TA_const_MemberSpace_ref.AddParents(&TA_const_MemberSpace);
  taMisc::types.Add(&TA_Method_List);
    TAI_Method_List = new Method_List;
    TA_Method_List.AddParFormal(&TA_class);
    TA_Method_List.AddClassPar(&TA_taPtrList_MethodDef_,0);
  taMisc::types.Add(&TA_MethodSpace);
    TAI_MethodSpace = new MethodSpace;
    TA_MethodSpace.AddParFormal(&TA_class);
    TA_MethodSpace.AddClassPar(&TA_Method_List,0);
  taMisc::types.Add(&TA_const_MethodSpace);
    TA_const_MethodSpace.AddParents(&TA_const, &TA_MethodSpace);
  taMisc::types.Add(&TA_const_MethodSpace_ref);
    TA_const_MethodSpace_ref.AddParents(&TA_const_MethodSpace);
  taMisc::types.Add(&TA_taPtrList_TypeDef_);
    TAI_taPtrList_TypeDef_ = new taPtrList<TypeDef>;
    TA_taPtrList_TypeDef_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taPtrList_TypeDef_.AddClassPar(&TA_taPtrList,0);
  taMisc::types.Add(&TA_TypeSpace);
    TAI_TypeSpace = new TypeSpace;
    TA_TypeSpace.AddParFormal(&TA_class);
    TA_TypeSpace.AddClassPar(&TA_taPtrList_TypeDef_,0);
  taMisc::types.Add(&TA_const_TypeSpace);
    TA_const_TypeSpace.AddParents(&TA_const, &TA_TypeSpace);
  taMisc::types.Add(&TA_TypeItem);
    TAI_TypeItem = new TypeItem;
    TA_TypeItem.AddParFormal(&TA_class);
    TA_TypeItem.AddClassPar(&TA_taRefN,0);
  taMisc::types.Add(&TA_const_TypeSpace_ref);
    TA_const_TypeSpace_ref.AddParents(&TA_const_TypeSpace);
  taMisc::types.Add(&TA_EnumSpace_ptr);
    TA_EnumSpace_ptr.AddParents(&TA_EnumSpace);
  taMisc::types.Add(&TA_MemberDef);
    TA_MemberDef.AddParFormal(&TA_class);
    TA_MemberDef.AddParents(&TA_TypeItem);
  taMisc::types.Add(&TA_const_TypeItem);
    TA_const_TypeItem.AddParents(&TA_const, &TA_TypeItem);
  taMisc::types.Add(&TA_MemberDef_ptr);
    TA_MemberDef_ptr.AddParents(&TA_MemberDef);
  taMisc::types.Add(&TA_const_TypeItem_ref);
    TA_const_TypeItem_ref.AddParents(&TA_const_TypeItem);
  taMisc::types.Add(&TA_EnumDef);
    TAI_EnumDef = new EnumDef;
    TA_EnumDef.AddParFormal(&TA_class);
    TA_EnumDef.AddClassPar(&TA_TypeItem,0);
  taMisc::types.Add(&TA_MethodDef);
    TA_MethodDef.AddParFormal(&TA_class);
    TA_MethodDef.AddParents(&TA_TypeItem);
  taMisc::types.Add(&TA_EnumDef_ptr);
    TA_EnumDef_ptr.AddParents(&TA_EnumDef);
  taMisc::types.Add(&TA_MethodDef_ptr);
    TA_MethodDef_ptr.AddParents(&TA_MethodDef);
  taMisc::types.Add(&TA_TypeDef);
    TA_TypeDef.AddParFormal(&TA_class);
    TA_TypeDef.AddParents(&TA_TypeItem);
  taMisc::types.Add(&TA_const_EnumDef);
    TA_const_EnumDef.AddParents(&TA_const, &TA_EnumDef);
  taMisc::types.Add(&TA_const_TypeDef);
    TA_const_TypeDef.AddParents(&TA_const, &TA_TypeDef);
  taMisc::types.Add(&TA_TypeDef_ptr);
    TA_TypeDef_ptr.AddParents(&TA_TypeDef);
  taMisc::types.Add(&TA_const_TypeDef_ptr);
    TA_const_TypeDef_ptr.AddParents(&TA_const_TypeDef);
  taMisc::types.Add(&TA_const_EnumDef_ref);
    TA_const_EnumDef_ref.AddParents(&TA_const_EnumDef);
  taMisc::types.Add(&TA_TypeDef_ptr_ref);
    TA_TypeDef_ptr_ref.AddParents(&TA_TypeDef_ptr);
  taMisc::types.Add(&TA_MemberSpace_ptr);
    TA_MemberSpace_ptr.AddParents(&TA_MemberSpace);
  taMisc::types.Add(&TA_taiMember_ptr);
    TA_taiMember_ptr.AddParents(&TA_taiMember);
  taMisc::types.Add(&TA_const_MemberDef);
    TA_const_MemberDef.AddParents(&TA_const, &TA_MemberDef);
  taMisc::types.Add(&TA_const_MemberDef_ref);
    TA_const_MemberDef_ref.AddParents(&TA_const_MemberDef);
  taMisc::types.Add(&TA_byte_ref);
  taMisc::types.Add(&TA_MethodSpace_ptr);
    TA_MethodSpace_ptr.AddParents(&TA_MethodSpace);
  taMisc::types.Add(&TA_taiMethod_ptr);
    TA_taiMethod_ptr.AddParents(&TA_taiMethod);
  taMisc::types.Add(&TA_const_MethodDef);
    TA_const_MethodDef.AddParents(&TA_const, &TA_MethodDef);
  taMisc::types.Add(&TA_const_MethodDef_ref);
    TA_const_MethodDef_ref.AddParents(&TA_const_MethodDef);
  taMisc::types.Add(&TA_TypeSpace_ptr);
    TA_TypeSpace_ptr.AddParents(&TA_TypeSpace);
  taMisc::types.Add(&TA_taiType_ptr);
    TA_taiType_ptr.AddParents(&TA_taiType);
  taMisc::types.Add(&TA_taiEdit_ptr);
    TA_taiEdit_ptr.AddParents(&TA_taiEdit);
  taMisc::types.Add(&TA_taiViewType_ptr);
    TA_taiViewType_ptr.AddParents(&TA_taiViewType);
  taMisc::types.Add(&TA_const_TypeDef_ref);
    TA_const_TypeDef_ref.AddParents(&TA_const_TypeDef);
  taMisc::types.Add(&TA_const_MemberDef_ptr);
    TA_const_MemberDef_ptr.AddParents(&TA_const_MemberDef);
  taMisc::types.Add(&TA_MemberDef_ptr_ptr);
    TA_MemberDef_ptr_ptr.AddParents(&TA_MemberDef);
  taMisc::types.Add(&TA_SelectEdit);
    TA_SelectEdit.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_taRootBase);
    TA_taRootBase.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_taiMimeSource);
    TA_taiMimeSource.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_taSmartRef);
    TA_taSmartRef.AddParFormal(&TA_class);
    TA_taSmartRef.AddClassPar(&TA_IDataLinkClient,0);
    tac_AddMethods(TA_taSmartRef,TA_taSmartRef_MethodDef);
  taMisc::types.Add(&TA_taSmartPtr);
    TA_taSmartPtr.AddParFormal(&TA_class);
    tac_AddMethods(TA_taSmartPtr,TA_taSmartPtr_MethodDef);
  taMisc::types.Add(&TA_taOBase);
    TAI_taOBase = new taOBase;
    TA_taOBase.AddParFormal(&TA_class);
    TA_taOBase.AddParCache(&TA_taBase);
    TA_taOBase.AddClassPar(&TA_taBase,0);
    tac_AddMembers(TA_taOBase,TA_taOBase_MemberDef);
    tac_AddMethods(TA_taOBase,TA_taOBase_MethodDef);
  taMisc::types.Add(&TA_taOABase);
    TAI_taOABase = new taOABase;
    TA_taOABase.AddParFormal(&TA_class);
    TA_taOABase.AddParCache(&TA_taBase);
    TA_taOABase.AddClassPar(&TA_taOBase,0);
    tac_AddMethods(TA_taOABase,TA_taOABase_MethodDef);
  taMisc::types.Add(&TA_taDataView);
    TAI_taDataView = new taDataView;
    TA_taDataView.AddParFormal(&TA_class);
    TA_taDataView.AddParCache(&TA_taBase);
    TA_taDataView.AddClassPar(&TA_taOBase,(int)((unsigned long)((taOBase*)TAI_taDataView)-(unsigned long)TAI_taDataView), &TA_IDataLinkClient,(int)((unsigned long)((IDataLinkClient*)TAI_taDataView)-(unsigned long)TAI_taDataView));
    tac_AddEnum(TA_taDataView, "DataViewAction", " enum used to (safely) manually invoke one or more _impl actions", "BITS ", "", "", TA_taDataView_DataViewAction);
    tac_AddMembers(TA_taDataView,TA_taDataView_MemberDef);
    tac_AddMethods(TA_taDataView,TA_taDataView_MethodDef);
  taMisc::types.Add(&TA_taNBase);
    TAI_taNBase = new taNBase;
    TA_taNBase.AddParFormal(&TA_class);
    TA_taNBase.AddParCache(&TA_taBase);
    TA_taNBase.AddClassPar(&TA_taOBase,0);
    tac_AddMembers(TA_taNBase,TA_taNBase_MemberDef);
  taMisc::types.Add(&TA_UserDataItem);
    TAI_UserDataItem = new UserDataItem;
    TA_UserDataItem.AddParFormal(&TA_class);
    TA_UserDataItem.AddParCache(&TA_taBase);
    TA_UserDataItem.AddClassPar(&TA_UserDataItemBase,0);
    tac_AddMembers(TA_UserDataItem,TA_UserDataItem_MemberDef);
    tac_AddMethods(TA_UserDataItem,TA_UserDataItem_MethodDef);
  taMisc::types.Add(&TA_taRootBase_ptr);
    TA_taRootBase_ptr.AddParents(&TA_taRootBase);
  taMisc::types.Add(&TA_tabMisc);
    TAI_tabMisc = new tabMisc;
    TA_tabMisc.AddParFormal(&TA_class);
    tac_AddMembers(TA_tabMisc,TA_tabMisc_MemberDef);
    tac_AddMethods(TA_tabMisc,TA_tabMisc_MethodDef);
  taMisc::types.Add(&TA_taBase_ref);
    TA_taBase_ref.AddParents(&TA_taBase);
  taMisc::types.Add(&TA_taSmartRef_ref);
    TA_taSmartRef_ref.AddParents(&TA_taSmartRef);
  taMisc::types.Add(&TA_taBase_ptr_ptr);
    TA_taBase_ptr_ptr.AddParents(&TA_taBase);
  taMisc::types.Add(&TA_const_taBase_ref);
    TA_const_taBase_ref.AddParents(&TA_const_taBase);
  taMisc::types.Add(&TA_MemberDef_ptr_ref);
    TA_MemberDef_ptr_ref.AddParents(&TA_MemberDef_ptr);
  taMisc::types.Add(&TA_TypeItem_ptr);
    TA_TypeItem_ptr.AddParents(&TA_TypeItem);
  taMisc::types.Add(&TA_taFiler_ptr_ref);
    TA_taFiler_ptr_ref.AddParents(&TA_taFiler_ptr);
  taMisc::types.Add(&TA_bool_ref);
    TA_bool_ref.AddParents(&TA_bool);
  taMisc::types.Add(&TA_taSmartRef_ptr);
    TA_taSmartRef_ptr.AddParents(&TA_taSmartRef);
  taMisc::types.Add(&TA_taiMimeSource_ptr);
    TA_taiMimeSource_ptr.AddParents(&TA_taiMimeSource);
  taMisc::types.Add(&TA_const_taiMimeSource);
    TA_const_taiMimeSource.AddParents(&TA_const, &TA_taiMimeSource);
  taMisc::types.Add(&TA_const_taiMimeSource_ptr);
    TA_const_taiMimeSource_ptr.AddParents(&TA_const_taiMimeSource);
  taMisc::types.Add(&TA_const_QPixmap_ptr);
  taMisc::types.Add(&TA_SelectEdit_ptr);
    TA_SelectEdit_ptr.AddParents(&TA_SelectEdit);
  taMisc::types.Add(&TA_SelectEdit_ptr_ref);
    TA_SelectEdit_ptr_ref.AddParents(&TA_SelectEdit_ptr);
  taMisc::types.Add(&TA_taSmartPtr_ref);
    TA_taSmartPtr_ref.AddParents(&TA_taSmartPtr);
  taMisc::types.Add(&TA_TAPtr_ptr);
    TA_TAPtr_ptr.AddParents(&TA_TAPtr);
  taMisc::types.Add(&TA_const_taSmartPtr);
    TA_const_taSmartPtr.AddParents(&TA_const, &TA_taSmartPtr);
  taMisc::types.Add(&TA_const_taSmartPtr_ref);
    TA_const_taSmartPtr_ref.AddParents(&TA_const_taSmartPtr);
  taMisc::types.Add(&TA_taSmartPtrT);
    TA_taSmartPtrT.AddParFormal(&TA_class, &TA_template);
    TA_taSmartPtrT.AddParents(&TA_taSmartPtr);
  taMisc::types.Add(&TA_const_taSmartRef);
    TA_const_taSmartRef.AddParents(&TA_const, &TA_taSmartRef);
  taMisc::types.Add(&TA_const_taSmartPtrT);
    TA_const_taSmartPtrT.AddParents(&TA_const, &TA_taSmartPtrT);
  taMisc::types.Add(&TA_const_taSmartRef_ref);
    TA_const_taSmartRef_ref.AddParents(&TA_const_taSmartRef);
  taMisc::types.Add(&TA_const_taSmartPtrT_ref);
    TA_const_taSmartPtrT_ref.AddParents(&TA_const_taSmartPtrT);
  taMisc::types.Add(&TA_taSmartRefT);
    TA_taSmartRefT.AddParFormal(&TA_class, &TA_template);
    TA_taSmartRefT.AddParents(&TA_taSmartRef);
  taMisc::types.Add(&TA_taSmartRefT_taBase_);
    TA_taSmartRefT_taBase_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taSmartRefT_taBase_.AddClassPar(&TA_taSmartRefT,0);
    sbt = new TypeDef("taBase_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taBase);
    TA_taSmartRefT_taBase_.sub_types.Add(sbt);
    tac_AddMethods(TA_taSmartRefT_taBase_,TA_taSmartRefT_taBase__MethodDef);
  taMisc::types.Add(&TA_const_taSmartRefT);
    TA_const_taSmartRefT.AddParents(&TA_const, &TA_taSmartRefT);
  taMisc::types.Add(&TA_const_taSmartRefT_ref);
    TA_const_taSmartRefT_ref.AddParents(&TA_const_taSmartRefT);
  taMisc::types.Add(&TA_taBaseRef);
    TA_taBaseRef.AddParFormal(&TA_class);
    TA_taBaseRef.AddClassPar(&TA_taSmartRefT_taBase_,0);
    tac_AddMethods(TA_taBaseRef,TA_taBaseRef_MethodDef);
  taMisc::types.Add(&TA_const_taOBase);
    TA_const_taOBase.AddParents(&TA_const, &TA_taOBase);
  taMisc::types.Add(&TA_const_taBaseRef);
    TA_const_taBaseRef.AddParents(&TA_const, &TA_taBaseRef);
  taMisc::types.Add(&TA_const_taOBase_ref);
    TA_const_taOBase_ref.AddParents(&TA_const_taOBase);
  taMisc::types.Add(&TA_const_taBaseRef_ref);
    TA_const_taBaseRef_ref.AddParents(&TA_const_taBaseRef);
  taMisc::types.Add(&TA_taOABase_ptr);
    TA_taOABase_ptr.AddParents(&TA_taOABase);
  taMisc::types.Add(&TA_const_taOABase);
    TA_const_taOABase.AddParents(&TA_const, &TA_taOABase);
  taMisc::types.Add(&TA_const_taOABase_ref);
    TA_const_taOABase_ref.AddParents(&TA_const_taOABase);
  taMisc::types.Add(&TA_const_taNBase);
    TA_const_taNBase.AddParents(&TA_const, &TA_taNBase);
  taMisc::types.Add(&TA_const_taNBase_ref);
    TA_const_taNBase_ref.AddParents(&TA_const_taNBase);
  taMisc::types.Add(&TA_taNBase_ptr);
    TA_taNBase_ptr.AddParents(&TA_taNBase);
  taMisc::types.Add(&TA_TANPtr);
    TAI_TANPtr = new taNBase*;
    TA_TANPtr.AddParents(&TA_taNBase_ptr);
  taMisc::types.Add(&TA_taFBase);
    TAI_taFBase = new taFBase;
    TA_taFBase.AddParFormal(&TA_class);
    TA_taFBase.AddParCache(&TA_taBase);
    TA_taFBase.AddClassPar(&TA_taNBase,0);
    tac_AddMembers(TA_taFBase,TA_taFBase_MemberDef);
  taMisc::types.Add(&TA_taPtrList_taBase_);
    TAI_taPtrList_taBase_ = new taPtrList<taBase>;
    TA_taPtrList_taBase_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taPtrList_taBase_.AddClassPar(&TA_taPtrList,0);
    sbt = new TypeDef("taBase_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taBase);
    TA_taPtrList_taBase_.sub_types.Add(sbt);
    sbt = new TypeDef("const_taBase", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_taBase);
    TA_taPtrList_taBase_.sub_types.Add(sbt);
    sbt = new TypeDef("const_taBase_ptr", 1, 1, 0);
    sbt->AddParents(TA_taPtrList_taBase_.sub_types.FindName("const_taBase"));
    TA_taPtrList_taBase_.sub_types.Add(sbt);
    tac_AddMethods(TA_taPtrList_taBase_,TA_taPtrList_taBase__MethodDef);
  taMisc::types.Add(&TA_const_taFBase);
    TA_const_taFBase.AddParents(&TA_const, &TA_taFBase);
  taMisc::types.Add(&TA_taBase_PtrList);
    TA_taBase_PtrList.AddParFormal(&TA_class);
    TA_taBase_PtrList.AddClassPar(&TA_taPtrList_taBase_,0);
  taMisc::types.Add(&TA_const_taFBase_ref);
    TA_const_taFBase_ref.AddParents(&TA_const_taFBase);
  taMisc::types.Add(&TA_taPtrList_base_taBase_);
    TAI_taPtrList_base_taBase_ = new taPtrList_base<taBase>;
    TA_taPtrList_base_taBase_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taPtrList_base_taBase_.AddClassPar(&TA_taPtrList_base,0);
    sbt = new TypeDef("const_taBase", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_taBase);
    TA_taPtrList_base_taBase_.sub_types.Add(sbt);
    sbt = new TypeDef("const_taBase_ptr", 1, 1, 0);
    sbt->AddParents(TA_taPtrList_base_taBase_.sub_types.FindName("const_taBase"));
    TA_taPtrList_base_taBase_.sub_types.Add(sbt);
    sbt = new TypeDef("taBase_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taBase);
    TA_taPtrList_base_taBase_.sub_types.Add(sbt);
    tac_AddMethods(TA_taPtrList_base_taBase_,TA_taPtrList_base_taBase__MethodDef);
  taMisc::types.Add(&TA_taPtrList_ta_base);
    TA_taPtrList_ta_base.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taPtrList_ta_base.AddClassPar(&TA_taPtrList_base_taBase_,0);
  taMisc::types.Add(&TA_taList_impl);
    TAI_taList_impl = new taList_impl;
    TA_taList_impl.AddParFormal(&TA_class);
    TA_taList_impl.AddParCache(&TA_taBase);
    TA_taList_impl.AddClassPar(&TA_taOBase,(int)((unsigned long)((taOBase*)TAI_taList_impl)-(unsigned long)TAI_taList_impl), &TA_taPtrList_ta_base,(int)((unsigned long)((taPtrList_ta_base*)TAI_taList_impl)-(unsigned long)TAI_taList_impl));
    tac_AddMembers(TA_taList_impl,TA_taList_impl_MemberDef);
    tac_AddMethods(TA_taList_impl,TA_taList_impl_MethodDef);
  taMisc::types.Add(&TA_const_taList_impl);
    TA_const_taList_impl.AddParents(&TA_const, &TA_taList_impl);
  taMisc::types.Add(&TA_taList_impl_ptr);
    TA_taList_impl_ptr.AddParents(&TA_taList_impl);
  taMisc::types.Add(&TA_const_taList_impl_ref);
    TA_const_taList_impl_ref.AddParents(&TA_const_taList_impl);
  taMisc::types.Add(&TA_TABLPtr);
    TA_TABLPtr.AddParents(&TA_taList_impl_ptr);
  taMisc::types.Add(&TA_taList);
    TA_taList.AddParFormal(&TA_class, &TA_template);
    TA_taList.AddParCache(&TA_taBase);
    TA_taList.AddParents(&TA_taList_impl);
  taMisc::types.Add(&TA_taList_taBase_);
    TAI_taList_taBase_ = new taList<taBase>;
    TA_taList_taBase_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taList_taBase_.AddParCache(&TA_taBase);
    TA_taList_taBase_.AddClassPar(&TA_taList,0);
    tac_AddEnum(TA_taList_taBase_, "Orientation", " must be same values as Qt::Orientation", "", "", "", TA_taList_taBase__Orientation);
    tac_AddEnum(TA_taList_taBase_, "ValType", " the basic data types widely supported by data-handling api's, esp. matrices", "", "", "", TA_taList_taBase__ValType);
    tac_AddEnum(TA_taList_taBase_, "BaseFlags", " control flags ", "BITS ", "", "", TA_taList_taBase__BaseFlags);
    tac_AddEnum(TA_taList_taBase_, "DumpQueryResult", " Dump_QuerySaveMember response", "IGNORE ", "", "", TA_taList_taBase__DumpQueryResult);
    sbt = new TypeDef("const_taBase", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_taBase);
    TA_taList_taBase_.sub_types.Add(sbt);
    sbt = new TypeDef("const_taBase_ptr", 1, 1, 0);
    sbt->AddParents(TA_taList_taBase_.sub_types.FindName("const_taBase"));
    TA_taList_taBase_.sub_types.Add(sbt);
    sbt = new TypeDef("taBase_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taBase);
    TA_taList_taBase_.sub_types.Add(sbt);
    sbt = new TypeDef("taBase_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taBase);
    TA_taList_taBase_.sub_types.Add(sbt);
    tac_AddMethods(TA_taList_taBase_,TA_taList_taBase__MethodDef);
  taMisc::types.Add(&TA_const_taList);
    TA_const_taList.AddParents(&TA_const, &TA_taList);
  taMisc::types.Add(&TA_taBase_List);
    TAI_taBase_List = new taBase_List;
    TA_taBase_List.AddParFormal(&TA_class);
    TA_taBase_List.AddParCache(&TA_taBase);
    TA_taBase_List.AddClassPar(&TA_taList_taBase_,0);
  taMisc::types.Add(&TA_const_taList_ref);
    TA_const_taList_ref.AddParents(&TA_const_taList);
  taMisc::types.Add(&TA_const_taBase_List);
    TA_const_taBase_List.AddParents(&TA_const, &TA_taBase_List);
  taMisc::types.Add(&TA_taBase_List_ptr);
    TA_taBase_List_ptr.AddParents(&TA_taBase_List);
  taMisc::types.Add(&TA_const_taBase_List_ref);
    TA_const_taBase_List_ref.AddParents(&TA_const_taBase_List);
  taMisc::types.Add(&TA_taDataView_ptr);
    TA_taDataView_ptr.AddParents(&TA_taDataView);
  taMisc::types.Add(&TA_const_taDataView);
    TA_const_taDataView.AddParents(&TA_const, &TA_taDataView);
  taMisc::types.Add(&TA_const_taDataView_ref);
    TA_const_taDataView_ref.AddParents(&TA_const_taDataView);
  taMisc::types.Add(&TA_taList_taDataView_);
    TAI_taList_taDataView_ = new taList<taDataView>;
    TA_taList_taDataView_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taList_taDataView_.AddParCache(&TA_taBase);
    TA_taList_taDataView_.AddClassPar(&TA_taList,0);
    tac_AddEnum(TA_taList_taDataView_, "Orientation", " must be same values as Qt::Orientation", "", "", "", TA_taList_taDataView__Orientation);
    tac_AddEnum(TA_taList_taDataView_, "ValType", " the basic data types widely supported by data-handling api's, esp. matrices", "", "", "", TA_taList_taDataView__ValType);
    tac_AddEnum(TA_taList_taDataView_, "BaseFlags", " control flags ", "BITS ", "", "", TA_taList_taDataView__BaseFlags);
    tac_AddEnum(TA_taList_taDataView_, "DumpQueryResult", " Dump_QuerySaveMember response", "IGNORE ", "", "", TA_taList_taDataView__DumpQueryResult);
    sbt = new TypeDef("const_taBase", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_taBase);
    TA_taList_taDataView_.sub_types.Add(sbt);
    sbt = new TypeDef("const_taBase_ptr", 1, 1, 0);
    sbt->AddParents(TA_taList_taDataView_.sub_types.FindName("const_taBase"));
    TA_taList_taDataView_.sub_types.Add(sbt);
    sbt = new TypeDef("taBase_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taBase);
    TA_taList_taDataView_.sub_types.Add(sbt);
    sbt = new TypeDef("taDataView_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taDataView);
    TA_taList_taDataView_.sub_types.Add(sbt);
    tac_AddMethods(TA_taList_taDataView_,TA_taList_taDataView__MethodDef);
  taMisc::types.Add(&TA_DataView_List);
    TAI_DataView_List = new DataView_List;
    TA_DataView_List.AddParFormal(&TA_class);
    TA_DataView_List.AddParCache(&TA_taBase);
    TA_DataView_List.AddClassPar(&TA_taList_taDataView_,0);
    tac_AddMethods(TA_DataView_List,TA_DataView_List_MethodDef);
  taMisc::types.Add(&TA_const_DataView_List);
    TA_const_DataView_List.AddParents(&TA_const, &TA_DataView_List);
  taMisc::types.Add(&TA_taArray_base);
    TAI_taArray_base = new taArray_base;
    TA_taArray_base.AddParFormal(&TA_class);
    TA_taArray_base.AddParCache(&TA_taBase);
    TA_taArray_base.AddClassPar(&TA_taOBase,(int)((unsigned long)((taOBase*)TAI_taArray_base)-(unsigned long)TAI_taArray_base), &TA_taArray_impl,(int)((unsigned long)((taArray_impl*)TAI_taArray_base)-(unsigned long)TAI_taArray_base));
    tac_AddMethods(TA_taArray_base,TA_taArray_base_MethodDef);
  taMisc::types.Add(&TA_const_DataView_List_ref);
    TA_const_DataView_List_ref.AddParents(&TA_const_DataView_List);
  taMisc::types.Add(&TA_taArray);
    TA_taArray.AddParFormal(&TA_class, &TA_template);
    TA_taArray.AddParCache(&TA_taBase);
    TA_taArray.AddParents(&TA_taArray_base);
  taMisc::types.Add(&TA_const_taArray_base);
    TA_const_taArray_base.AddParents(&TA_const, &TA_taArray_base);
  taMisc::types.Add(&TA_taArray_int_);
    TAI_taArray_int_ = new taArray<int>;
    TA_taArray_int_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taArray_int_.AddParCache(&TA_taBase);
    TA_taArray_int_.AddClassPar(&TA_taArray,0);
    tac_AddEnum(TA_taArray_int_, "Orientation", " must be same values as Qt::Orientation", "", "", "", TA_taArray_int__Orientation);
    tac_AddEnum(TA_taArray_int_, "ValType", " the basic data types widely supported by data-handling api's, esp. matrices", "", "", "", TA_taArray_int__ValType);
    tac_AddEnum(TA_taArray_int_, "BaseFlags", " control flags ", "BITS ", "", "", TA_taArray_int__BaseFlags);
    tac_AddEnum(TA_taArray_int_, "DumpQueryResult", " Dump_QuerySaveMember response", "IGNORE ", "", "", TA_taArray_int__DumpQueryResult);
    sbt = new TypeDef("int_ptr", 1, 1, 0);
    sbt->AddParents(&TA_int);
    TA_taArray_int_.sub_types.Add(sbt);
    sbt = new TypeDef("const_int", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_int);
    TA_taArray_int_.sub_types.Add(sbt);
    sbt = new TypeDef("const_int_ref", 1, 0, 1);
    sbt->AddParents(TA_taArray_int_.sub_types.FindName("const_int"));
    TA_taArray_int_.sub_types.Add(sbt);
    sbt = new TypeDef("int_ref", 1, 0, 1);
    sbt->AddParents(&TA_int);
    TA_taArray_int_.sub_types.Add(sbt);
    tac_AddMembers(TA_taArray_int_,TA_taArray_int__MemberDef);
    tac_AddMethods(TA_taArray_int_,TA_taArray_int__MethodDef);
  taMisc::types.Add(&TA_const_taArray_base_ref);
    TA_const_taArray_base_ref.AddParents(&TA_const_taArray_base);
  taMisc::types.Add(&TA_int_Array);
    TAI_int_Array = new int_Array;
    TA_int_Array.AddParFormal(&TA_class);
    TA_int_Array.AddParCache(&TA_taBase);
    TA_int_Array.AddClassPar(&TA_taArray_int_,0);
    tac_AddMembers(TA_int_Array,TA_int_Array_MemberDef);
    tac_AddMethods(TA_int_Array,TA_int_Array_MethodDef);
  taMisc::types.Add(&TA_taArray_float_);
    TAI_taArray_float_ = new taArray<float>;
    TA_taArray_float_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taArray_float_.AddParCache(&TA_taBase);
    TA_taArray_float_.AddClassPar(&TA_taArray,0);
    tac_AddEnum(TA_taArray_float_, "Orientation", " must be same values as Qt::Orientation", "", "", "", TA_taArray_float__Orientation);
    tac_AddEnum(TA_taArray_float_, "ValType", " the basic data types widely supported by data-handling api's, esp. matrices", "", "", "", TA_taArray_float__ValType);
    tac_AddEnum(TA_taArray_float_, "BaseFlags", " control flags ", "BITS ", "", "", TA_taArray_float__BaseFlags);
    tac_AddEnum(TA_taArray_float_, "DumpQueryResult", " Dump_QuerySaveMember response", "IGNORE ", "", "", TA_taArray_float__DumpQueryResult);
    sbt = new TypeDef("float_ptr", 1, 1, 0);
    sbt->AddParents(&TA_float);
    TA_taArray_float_.sub_types.Add(sbt);
    sbt = new TypeDef("const_float", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_float);
    TA_taArray_float_.sub_types.Add(sbt);
    sbt = new TypeDef("const_float_ref", 1, 0, 1);
    sbt->AddParents(TA_taArray_float_.sub_types.FindName("const_float"));
    TA_taArray_float_.sub_types.Add(sbt);
    sbt = new TypeDef("float_ref", 1, 0, 1);
    sbt->AddParents(&TA_float);
    TA_taArray_float_.sub_types.Add(sbt);
    tac_AddMembers(TA_taArray_float_,TA_taArray_float__MemberDef);
    tac_AddMethods(TA_taArray_float_,TA_taArray_float__MethodDef);
  taMisc::types.Add(&TA_const_int_Array);
    TA_const_int_Array.AddParents(&TA_const, &TA_int_Array);
  taMisc::types.Add(&TA_const_int_Array_ref);
    TA_const_int_Array_ref.AddParents(&TA_const_int_Array);
  taMisc::types.Add(&TA_const_float);
    TA_const_float.AddParents(&TA_const, &TA_float);
  taMisc::types.Add(&TA_const_float_ref);
    TA_const_float_ref.AddParents(&TA_const_float);
  taMisc::types.Add(&TA_float_Array);
    TAI_float_Array = new float_Array;
    TA_float_Array.AddParFormal(&TA_class);
    TA_float_Array.AddParCache(&TA_taBase);
    TA_float_Array.AddClassPar(&TA_taArray_float_,0);
    tac_AddMembers(TA_float_Array,TA_float_Array_MemberDef);
  taMisc::types.Add(&TA_taArray_double_);
    TAI_taArray_double_ = new taArray<double>;
    TA_taArray_double_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taArray_double_.AddParCache(&TA_taBase);
    TA_taArray_double_.AddClassPar(&TA_taArray,0);
    tac_AddEnum(TA_taArray_double_, "Orientation", " must be same values as Qt::Orientation", "", "", "", TA_taArray_double__Orientation);
    tac_AddEnum(TA_taArray_double_, "ValType", " the basic data types widely supported by data-handling api's, esp. matrices", "", "", "", TA_taArray_double__ValType);
    tac_AddEnum(TA_taArray_double_, "BaseFlags", " control flags ", "BITS ", "", "", TA_taArray_double__BaseFlags);
    tac_AddEnum(TA_taArray_double_, "DumpQueryResult", " Dump_QuerySaveMember response", "IGNORE ", "", "", TA_taArray_double__DumpQueryResult);
    sbt = new TypeDef("double_ptr", 1, 1, 0);
    sbt->AddParents(&TA_double);
    TA_taArray_double_.sub_types.Add(sbt);
    sbt = new TypeDef("const_double", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_double);
    TA_taArray_double_.sub_types.Add(sbt);
    sbt = new TypeDef("const_double_ref", 1, 0, 1);
    sbt->AddParents(TA_taArray_double_.sub_types.FindName("const_double"));
    TA_taArray_double_.sub_types.Add(sbt);
    sbt = new TypeDef("double_ref", 1, 0, 1);
    sbt->AddParents(&TA_double);
    TA_taArray_double_.sub_types.Add(sbt);
    tac_AddMembers(TA_taArray_double_,TA_taArray_double__MemberDef);
    tac_AddMethods(TA_taArray_double_,TA_taArray_double__MethodDef);
  taMisc::types.Add(&TA_const_float_Array);
    TA_const_float_Array.AddParents(&TA_const, &TA_float_Array);
  taMisc::types.Add(&TA_const_float_Array_ref);
    TA_const_float_Array_ref.AddParents(&TA_const_float_Array);
  taMisc::types.Add(&TA_double_ref);
    TA_double_ref.AddParents(&TA_double);
  taMisc::types.Add(&TA_const_double);
    TA_const_double.AddParents(&TA_const, &TA_double);
  taMisc::types.Add(&TA_const_double_ref);
    TA_const_double_ref.AddParents(&TA_const_double);
  taMisc::types.Add(&TA_double_Array);
    TAI_double_Array = new double_Array;
    TA_double_Array.AddParFormal(&TA_class);
    TA_double_Array.AddParCache(&TA_taBase);
    TA_double_Array.AddClassPar(&TA_taArray_double_,0);
    tac_AddMembers(TA_double_Array,TA_double_Array_MemberDef);
  taMisc::types.Add(&TA_taArray_char_);
    TAI_taArray_char_ = new taArray<char>;
    TA_taArray_char_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taArray_char_.AddParCache(&TA_taBase);
    TA_taArray_char_.AddClassPar(&TA_taArray,0);
    tac_AddEnum(TA_taArray_char_, "Orientation", " must be same values as Qt::Orientation", "", "", "", TA_taArray_char__Orientation);
    tac_AddEnum(TA_taArray_char_, "ValType", " the basic data types widely supported by data-handling api's, esp. matrices", "", "", "", TA_taArray_char__ValType);
    tac_AddEnum(TA_taArray_char_, "BaseFlags", " control flags ", "BITS ", "", "", TA_taArray_char__BaseFlags);
    tac_AddEnum(TA_taArray_char_, "DumpQueryResult", " Dump_QuerySaveMember response", "IGNORE ", "", "", TA_taArray_char__DumpQueryResult);
    sbt = new TypeDef("char_ptr", 1, 1, 0);
    sbt->AddParents(&TA_char);
    TA_taArray_char_.sub_types.Add(sbt);
    sbt = new TypeDef("const_char", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_char);
    TA_taArray_char_.sub_types.Add(sbt);
    sbt = new TypeDef("const_char_ref", 1, 0, 1);
    sbt->AddParents(TA_taArray_char_.sub_types.FindName("const_char"));
    TA_taArray_char_.sub_types.Add(sbt);
    sbt = new TypeDef("char_ref", 1, 0, 1);
    sbt->AddParents(&TA_char);
    TA_taArray_char_.sub_types.Add(sbt);
    tac_AddMembers(TA_taArray_char_,TA_taArray_char__MemberDef);
    tac_AddMethods(TA_taArray_char_,TA_taArray_char__MethodDef);
  taMisc::types.Add(&TA_const_double_Array);
    TA_const_double_Array.AddParents(&TA_const, &TA_double_Array);
  taMisc::types.Add(&TA_const_double_Array_ref);
    TA_const_double_Array_ref.AddParents(&TA_const_double_Array);
  taMisc::types.Add(&TA_const_char_ref);
    TA_const_char_ref.AddParents(&TA_const_char);
  taMisc::types.Add(&TA_char_Array);
    TAI_char_Array = new char_Array;
    TA_char_Array.AddParFormal(&TA_class);
    TA_char_Array.AddParCache(&TA_taBase);
    TA_char_Array.AddClassPar(&TA_taArray_char_,0);
    tac_AddMembers(TA_char_Array,TA_char_Array_MemberDef);
  taMisc::types.Add(&TA_taArray_taString_);
    TAI_taArray_taString_ = new taArray<taString>;
    TA_taArray_taString_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taArray_taString_.AddParCache(&TA_taBase);
    TA_taArray_taString_.AddClassPar(&TA_taArray,0);
    tac_AddEnum(TA_taArray_taString_, "Orientation", " must be same values as Qt::Orientation", "", "", "", TA_taArray_taString__Orientation);
    tac_AddEnum(TA_taArray_taString_, "ValType", " the basic data types widely supported by data-handling api's, esp. matrices", "", "", "", TA_taArray_taString__ValType);
    tac_AddEnum(TA_taArray_taString_, "BaseFlags", " control flags ", "BITS ", "", "", TA_taArray_taString__BaseFlags);
    tac_AddEnum(TA_taArray_taString_, "DumpQueryResult", " Dump_QuerySaveMember response", "IGNORE ", "", "", TA_taArray_taString__DumpQueryResult);
    sbt = new TypeDef("taString_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taString);
    TA_taArray_taString_.sub_types.Add(sbt);
    sbt = new TypeDef("const_taString", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_taString);
    TA_taArray_taString_.sub_types.Add(sbt);
    sbt = new TypeDef("const_taString_ref", 1, 0, 1);
    sbt->AddParents(TA_taArray_taString_.sub_types.FindName("const_taString"));
    TA_taArray_taString_.sub_types.Add(sbt);
    sbt = new TypeDef("taString_ref", 1, 0, 1);
    sbt->AddParents(&TA_taString);
    TA_taArray_taString_.sub_types.Add(sbt);
    tac_AddMembers(TA_taArray_taString_,TA_taArray_taString__MemberDef);
    tac_AddMethods(TA_taArray_taString_,TA_taArray_taString__MethodDef);
  taMisc::types.Add(&TA_const_char_Array);
    TA_const_char_Array.AddParents(&TA_const, &TA_char_Array);
  taMisc::types.Add(&TA_String_Array);
    TAI_String_Array = new String_Array;
    TA_String_Array.AddParFormal(&TA_class);
    TA_String_Array.AddParCache(&TA_taBase);
    TA_String_Array.AddClassPar(&TA_taArray_taString_,0);
    tac_AddMembers(TA_String_Array,TA_String_Array_MemberDef);
  taMisc::types.Add(&TA_const_char_Array_ref);
    TA_const_char_Array_ref.AddParents(&TA_const_char_Array);
  taMisc::types.Add(&TA_const_String_Array);
    TA_const_String_Array.AddParents(&TA_const, &TA_String_Array);
  taMisc::types.Add(&TA_const_String_Array_ref);
    TA_const_String_Array_ref.AddParents(&TA_const_String_Array);
  taMisc::types.Add(&TA_SArg_Array);
    TAI_SArg_Array = new SArg_Array;
    TA_SArg_Array.AddParFormal(&TA_class);
    TA_SArg_Array.AddParCache(&TA_taBase);
    TA_SArg_Array.AddClassPar(&TA_String_Array,0);
    tac_AddMembers(TA_SArg_Array,TA_SArg_Array_MemberDef);
    tac_AddMethods(TA_SArg_Array,TA_SArg_Array_MethodDef);
  taMisc::types.Add(&TA_taArray_Variant_);
    TAI_taArray_Variant_ = new taArray<Variant>;
    TA_taArray_Variant_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taArray_Variant_.AddParCache(&TA_taBase);
    TA_taArray_Variant_.AddClassPar(&TA_taArray,0);
    tac_AddEnum(TA_taArray_Variant_, "Orientation", " must be same values as Qt::Orientation", "", "", "", TA_taArray_Variant__Orientation);
    tac_AddEnum(TA_taArray_Variant_, "ValType", " the basic data types widely supported by data-handling api's, esp. matrices", "", "", "", TA_taArray_Variant__ValType);
    tac_AddEnum(TA_taArray_Variant_, "BaseFlags", " control flags ", "BITS ", "", "", TA_taArray_Variant__BaseFlags);
    tac_AddEnum(TA_taArray_Variant_, "DumpQueryResult", " Dump_QuerySaveMember response", "IGNORE ", "", "", TA_taArray_Variant__DumpQueryResult);
    sbt = new TypeDef("Variant_ptr", 1, 1, 0);
    sbt->AddParents(&TA_Variant);
    TA_taArray_Variant_.sub_types.Add(sbt);
    sbt = new TypeDef("const_Variant", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_Variant);
    TA_taArray_Variant_.sub_types.Add(sbt);
    sbt = new TypeDef("const_Variant_ref", 1, 0, 1);
    sbt->AddParents(TA_taArray_Variant_.sub_types.FindName("const_Variant"));
    TA_taArray_Variant_.sub_types.Add(sbt);
    sbt = new TypeDef("Variant_ref", 1, 0, 1);
    sbt->AddParents(&TA_Variant);
    TA_taArray_Variant_.sub_types.Add(sbt);
    tac_AddMembers(TA_taArray_Variant_,TA_taArray_Variant__MemberDef);
    tac_AddMethods(TA_taArray_Variant_,TA_taArray_Variant__MethodDef);
  taMisc::types.Add(&TA_const_SArg_Array);
    TA_const_SArg_Array.AddParents(&TA_const, &TA_SArg_Array);
  taMisc::types.Add(&TA_const_SArg_Array_ref);
    TA_const_SArg_Array_ref.AddParents(&TA_const_SArg_Array);
  taMisc::types.Add(&TA_Variant_Array);
    TAI_Variant_Array = new Variant_Array;
    TA_Variant_Array.AddParFormal(&TA_class);
    TA_Variant_Array.AddParCache(&TA_taBase);
    TA_Variant_Array.AddClassPar(&TA_taArray_Variant_,0);
    tac_AddMembers(TA_Variant_Array,TA_Variant_Array_MemberDef);
  taMisc::types.Add(&TA_taArray_voidptr_);
    TAI_taArray_voidptr_ = new taArray<void*>;
    TA_taArray_voidptr_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taArray_voidptr_.AddParCache(&TA_taBase);
    TA_taArray_voidptr_.AddClassPar(&TA_taArray,0);
    tac_AddEnum(TA_taArray_voidptr_, "Orientation", " must be same values as Qt::Orientation", "", "", "", TA_taArray_voidptr__Orientation);
    tac_AddEnum(TA_taArray_voidptr_, "ValType", " the basic data types widely supported by data-handling api's, esp. matrices", "", "", "", TA_taArray_voidptr__ValType);
    tac_AddEnum(TA_taArray_voidptr_, "BaseFlags", " control flags ", "BITS ", "", "", TA_taArray_voidptr__BaseFlags);
    tac_AddEnum(TA_taArray_voidptr_, "DumpQueryResult", " Dump_QuerySaveMember response", "IGNORE ", "", "", TA_taArray_voidptr__DumpQueryResult);
    sbt = new TypeDef("voidptr_ptr", 1, 1, 0);
    sbt->AddParents(&TA_voidptr);
    TA_taArray_voidptr_.sub_types.Add(sbt);
    sbt = new TypeDef("const_voidptr", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_voidptr);
    TA_taArray_voidptr_.sub_types.Add(sbt);
    sbt = new TypeDef("const_voidptr_ref", 1, 0, 1);
    sbt->AddParents(TA_taArray_voidptr_.sub_types.FindName("const_voidptr"));
    TA_taArray_voidptr_.sub_types.Add(sbt);
    sbt = new TypeDef("voidptr_ref", 1, 0, 1);
    sbt->AddParents(&TA_voidptr);
    TA_taArray_voidptr_.sub_types.Add(sbt);
    tac_AddMembers(TA_taArray_voidptr_,TA_taArray_voidptr__MemberDef);
    tac_AddMethods(TA_taArray_voidptr_,TA_taArray_voidptr__MethodDef);
  taMisc::types.Add(&TA_const_Variant_Array);
    TA_const_Variant_Array.AddParents(&TA_const, &TA_Variant_Array);
  taMisc::types.Add(&TA_const_Variant_Array_ref);
    TA_const_Variant_Array_ref.AddParents(&TA_const_Variant_Array);
  taMisc::types.Add(&TA_voidptr_ref);
  taMisc::types.Add(&TA_const_voidptr);
    TA_const_voidptr.AddParents(&TA_const);
  taMisc::types.Add(&TA_const_voidptr_ref);
    TA_const_voidptr_ref.AddParents(&TA_const_voidptr);
  taMisc::types.Add(&TA_voidptr_Array);
    TAI_voidptr_Array = new voidptr_Array;
    TA_voidptr_Array.AddParFormal(&TA_class);
    TA_voidptr_Array.AddParCache(&TA_taBase);
    TA_voidptr_Array.AddClassPar(&TA_taArray_voidptr_,0);
    tac_AddMembers(TA_voidptr_Array,TA_voidptr_Array_MemberDef);
  taMisc::types.Add(&TA_const_UserDataItemBase);
    TA_const_UserDataItemBase.AddParents(&TA_const, &TA_UserDataItemBase);
  taMisc::types.Add(&TA_const_voidptr_Array);
    TA_const_voidptr_Array.AddParents(&TA_const, &TA_voidptr_Array);
  taMisc::types.Add(&TA_const_UserDataItemBase_ref);
    TA_const_UserDataItemBase_ref.AddParents(&TA_const_UserDataItemBase);
  taMisc::types.Add(&TA_const_voidptr_Array_ref);
    TA_const_voidptr_Array_ref.AddParents(&TA_const_voidptr_Array);
  taMisc::types.Add(&TA_const_UserDataItem);
    TA_const_UserDataItem.AddParents(&TA_const, &TA_UserDataItem);
  taMisc::types.Add(&TA_const_UserDataItem_ref);
    TA_const_UserDataItem_ref.AddParents(&TA_const_UserDataItem);
  taMisc::types.Add(&TA_taList_UserDataItemBase_);
    TAI_taList_UserDataItemBase_ = new taList<UserDataItemBase>;
    TA_taList_UserDataItemBase_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taList_UserDataItemBase_.AddParCache(&TA_taBase);
    TA_taList_UserDataItemBase_.AddClassPar(&TA_taList,0);
    tac_AddEnum(TA_taList_UserDataItemBase_, "Orientation", " must be same values as Qt::Orientation", "", "", "", TA_taList_UserDataItemBase__Orientation);
    tac_AddEnum(TA_taList_UserDataItemBase_, "ValType", " the basic data types widely supported by data-handling api's, esp. matrices", "", "", "", TA_taList_UserDataItemBase__ValType);
    tac_AddEnum(TA_taList_UserDataItemBase_, "BaseFlags", " control flags ", "BITS ", "", "", TA_taList_UserDataItemBase__BaseFlags);
    tac_AddEnum(TA_taList_UserDataItemBase_, "DumpQueryResult", " Dump_QuerySaveMember response", "IGNORE ", "", "", TA_taList_UserDataItemBase__DumpQueryResult);
    sbt = new TypeDef("const_taBase", 1, 0, 0);
    sbt->AddParents(&TA_const, &TA_taBase);
    TA_taList_UserDataItemBase_.sub_types.Add(sbt);
    sbt = new TypeDef("const_taBase_ptr", 1, 1, 0);
    sbt->AddParents(TA_taList_UserDataItemBase_.sub_types.FindName("const_taBase"));
    TA_taList_UserDataItemBase_.sub_types.Add(sbt);
    sbt = new TypeDef("taBase_ptr", 1, 1, 0);
    sbt->AddParents(&TA_taBase);
    TA_taList_UserDataItemBase_.sub_types.Add(sbt);
    sbt = new TypeDef("UserDataItemBase_ptr", 1, 1, 0);
    sbt->AddParents(&TA_UserDataItemBase);
    TA_taList_UserDataItemBase_.sub_types.Add(sbt);
    tac_AddMethods(TA_taList_UserDataItemBase_,TA_taList_UserDataItemBase__MethodDef);
  taMisc::types.Add(&TA_UserDataItem_List);
    TAI_UserDataItem_List = new UserDataItem_List;
    TA_UserDataItem_List.AddParFormal(&TA_class);
    TA_UserDataItem_List.AddParCache(&TA_taBase);
    TA_UserDataItem_List.AddClassPar(&TA_taList_UserDataItemBase_,0);
  taMisc::types.Add(&TA_const_UserDataItem_List);
    TA_const_UserDataItem_List.AddParents(&TA_const, &TA_UserDataItem_List);
  taMisc::types.Add(&TA_UserDataItem_List_ptr);
    TA_UserDataItem_List_ptr.AddParents(&TA_UserDataItem_List);
  taMisc::types.Add(&TA_const_UserDataItem_List_ref);
    TA_const_UserDataItem_List_ref.AddParents(&TA_const_UserDataItem_List);
  taMisc::types.Add(&TA_taSmartPtrT_UserDataItem_List_);
    TA_taSmartPtrT_UserDataItem_List_.AddParFormal(&TA_class, &TA_templ_inst);
    TA_taSmartPtrT_UserDataItem_List_.AddClassPar(&TA_taSmartPtrT,0);
    sbt = new TypeDef("UserDataItem_List_ptr", 1, 1, 0);
    sbt->AddParents(&TA_UserDataItem_List);
    TA_taSmartPtrT_UserDataItem_List_.sub_types.Add(sbt);
    sbt = new TypeDef("UserDataItem_List_ptr_ptr", 1, 2, 0);
    sbt->AddParents(&TA_UserDataItem_List);
    TA_taSmartPtrT_UserDataItem_List_.sub_types.Add(sbt);
    tac_AddMethods(TA_taSmartPtrT_UserDataItem_List_,TA_taSmartPtrT_UserDataItem_List__MethodDef);
  taMisc::types.Add(&TA_UserDataItem_ListPtr);
    TA_UserDataItem_ListPtr.AddParFormal(&TA_class, &TA_templ_inst);
    TA_UserDataItem_ListPtr.AddClassPar(&TA_taSmartPtrT_UserDataItem_List_,0);
  taMisc::types.Add(&TA_const_QString);
    TA_const_QString.AddParents(&TA_const, &TA_QString);
  taMisc::types.Add(&TA_QString);
    TA_QString.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_uint);
    TA_uint.AddParents(&TA_unsigned_int);
  taMisc::types.Add(&TA_ushort);
    TA_ushort.AddParents(&TA_unsigned_short_int);
  taMisc::types.Add(&TA_byte);
    TA_byte.AddParents(&TA_unsigned_char);
  taMisc::types.Add(&TA_QVariant);
    TA_QVariant.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_uint8_t);
    TA_uint8_t.AddParents(&TA_unsigned_char);
  taMisc::types.Add(&TA_QObject);
    TA_QObject.AddParFormal(&TA_class);
  taMisc::types.Add(&TA_QObject_ptr);
    TA_QObject_ptr.AddParents(&TA_QObject);
  taMisc::types.Add(&TA_taBaseAdapter_ptr);
    TA_taBaseAdapter_ptr.AddParents(&TA_taBaseAdapter);
  taMisc::types.Add(&TA_taBaseAdapter);
    TA_taBaseAdapter.AddParFormal(&TA_class);
    TA_taBaseAdapter.AddParents(&TA_QObject);
  taMisc::types.Add(&TA_voidptr);


  taMisc::in_init = false;
  taMisc::Initialize();
} 

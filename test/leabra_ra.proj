// ta_Dump File v2.0
LeabraProject .projects[0] { 
  Wizard_Group @.wizards = [1] {
    LeabraWizard @[0] { 
      taBase_List @.layer_cfg = [3] {
	LayerWizEl @[0] { };
	LayerWizEl @[1] { };
	LayerWizEl @[2] { };
      };
    };
  };

  DataTable_Group @.data = [0] {
    DataTable_Group @.gp[0] = [1] { 
      DataTable @[0] { 
	DataTableCols @.data = [3] {
	  String_Data @[0] { };
	  float_Data @[1] { };
	  float_Data @[2] { };
	};
      };
    };
    DataTable_Group @.gp[1] = [2] { 
      DataTable @[0] { 
	DataTableCols @.data = [10] {
	  int_Data @[0] { 
      UserDataItem_List @*(.user_data_) { 
	      UserDataItem @[0] { };
      };
};
	  int_Data @[1] { 
      UserDataItem_List @*(.user_data_) { 
	      UserDataItem @[0] { };
      };
};
	  int_Data @[2] { 
      UserDataItem_List @*(.user_data_) { 
	      UserDataItem @[0] { };
      };
};
	  String_Data @[3] { };
	  String_Data @[4] { };
	  int_Data @[5] { 
      UserDataItem_List @*(.user_data_) { 
	      UserDataItem @[0] { };
      };
};
	  float_Data @[6] { };
	  float_Data @[7] { };
	  float_Data @[8] { };
	  float_Data @[9] { };
	};
      };
      DataTable @[1] { 
	DataTableCols @.data = [9] {
	  int_Data @[0] { };
	  int_Data @[1] { };
	  float_Data @[2] { };
	  float_Data @[3] { };
	  float_Data @[4] { };
	  float_Data @[5] { };
	  float_Data @[6] { };
	  float_Data @[7] { };
	  float_Data @[8] { };
	};
      };
    };
    DataTable_Group @.gp[2] { };
  };

  taBase_Group @.data_proc = [4] {
    taDataProc @[0] { };
    taDataAnal @[1] { };
    taDataGen @[2] { };
    taImageProc @[3] { };
  };

  Program_Group @.programs = [0] {
    Program_Group @.gp[0] = [10] { 
      Program @[0] { 
	ProgVar_List @.args = [3] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	};

	ProgVar_List @.vars = [1] {
	  ProgVar @[0] { };
	};

	ProgEl_List @.init_code = [1] {
	  NetCounterInit @[0] { };
	};

	ProgEl_List @.prog_code = [2] {
	  NetCounterInit @[0] { };
	  WhileLoop @[1] { 
	    ProgEl_List @.loop_code = [2] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      NetCounterIncr @[1] { };
	    };
	  };
	};
      };
      Program @[1] { 
	ProgObjList @.objs = [1] {
	  RndSeed @[0] { };
	};

	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [6] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	  ProgVar @[5] { };
	};

	ProgEl_List @.init_code = [5] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  AssignExpr @[1] { };
	  NetCounterInit @[2] { };
	  MethodCall @[3] { };
	  MethodCall @[4] { };
	};

	ProgEl_List @.prog_code = [7] {
	  AssignExpr @[0] { };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  NetCounterInit @[2] { };
	  UserScript @[3] { };
	  MethodCall @[4] { };
	  WhileLoop @[5] { 
	    ProgEl_List @.loop_code = [3] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      NetCounterIncr @[1] { };
	      IfBreak @[2] { };
	    };
	  };
	  MethodCall @[6] { };
	};
      };
      Program @[2] { 
	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [4] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	};

	ProgEl_List @.init_code = [2] {
	  NetCounterInit @[0] { };
	  AssignExpr @[1] { };
	};

	ProgEl_List @.prog_code = [9] {
	  NetCounterInit @[0] { };
	  AssignExpr @[1] { };
	  MethodCall @[2] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[3] { };
	  BasicDataLoop @[4] { 
	    ProgEl_List @.loop_code = [3] {
	      UserScript @[0] { };
	      ProgramCall @[1] { 
		ProgArg_List @.prog_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      IfElse @[2] { 
		ProgEl_List @.true_code = [1] {
		  MethodCall @[0] { };
		};
	      };
	    };
	  };
	  IfElse @[5] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { };
	    };
	  };
	  MethodCall @[6] { };
	  MethodCall @[7] { };
	  ProgramCall @[8] { 
	    ProgArg_List @.prog_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};
      };
      Program @[3] { 
	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgEl_List @.init_code = [1] {
	  NetCounterInit @[0] { };
	};

	ProgEl_List @.prog_code = [6] {
	  NetCounterInit @[0] { };
	  MethodCall @[1] { };
	  WhileLoop @[2] { 
	    ProgEl_List @.loop_code = [3] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      NetCounterIncr @[1] { };
	      MethodCall @[2] { };
	    };
	  };
	  MethodCall @[3] { };
	  ProgramCall @[4] { 
	    ProgArg_List @.prog_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  NetUpdateView @[5] { };
	};
      };
      Program @[4] { 
	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [3] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	};

	ProgEl_List @.init_code = [1] {
	  NetCounterInit @[0] { };
	};

	ProgEl_List @.prog_code = [10] {
	  NetCounterInit @[0] { };
	  MethodCall @[1] { };
	  ProgramCall @[2] { 
	    ProgArg_List @.prog_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[3] { };
	  UserScript @[4] { };
	  WhileLoop @[5] { 
	    ProgEl_List @.loop_code = [4] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [1] {
		  ProgArg @[0] { };
		};
	      };
	      NetCounterIncr @[1] { };
	      IfContinue @[2] { };
	      IfBreak @[3] { };
	    };
	  };
	  MethodCall @[6] { };
	  IfElse @[7] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { };
	    };
	  };
	  IfElse @[8] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { };
	    };
	  };
	  NetUpdateView @[9] { };
	};
      };
      Program @[5] { 
	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [1] {
	  ProgVar @[0] { };
	};

	ProgEl_List @.prog_code = [2] {
	  MethodCall @[0] { };
	  NetUpdateView @[1] { };
	};
      };
      Program @[6] { 
	ProgObjList @.objs = [1] {
	  LayerWriter @[0] { 
	    LayerDataEl_List @.layer_data = [3] {
	      LayerWriterEl @[0] { };
	      LayerWriterEl @[1] { };
	      LayerWriterEl @[2] { };
	    };
	  };
	};

	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [1] {
	  ProgVar @[0] { };
	};

	ProgEl_List @.init_code = [2] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [1] {
	  MethodCall @[0] { };
	};
      };
      Program @[7] { 
	ProgObjList @.objs = [1] {
	  NetMonitor @[0] { 
	    NetMonItem_List @.items = [10] {
	      NetMonItem @[0] { };
	      NetMonItem @[1] { };
	      NetMonItem @[2] { };
	      NetMonItem @[3] { };
	      NetMonItem @[4] { };
	      NetMonItem @[5] { };
	      NetMonItem @[6] { };
	      NetMonItem @[7] { };
	      NetMonItem @[8] { };
	      NetMonItem @[9] { };
	    };
	  };
	};

	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgEl_List @.init_code = [3] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[2] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [4] {
	  MethodCall @[0] { };
	  MethodCall @[1] { };
	  MethodCall @[2] { };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	};
      };
      Program @[8] { 
	ProgObjList @.objs = [1] {
	  NetMonitor @[0] { 
	    NetMonItem_List @.items = [9] {
	      NetMonItem @[0] { };
	      NetMonItem @[1] { };
	      NetMonItem @[2] { };
	      NetMonItem @[3] { };
	      NetMonItem @[4] { };
	      NetMonItem @[5] { };
	      NetMonItem @[6] { };
	      NetMonItem @[7] { };
	      NetMonItem @[8] { };
	    };
	  };
	};

	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [3] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	};

	ProgEl_List @.init_code = [4] {
	  AssignExpr @[0] { };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[2] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [5] {
	  MethodCall @[0] { };
	  MethodCall @[1] { };
	  AssignExpr @[2] { };
	  UserScript @[3] { };
	  MethodCall @[4] { };
	};
      };
      Program @[9] { 
	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [6] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	  ProgVar @[5] { };
	};

	ProgEl_List @.prog_code = [6] {
	  IfElse @[0] { 
	    ProgEl_List @.true_code = [1] {
	      UserScript @[0] { };
	    };
	  };
	  MiscCall @[1] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MiscCall @[2] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  AssignExpr @[3] { };
	  MethodCall @[4] { 
	    ProgArg_List @.meth_args = [4] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	      ProgArg @[3] { };
	    };
	  };
	  MethodCall @[5] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	};
      };
    };
  };

  DataViewer_List @.viewers = [1] {
    MainWindowViewer @[0] { 
      ToolBar_List @.toolbars = [1] {
	ToolBar @[0] { };
      };

      FrameViewer_List @.frames = [3] {
	tabBrowseViewer @[0] { };
	PanelViewer @[1] { };
	T3DataViewer @[2] { 
	  T3DataViewFrame_List @.frames = [1] {
	    T3DataViewFrame @[0] { 
	      T3DataView_List @.children = [4] {
		NetView @[0] { 
		  T3DataView_List @.children = [6] {
		    LayerView @[0] { };
		    LayerView @[1] { };
		    LayerView @[2] { };
		    PrjnView @[3] { };
		    PrjnView @[4] { };
		    PrjnView @[5] { };
		  };

		  ScaleRange_List @.scale_ranges = [2] {
		    ScaleRange @[0] { };
		    ScaleRange @[1] { };
		  };
		};
		GridTableView @[1] { 
		  T3DataView_List @.children = [10] {
		    GridColView @[0] { };
		    GridColView @[1] { };
		    GridColView @[2] { };
		    GridColView @[3] { };
		    GridColView @[4] { };
		    GridColView @[5] { };
		    GridColView @[6] { };
		    GridColView @[7] { };
		    GridColView @[8] { };
		    GridColView @[9] { };
		  };
		};
		GridTableView @[2] { 
		  T3DataView_List @.children = [9] {
		    GridColView @[0] { };
		    GridColView @[1] { };
		    GridColView @[2] { };
		    GridColView @[3] { };
		    GridColView @[4] { };
		    GridColView @[5] { };
		    GridColView @[6] { };
		    GridColView @[7] { };
		    GridColView @[8] { };
		  };
		};
		GraphTableView @[3] { 
		  T3DataView_List @.children = [9] {
		    GraphColView @[0] { };
		    GraphColView @[1] { };
		    GraphColView @[2] { };
		    GraphColView @[3] { };
		    GraphColView @[4] { };
		    GraphColView @[5] { };
		    GraphColView @[6] { };
		    GraphColView @[7] { };
		    GraphColView @[8] { };
		  };
		};
	      };
	    };
	  };
	};
      };

      DockViewer_List @.docks = [1] {
	ToolBoxDockViewer @[0] { };
      };
    };
  };

  Network_Group @.networks = [1] {
    LeabraNetwork @[0] { 
      BaseSpec_Group @.specs = [4] {
	LeabraUnitSpec @[0] { };
	LeabraLayerSpec @[1] { 
	  BaseSpec_Group @.children = [1] {
	    LeabraLayerSpec @[0] { };
	  };
	};
	FullPrjnSpec @[2] { };
	LeabraConSpec @[3] { 
	  BaseSpec_Group @.children = [1] {
	    LeabraBiasSpec @[0] { };
	  };
	};
      };

      Layer_Group @.layers = [3] {
	LeabraLayer @[0] { 
	  Unit_Group @.units = [25] {
	  };
	};
	LeabraLayer @[1] { 
	  Projection_Group @.projections = [2] {
	    LeabraPrjn @[0] { };
	    LeabraPrjn @[1] { };
	  };

	  Unit_Group @.units = [25] {
	  };
	};
	LeabraLayer @[2] { 
	  Projection_Group @.projections = [1] {
	    LeabraPrjn @[0] { };
	  };

	  Unit_Group @.units = [25] {
	  };
	};
      };
    };
  };
};
LeabraProject .projects[0] {
 name="LeabraProject_0";
 desc=;
 templates {
  name=;
  el_typ=taBase;
  el_def=0;
 };
 wizards {
  name=;
  el_typ=LeabraWizard;
  el_def=0;
  LeabraWizard @[0] {
   name="LeabraWizard_0";
   auto_open=0;
   n_layers=3;
   layer_cfg {
    name=;
    el_typ=LayerWizEl;
    el_def=0;
    LayerWizEl @[0] {
     name="Input";
     n_units=25;
     io_type=INPUT;
    };
    LayerWizEl @[1] {
     name="Hidden";
     n_units=25;
     io_type=HIDDEN;
    };
    LayerWizEl @[2] {
     name="Output";
     n_units=25;
     io_type=OUTPUT;
    };
   };
   connectivity=BIDIRECTIONAL;
  };
 };
 edits {
  name=;
  el_typ=SelectEdit;
  el_def=0;
 };
 data {
  name=;
  el_typ=DataTable;
  el_def=0;
  DataTable_Group @.gp[0] {
   name="InputData";
   el_typ=DataTable;
   el_def=0;
   DataTable @[0] {
    name="SimpleLines5x5";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @[0] {
      name="Name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar{ [6] "checks";"mitvert";"midhoriz";"rdiag";"ldiag";"random";      };
     };
     float_Data @[1] {
      name="Input";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 5;5;      };
      calc_expr {
       expr=;
      };
      ar{ [5 5 6] 1;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;1;0;0;1;0;0;0;0;1;0;0;0;0;1;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;1;1;1;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;1;0;0;0;1;0;0;0;1;0;0;0;1;0;0;0;0;1;0;0;0;0;0;1;0;0;0;0;0;1;0;0;0;0;0;1;0;0;0;0;0;1;1;0;0;0;0;0;0;0;1;0;0;1;0;0;0;1;0;0;0;1;0;0;0;0;0;      };
     };
     float_Data @[2] {
      name="Output";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 5;5;      };
      calc_expr {
       expr=;
      };
      ar{ [5 5 6] 1;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;1;0;0;1;0;0;0;0;1;0;0;0;0;1;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;1;1;1;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;1;0;0;0;1;0;0;0;1;0;0;0;1;0;0;0;0;1;0;0;0;0;0;1;0;0;0;0;0;1;0;0;0;0;0;1;0;0;0;0;0;1;1;0;0;0;0;0;0;0;1;0;0;1;0;0;1;1;0;0;0;0;0;0;0;0;0;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
   };
  };
  DataTable_Group @.gp[1] {
   name="OutputData";
   el_typ=DataTable;
   el_def=0;
   DataTable @[0] {
    name="TrialOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="batch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar{ [6] 0;0;0;0;0;0;      };
     };
     int_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="epoch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar{ [6] 6;6;6;6;6;6;      };
     };
     int_Data @[2] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="trial";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar{ [6] 0;1;2;3;4;5;      };
     };
     String_Data @[3] {
      name="trial_name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar{ [6] "ldiag";"checks";"mitvert";"random";"midhoriz";"rdiag";      };
     };
     String_Data @[4] {
      name="group_name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar{ [6] ;;;;;;      };
     };
     int_Data @[5] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
       };
      };
      name="phase_no";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar{ [6] 2;2;2;2;2;2;      };
     };
     float_Data @[6] {
      name="minus_cycles";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar{ [6] 15;22;15;15;16;15;      };
     };
     float_Data @[7] {
      name="sse";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar{ [6] 0;0;0;0;0;0;      };
     };
     float_Data @[8] {
      name="ext_rew";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar{ [6] 0;0;0;0;0;0;      };
     };
     float_Data @[9] {
      name="Output_act_m";
      col_flags=SAVE_ROWS;
      is_matrix=1;
      cell_geom{ 5;5;      };
      calc_expr {
       expr=;
      };
      ar{ [5 5 6] 0.96234637;1.6085025e-06;9.2887479e-17;3.4389544e-05;5.0318532e-17;0.0091723343;0.96376586;1.0993122e-10;7.6544875e-06;0;0;0;0.93299448;0;0;1.2927989e-05;5.2238306e-07;2.4484996e-13;0.96157604;3.2343495e-16;2.4562023e-14;1.2129978e-07;0;0.0055309427;0.95412165;0.71813947;0.0073198988;0;0.0016068413;0.90607405;0.00024367539;0.20828223;2.8893475e-15;4.6111738e-05;0.00010474708;0;0;0.88594395;0;0;0;0.084547341;4.0933438e-18;0.22328466;1.858122e-06;0.85336024;1.3947455e-07;0;2.2687351e-05;0.85639894;0;0.0084861405;0.96763289;0.0016141597;0;7.1522075e-16;0;0.96268493;0;0.012999685;2.4144454e-05;6.8294236e-13;0.90450913;6.2267671e-13;4.5264206e-11;0;0.020141505;0.96859312;0;0.035320256;1.0488651e-16;9.1472843e-11;0.96590281;0.06261047;0;0.86944801;0.038376153;3.4681074e-13;6.7135242e-14;0;7.0694034e-05;0;0;0.94824588;0.0033734427;0.0015133697;0.96037602;0;0.0012571416;0.9580754;0.96416724;0;6.9457721e-17;0;0.044011854;0;0.051785804;0;0.064731859;0;0;5.1279283e-09;0.029017227;8.3329052e-15;0;0.0012992981;0;1.5487001e-05;0.015996538;0.033489667;0.95457435;0.93195176;0.90766442;0.94958854;0.94504714;0.017496452;5.0523328e-09;0.023541095;0;8.0916426e-11;0;3.1236676e-11;0.014723879;3.543641e-06;0;0;0.027649757;2.8647059e-11;0.00043646496;0.94806576;0.05633492;4.9691143e-13;6.1913772e-13;0.93994492;0.0069567594;4.5003299e-09;0;0.86961579;0;0;5.659086e-17;0.96059346;4.9818698e-16;0;0.071943179;0.94892031;0.021939632;9.5702031e-12;0.0034954054;0;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
   };
   DataTable @[1] {
    name="EpochOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      name="batch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar{ [7] 0;0;0;0;0;0;0;      };
     };
     int_Data @[1] {
      name="epoch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar{ [7] 0;1;2;3;4;5;6;      };
     };
     float_Data @[2] {
      name="avg_sse";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar{ [7] 5.4027858;2.8361301;1.4236892;2.9628193;1.1197991;0.8045488;0;      };
     };
     float_Data @[3] {
      name="cnt_err";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar{ [7] 6;6;5;4;2;2;0;      };
     };
     float_Data @[4] {
      name="avg_ext_rew";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar{ [7] 0;0;0;0;0;0;0;      };
     };
     float_Data @[5] {
      name="avg_cycles";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar{ [7] 25.666666;17.833334;19.5;26.166666;18.333334;16.333334;16.333334;      };
     };
     float_Data @[6] {
      name="epoch_time_tot";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar{ [7] 0.5;0.51999998;0.51999998;0.55000001;0.52999997;0.51999998;0.50999999;      };
     };
     float_Data @[7] {
      name="epoch_time_usr";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      ar{ [7] 0.44999999;0.47;0.46000001;0.47999999;0.47;0.47;0.47;      };
     };
     float_Data @[8] {
      name="Hidden_Fm_Input_r_wt";
      col_flags=SAVE_ROWS;
      is_matrix=1;
      cell_geom{ 5;5;5;5;      };
      calc_expr {
       expr=;
      };
      ar{ [5 5 5 5 7] 0.66635782;0.3453109;0.23747791;0.34455296;0.29153645;0.3216075;0.30781314;0.28899854;0.61160803;0.50254112;0.45386764;0.47940534;0.58775443;0.6956957;0.58381116;0.63272899;0.68135804;0.23097914;0.24579656;0.46323034;0.38605767;0.52636403;0.29536471;0.60302073;0.62665081;0.41271001;0.51914203;0.47069457;0.45768061;0.30693251;0.27277526;0.25876895;0.34010208;0.61720663;0.29235551;0.55259693;0.40555426;0.22417362;0.29274845;0.33278313;0.60442841;0.61493701;0.49125242;0.56007344;0.68174779;0.69889408;0.25658867;0.40341902;0.71496618;0.42092809;0.37421915;0.69618654;0.60405087;0.32289964;0.63665926;0.3465178;0.43448651;0.61585259;0.57317406;0.22956675;0.68815315;0.41867492;0.51202816;0.26464927;0.39066556;0.32024267;0.51711017;0.5055542;0.35057238;0.29315594;0.37684047;0.65771067;0.43625331;0.70796609;0.45139605;0.69427019;0.52813685;0.47557753;0.38358864;0.42486849;0.45591882;0.48642108;0.49267569;0.44150198;0.70034772;0.61870056;0.53529626;0.66560256;0.38221487;0.30848542;0.62429637;0.66560549;0.48839998;0.27349496;0.72799408;0.54175091;0.51550967;0.66720527;0.64420199;0.2951653;0.4161793;0.56456161;0.79194289;0.3860729;0.30941811;0.46544251;0.47334462;0.78566438;0.35529429;0.43085083;0.5794459;0.47374642;0.56662279;0.75336671;0.71335298;0.64659071;0.68110567;0.77151573;0.31358439;0.30989751;0.37657645;0.36673132;0.7055198;0.57952946;0.28345466;0.69647902;0.20347609;0.45069805;0.63947064;0.45511767;0.61333561;0.43202892;0.222782;0.30869681;0.3774319;0.37921816;0.21812989;0.81273472;0.4345381;0.20260708;0.51956224;0.52785784;0.27482551;0.2911543;0.27735272;0.85234922;0.21709885;0.675861;0.23108006;0.82533073;0.30115548;0.58357382;0.69057465;0.43898621;0.26542705;0.42927092;0.48728338;0.66377538;0.34063604;0.44563255;0.34547219;0.50671434;0.26903066;0.52178919;0.26800629;0.33909404;0.37378237;0.45425913;0.32353079;0.5389902;0.69709355;0.4070909;0.67948067;0.37315726;0.38884726;0.27923468;0.39603207;0.4259665;0.29750079;0.33482179;0.32197207;0.4719342;0.65664458;0.50857854;0.43655491;0.37455678;0.46351421;0.66756994;0.52595294;0.42075595;0.24931328;0.24726963;0.6168803;0.29306227;0.21171862;0.57076001;0.32228929;0.624071;0.21373272;0.3917602;0.31272584;0.38525364;0.36532599;0.71740133;0.52284849;0.50609368;0.40189224;0.70010924;0.28312299;0.49587309;0.54376882;0.46562845;0.4737924;0.3814697;0.72844118;0.65340137;0.28706416;0.66755134;0.54965383;0.32164398;0.45737374;0.5456329;0.36850315;0.38010669;0.32446098;0.27791235;0.48256662;0.46227154;0.20514764;0.22723171;0.48776874;0.36979482;0.67929029;0.62517512;0.49773976;0.70370948;0.57529193;0.72839987;0.65308654;0.42629337;0.40666631;0.57897592;0.74529427;0.50130814;0.56578946;0.46797928;0.37410715;0.64844078;0.23634538;0.26068577;0.58823794;0.45064098;0.23143004;0.52481204;0.52753234;0.51714569;0.35866162;0.23735093;0.57068074;0.59121501;0.60244435;0.51982224;0.51880229;0.28194284;0.30664164;0.25959507;0.30304489;0.16934641;0.26452848;0.28126776;0.68364573;0.55791461;0.50699335;0.60069329;0.75594831;0.28348431;0.68265641;0.53108382;0.56411904;0.52540553;0.45164818;0.58402061;0.62513536;0.52804554;0.70232743;0.37376729;0.29286239;0.16459663;0.48668677;0.45330599;0.33110112;0.6664713;0.69647086;0.53687024;0.58942366;0.68429947;0.65423113;0.62104094;0.34034425;0.72197437;0.17558965;0.52039528;0.5718562;0.58765399;0.3822912;0.34417063;0.47869268;0.70932031;0.370092;0.2835657;0.69650429;0.83533484;0.70122778;0.80643201;0.4442569;0.631859;0.24930793;0.51662403;0.32135192;0.30004251;0.19161008;0.62141055;0.40263379;0.58011675;0.19455345;0.53497773;0.57772869;0.71522683;0.61196399;0.47817764;0.64997381;0.61060256;0.26999682;0.6056304;0.42306477;0.57369357;0.73377478;0.29736486;0.36686835;0.46838832;0.29858389;0.52587074;0.30800071;0.39545476;0.28337079;0.68809885;0.23530374;0.39966521;0.63983178;0.25046319;0.8249473;0.65274251;0.39419445;0.23383933;0.635122;0.22257473;0.49392903;0.6809141;0.43168154;0.24847226;0.23381485;0.23624089;0.86732793;0.29095009;0.65658432;0.46655211;0.27915713;0.77908343;0.38650712;0.21555582;0.37384522;0.24707143;0.3618404;0.53614479;0.66270089;0.55931556;0.52417618;0.74396569;0.25771832;0.42308515;0.22688031;0.37313288;0.47337011;0.33741087;0.58861148;0.42316857;0.25405949;0.75204456;0.34201172;0.34762666;0.55126786;0.23263341;0.6418187;0.29545587;0.36117727;0.81180561;0.22914974;0.41955885;0.26015171;0.62805015;0.78783488;0.22464861;0.38403621;0.31472048;0.33073023;0.37706572;0.37552336;0.33361754;0.73561257;0.68643761;0.6391201;0.68805808;0.45910767;0.57282192;0.60576856;0.7793923;0.55053312;0.34326419;0.47809428;0.49332052;0.60917675;0.341214;0.35134408;0.44630045;0.22854021;0.80990797;0.67432243;0.32224101;0.59583271;0.48065746;0.33298406;0.78520393;0.27516273;0.60995936;0.4243573;0.33875242;0.68051064;0.63533586;0.31235763;0.35026449;0.37976453;0.63214868;0.63958305;0.79180324;0.73127472;0.26797587;0.62488776;0.5647524;0.52448255;0.40501815;0.36212209;0.49519357;0.15058012;0.25741673;0.51311517;0.35953254;0.32640257;0.45889166;0.48536885;0.53620464;0.39439765;0.57600999;0.28065878;0.70214808;0.31399283;0.67787969;0.49851957;0.57345188;0.71558851;0.26491034;0.52315658;0.66168958;0.54983521;0.36881393;0.57638729;0.39747685;0.37384191;0.36155951;0.71239591;0.25253952;0.57613844;0.61493838;0.67169112;0.41926387;0.4083904;0.30393484;0.31066445;0.30449271;0.47325149;0.49982229;0.46136582;0.5798021;0.45330447;0.53590578;0.34750205;0.27682635;0.58195502;0.5240308;0.6272344;0.70809221;0.38329566;0.3330819;0.56941527;0.36255988;0.35354945;0.4522492;0.34990725;0.3736392;0.45410815;0.22005294;0.75990027;0.83228284;0.52555031;0.48547792;0.62953156;0.619066;0.42520249;0.53070247;0.29857576;0.71225977;0.54970258;0.26897264;0.41737545;0.58146238;0.3888;0.26830211;0.25883344;0.34576634;0.47785717;0.70083237;0.24865311;0.47164106;0.51109576;0.3624472;0.74584585;0.470608;0.54968643;0.4871054;0.34309027;0.75124246;0.26310962;0.30153784;0.7059021;0.38399199;0.48880658;0.25163123;0.58316463;0.36228693;0.27901524;0.5188899;0.729316;0.28761458;0.60525614;0.70519811;0.66313952;0.41229653;0.27926925;0.54186338;0.48892483;0.60056478;0.49295837;0.3718859;0.33603013;0.45076349;0.68478018;0.68761832;0.27556032;0.46346447;0.4068535;0.55474323;0.24538149;0.40730032;0.45299429;0.49677381;0.27749813;0.76839;0.51472634;0.50175637;0.42277759;0.53399652;0.23938037;0.74363661;0.21349509;0.42903349;0.36243027;0.2044992;0.35564491;0.69690335;0.5098657;0.23922345;0.19176462;0.58304232;0.36885205;0.71507788;0.35172096;0.78647411;0.66258568;0.34828126;0.50343502;0.80457121;0.43704763;0.41029468;0.55764616;0.22941488;0.53790098;0.23520902;0.69951248;0.27479586;0.5168407;0.46266147;0.40321529;0.48718825;0.60855365;0.57981759;0.27361023;0.20670038;0.72665912;0.51216096;0.61241269;0.42020065;0.48120585;0.23614353;0.6207785;0.3704361;0.25624186;0.76014537;0.31431937;0.21405169;0.31360534;0.26400635;0.29206231;0.27916741;0.26164767;0.71603471;0.46542817;0.3602443;0.54258317;0.48510444;0.59609193;0.48124105;0.73326969;0.64576787;0.20808572;0.22170016;0.58606339;0.35288462;0.48889524;0.26756746;0.56553406;0.58952367;0.28528005;0.48734874;0.43970913;0.42700627;0.5138737;0.25040817;0.23730275;0.31391037;0.67820662;0.26878828;0.520576;0.2795957;0.41503486;0.26915786;0.30696544;0.45388836;0.77966195;0.45985657;0.52804083;0.53306669;0.83460659;0.23526591;0.37444773;0.68606907;0.39133647;0.37245888;0.69437903;0.61843461;0.32128933;0.63473421;0.34483394;0.43259656;0.63002479;0.57118988;0.22831625;0.68632644;0.41681424;0.52751893;0.26325059;0.38886496;0.3186411;0.51512861;0.52108556;0.34887686;0.29164839;0.37507352;0.65582001;0.45190033;0.70618892;0.44947928;0.69559026;0.48146394;0.4577018;0.34263402;0.48689511;0.41125542;0.44069365;0.47438926;0.55420947;0.65670997;0.57214653;0.53966588;0.73281908;0.34134573;0.27301204;0.62698114;0.7113592;0.47021261;0.24109739;0.72867715;0.59870517;0.4690586;0.64727223;0.59825653;0.26082614;0.37471011;0.5190925;0.80629086;0.34626064;0.27497599;0.42185229;0.42948461;0.80039805;0.31744477;0.38867185;0.64567482;0.54759538;0.69594145;0.79683477;0.76299793;0.60222882;0.63800323;0.78710032;0.27881005;0.27541703;0.33734065;0.32812124;0.72471291;0.53407371;0.25118479;0.72213525;0.15345019;0.40452769;0.54162675;0.40601349;0.51483947;0.40375838;0.19787614;0.22502016;0.29540637;0.29693913;0.16490954;0.83493161;0.34527537;0.15277314;0.42314959;0.40872282;0.24408983;0.27146524;0.21208836;0.80866826;0.16410032;0.6245681;0.17510483;0.84004074;0.30115548;0.58357382;0.69057465;0.43898621;0.26542705;0.42927092;0.48728338;0.66377538;0.34063604;0.44563255;0.34547219;0.50671434;0.26903066;0.52178919;0.26800629;0.33909404;0.37378237;0.45425913;0.32353079;0.5389902;0.69709355;0.4070909;0.67948067;0.37315726;0.38884726;0.25317684;0.36314273;0.45576069;0.27017695;0.37169036;0.29306316;0.43633723;0.6813373;0.54376125;0.40203908;0.35195982;0.43798357;0.75413704;0.49923289;0.39646366;0.22547701;0.28104442;0.64324826;0.26603931;0.1909207;0.60330153;0.29335997;0.65015846;0.19276488;0.35906595;0.29853824;0.36910129;0.34965113;0.70124227;0.53883243;0.48812145;0.3853783;0.68353599;0.2992925;0.47798026;0.58492154;0.50842345;0.55039477;0.42375934;0.75858861;0.63596082;0.30330521;0.65033561;0.53150797;0.30718213;0.47423172;0.52749175;0.35274848;0.36407277;0.30991411;0.22756799;0.41611993;0.46477216;0.16863932;0.27660829;0.42106563;0.31190178;0.67737603;0.66091293;0.43058187;0.80307347;0.70200425;0.90275186;0.76629639;0.57882267;0.34104279;0.6237129;0.74231428;0.43399888;0.49176422;0.51998526;0.31578755;0.64710516;0.19508225;0.2159249;0.49492708;0.4193922;0.21134482;0.49216104;0.62924594;0.48457819;0.24283372;0.21684282;0.61443293;0.55847549;0.56980574;0.48722368;0.50857019;0.25844499;0.28164595;0.23755044;0.34985334;0.15405127;0.17385851;0.2578128;0.76392961;0.52507615;0.47455758;0.56803644;0.67055941;0.2755056;0.67254722;0.52022952;0.55325103;0.61037076;0.44120067;0.57319045;0.61449558;0.61282837;0.69247335;0.36420488;0.28469279;0.22599405;0.47599623;0.44284463;0.32221562;0.73625237;0.68653673;0.52600628;0.57860976;0.75142902;0.64382035;0.61037564;0.33130106;0.71241397;0.15491466;0.47724798;0.61883116;0.54417378;0.34433675;0.30861464;0.43650272;0.74409145;0.33286238;0.25259843;0.72165465;0.85038865;0.79250389;0.82385772;0.47759375;0.58902818;0.22132815;0.56689554;0.28741536;0.26773721;0.16925254;0.57836133;0.45612082;0.536596;0.17189232;0.58451962;0.56771004;0.70630288;0.60206568;0.46834573;0.64032364;0.6006971;0.26288345;0.65156102;0.41365996;0.44549161;0.66790402;0.21012719;0.26442957;0.34921005;0.34603584;0.51585209;0.30017486;0.38634637;0.32983187;0.67882603;0.22891721;0.39050767;0.63010329;0.24375056;0.84544331;0.56810647;0.33514589;0.18379459;0.35729373;0.17462137;0.47907102;0.6114381;0.17556943;0.19578013;0.18377438;0.18575594;0.70453244;0.23103891;0.57213062;0.38537183;0.10399667;0.71765119;0.37517336;0.16892831;0.1765971;0.19462901;0.30633152;0.45104459;0.69915038;0.45454618;0.44992301;0.72908252;0.20963973;0.49873945;0.18369263;0.24890186;0.46118158;0.36228204;0.51330501;0.35505831;0.20654407;0.77362818;0.28232738;0.28726822;0.47628194;0.25723398;0.62673277;0.19221894;0.2992456;0.84474349;0.18559153;0.40888387;0.21170099;0.52136254;0.7872963;0.18584713;0.32586771;0.2638633;0.32858288;0.31954888;0.31815311;0.28058645;0.77685815;0.62199318;0.62291646;0.73314005;0.50358588;0.55741405;0.58988625;0.77901244;0.54005063;0.28917551;0.41314024;0.49922276;0.59695143;0.28734693;0.29639596;0.38320932;0.18916351;0.90598261;0.61745381;0.27659601;0.53667128;0.26059586;0.28627318;0.86177182;0.23462713;0.42677435;0.37020314;0.28738198;0.68108898;0.56765205;0.26387361;0.29771379;0.39070871;0.38253203;0.58130515;0.86616826;0.73546207;0.13043447;0.56620502;0.5055328;0.46585354;0.56180114;0.3535586;0.48897722;0.14785655;0.2531054;0.55990076;0.35410532;0.32129091;0.45280388;0.52909088;0.52991885;0.38868856;0.56607032;0.32324499;0.69646227;0.30901083;0.66854799;0.54565352;0.56717485;0.71001774;0.25801435;0.56965965;0.65572149;0.54354465;0.36330685;0.57011425;0.39747685;0.37384191;0.36155951;0.71239591;0.25253952;0.57613844;0.61493838;0.67169112;0.41926387;0.4083904;0.30393484;0.31066445;0.30449271;0.47325149;0.49982229;0.46136582;0.5798021;0.45330447;0.53590578;0.34750205;0.27682635;0.58195502;0.5240308;0.6272344;0.70809221;0.3931455;0.29231554;0.51805556;0.31944692;0.31112576;0.40369982;0.30776948;0.32971331;0.46333602;0.19057219;0.71390879;0.83104497;0.4755826;0.43715191;0.57818031;0.62549084;0.37801138;0.47969279;0.26088241;0.71657658;0.49844658;0.23418374;0.37062365;0.53011692;0.34382463;0.265991;0.25658455;0.34301472;0.47466314;0.69788903;0.24647342;0.46845913;0.50785619;0.35961786;0.7431227;0.4969162;0.57505995;0.51332206;0.36816007;0.76899087;0.26083246;0.29902247;0.70298028;0.381071;0.48559484;0.24943109;0.57992303;0.35945857;0.27663559;0.51564401;0.7449128;0.26538774;0.60404497;0.67729408;0.63926953;0.38434911;0.25752953;0.54170632;0.5171504;0.57020998;0.3917965;0.32952565;0.28487524;0.35366216;0.58234519;0.70496458;0.25888351;0.46463388;0.37909126;0.57601285;0.23025391;0.37952343;0.45433643;0.46674579;0.25586227;0.79980403;0.42682225;0.41457707;0.34216776;0.51984173;0.18624593;0.72425306;0.16538994;0.35473877;0.28912747;0.15819858;0.28327751;0.73717517;0.42222124;0.18611905;0.14806625;0.49849543;0.29468378;0.69531924;0.27990469;0.76785803;0.57454157;0.27695468;0.41615653;0.83155745;0.3701157;0.3757351;0.49233627;0.20647018;0.66127825;0.21178271;0.59417713;0.23038995;0.61158299;0.42619973;0.36896777;0.45008665;0.63526851;0.54183531;0.24716452;0.1857039;0.79182845;0.44788188;0.503142;0.38522744;0.61080438;0.21264017;0.55578911;0.33779064;0.21340455;0.7842508;0.28809404;0.1946674;0.28742182;0.24097899;0.26719087;0.25512496;0.23878206;0.74331009;0.43279734;0.34590608;0.59295475;0.46758232;0.57741809;0.46379024;0.75935894;0.61281282;0.18916593;0.20172907;0.62000585;0.32455018;0.45574152;0.24429794;0.53164321;0.55572242;0.19418302;0.44372326;0.39776629;0.3856301;0.43985215;0.22156665;0.20970616;0.27961737;0.69695342;0.23826849;0.47620767;0.24812654;0.35006589;0.23860526;0.27321991;0.41137069;0.79337043;0.41711509;0.48355502;0.48851401;0.77351356;0.20786628;0.33592024;0.64385378;0.27458537;0.37065807;0.69252002;0.62931168;0.31964302;0.63275665;0.34311187;0.43066147;0.6407308;0.56915414;0.22703938;0.68444812;0.4149093;0.53933591;0.26182196;0.38702226;0.31700367;0.51309735;0.53294128;0.34714267;0.29010791;0.37326622;0.65387702;0.46392897;0.70436114;0.44751629;0.74153072;0.42709163;0.41673365;0.29729918;0.46940815;0.36058864;0.39273793;0.43276894;0.55064428;0.60201961;0.51589566;0.54791147;0.72274053;0.29612669;0.23464976;0.63338435;0.64666981;0.42874742;0.20950322;0.73260778;0.57679307;0.41520625;0.604231;0.54212719;0.2646794;0.32472444;0.46118769;0.8113758;0.29875255;0.23485091;0.36839518;0.37554285;0.80569506;0.27272463;0.33757341;0.62152332;0.5243876;0.73270994;0.77582753;0.74070352;0.54374355;0.58028013;0.79287344;0.23824748;0.23524193;0.29066619;0.28233638;0.73267138;0.47583321;0.21387373;0.75726497;0.11956454;0.33914456;0.45716056;0.51873422;0.43143323;0.38747507;0.16097273;0.26524115;0.23532273;0.23661363;0.12865818;0.90905851;0.27784097;0.11902839;0.34652132;0.45113841;0.19954439;0.26128602;0.16652574;0.86062831;0.12801455;0.54967606;0.13678133;0.86141998;0.30115548;0.58357382;0.69057465;0.43898621;0.26542705;0.42927092;0.48728338;0.66377538;0.34063604;0.44563255;0.34547219;0.50671434;0.26903066;0.52178919;0.26800629;0.33909404;0.37378237;0.45425913;0.32353079;0.5389902;0.69709355;0.4070909;0.67948067;0.37315726;0.38884726;0.23066464;0.33405432;0.489557;0.24653289;0.37090838;0.26791757;0.40426597;0.70868438;0.5398289;0.37121436;0.32343203;0.4058592;0.79602987;0.46560231;0.36586779;0.20505001;0.28199324;0.6725316;0.24267775;0.1732226;0.59823895;0.26819524;0.67911452;0.17491618;0.33008963;0.2790449;0.34667706;0.32795346;0.67747146;0.51617396;0.46269262;0.36239481;0.65924227;0.28252861;0.45270628;0.61122954;0.53620428;0.58068746;0.45171756;0.77731413;0.61062801;0.28637356;0.62526119;0.50564259;0.28728661;0.45227531;0.50165117;0.33093128;0.34183004;0.28989395;0.16628087;0.34502628;0.45724049;0.13385285;0.30727184;0.34950981;0.25314951;0.66596872;0.69966692;0.35816982;0.79050446;0.6885829;0.93991584;0.75317389;0.56664097;0.27836052;0.66645831;0.73074377;0.36129057;0.41494992;0.54015332;0.25649035;0.63597876;0.15534891;0.15741822;0.54511607;0.39737347;0.197734;0.46879721;0.61412197;0.46131164;0.22091644;0.20293255;0.51751536;0.53470099;0.5460422;0.46392247;0.48929965;0.24239247;0.26449883;0.22254553;0.27495742;0.14377861;0.15743366;0.24179138;0.74467248;0.50140768;0.45143542;0.54426926;0.70915401;0.25458297;0.65247744;0.49911091;0.53201896;0.56833577;0.42106771;0.55197686;0.59354126;0.57920939;0.67285383;0.34593815;0.26921755;0.20451692;0.45530936;0.42268154;0.30531812;0.7050218;0.66677475;0.50485522;0.5574137;0.7134403;0.62323469;0.58938199;0.31408727;0.68559146;0.13028041;0.42007476;0.60339856;0.48501459;0.29642409;0.26426834;0.38145444;0.72878045;0.2860491;0.21466215;0.72893196;0.853369;0.82514024;0.82771903;0.49099654;0.52966172;0.18737446;0.55213022;0.24538095;0.2279744;0.14251436;0.51895767;0.44382015;0.47756314;0.1447722;0.60385174;0.55260766;0.69264817;0.58709121;0.45366779;0.62566698;0.58571458;0.25245094;0.66934925;0.39969048;0.4310706;0.68521702;0.20143038;0.25394994;0.33647949;0.36522505;0.50082839;0.28866401;0.37285003;0.34867084;0.66468179;0.21957506;0.3769342;0.61534303;0.23392004;0.88621676;0.53701693;0.31927919;0.16817272;0.3385224;0.15969987;0.56794071;0.59056371;0.16057524;0.17926228;0.16815406;0.16998616;0.78200674;0.21201293;0.54104847;0.35792068;0.094845794;0.69823676;0.46435198;0.1544476;0.16641346;0.17819591;0.29157054;0.42142665;0.77070838;0.37726945;0.37731436;0.71055824;0.16803572;0.5762859;0.14673573;0.16553949;0.4454613;0.38235959;0.43691885;0.29180703;0.1654834;0.80212873;0.22890407;0.23311077;0.40184617;0.27855054;0.60785758;0.12643652;0.24334747;0.87445772;0.148287;0.39485905;0.16973665;0.43834692;0.78908646;0.1549844;0.27690393;0.22216737;0.28229776;0.27126661;0.27002358;0.23680617;0.78122121;0.55920887;0.6280719;0.78835326;0.51489985;0.56407899;0.5958218;0.78100359;0.48064229;0.24435934;0.35624701;0.50777417;0.53721505;0.24274983;0.25072795;0.32871392;0.15780577;0.93961465;0.55758649;0.2352373;0.47678432;0.2211547;0.2437925;0.88360715;0.19846055;0.4372634;0.31927827;0.24477489;0.68648869;0.62674308;0.22403322;0.25394452;0.40154004;0.33057213;0.52103996;0.88728678;0.73943567;0.10921805;0.50596315;0.4464497;0.4084022;0.62134266;0.35053709;0.48549631;0.14634797;0.25071049;0.56542158;0.35108113;0.31844553;0.44939971;0.53470922;0.52639377;0.38550368;0.56254488;0.32842448;0.69325167;0.30623865;0.66522646;0.55122423;0.56364936;0.7068705;0.25558376;0.57514113;0.65235716;0.54001528;0.36023733;0.56659061;0.39747685;0.37384191;0.36155951;0.71239591;0.25253952;0.57613844;0.61493838;0.67169112;0.41926387;0.4083904;0.30393484;0.31066445;0.30449271;0.47325149;0.49982229;0.46136582;0.5798021;0.45330447;0.53590578;0.34750205;0.27682635;0.58195502;0.5240308;0.6272344;0.70809221;0.40662488;0.25392473;0.46544683;0.27846926;0.27091852;0.35613605;0.26787847;0.28781387;0.4762657;0.16368358;0.72040635;0.86823732;0.48838595;0.45054224;0.58873135;0.63533115;0.33221379;0.42823946;0.22575223;0.72387224;0.4463577;0.20203474;0.32537416;0.47726306;0.30071011;0.2639727;0.25462061;0.34060806;0.47186163;0.69529217;0.24457012;0.46566844;0.50501245;0.35714233;0.74071729;0.50899172;0.58659071;0.52532989;0.37987188;0.77688205;0.25884381;0.29682434;0.70040244;0.37851447;0.48277703;0.24751006;0.57707232;0.35698381;0.2745572;0.51279396;0.76962507;0.24531984;0.57989365;0.64965117;0.61071837;0.35851046;0.23792943;0.51755297;0.5518887;0.54094136;0.36568347;0.36228991;0.26786453;0.32906762;0.55311954;0.73233026;0.23920256;0.44148782;0.35345274;0.60938501;0.21235396;0.3538686;0.43140334;0.43848199;0.2363624;0.82802343;0.34447807;0.33356324;0.27061051;0.57977641;0.14304522;0.70315766;0.12667468;0.34852743;0.2260894;0.12106176;0.22125502;0.82365012;0.34036759;0.14294535;0.11317985;0.48665211;0.23069406;0.67393345;0.21847416;0.80334568;0.48317456;0.21604605;0.33496702;0.85556704;0.26151776;0.340583;0.45255747;0.18410236;0.59406203;0.18891834;0.55363488;0.20583165;0.64155298;0.38858566;0.33419597;0.41154784;0.56780446;0.50127739;0.22114012;0.16532828;0.81084263;0.40942183;0.46312973;0.34956104;0.5434736;0.18969622;0.51514965;0.3049221;0.14500207;0.79974121;0.25660297;0.17188764;0.25598633;0.21363738;0.23747689;0.22648323;0.21164653;0.76123643;0.39208728;0.26004124;0.54993612;0.36326873;0.4650026;0.35991293;0.77635866;0.56939667;0.16695756;0.17822462;0.64370358;0.29021508;0.41410813;0.21664724;0.48811927;0.51199126;0.11162894;0.41139576;0.36709395;0.35547534;0.37913421;0.20142427;0.19048637;0.2553246;0.76382428;0.21686901;0.44301227;0.22600836;0.30146167;0.2171808;0.24935345;0.38015804;0.84245557;0.38568664;0.4501988;0.45505652;0.70137799;0.18879151;0.3082228;0.61053896;0.16141163;0.35486594;0.67579824;0.74703056;0.30525583;0.56788033;0.32804075;0.4136205;0.75591969;0.50354552;0.21594529;0.66756105;0.3981528;0.6321637;0.24938343;0.37084636;0.30269727;0.44858286;0.66808891;0.33196041;0.27667031;0.31773499;0.63646042;0.60669029;0.68790263;0.43020627;0.75497878;0.36067492;0.35117891;0.24498251;0.49747306;0.30052704;0.33098271;0.36590087;0.61419332;0.52913827;0.44418836;0.54183024;0.73925281;0.24396823;0.19146122;0.62584847;0.64235491;0.36219743;0.17138985;0.72417259;0.6005128;0.34978375;0.53137594;0.46962529;0.23830909;0.29808417;0.42889351;0.83544493;0.27363726;0.10951992;0.33950225;0.34631932;0.83036733;0.12898694;0.31022906;0.60154408;0.50490117;0.56753874;0.75865674;0.72244829;0.51014501;0.32918215;0.81887716;0.2171874;0.21440086;0.13849439;0.25825304;0.76436222;0.44318441;0.19463462;0.79864579;0.093464434;0.27406794;0.37934455;0.52579987;0.35580742;0.37973776;0.12630461;0.22150768;0.18655625;0.18761881;0.1006385;0.9281233;0.22187802;0.093042262;0.28045639;0.38630828;0.15733717;0.257723;0.13074453;0.85660881;0.10013022;0.46702218;0.10706437;0.88649416;0.30095103;0.58331066;0.68738312;0.43873337;0.26524031;0.42902076;0.48702303;0.66048753;0.34041414;0.44537857;0.34524813;0.5064519;0.26661295;0.52152538;0.26781806;0.33887276;0.37354827;0.45093828;0.32331619;0.53872621;0.6968537;0.40684623;0.67624676;0.37292311;0.38860774;0.19823448;0.29584736;0.56987035;0.21617338;0.27487004;0.23545803;0.36130115;0.76599371;0.42738691;0.330309;0.28606924;0.3628037;0.7882126;0.41972074;0.32532579;0.1790777;0.20860939;0.73517793;0.21270856;0.15087837;0.47686437;0.23570871;0.74082875;0.15237343;0.28723383;0.27063817;0.33692417;0.16400208;0.66661835;0.51487666;0.45145792;0.35237768;0.40974081;0.2827476;0.44155556;0.55753499;0.48301062;0.31357539;0.40178427;0.73218077;0.59918582;0.28657067;0.37762785;0.49414405;0.27869776;0.45139068;0.49017042;0.16572028;0.33216134;0.2812483;0.091157652;0.27620551;0.41519445;0.10350002;0.20858774;0.28006577;0.19900919;0.61968952;0.66738373;0.28755209;0.78731811;0.68860841;0.92280084;0.75104159;0.57124597;0.21984212;0.633641;0.68676281;0.29025602;0.33752102;0.39537874;0.20175563;0.58929157;0.12037676;0.086156748;0.58486152;0.36303058;0.17732362;0.43176684;0.72244656;0.42449984;0.19845724;0.18205398;0.5638876;0.49642417;0.50767756;0.42703244;0.61384243;0.21812817;0.23847298;0.19994627;0.32099769;0.12850566;0.14081421;0.21757667;0.82449859;0.46360666;0.41493449;0.5059157;0.73966497;0.12721407;0.62821352;0.47430816;0.50693357;0.51675987;0.39773902;0.52682275;0.56849903;0.73665142;0.64903539;0.325028;0.25170651;0.20406534;0.43119833;0.39931142;0.28609669;0.82582545;0.6428135;0.47998798;0.53225416;0.65054345;0.59849072;0.56431246;0.29447928;0.44518694;0.10828373;0.36312047;0.60475612;0.42432874;0.25109813;0.22283456;0.3275272;0.72771955;0.24194245;0.17985633;0.73405296;0.8548249;0.86288756;0.82988745;0.50224376;0.46747267;0.15651388;0.55453306;0.20638452;0.191319;0.11855426;0.45704588;0.44828078;0.41721532;0.12045358;0.63218653;0.52832741;0.67017585;0.56288332;0.43041977;0.60182166;0.5614996;0.2363642;0.69511694;0.3777335;0.40830332;0.71022689;0.1880977;0.23778732;0.3166402;0.39465764;0.4768658;0.27083489;0.35171512;0.37766334;0.64151806;0.20522426;0.35566702;0.59137088;0.21879405;0.89568251;0.49222344;0.39323115;0.14767595;0.30603105;0.14015396;0.59215021;0.65578252;0.14093053;0.15754156;0.1476595;0.1492876;0.86080903;0.18682376;0.49621221;0.32029375;0.082987763;0.75012475;0.49030176;0.13549766;0.14850575;0.15659216;0.36380002;0.38014007;0.78891319;0.44158673;0.34912831;0.74128222;0.15307121;0.51977843;0.13352865;0.15077773;0.49128211;0.2605978;0.40653646;0.26805457;0.15072599;0.79726964;0.20929505;0.21320313;0.37266317;0.18405461;0.64675546;0.11496166;0.22272566;0.82819831;0.13494967;0.44101742;0.15463457;0.50267017;0.7905097;0.12853004;0.23068012;0.18557544;0.23773319;0.22808048;0.2269952;0.19613777;0.78282881;0.49514869;0.63249499;0.83430731;0.51818085;0.56993526;0.60098171;0.7826162;0.41884178;0.20260499;0.30351177;0.51577371;0.47349253;0.20330404;0.20807202;0.27879742;0.13090245;0.95409459;0.4949801;0.19762491;0.41652504;0.18547;0.20503792;0.88293219;0.16599944;0.44602281;0.27143183;0.20589012;0.69016951;0.63159531;0.18794979;0.21386224;0.41073561;0.28152713;0.4591234;0.88656265;0.74184316;0.090688467;0.44451255;0.38781825;0.35234886;0.62631828;0.27778164;0.47354928;0.14125814;0.24259382;0.57036757;0.34077832;0.30876952;0.43774068;0.62050289;0.5142647;0.37463424;0.55038577;0.34462476;0.68208355;0.29681742;0.65369433;0.63568431;0.55149102;0.69591051;0.24734379;0.5795387;0.64068615;0.52786005;0.34977427;0.47528392;0.39747685;0.37384191;0.36155951;0.71239591;0.25253952;0.57613844;0.61493838;0.67169112;0.41926387;0.4083904;0.30393484;0.31066445;0.30449271;0.47325149;0.49982229;0.46136582;0.5798021;0.45330447;0.53590578;0.34750205;0.27682635;0.58195502;0.5240308;0.6272344;0.70809221;0.41503802;0.21475178;0.4035821;0.23629132;0.22964542;0.30573228;0.22697484;0.24198413;0.48371333;0.13703607;0.71843243;0.89504367;0.48704457;0.45365214;0.58915627;0.63961571;0.28412721;0.36869895;0.19024923;0.72614628;0.38910729;0.16979595;0.27516618;0.41840562;0.25597215;0.2520051;0.24298434;0.32166669;0.45501256;0.67938304;0.23330002;0.44889101;0.48209167;0.34237543;0.72591704;0.45995343;0.53603309;0.47008228;0.33801204;0.73388839;0.24705704;0.28376302;0.67897701;0.36324063;0.46581453;0.23613197;0.55978423;0.33745772;0.26222527;0.49559867;0.78711891;0.21974111;0.62335467;0.6105963;0.57084209;0.32473505;0.21298489;0.56459022;0.57896382;0.50086099;0.33149141;0.38994092;0.31433839;0.29713759;0.51296175;0.7520535;0.21414773;0.49110228;0.31997928;0.634776;0.18969041;0.32037011;0.48119715;0.40080702;0.21155372;0.8577866;0.27656227;0.26718274;0.21408831;0.73324615;0.1110742;0.68833143;0.098222785;0.45566666;0.17749651;0.093832269;0.17356683;0.92244726;0.27302361;0.11099574;0.087679766;0.5876593;0.18124662;0.65918219;0.17131056;0.88442212;0.40083158;0.16934267;0.26838633;0.88087296;0.17734458;0.30686116;0.41313219;0.16347973;0.65963799;0.16781521;0.51214874;0.18307628;0.78567123;0.35200769;0.30089796;0.37381807;0.63751078;0.4604688;0.19693869;0.14661944;0.89386278;0.37179315;0.4233447;0.3152602;0.61677241;0.16851559;0.47407874;0.27369684;0.09655647;0.82264292;0.23549227;0.15690076;0.23491572;0.19548832;0.21764639;0.20741636;0.19364218;0.78751481;0.36384106;0.23870718;0.5879932;0.33623978;0.43446341;0.33303687;0.80135328;0.53769892;0.15236132;0.16274065;0.67800075;0.26701021;0.38504806;0.19828083;0.45710015;0.48060733;0.10215564;0.38396001;0.34132323;0.33020514;0.48985466;0.18506558;0.17490773;0.23539133;0.82994068;0.1994395;0.41462991;0.20796263;0.40677997;0.19972993;0.22979312;0.35385653;0.88876796;0.35916984;0.42163056;0.42636845;0.78111315;0.17333531;0.28524736;0.58082581;0.14798948;0.32873327;0.64637858;0.77209634;0.28163838;0.53680164;0.30321023;0.38513619;0.78032172;0.47288373;0.19797504;0.63790387;0.37021926;0.66416186;0.22913915;0.34400547;0.27922225;0.41904029;0.69825536;0.30693129;0.25470993;0.29344121;0.60607547;0.63979447;0.65886724;0.40118739;0.82433915;0.3025862;0.29411209;0.20163889;0.60308039;0.24949709;0.27620578;0.30726612;0.65836143;0.45946497;0.3787356;0.53627437;0.80592376;0.20077433;0.15647657;0.6188674;0.62543631;0.30394855;0.13975763;0.71623141;0.6935854;0.2928701;0.46163994;0.40254411;0.29171944;0.27133062;0.39542845;0.85308808;0.24855103;0.098458663;0.31020817;0.31664297;0.84848058;0.11603841;0.28269285;0.56530857;0.46920043;0.60182309;0.72781312;0.68959779;0.47458303;0.30048668;0.83803487;0.19640072;0.1938418;0.1246426;0.23427778;0.78810239;0.40922868;0.17572965;0.83150631;0.074081197;0.22179325;0.31317541;0.41392642;0.29234275;0.37586731;0.10026877;0.13174365;0.14900613;0.14987463;0.079783119;0.90092206;0.17807387;0.073746108;0.2272121;0.24189833;0.12524708;0.25705102;0.10382774;0.76971394;0.079378657;0.39304069;0.08489877;0.90584421;0.30095103;0.58331066;0.68738312;0.43873337;0.26524031;0.42902076;0.48702303;0.66048753;0.34041414;0.44537857;0.34524813;0.5064519;0.26661295;0.52152538;0.26781806;0.33887276;0.37354827;0.45093828;0.32331619;0.53872621;0.6968537;0.40684623;0.67624676;0.37292311;0.38860774;0.17863414;0.26504004;0.59813249;0.19223155;0.31959656;0.20972721;0.32596534;0.78481704;0.47061339;0.29698607;0.25602776;0.32737741;0.85213876;0.38127872;0.29234868;0.15878811;0.24537644;0.75595248;0.18909593;0.13353841;0.52299011;0.20995505;0.76125807;0.13487358;0.26042593;0.2700431;0.33623183;0.16361028;0.66583526;0.51404893;0.45065624;0.35166621;0.40897;0.2821328;0.44076052;0.55895025;0.4844659;0.314881;0.40320975;0.73326707;0.59836358;0.28594998;0.37688789;0.49332196;0.27808961;0.450589;0.48934981;0.16532472;0.33147517;0.28063574;0.070592068;0.21882804;0.40450031;0.080177471;0.35991758;0.22204602;0.15565588;0.60338569;0.78376698;0.22830495;0.76874006;0.66833806;0.97216654;0.7315408;0.55179536;0.17249127;0.75961304;0.66983068;0.23057067;0.2706809;0.5634194;0.15786693;0.57351249;0.093336843;0.066716596;0.70986301;0.31903934;0.15249458;0.38328275;0.80296636;0.37641603;0.17099515;0.15662664;0.4957225;0.44520506;0.4561398;0.37880698;0.71997511;0.18830946;0.20631714;0.17230237;0.27181375;0.11012636;0.12076344;0.18782276;0.87626368;0.41358697;0.36740488;0.45442489;0.82697701;0.1222448;0.61495018;0.46107069;0.49348006;0.62279642;0.38542324;0.51329124;0.55494064;0.80810839;0.63597095;0.3140972;0.24263629;0.29309911;0.4184095;0.38697106;0.27609816;0.87581372;0.62968445;0.46670508;0.51870847;0.73898804;0.58503026;0.55074823;0.28426918;0.43223286;0.08970622;0.31027034;0.61032349;0.36645699;0.21093707;0.18651332;0.27824345;0.73033822;0.20299873;0.14981015;0.73665172;0.85475814;0.89440686;0.83030272;0.51011282;0.40696624;0.13007887;0.5612089;0.1724052;0.15955026;0.098262981;0.3971054;0.4568918;0.35985255;0.099847391;0.66167682;0.5017978;0.64487493;0.53624761;0.40549225;0.57537138;0.53486353;0.21967429;0.72154737;0.35441488;0.38399002;0.73579133;0.17436282;0.22101547;0.29579169;0.42712298;0.45094538;0.2522383;0.32937106;0.40978184;0.6156038;0.1904045;0.3331674;0.56483853;0.20314255;0.7917341;0.44258794;0.37893462;0.12727113;0.16204077;0.12072974;0.61146408;0.63716793;0.12140477;0.13586797;0.12725683;0.1286743;0.76342696;0.16150308;0.44645646;0.28097224;0.071334854;0.73270357;0.51179922;0.11668555;0.075320691;0.13504001;0.35049459;0.33614704;0.64214653;0.50192744;0.31606829;0.72091991;0.13624926;0.53250903;0.11873265;0.13419038;0.4695518;0.20638205;0.37038308;0.24071951;0.13414419;0.80644584;0.18701221;0.19056259;0.33823398;0.1444699;0.62439436;0.10214429;0.1992262;0.82480317;0.12000419;0.42037827;0.13765316;0.56141466;0.79147279;0.10633186;0.1928153;0.15429324;0.19889194;0.19057915;0.18964653;0.16326311;0.78396124;0.43257987;0.63814944;0.87211549;0.52640712;0.57706946;0.60739911;0.78375351;0.36063683;0.16877045;0.2563124;0.52300674;0.41190612;0.16936649;0.17343533;0.23457474;0.10831126;0.96334887;0.43341774;0.16502726;0.35940227;0.15020791;0.17136092;0.88257259;0.13816886;0.45399559;0.22879575;0.17209008;0.69314438;0.62722194;0.1567829;0.17892049;0.41918409;0.23764667;0.39926723;0.88614553;0.74362844;0.072915815;0.38550913;0.33294901;0.30069932;0.62203622;0.29223758;0.45444053;0.13338724;0.22993195;0.70952302;0.32454577;0.29357463;0.41917077;0.72410363;0.49476784;0.35744458;0.53075308;0.50140989;0.66372967;0.28204194;0.63481826;0.73649591;0.53185803;0.67786419;0.23448327;0.71690446;0.62161732;0.50828946;0.33327287;0.48994002;0.39747685;0.37384191;0.36155951;0.71239591;0.25253952;0.57613844;0.61493838;0.67169112;0.41926387;0.4083904;0.30393484;0.31066445;0.30449271;0.47325149;0.49982229;0.46136582;0.5798021;0.45330447;0.53590578;0.34750205;0.27682635;0.58195502;0.5240308;0.6272344;0.70809221;0.42291808;0.18025763;0.34838691;0.19885921;0.19310601;0.25978109;0.19079694;0.20379803;0.49057299;0.11416356;0.72244328;0.91938692;0.49637431;0.46350807;0.59641463;0.64333296;0.24066381;0.3164016;0.15925372;0.72793704;0.33505893;0.14184155;0.2327787;0.36211976;0.21597382;0.24921896;0.24027708;0.31834161;0.45102999;0.67554855;0.23067936;0.44492787;0.47804001;0.33891529;0.72233373;0.46703804;0.54300427;0.47716984;0.34459665;0.73913008;0.24431378;0.28071547;0.67514122;0.35965595;0.46180153;0.23348571;0.55566227;0.33402854;0.25935215;0.491521;0.80917531;0.20047267;0.57997566;0.57798582;0.5379405;0.29866594;0.19422141;0.52076006;0.61322773;0.46845275;0.30505645;0.42559496;0.28099012;0.27265683;0.48038003;0.77687609;0.19529675;0.44838703;0.29417333;0.66679353;0.1727253;0.29454237;0.43876702;0.37116113;0.19289808;0.87635988;0.21338898;0.20576468;0.16327676;0.74833274;0.083666123;0.66427404;0.073944852;0.41354272;0.13461101;0.070631944;0.13155991;0.94410288;0.21050793;0.083606839;0.065995902;0.5408197;0.13752769;0.63501292;0.12981027;0.88917118;0.31825036;0.1282858;0.20674059;0.89639807;0.16205931;0.28290176;0.38435626;0.14928177;0.698937;0.15327434;0.48103678;0.16734964;0.81391782;0.32572779;0.27727374;0.34656006;0.67826527;0.4303025;0.1801651;0.13377994;0.90917748;0.34462184;0.39422807;0.29083961;0.65875274;0.15391949;0.44360372;0.2516849;0.087961316;0.84355927;0.21563075;0.14299577;0.21509445;0.17853864;0.19905151;0.18957135;0.17683305;0.81174737;0.33655381;0.21862313;0.62516308;0.31028444;0.4044857;0.30724591;0.82431442;0.50579625;0.13882855;0.14836086;0.71062523;0.24504422;0.35684198;0.18111941;0.42648923;0.44946185;0.092979193;0.35599065;0.31528902;0.30473503;0.52755684;0.16902415;0.15965718;0.21566997;0.84906787;0.18230623;0.38550061;0.1901968;0.44425049;0.18257488;0.21046108;0.32721555;0.90190291;0.33228096;0.39226478;0.39684838;0.80464846;0.1582083;0.26229936;0.54910707;0.13490568;0.30354154;0.61578667;0.79723561;0.25908923;0.50538427;0.27939987;0.35734349;0.80475408;0.44236171;0.18108533;0.607135;0.34305203;0.69703078;0.21000478;0.3180474;0.25681949;0.38999596;0.72899979;0.28291166;0.23385306;0.27019137;0.57481515;0.67399544;0.62857264;0.37277165;0.73282373;0.24292868;0.23574691;0.15915535;0.6166448;0.19840157;0.14343813;0.24690779;0.67501229;0.3817032;0.30884513;0.52005482;0.68851846;0.15845327;0.12281003;0.60131359;0.58083963;0.24408638;0.069929019;0.69855839;0.70325547;0.23469728;0.38371229;0.32999569;0.18407789;0.24850829;0.36604947;0.87101239;0.22725527;0.089319058;0.28500268;0.29107106;0.86689276;0.10531285;0.25914448;0.53278375;0.43779871;0.63903511;0.6990158;0.65922779;0.44273365;0.27585003;0.85753512;0.17894006;0.17658114;0.11315392;0.21398598;0.81245285;0.37931773;0.15991212;0.86692733;0.061343089;0.18562415;0.26546448;0.42322063;0.24702723;0.38131833;0.083045207;0.10928563;0.1237648;0.12449521;0.066059984;0.92277867;0.14830367;0.061066065;0.19028693;0.20296711;0.10385351;0.26360005;0.086002782;0.77152538;0.06572523;0.33756414;0.070295602;0.92667907;0.30095103;0.58331066;0.68738312;0.43873337;0.26524031;0.42902076;0.48702303;0.66048753;0.34041414;0.44537857;0.34524813;0.5064519;0.26661295;0.52152538;0.26781806;0.33887276;0.37354827;0.45093828;0.32331619;0.53872621;0.6968537;0.40684623;0.67624676;0.37292311;0.38860774;0.16004376;0.23905466;0.62934643;0.17238438;0.33170786;0.18831204;0.2956849;0.80520594;0.48073286;0.26864776;0.23074538;0.29700735;0.88582617;0.34782988;0.26433808;0.14208926;0.25735238;0.77849394;0.16953555;0.1193385;0.53191298;0.18851951;0.78341627;0.1205392;0.23479864;0.26888055;0.33487895;0.16284542;0.66430032;0.51242846;0.44908801;0.35027528;0.40746263;0.28093198;0.43920499;0.56087649;0.48644346;0.31665131;0.40514547;0.73475057;0.59675246;0.28473756;0.3754411;0.4917129;0.27690136;0.44902107;0.48774382;0.16455269;0.33013412;0.27943966;0.05393023;0.16938761;0.38393509;0.061234638;0.35348487;0.17196931;0.119424;0.5770787;0.76884371;0.17700192;0.74641371;0.64427853;0.98201537;0.70823467;0.52882069;0.13261181;0.74441808;0.6434164;0.17882736;0.21146877;0.55027717;0.1211511;0.54759139;0.071287178;0.05098043;0.53257054;0.28556871;0.13448656;0.34560552;0.82782745;0.33913594;0.082639761;0.13816597;0.46979839;0.4045409;0.41506284;0.34138724;0.56000316;0.16648343;0.18266475;0.15215331;0.25451815;0.096922621;0.05802922;0.16604659;0.89272201;0.37431175;0.33066615;0.41341048;0.67605698;0.11225629;0.58634901;0.43325117;0.46505979;0.64040428;0.35983801;0.48461467;0.52600664;0.81807214;0.60769236;0.29161805;0.22415927;0.31248292;0.39171049;0.36132854;0.25564188;0.88221371;0.6012978;0.43876523;0.48997673;0.75222516;0.55615687;0.52182299;0.26335722;0.40513057;0.07422854;0.26272246;0.61508518;0.31312233;0.17619167;0.15536401;0.23448353;0.73232675;0.16940448;0.12435651;0.7396217;0.85497767;0.9192791;0.83103079;0.51839018;0.3501837;0.10781938;0.56704324;0.14340553;0.13255292;0.0813234;0.34110403;0.46466729;0.30713913;0.082638443;0.69218105;0.47312415;0.61662972;0.50724334;0.37908015;0.5463168;0.50586754;0.20257898;0.74847269;0.32995173;0.358338;0.76174158;0.1603924;0.20383202;0.27415603;0.46287325;0.42322767;0.2330862;0.30604067;0.44532123;0.58687311;0.17529415;0.30965781;0.53576273;0.18715292;0.88900745;0.40143415;0.36861852;0.11187567;0.14272334;0.10609468;0.77648562;0.62348491;0.10669085;0.11948366;0.11186301;0.11311679;0.88554883;0.14224494;0.40514722;0.25005266;0.06263157;0.71973145;0.70320022;0.10252392;0.066128328;0.11875043;0.34089676;0.30095193;0.79725271;0.39273587;0.29218456;0.69713795;0.12454415;0.56498975;0.10846659;0.079394892;0.44406372;0.18932267;0.34392011;0.221306;0.12261013;0.71309805;0.17136109;0.17464913;0.31322935;0.13210224;0.59828842;0.060296491;0.18268038;0.8419829;0.10963245;0.39607882;0.1258342;0.44753337;0.79228866;0.087808661;0.16033894;0.12781537;0.16550475;0.15844047;0.15764922;0.13535492;0.78493983;0.37321678;0.64361644;0.90216112;0.53441358;0.58399016;0.61361325;0.78473651;0.30719769;0.13999404;0.21484289;0.52993113;0.35403496;0.14049669;0.1439295;0.19604987;0.089450575;0.98061496;0.37496969;0.13727842;0.30694136;0.12478879;0.14263317;0.91747665;0.11467964;0.46159253;0.19167095;0.14325;0.69581383;0.72646391;0.13032356;0.14903718;0.42727762;0.19930987;0.34331664;0.9199788;0.745157;0.06038605;0.33069441;0.28312817;0.25443017;0.72225338;0.26402637;0.42343071;0.12126371;0.21016823;0.73361117;0.29881772;0.2632589;0.38923568;0.74540859;0.46287864;0.33004335;0.49840811;0.52451223;0.63261354;0.25878987;0.60302323;0.75707251;0.49950492;0.63852549;0.21439651;0.74054825;0.58959115;0.47619253;0.30708027;0.45195538;0.39747685;0.37384191;0.36155951;0.71239591;0.25253952;0.57613844;0.61493838;0.67169112;0.41926387;0.4083904;0.30393484;0.31066445;0.30449271;0.47325149;0.49982229;0.46136582;0.5798021;0.45330447;0.53590578;0.34750205;0.27682635;0.58195502;0.5240308;0.6272344;0.70809221;0.43052319;0.15044421;0.29747444;0.16629778;0.16138485;0.21889673;0.1594155;0.17052265;0.49712351;0.094791465;0.72625613;0.93849796;0.5054329;0.47310933;0.60339749;0.6467638;0.20227447;0.26880488;0.13264921;0.72949576;0.28548485;0.11797731;0.19545065;0.30989507;0.18096663;0.24340451;0.23462918;0.31138381;0.44264665;0.66738212;0.22521463;0.43658647;0.46949956;0.33166796;0.71468097;0.47743082;0.55318946;0.48756239;0.35432279;0.74671811;0.2385899;0.27434814;0.66697079;0.35214147;0.45334995;0.22796689;0.54694021;0.32684794;0.25335413;0.48292035;0.83099335;0.18347389;0.54865986;0.54666167;0.50666183;0.27522072;0.17768672;0.48962137;0.64867043;0.43816787;0.28125006;0.46431649;0.25858203;0.25075701;0.44984528;0.80159467;0.17868187;0.41859534;0.27098596;0.69948423;0.15783156;0.27133363;0.40924323;0.34407759;0.17646268;0.89458972;0.1660717;0.15994963;0.12618944;0.81068885;0.064312361;0.64492172;0.056850344;0.4487552;0.10372443;0.054310609;0.10134681;0.96898472;0.16375574;0.064266697;0.05075876;0.5703119;0.10599971;0.6158154;0.099984288;0.91773063;0.2525188;0.098797932;0.16073218;0.91168135;0.14774218;0.25995305;0.3561939;0.13601027;0.730331;0.13967368;0.44989952;0.15260628;0.83577925;0.30033338;0.25467184;0.32010266;0.71101785;0.40046942;0.1644062;0.12180646;0.92076981;0.31825995;0.36566877;0.26741201;0.69268441;0.14026572;0.41337281;0.23073164;0.079993784;0.86252612;0.19701968;0.13012825;0.1965227;0.16276172;0.1816805;0.17292875;0.16119149;0.83391374;0.31035084;0.199793;0.66104031;0.28550035;0.3752602;0.28263485;0.84524506;0.47393352;0.12631357;0.13504283;0.74133503;0.22434507;0.32963702;0.16513829;0.39649397;0.41877696;0.08456327;0.3290849;0.29046237;0.2804997;0.5663746;0.15414889;0.14553693;0.19723128;0.86722928;0.16638237;0.35729536;0.17366253;0.48374584;0.16663003;0.19240344;0.30174613;0.91424751;0.30654696;0.363787;0.36819136;0.82721508;0.14420597;0.2406515;0.51717091;0.12283869;0.27937859;0.58419573;0.82045388;0.23765364;0.47384197;0.25667372;0.33037916;0.82727313;0.41217643;0.1652595;0.57543403;0.3167766;0.72825432;0.19198364;0.29307389;0.23553304;0.36161324;0.75794071;0.25996959;0.21412249;0.24804138;0.54287916;0.70670038;0.59718198;0.34510985;0.76555997;0.19912468;0.19303764;0.12910351;0.65545297;0.16164769;0.11618635;0.20250484;0.71657449;0.32038042;0.25581965;0.51271653;0.72175348;0.12852515;0.099324249;0.59252405;0.56773078;0.20010737;0.056490902;0.68878871;0.73519272;0.19214904;0.32219189;0.27434701;0.18213868;0.22731908;0.3380776;0.88718742;0.20756605;0.081056848;0.26142499;0.26712057;0.88352555;0.095597684;0.2372344;0.50022173;0.40707293;0.67457366;0.66886938;0.62779218;0.41186041;0.25284815;0.87519395;0.16294052;0.16077125;0.10273641;0.19527225;0.83477092;0.35075304;0.14546558;0.89756918;0.050746921;0.15449798;0.22315627;0.43200636;0.20713399;0.39060751;0.068662837;0.090414695;0.10247008;0.10307949;0.054636553;0.94128132;0.12300133;0.050518494;0.15845814;0.16925716;0.08590208;0.27324653;0.071109027;0.77292562;0.05436036;0.28687915;0.058131162;0.94429404;0.30095103;0.58331066;0.68738312;0.43873337;0.26524031;0.42902076;0.48702303;0.66048753;0.34041414;0.44537857;0.34524813;0.5064519;0.26661295;0.52152538;0.26781806;0.33887276;0.37354827;0.45093828;0.32331619;0.53872621;0.6968537;0.40684623;0.67624676;0.37292311;0.38860774;0.14364098;0.21573895;0.66059744;0.15482982;0.3127031;0.1693089;0.2681486;0.8248865;0.45708194;0.24304517;0.20810281;0.26938134;0.90284151;0.31701174;0.23905727;0.12740532;0.24186763;0.80036074;0.15224466;0.10690153;0.50752389;0.16949798;0.80489081;0.10798173;0.2118261;0.26741564;0.33317253;0.16188271;0.66235584;0.51037979;0.44710705;0.34852061;0.40555975;0.27941865;0.43724042;0.56300509;0.48864368;0.31865218;0.40731555;0.73636007;0.59471339;0.283209;0.37361509;0.48967955;0.27540419;0.44704089;0.48571435;0.16358094;0.32844305;0.27793223;0.041732967;0.13166279;0.36382002;0.047350384;0.33918568;0.13371205;0.09237729;0.55074644;0.74828619;0.13771299;0.72605759;0.62310261;0.98791051;0.68727845;0.50928766;0.10268105;0.72323889;0.61663592;0.13916601;0.16533379;0.52931297;0.093724206;0.52177227;0.055089381;0.039465461;0.56516141;0.25887695;0.12061664;0.31507516;0.85201502;0.30898085;0.074012607;0.12393741;0.44832289;0.37103957;0.38111836;0.3111003;0.60595721;0.1495637;0.16426539;0.13657972;0.2405553;0.086818896;0.051989108;0.14916745;0.90858215;0.34223166;0.30101696;0.37953395;0.70307356;0.10274901;0.55647814;0.40519309;0.43619663;0.67247134;0.3344253;0.45536479;0.49621549;0.83775812;0.57800466;0.26958734;0.20627098;0.34578553;0.36501786;0.33585215;0.2357264;0.89569628;0.57154357;0.41055214;0.46063516;0.77735513;0.52621812;0.4920693;0.24296966;0.37795866;0.061394263;0.22082224;0.61965108;0.26514351;0.14654292;0.12896788;0.19634254;0.7341888;0.14080387;0.10299128;0.74258667;0.85523611;0.9386642;0.83179247;0.52660775;0.29828745;0.089219943;0.57266545;0.11892432;0.10983714;0.067257449;0.290122;0.47223556;0.2598373;0.068344809;0.72248983;0.4434287;0.58636492;0.47697091;0.35227823;0.51571393;0.47561339;0.18580489;0.77482963;0.30537519;0.33241883;0.78705543;0.14677782;0.18696819;0.25265375;0.50074047;0.39483598;0.21419497;0.28271228;0.4831579;0.55631405;0.16053422;0.28613412;0.50521362;0.17150412;0.8884728;0.36324161;0.34973124;0.09862639;0.11857124;0.093512647;0.79490864;0.60037291;0.094039828;0.10536338;0.098615117;0.099725001;0.89317024;0.12557216;0.36676621;0.22258067;0.055195;0.69822121;0.72619611;0.090356432;0.054877639;0.10471386;0.32307133;0.26924351;0.79866225;0.42230678;0.27777499;0.67937273;0.11765011;0.59386241;0.1024309;0.074956141;0.42564216;0.17919098;0.32781541;0.20972271;0.11581831;0.73612511;0.16208878;0.16521725;0.29809138;0.12481159;0.57906055;0.056932215;0.17286296;0.8563928;0.1035338;0.3786025;0.11887232;0.47763988;0.79308105;0.072443508;0.13283245;0.10561839;0.13717785;0.13123694;0.13057233;0.11190584;0.78589046;0.3184672;0.64890522;0.9256857;0.54221588;0.59071058;0.61963725;0.78569162;0.25931117;0.11578058;0.17903195;0.53672212;0.30111524;0.11620079;0.11907157;0.16301198;0.073799498;0.98550391;0.3207936;0.11381648;0.25971568;0.10337547;0.11830337;0.91696018;0.094948135;0.46886736;0.15971197;0.1188206;0.69821155;0.73032343;0.10799819;0.12367801;0.43506929;0.16621803;0.29216772;0.91942978;0.74645388;0.049982626;0.28085387;0.23871627;0.21365418;0.72622561;0.2549589;0.38133287;0.10594258;0.1847495;0.77197146;0.26502886;0.23260254;0.34897959;0.76116318;0.41909716;0.29377037;0.45353436;0.57745188;0.58758008;0.22854878;0.5574531;0.77220947;0.45460409;0.59364021;0.18853675;0.77816701;0.54388815;0.43195373;0.27260941;0.43729749;0.39747685;0.37384191;0.36155951;0.71239591;0.25253952;0.57613844;0.61493838;0.67169112;0.41926387;0.4083904;0.30393484;0.31066445;0.30449271;0.47325149;0.49982229;0.46136582;0.5798021;0.45330447;0.53590578;0.34750205;0.27682635;0.58195502;0.5240308;0.6272344;0.70809221;0.43813851;0.12504289;0.25168276;0.13841294;0.13426311;0.18323284;0.13260141;0.14198616;0.50366473;0.078541063;0.72980756;0.95333219;0.51416415;0.48240158;0.61004412;0.65019464;0.16898856;0.22648524;0.11010456;0.73107612;0.24111249;0.097839288;0.16316277;0.26268327;0.15083903;0.23456885;0.22605164;0.30076036;0.42971581;0.65452987;0.21692035;0.42372659;0.45629737;0.32058641;0.70258003;0.49200344;0.56730068;0.50211072;0.36823568;0.75689954;0.2298951;0.26465178;0.65411335;0.34063378;0.44030285;0.2195891;0.53336704;0.31587213;0.2442335;0.46960947;0.8509993;0.16751085;0.51683235;0.51484203;0.47520113;0.25282347;0.16217485;0.45843032;0.68287838;0.40819904;0.25848016;0.50381029;0.23724547;0.22993653;0.41954628;0.82444209;0.163092;0.38924664;0.24885383;0.73057693;0.143905;0.24917963;0.38022029;0.31783324;0.16104688;0.90886325;0.1263857;0.12163436;0.095632784;0.8314299;0.048690703;0.62185085;0.043071959;0.42221245;0.078498825;0.041160632;0.076692484;0.9796713;0.12458684;0.048656397;0.038488168;0.54010588;0.080229037;0.59294349;0.0756578;0.92638922;0.19485307;0.074757293;0.12224106;0.92356741;0.13454673;0.23836918;0.32916731;0.12380037;0.75934088;0.12715408;0.41937152;0.13900729;0.85538882;0.27625218;0.23343638;0.29490957;0.74145257;0.37155408;0.14984265;0.1108139;0.93093473;0.29316747;0.33820385;0.24534464;0.72438306;0.12769625;0.38398525;0.21113625;0.072716586;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
   };
  };
  DataTable_Group @.gp[2] {
   name="AnalysisData";
   el_typ=DataTable;
   el_def=0;
  };
 };
 data_proc {
  name=;
  el_typ=taDataProc;
  el_def=0;
  taDataProc @[0] {
   name="data_base";
  };
  taDataAnal @[1] {
   name="data_anal";
  };
  taDataGen @[2] {
   name="data_gen";
  };
  taImageProc @[3] {
   name="image_proc";
  };
 };
 programs {
  name=;
  el_typ=Program;
  el_def=0;
  step_prog=NULL;
  desc=;
  Program_Group @.gp[0] {
   name="LeabraAll_Std";
   el_typ=Program;
   el_def=0;
   step_prog=.projects[0].programs.gp[0][4]$0$;
   desc="The full set of programs for training a standard Leabra network";
   Program @[0] {
    name="LeabraBatch";
    desc="Iterate over training runs";
    flags=;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=.projects[0].networks[0]$1$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc=;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].data.gp[0][0]$2$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc=;
     };
     ProgVar @[2] {
      name="max_batch";
      var_type=T_Int;
      int_val=10;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc=;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="batch";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc="batch counter";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc=;
      flags=;
      network_var=.projects[0].programs.gp[0][0].args[0]$3$;
      local_ctr_var=.projects[0].programs.gp[0][0].vars[0]$4$;
      counter=Network::batch;
     };
    };
    prog_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
     NetCounterInit @[0] {
      desc=;
      flags=;
      network_var=$3$;
      local_ctr_var=$4$;
      counter=Network::batch;
     };
     WhileLoop @[1] {
      desc=;
      flags=;
      loop_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       ProgramCall @[0] {
	desc=;
	flags=;
	target=.projects[0].programs.gp[0][1]$5$;
	targ_ld_init="*LeabraTrain*";
	call_init=0;
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  expr {
	   expr="network";
	   flags=;
	   var_expr="$#0#$";
	   vars {
	   };
	   var_names{ network;	   };
	   bad_vars{ 	   };
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  expr {
	   expr="input_data";
	   flags=;
	   var_expr="$#0#$";
	   vars {
	   };
	   var_names{ input_data;	   };
	   bad_vars{ 	   };
	  };
	 };
	};
       };
       NetCounterIncr @[1] {
	desc=;
	flags=;
	network_var=$3$;
	local_ctr_var=$4$;
	counter=Network::batch;
       };
      };
      test {
       expr="batch < max_batch";
       flags=;
       var_expr="$#0#$ < $#1#$";
       vars {
       };
       var_names{ batch;max_batch;       };
       bad_vars{        };
      };
     };
    };
   };
   Program @[1] {
    name="LeabraTrain";
    desc="A complete training run of a Leabra network: iterating over epochs until the network has learned the task";
    flags=;
    objs {
     name=;
     el_typ=RndSeed;
     el_def=0;
     RndSeed @[0] {
      name="rnd_seed";
      seed{ 897248114;-1259630319;-1954705695;-2086433643;-1705562578;-246166775;142172280;-1066196830;649876912;-363601797;-1551220787;-201998924;984813377;-1929982005;1866720504;1737535582;-2064818913;-596409631;-537210356;-394821123;-1176302275;-1088439095;390472553;1002483428;-644065336;-93234492;-249392311;1955837623;486322880;268723693;-1316990013;-1148081097;1053267338;-194887551;722894185;-1796145741;-419870710;-744395548;-2126350183;-1623934615;-1975558537;-1109580724;1457379925;952758326;-932820647;-793678521;622734178;-1116891631;992844023;348717466;1162608598;-2078137647;-402129645;-523610230;-892508948;-545793120;1897913877;280270467;-1694155315;294983543;-1251003482;-1650029695;-1335161250;-843867016;1576969605;-260969840;-224140684;1265137246;954732510;2064975050;-1145863940;-1435022393;-1859029257;1513712809;985631399;417291160;-2038587757;-1933156114;888379733;1446724555;-464909414;-1706911051;-1159096460;-1791674743;-147343083;960690226;682596297;1099430942;359127508;311504974;93962501;-1671326033;632618192;-885562045;1179982281;-1505675969;1344906533;-1418551925;1622092278;1701084792;242471559;-1984251903;-1568971862;-1063520265;1591722069;-1959097976;-1601150455;-874166212;-889564662;717605003;-1582378599;-1301052667;1211123575;485189748;-182999148;374766658;1150697026;-738165078;-390496439;960351772;-332421139;71115877;-1747551486;-288197538;2067393244;-402841323;168191432;698976579;-691346957;454158309;419567441;-1655444926;1843518827;-1387150657;-1775972895;1209349907;1737084105;-273997764;2063222132;-629133755;1321145195;-340980602;-64855207;836106865;-384606302;857100345;-616134379;-1192753754;-1534913223;1646103447;-337508797;-104008340;1371554336;1910014402;1731164243;157488784;-1230766726;1651230814;-1801393009;1853249886;-1909629469;-2064890998;-586605120;1029458265;-1567764431;-569878997;-1071722633;1842759325;1870815306;1275367738;-2047480342;699437794;-2078020834;2120915280;1609487567;715455530;-1961002406;-1366381474;1214551640;1682680277;1866914062;-1438763676;1522254727;410589237;1882867230;-2066414372;335577213;-1969515802;-2079897542;1101145964;-914546306;-578950040;-399253994;-1096753521;-660660212;-1198578643;1339175923;-781551297;-1839371394;1105332893;-1928816742;-400816250;1655921312;-452260989;2002840327;447789431;319958765;-658015714;-2019202134;-1586612048;-137582258;706769011;1101838665;827045450;599553857;-2145445088;244597783;1487421271;1630555190;-344172316;-1830139429;-1553867370;-156727033;-755056810;-2131860048;-494346652;1852068823;91308896;725609566;-1111505690;-982815291;1292267944;1836226774;-810066908;-496780978;202956912;603675823;637918661;-10943404;552199869;1297990249;-1519144401;-1727998742;1493519921;-1227758025;-860568373;2118867559;1126222143;-1549971275;-1469719981;-370967157;-1094842937;2081077388;-1045858167;-179155018;-384518151;905350287;-1851803717;571620219;760498291;-480881197;-973785647;838212682;340510526;510321855;-801267485;-852016520;1774211485;39420368;537777206;2107097314;1618664461;210916571;-423959548;631482818;-1040919263;-279241335;-892903760;497369428;1334556795;-290177741;-620998078;1723791759;253979182;2098469877;2033083432;2025527244;-556275368;-1153759308;1554310973;-2109179006;1594713042;-1652347925;-1896234258;1399293819;-1212915145;264979477;2035769098;-26264659;816116738;-1472777223;-1886895409;579752040;1987550252;850378084;-592526232;228677599;-1282752773;-3264037;1636907752;554996081;10747923;1856021975;150743074;1441285143;-284865308;64061770;547700487;2007963302;-518601320;717968026;-1887063740;-1161755710;654757340;624448862;1095845326;1219653475;1112960789;540367258;1430941426;-1573264900;842324047;-1866598839;672477326;-834606497;456739053;2014938441;1820294365;-1127769538;237909957;778195458;-320898672;-493131725;374332760;1492882317;244532839;1469335464;813662131;1904048850;1828753335;1969748325;1462812563;773013089;1263710334;6222118;1806899780;-1306665146;695150693;1034369820;-410885147;-2065109159;-21981403;1688153775;-1834763828;-2034905187;-868895926;-2040902706;760295113;705437415;-801989522;-327259983;340256932;1639347777;676478214;-868392127;-2126595595;1085040460;-101711712;1181203896;-1177629723;1052562025;-385800214;-2127578499;-247860261;-210619237;-1285411717;-1501642238;-1370695642;-901640534;-1139102088;-1435816006;2062624444;733280257;-325264040;815916517;1806401640;106587238;222094010;-1348528385;297616670;-861761020;117428779;2046490308;1520601476;1774880419;2117307057;709856479;658783300;-1019651996;1857641166;-1623434894;-1466106812;1764750271;337867896;1769011978;1878580541;-337505063;55931846;657238908;1968152816;-169076117;-975001150;-619957198;463669432;-1908341507;-643594058;-2026430605;1348524010;-730896925;454931916;416148985;-1578791134;-739712940;-1725329931;204101311;-1062609662;-1691773722;860783264;946450304;1161241387;207536058;3478215;923381087;-305329130;-1353819564;48467194;-497866365;-1191262819;1442954968;-408984143;934531440;1843513070;-1086308879;585900848;-1977125474;-643228730;1005419111;430194483;1169789286;892875109;-1732318651;-897476207;416658129;2090816327;-186559977;-187909452;1699611428;132945605;1386154990;-1021089733;1553010825;1685237703;1771892687;-1665309430;-1471203233;408978895;-1985168698;-1461014828;-475885929;-149644797;184461852;-1631733780;-113049057;1929365839;-1841043271;755994780;1384891379;-572376242;-1822728640;527993133;536302677;-728200547;-1916517795;401821920;777687226;634513383;938837982;-1741204308;-712292839;-888158003;-989731250;1070351745;-997999887;-1220926516;-477621207;-668502217;432615022;341097247;-1817216444;-1580909839;1073812924;-1037427637;-421491456;-2071807233;419582815;835099779;-300811050;1008848942;-622226245;1119083448;2015783992;374250496;417956216;70961961;-1285132279;1021911943;1585993281;1118486430;-946608452;-1704284523;1344252873;908115709;2135579935;636192621;-776174384;533471998;586778067;-154978136;1359740759;1629951629;-1733015859;2121954041;2104107711;-295897115;1345244080;-1738577645;-559564224;1033955967;-1763695458;250221436;-693902564;1091788545;927707887;-712040796;1439001997;1595609215;1364606826;661845780;-755815374;-2034931863;1346096804;-2074100882;-1065691144;654888208;1007146357;778226326;1410374083;1808044267;239070962;-300943249;1387420801;914251343;580430497;1404608152;117575915;1513662704;256310634;-569005681;-1678005121;-1445134348;2053633677;2025466731;-1577911340;-1278866808;-623511374;-1672074119;45321757;1247003680;1061170196;1198754894;-104913407;2054118989;-1781862918;1530368638;-226966082;-707276305;1591871350;331461390;608113940;235882513;-2046843672;-1075932011;-1894925926;1648301914;1170547429;1665497643;-1251944432;-1796010764;-73953480;788544378;1090859788;-1128050928;-145143834;594707390;-728801566;-252193318;1890915838;-834826210;602694736;1275821290;-2078563303;-1397408457;-343458496;1558647263;      };
      mti=156;
     };
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$1$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc=;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$2$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc=;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="max_epoch";
      var_type=T_Int;
      int_val=500;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc=;
     };
     ProgVar @[1] {
      name="train_mode";
      var_type=T_HardEnum;
      int_val=1;
      hard_enum_type=Network::TrainMode;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc=;
     };
     ProgVar @[2] {
      name="epoch";
      var_type=T_Int;
      int_val=7;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc=;
     };
     ProgVar @[3] {
      name="err_stopcrit";
      var_type=T_Real;
      real_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc=;
     };
     ProgVar @[4] {
      name="rnd_seed";
      var_type=T_Object;
      object_type=RndSeed;
      object_val=.projects[0].programs.gp[0][1].objs[0]$6$;
      objs_ptr=1;
      flags=NULL_CHECK;
      desc=;
     };
     ProgVar @[5] {
      name="train_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=.projects[0].networks[0].train_time$7$;
      objs_ptr=0;
      flags=NULL_CHECK;
      desc=;
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc=;
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][1].args[0]$8$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=NULL;
	type="bool";
	name="quiet";
	expr {
	 expr="false";
	 flags=;
	 var_expr="false";
	 vars {
	 };
	 var_names{ 	 };
	 bad_vars{ 	 };
	};
       };
      };
     };
     AssignExpr @[1] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[0][1].vars[5]$9$;
      expr {
       expr="network.train_time";
       flags=;
       var_expr="$#0#$.train_time";
       vars {
       };
       var_names{ network;       };
       bad_vars{        };
      };
     };
     NetCounterInit @[2] {
      desc="initialize epoch counter ";
      flags=;
      network_var=$8$;
      local_ctr_var=.projects[0].programs.gp[0][1].vars[2]$10$;
      counter=Network::epoch;
     };
     MethodCall @[3] {
      desc="restore previous random seed (all runs produce same results); change to NewSeed to have new random numbers each time";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][1].vars[4]$11$;
      method=RndSeed::OldSeed;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[4] {
      desc="this initializes the weights every time user presses Init -- could turn this off for large nets (init is also in prog_code)";
      flags=;
      result_var=NULL;
      obj=$8$;
      method=Network::Init_Weights;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     AssignExpr @[0] {
      desc=;
      flags=;
      result_var=$9$;
      expr {
       expr="network.train_time";
       flags=;
       var_expr="$#0#$.train_time";
       vars {
       };
       var_names{ network;       };
       bad_vars{        };
      };
     };
     MethodCall @[1] {
      desc="keeps track of how long it takes to run entire training run";
      flags=;
      result_var=NULL;
      obj=$9$;
      method=TimeUsed::StartTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_used";
	expr {
	 expr="true";
	 flags=;
	 var_expr="true";
	 vars {
	 };
	 var_names{ 	 };
	 bad_vars{ 	 };
	};
       };
      };
     };
     NetCounterInit @[2] {
      desc="initialize epoch counter ";
      flags=;
      network_var=$8$;
      local_ctr_var=$10$;
      counter=Network::epoch;
     };
     UserScript @[3] {
      desc="update network's train mode to be same as ours";
      flags=;
      script {
       expr="network.train_mode = train_mode;";
       flags=NO_VAR_ERRS;
       var_expr="$#0#$.train_mode = $#1#$;";
       vars {
       };
       var_names{ network;train_mode;       };
       bad_vars{        };
      };
     };
     MethodCall @[4] {
      desc="initialize network weights: could also load pre-set weights or something else here";
      flags=;
      result_var=NULL;
      obj=$8$;
      method=Network::Init_Weights;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     WhileLoop @[5] {
      desc=;
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       ProgramCall @[0] {
	desc=;
	flags=;
	target=.projects[0].programs.gp[0][2]$12$;
	targ_ld_init="*LeabraEpoch*";
	call_init=0;
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  expr {
	   expr="network";
	   flags=;
	   var_expr="$#0#$";
	   vars {
	   };
	   var_names{ network;	   };
	   bad_vars{ 	   };
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  expr {
	   expr="input_data";
	   flags=;
	   var_expr="$#0#$";
	   vars {
	   };
	   var_names{ input_data;	   };
	   bad_vars{ 	   };
	  };
	 };
	};
       };
       NetCounterIncr @[1] {
	desc="increment the epoch counter";
	flags=;
	network_var=$8$;
	local_ctr_var=$10$;
	counter=Network::epoch;
       };
       IfBreak @[2] {
	desc="stop if errors go below stopping criterion (note: could use sse or avg_sse here too)";
	flags=;
	cond {
	 expr="network.cnt_err <= err_stopcrit";
	 flags=;
	 var_expr="$#0#$.cnt_err <= $#1#$";
	 vars {
	 };
	 var_names{ network;err_stopcrit;	 };
	 bad_vars{ 	 };
	};
       };
      };
      test {
       expr="epoch < max_epoch";
       flags=;
       var_expr="$#0#$ < $#1#$";
       vars {
       };
       var_names{ epoch;max_epoch;       };
       bad_vars{        };
      };
     };
     MethodCall @[6] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$9$;
      method=TimeUsed::EndTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
    };
   };
   Program @[2] {
    name="LeabraEpoch";
    desc="iterates over all of the items in a data table and calls LeabraTrial process on them";
    flags=;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$1$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc=;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$2$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc="table of patterns to present to the network, one row at a time";
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="data_loop_order";
      var_type=T_HardEnum;
      int_val=1;
      hard_enum_type=BasicDataLoop::Order;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc="controls the order in which events (rows of the input data datatable) are presented to the network";
     };
     ProgVar @[1] {
      name="trial";
      var_type=T_Int;
      int_val=5;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc="current trial (event) within the epoch -- increments automatically";
     };
     ProgVar @[2] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].data.gp[1][0]$13$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc="trial-level output data -- we reset it every epoch by default, so it just contains last epoch of data";
     };
     ProgVar @[3] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=.projects[0].networks[0].epoch_time$14$;
      objs_ptr=0;
      flags=NULL_CHECK;
      desc=;
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize trial counter: note also needs to do this in regular running program";
      flags=;
      network_var=.projects[0].programs.gp[0][2].args[0]$15$;
      local_ctr_var=.projects[0].programs.gp[0][2].vars[1]$16$;
      counter=Network::trial;
     };
     AssignExpr @[1] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[0][2].vars[3]$17$;
      expr {
       expr="network.epoch_time";
       flags=;
       var_expr="$#0#$.epoch_time";
       vars {
       };
       var_names{ network;       };
       bad_vars{        };
      };
     };
    };
    prog_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize trial counter";
      flags=;
      network_var=$15$;
      local_ctr_var=$16$;
      counter=Network::trial;
     };
     AssignExpr @[1] {
      desc=;
      flags=;
      result_var=$17$;
      expr {
       expr="network.epoch_time";
       flags=;
       var_expr="$#0#$.epoch_time";
       vars {
       };
       var_names{ network;       };
       bad_vars{        };
      };
     };
     MethodCall @[2] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$17$;
      method=TimeUsed::StartTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_used";
	expr {
	 expr="true";
	 flags=;
	 var_expr="true";
	 vars {
	 };
	 var_names{ 	 };
	 bad_vars{ 	 };
	};
       };
      };
     };
     MethodCall @[3] {
      desc="reset trial-level monitor data every epoch, so it reflects only the most recent epoch's worth of data (turn OFF if not wanted)";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][2].vars[2]$18$;
      method=DataTable::ResetData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     BasicDataLoop @[4] {
      desc=;
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       UserScript @[0] {
	desc="set trial to list_idx of data loop -- for dmem code this is the correct trial number";
	flags=;
	script {
	 expr="trial = list_idx; network.trial = list_idx;";
	 flags=NO_VAR_ERRS;
	 var_expr="$#0#$ = list_idx; $#1#$.trial = list_idx;";
	 vars {
	 };
	 var_names{ trial;network;	 };
	 bad_vars{ list_idx;	 };
	};
       };
       ProgramCall @[1] {
	desc=;
	flags=;
	target=.projects[0].programs.gp[0][3]$19$;
	targ_ld_init="*LeabraTrial*";
	call_init=0;
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  expr {
	   expr="network";
	   flags=;
	   var_expr="$#0#$";
	   vars {
	   };
	   var_names{ network;	   };
	   bad_vars{ 	   };
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  expr {
	   expr="input_data";
	   flags=;
	   var_expr="$#0#$";
	   vars {
	   };
	   var_names{ input_data;	   };
	   bad_vars{ 	   };
	  };
	 };
	};
       };
       IfElse @[2] {
	desc="test if it is time to update the weight values from delta weights (dWt) computed over trials";
	flags=;
	cond {
	 expr="network.Compute_Weights_Test(trial+1)";
	 flags=;
	 var_expr="$#0#$.Compute_Weights_Test($#1#$+1)";
	 vars {
	 };
	 var_names{ network;trial;	 };
	 bad_vars{ 	 };
	};
	true_code {
	 name=;
	 el_typ=MethodCall;
	 el_def=0;
	 MethodCall @[0] {
	  desc=;
	  flags=;
	  result_var=NULL;
	  obj=$15$;
	  method=Network::Compute_Weights;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	  };
	 };
	};
	false_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	};
       };
      };
      data_var=.projects[0].programs.gp[0][2].args[1]$20$;
      order_var=.projects[0].programs.gp[0][2].vars[0]$21$;
      order=PERMUTED;
      item_idx_list{ 4;0;1;5;2;3;      };
      dmem_nprocs=1;
      dmem_this_proc=0;
     };
     IfElse @[5] {
      desc="if full batch mode, update only at end of epoch";
      flags=;
      cond {
       expr="network.wt_update == Network::BATCH";
       flags=;
       var_expr="$#0#$.wt_update == Network::BATCH";
       vars {
       };
       var_names{ network;       };
       bad_vars{        };
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc=;
	flags=;
	result_var=NULL;
	obj=$15$;
	method=Network::Compute_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
      };
     };
     MethodCall @[6] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$15$;
      method=LeabraNetwork::Compute_EpochStats;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[7] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$17$;
      method=TimeUsed::EndTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     ProgramCall @[8] {
      desc=;
      flags=;
      target=.projects[0].programs.gp[0][8]$22$;
      targ_ld_init="*LeabraEpochMonitor*";
      call_init=0;
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	expr {
	 expr="network";
	 flags=;
	 var_expr="$#0#$";
	 vars {
	 };
	 var_names{ network;	 };
	 bad_vars{ 	 };
	};
       };
      };
     };
    };
   };
   Program @[3] {
    name="LeabraTrial";
    desc="Leabra processing of a single input/toutput event or external information: typically runs a minus and a plus phase, then learns (unless testing)";
    flags=;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$1$;
      objs_ptr=0;
      flags=NULL_CHECK;
      desc=;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$2$;
      objs_ptr=0;
      flags=NULL_CHECK;
      desc=;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="phase_no";
      var_type=T_Int;
      int_val=2;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc=;
     };
     ProgVar @[1] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc=;
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc=;
      flags=;
      network_var=.projects[0].programs.gp[0][3].args[0]$23$;
      local_ctr_var=.projects[0].programs.gp[0][3].vars[0]$24$;
      counter=LeabraNetwork::phase_no;
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     NetCounterInit @[0] {
      desc=;
      flags=;
      network_var=$23$;
      local_ctr_var=$24$;
      counter=LeabraNetwork::phase_no;
     };
     MethodCall @[1] {
      desc="initializes various counters at start of trial";
      flags=;
      result_var=NULL;
      obj=$23$;
      method=LeabraNetwork::Trial_Init;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     WhileLoop @[2] {
      desc=;
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       ProgramCall @[0] {
	desc=;
	flags=;
	target=$0$;
	targ_ld_init="*LeabraSettle*";
	call_init=0;
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  expr {
	   expr="network";
	   flags=;
	   var_expr="$#0#$";
	   vars {
	   };
	   var_names{ network;	   };
	   bad_vars{ 	   };
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  expr {
	   expr="input_data";
	   flags=;
	   var_expr="$#0#$";
	   vars {
	   };
	   var_names{ input_data;	   };
	   bad_vars{ 	   };
	  };
	 };
	};
       };
       NetCounterIncr @[1] {
	desc=;
	flags=;
	network_var=$23$;
	local_ctr_var=$24$;
	counter=LeabraNetwork::phase_no;
       };
       MethodCall @[2] {
	desc="increments phase_no and other phase state";
	flags=;
	result_var=NULL;
	obj=$23$;
	method=LeabraNetwork::Trial_UpdatePhase;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      test {
       expr="phase_no < network.phase_max";
       flags=;
       var_expr="$#0#$ < $#1#$.phase_max";
       vars {
       };
       var_names{ phase_no;network;       };
       bad_vars{        };
      };
     };
     MethodCall @[3] {
      desc="does Compute_dWt etc";
      flags=;
      result_var=NULL;
      obj=$23$;
      method=LeabraNetwork::Trial_Final;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     ProgramCall @[4] {
      desc="monitor data on a trial level";
      flags=;
      target=.projects[0].programs.gp[0][7]$25$;
      targ_ld_init="*LeabraTrialMonitor*";
      call_init=0;
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	expr {
	 expr="network";
	 flags=;
	 var_expr="$#0#$";
	 vars {
	 };
	 var_names{ network;	 };
	 bad_vars{ 	 };
	};
       };
      };
     };
     NetUpdateView @[5] {
      desc=;
      flags=;
      network_var=$23$;
      update_var=.projects[0].programs.gp[0][3].vars[1]$26$;
     };
    };
   };
   Program @[4] {
    name="LeabraSettle";
    desc="iterates over cycles of updating until network has settled into a stable state, or output activations have exceeded a threshold";
    flags=;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$1$;
      objs_ptr=0;
      flags=NULL_CHECK;
      desc=;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$2$;
      objs_ptr=0;
      flags=NULL_CHECK;
      desc=;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="cycle";
      var_type=T_Int;
      int_val=15;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc=;
     };
     ProgVar @[1] {
      name="min_cycles";
      var_type=T_Int;
      int_val=15;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc=;
     };
     ProgVar @[2] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc=;
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc=;
      flags=;
      network_var=.projects[0].programs.gp[0][4].args[0]$27$;
      local_ctr_var=.projects[0].programs.gp[0][4].vars[0]$28$;
      counter=Network::cycle;
     };
    };
    prog_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc=;
      flags=;
      network_var=$27$;
      local_ctr_var=$28$;
      counter=Network::cycle;
     };
     MethodCall @[1] {
      desc="resets input data, before getting new external inputs data from apply inputs call";
      flags=;
      result_var=NULL;
      obj=$27$;
      method=Network::Init_InputData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     ProgramCall @[2] {
      desc="this program can be extended to do arbitrary things to generate data and apply it to network layers";
      flags=;
      target=.projects[0].programs.gp[0][6]$29$;
      targ_ld_init="*ApplyInputs*";
      call_init=0;
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=LeabraNetwork;
	type="LeabraNetwork*";
	name="network";
	expr {
	 expr="network";
	 flags=;
	 var_expr="$#0#$";
	 vars {
	 };
	 var_names{ network;	 };
	 bad_vars{ 	 };
	};
       };
       ProgArg @[1] {
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	expr {
	 expr="input_data";
	 flags=;
	 var_expr="$#0#$";
	 vars {
	 };
	 var_names{ input_data;	 };
	 bad_vars{ 	 };
	};
       };
      };
     };
     MethodCall @[3] {
      desc="initializes various counters at start of settling";
      flags=;
      result_var=NULL;
      obj=$27$;
      method=LeabraNetwork::Settle_Init;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     UserScript @[4] {
      desc="get min cycles";
      flags=;
      script {
       expr="if(network.phase_no <= 1) min_cycles = network.min_cycles;
else min_cycles = network.min_cycles_phase2;

";
       flags=NO_VAR_ERRS;
       var_expr="if($#0#$.phase_no <= 1) $#1#$ = $#0#$.min_cycles;
else $#1#$ = $#0#$.min_cycles_phase2;


";
       vars {
       };
       var_names{ network;min_cycles;       };
       bad_vars{ if;else;       };
      };
     };
     WhileLoop @[5] {
      desc=;
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       ProgramCall @[0] {
	desc=;
	flags=;
	target=.projects[0].programs.gp[0][5]$30$;
	targ_ld_init="*LeabraCycle*";
	call_init=0;
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  expr {
	   expr="network";
	   flags=;
	   var_expr="$#0#$";
	   vars {
	   };
	   var_names{ network;	   };
	   bad_vars{ 	   };
	  };
	 };
	};
       };
       NetCounterIncr @[1] {
	desc=;
	flags=;
	network_var=$27$;
	local_ctr_var=$28$;
	counter=Network::cycle;
       };
       IfContinue @[2] {
	desc="avoid subsequent stopping criteria";
	flags=;
	cond {
	 expr="cycle < min_cycles";
	 flags=;
	 var_expr="$#0#$ < $#1#$";
	 vars {
	 };
	 var_names{ cycle;min_cycles;	 };
	 bad_vars{ 	 };
	};
       };
       IfBreak @[3] {
	desc="stopping criterion for settling";
	flags=;
	cond {
	 expr="(network.maxda < network.maxda_stopcrit) ||
 (network.trg_max_act > network.trg_max_act_stopcrit)";
	 flags=;
	 var_expr="($#0#$.maxda < $#0#$.maxda_stopcrit) ||
 ($#0#$.trg_max_act > $#0#$.trg_max_act_stopcrit)";
	 vars {
	 };
	 var_names{ network;	 };
	 bad_vars{ 	 };
	};
       };
      };
      test {
       expr="cycle < network.cycle_max";
       flags=;
       var_expr="$#0#$ < $#1#$.cycle_max";
       vars {
       };
       var_names{ cycle;network;       };
       bad_vars{        };
      };
     };
     MethodCall @[6] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$27$;
      method=LeabraNetwork::Settle_Final;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     IfElse @[7] {
      desc="only run sse in minus phase";
      flags=;
      cond {
       expr="network.phase == LeabraNetwork::MINUS_PHASE";
       flags=;
       var_expr="$#0#$.phase == LeabraNetwork::MINUS_PHASE";
       vars {
       };
       var_names{ network;       };
       bad_vars{        };
      };
      true_code {
       name=;
       el_typ=MethodCall;
       el_def=0;
       MethodCall @[0] {
	desc=;
	flags=;
	result_var=NULL;
	obj=$27$;
	method=LeabraNetwork::Compute_TrialStats;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
      };
     };
     IfElse @[8] {
      desc="this stat must be called in plus phase when reward information is avail";
      flags=;
      cond {
       expr="network.phase_no == 1";
       flags=;
       var_expr="$#0#$.phase_no == 1";
       vars {
       };
       var_names{ network;       };
       bad_vars{        };
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc=;
	flags=;
	result_var=NULL;
	obj=$27$;
	method=LeabraNetwork::Compute_ExtRew;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
      };
     };
     NetUpdateView @[9] {
      desc=;
      flags=;
      network_var=$27$;
      update_var=.projects[0].programs.gp[0][4].vars[2]$31$;
     };
    };
   };
   Program @[5] {
    name="LeabraCycle";
    desc="runs one cycle of leabra processing (updating net inputs and activations)";
    flags=;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$1$;
      objs_ptr=0;
      flags=NULL_CHECK;
      desc=;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc=;
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="this does all the standard leabra processing for one cycle of activation updating";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][5].args[0]$32$;
      method=LeabraNetwork::Cycle_Run;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     NetUpdateView @[1] {
      desc=;
      flags=;
      network_var=$32$;
      update_var=.projects[0].programs.gp[0][5].vars[0]$33$;
     };
    };
   };
   Program @[6] {
    name="ApplyInputs";
    desc="apply the current input data to the network as external input and target values";
    flags=NO_USER_RUN;
    objs {
     name=;
     el_typ=LayerWriter;
     el_def=0;
     LayerWriter @[0] {
      name="LayerWriter_0";
      data=$2$;
      network=$1$;
      layer_data {
       name=;
       el_typ=LayerWriterEl;
       el_def=0;
       LayerWriterEl @[0] {
	chan_name="Input";
	net_target=LAYER;
	layer_name="Input";
	offset {x=0: y=0: };
	use_layer_type=1;
	ext_flags=EXT;
	noise {type=NONE: mean=0: var=0.5: par=1: };
	value_names{ ;;;;;;;;;;;;;;;;;;;;;;;;;	};
       };
       LayerWriterEl @[1] {
	chan_name="Output";
	net_target=LAYER;
	layer_name="Output";
	offset {x=0: y=0: };
	use_layer_type=1;
	ext_flags=TARG;
	noise {type=NONE: mean=0: var=0.5: par=1: };
	value_names{ ;;;;;;;;;;;;;;;;;;;;;;;;;	};
       };
       LayerWriterEl @[2] {
	chan_name="Name";
	net_target=TRIAL_NAME;
	layer_name="Name";
	offset {x=0: y=0: };
	use_layer_type=1;
	ext_flags=;
	noise {type=NONE: mean=0: var=0.5: par=1: };
	value_names{ 	};
       };
      };
     };
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$1$;
      objs_ptr=0;
      flags=NULL_CHECK;
      desc=;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$2$;
      objs_ptr=0;
      flags=NULL_CHECK;
      desc=;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="LayerWriter_0";
      var_type=T_Object;
      object_type=LayerWriter;
      object_val=.projects[0].programs.gp[0][6].objs[0]$34$;
      objs_ptr=1;
      flags=CTRL_PANEL|NULL_CHECK;
      desc=;
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc=;
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][6].vars[0]$35$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataBlock_ptr;
	type="DataBlock*";
	name="db";
	expr {
	 expr="input_data";
	 flags=;
	 var_expr="$#0#$";
	 vars {
	 };
	 var_names{ input_data;	 };
	 bad_vars{ 	 };
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	expr {
	 expr="network";
	 flags=;
	 var_expr="$#0#$";
	 vars {
	 };
	 var_names{ network;	 };
	 bad_vars{ 	 };
	};
       };
      };
     };
     MethodCall @[1] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$35$;
      method=taList_impl::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	expr {
	 expr="false";
	 flags=;
	 var_expr="false";
	 vars {
	 };
	 var_names{ 	 };
	 bad_vars{ 	 };
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="apply inputs to the network!  layer writer has all the key specs";
      flags=;
      result_var=NULL;
      obj=$35$;
      method=LayerWriter::ApplyInputData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
    };
   };
   Program @[7] {
    name="LeabraTrialMonitor";
    desc="monitor trial-level data from the network";
    flags=;
    objs {
     name=;
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @[0] {
      name="trial_netmon";
      items {
       name=;
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @[0] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$1$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	pre_proc_1 {opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[1] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$1$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	pre_proc_1 {opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[2] {
	name="trial";
	computed=0;
	object_type=LeabraNetwork;
	object=$1$;
	variable="trial";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	pre_proc_1 {opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[3] {
	name="trial_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$1$;
	variable="trial_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	pre_proc_1 {opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[4] {
	name="group_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$1$;
	variable="group_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	pre_proc_1 {opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[5] {
	name="phase_no";
	computed=0;
	object_type=LeabraNetwork;
	object=$1$;
	variable="phase_no";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	pre_proc_1 {opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[6] {
	name="cycle";
	computed=0;
	object_type=LeabraNetwork;
	object=$1$;
	variable="minus_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	pre_proc_1 {opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[7] {
	name="sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$1$;
	variable="sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	pre_proc_1 {opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[8] {
	name="ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$1$;
	variable="ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	pre_proc_1 {opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[9] {
	name="Output_act_m";
	computed=0;
	object_type=LeabraLayer;
	object=.projects[0].networks[0].layers[2]$36$;
	variable="act_m";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	pre_proc_1 {opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$1$;
      data=$13$;
      rmv_orphan_cols=1;
     };
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$1$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc=;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$13$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc=;
     };
     ProgVar @[1] {
      name="trial_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects[0].programs.gp[0][7].objs[0]$37$;
      objs_ptr=1;
      flags=CTRL_PANEL|NULL_CHECK;
      desc=;
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc=;
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][7].vars[1]$38$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	expr {
	 expr="trial_mon_data";
	 flags=;
	 var_expr="$#0#$";
	 vars {
	 };
	 var_names{ trial_mon_data;	 };
	 bad_vars{ 	 };
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	expr {
	 expr="network";
	 flags=;
	 var_expr="$#0#$";
	 vars {
	 };
	 var_names{ network;	 };
	 bad_vars{ 	 };
	};
       };
      };
     };
     MethodCall @[1] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$38$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	expr {
	 expr="false";
	 flags=;
	 var_expr="false";
	 vars {
	 };
	 var_names{ 	 };
	 bad_vars{ 	 };
	};
       };
      };
     };
     MethodCall @[2] {
      desc="update the monitor items and data schema";
      flags=;
      result_var=NULL;
      obj=$38$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	expr {
	 expr="true";
	 flags=;
	 var_expr="true";
	 vars {
	 };
	 var_names{ 	 };
	 bad_vars{ 	 };
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="add a new blank row to the data";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][7].vars[0]$39$;
      method=DataTable::AddBlankRow;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[1] {
      desc="get the new monitor data.";
      flags=;
      result_var=NULL;
      obj=$38$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[2] {
      desc="update after writing new data to monitor data table";
      flags=;
      result_var=NULL;
      obj=$39$;
      method=DataBlock::WriteClose;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[3] {
      desc="only functional for dmem projects: synchronizes trial data across processes";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][7].args[0]$40$;
      method=Network::DMem_ShareTrialData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	expr {
	 expr="trial_mon_data";
	 flags=;
	 var_expr="$#0#$";
	 vars {
	 };
	 var_names{ trial_mon_data;	 };
	 bad_vars{ 	 };
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="n_rows";
	expr {
	 expr="1";
	 flags=;
	 var_expr="1";
	 vars {
	 };
	 var_names{ 	 };
	 bad_vars{ 	 };
	};
       };
      };
     };
    };
   };
   Program @[8] {
    name="LeabraEpochMonitor";
    desc="monitor epoch-level data from the network";
    flags=;
    objs {
     name=;
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @[0] {
      name="epoch_netmon";
      items {
       name=;
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @[0] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$1$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	pre_proc_1 {opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[1] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$1$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	pre_proc_1 {opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[2] {
	name="avg_sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$1$;
	variable="avg_sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	pre_proc_1 {opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[3] {
	name="cnt_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$1$;
	variable="cnt_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	pre_proc_1 {opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[4] {
	name="avg_ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$1$;
	variable="avg_ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	pre_proc_1 {opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[5] {
	name="avg_cycles";
	computed=0;
	object_type=LeabraNetwork;
	object=$1$;
	variable="avg_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	pre_proc_1 {opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[6] {
	name="epoch_time_tot";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	pre_proc_1 {opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[7] {
	name="epoch_time_usr";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	pre_proc_1 {opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[8] {
	name="Hidden_Fm_Input_r_wt";
	computed=0;
	object_type=LeabraPrjn;
	object=.projects[0].networks[0].layers[1].projections[0]$41$;
	variable="r.wt";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	pre_proc_1 {opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$1$;
      data=.projects[0].data.gp[1][1]$42$;
      rmv_orphan_cols=1;
     };
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$1$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc=;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="epoch_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$42$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc=;
     };
     ProgVar @[1] {
      name="epoch_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects[0].programs.gp[0][8].objs[0]$43$;
      objs_ptr=1;
      flags=CTRL_PANEL|NULL_CHECK;
      desc=;
     };
     ProgVar @[2] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=$14$;
      objs_ptr=0;
      flags=NULL_CHECK;
      desc=;
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=AssignExpr;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     AssignExpr @[0] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[0][8].vars[2]$44$;
      expr {
       expr="network.epoch_time";
       flags=;
       var_expr="$#0#$.epoch_time";
       vars {
       };
       var_names{ network;       };
       bad_vars{        };
      };
     };
     MethodCall @[1] {
      desc=;
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][8].vars[1]$45$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	expr {
	 expr="epoch_mon_data";
	 flags=;
	 var_expr="$#0#$";
	 vars {
	 };
	 var_names{ epoch_mon_data;	 };
	 bad_vars{ 	 };
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	expr {
	 expr="network";
	 flags=;
	 var_expr="$#0#$";
	 vars {
	 };
	 var_names{ network;	 };
	 bad_vars{ 	 };
	};
       };
      };
     };
     MethodCall @[2] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$45$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	expr {
	 expr="false";
	 flags=;
	 var_expr="false";
	 vars {
	 };
	 var_names{ 	 };
	 bad_vars{ 	 };
	};
       };
      };
     };
     MethodCall @[3] {
      desc="update the monitor items and data schema";
      flags=;
      result_var=NULL;
      obj=$45$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	expr {
	 expr="true";
	 flags=;
	 var_expr="true";
	 vars {
	 };
	 var_names{ 	 };
	 bad_vars{ 	 };
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="add a new blank row to the data";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][8].vars[0]$46$;
      method=DataTable::AddBlankRow;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[1] {
      desc="get the new monitor data.";
      flags=;
      result_var=NULL;
      obj=$45$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     AssignExpr @[2] {
      desc=;
      flags=;
      result_var=$44$;
      expr {
       expr="network.epoch_time";
       flags=;
       var_expr="$#0#$.epoch_time";
       vars {
       };
       var_names{ network;       };
       bad_vars{        };
      };
     };
     UserScript @[3] {
      desc="set the timing information from the epoch timer";
      flags=;
      script {
       expr="epoch_mon_data.SetDataByName(epoch_timer.used.GetTotSecs(), \"epoch_time_tot\");
epoch_mon_data.SetDataByName(epoch_timer.used.GetUsrSecs(), \"epoch_time_usr\");

";
       flags=NO_VAR_ERRS;
       var_expr="$#0#$.SetDataByName($#1#$.used.GetTotSecs(), \"epoch_time_tot\");
epoch_mon_data.SetDataByName(epoch_timer.used.GetUsrSecs(), \"epoch_time_usr\");

";
       vars {
       };
       var_names{ epoch_mon_data;epoch_timer;       };
       bad_vars{        };
      };
     };
     MethodCall @[4] {
      desc="update after writing new data to monitor data table";
      flags=;
      result_var=NULL;
      obj=$46$;
      method=DataBlock::WriteClose;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
    };
   };
   Program @[9] {
    name="SaveWeights";
    desc="save network's current weight values to file using WriteWeights function, with file name based on project name + batch + epoch values";
    flags=;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$1$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc=;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="tag";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc="user-provided tag (startup script will set this!)";
     };
     ProgVar @[1] {
      name="wts_subdir";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc="user-provided subdirectory to save weights in";
     };
     ProgVar @[2] {
      name="fname";
      var_type=T_String;
      string_val="/Users/oreilly/pdp4.0/trunk/test/leabra_ra.03_0036.wts.gz";
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK;
      desc=;
     };
     ProgVar @[3] {
      name="epoch_str";
      var_type=T_String;
      string_val="0036";
      objs_ptr=0;
      flags=NULL_CHECK;
      desc="string rep of epoch with leading zeros";
     };
     ProgVar @[4] {
      name="batch_str";
      var_type=T_String;
      string_val="03";
      objs_ptr=0;
      flags=NULL_CHECK;
      desc="string rep of batch with leading zeros";
     };
     ProgVar @[5] {
      name="final_tag";
      var_type=T_String;
      string_val=".03_0036";
      objs_ptr=0;
      flags=NULL_CHECK;
      desc="batch + epoch";
     };
    };
    functions {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     IfElse @[0] {
      desc="don't save if not first dmem process";
      flags=;
      cond {
       expr="taMisc::dmem_proc > 0";
       flags=;
       var_expr="taMisc::dmem_proc > 0";
       vars {
       };
       var_names{        };
       bad_vars{        };
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       UserScript @[0] {
	desc=;
	flags=;
	script {
	 expr="return;";
	 flags=NO_VAR_ERRS;
	 var_expr="return;";
	 vars {
	 };
	 var_names{ 	 };
	 bad_vars{ return;	 };
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
      };
     };
     MiscCall @[1] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[0][9].vars[4]$47$;
      object_type=taMisc;
      method=taMisc::LeadingZeros;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=int;
	type="int";
	name="num";
	expr {
	 expr="network.batch";
	 flags=;
	 var_expr="$#0#$.batch";
	 vars {
	 };
	 var_names{ network;	 };
	 bad_vars{ 	 };
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="len";
	expr {
	 expr="2";
	 flags=;
	 var_expr="2";
	 vars {
	 };
	 var_names{ 	 };
	 bad_vars{ 	 };
	};
       };
      };
     };
     MiscCall @[2] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[0][9].vars[3]$48$;
      object_type=taMisc;
      method=taMisc::LeadingZeros;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=int;
	type="int";
	name="num";
	expr {
	 expr="network.epoch";
	 flags=;
	 var_expr="$#0#$.epoch";
	 vars {
	 };
	 var_names{ network;	 };
	 bad_vars{ 	 };
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="len";
	expr {
	 expr="4";
	 flags=;
	 var_expr="4";
	 vars {
	 };
	 var_names{ 	 };
	 bad_vars{ 	 };
	};
       };
      };
     };
     AssignExpr @[3] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[0][9].vars[5]$49$;
      expr {
       expr="tag + \".\" + batch_str + \"_\" + epoch_str";
       flags=;
       var_expr="$#0#$ + \".\" + batch_str + \"_\" + epoch_str";
       vars {
       };
       var_names{ tag;       };
       bad_vars{        };
      };
     };
     MethodCall @[4] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[0][9].vars[2]$50$;
      obj=.projects[0].programs.gp[0][9].args[0]$51$;
      method=taBase::GetFileNameFmProject;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=NULL;
	type="const taString&";
	name="ext";
	expr {
	 expr="\".wts.gz\"";
	 flags=;
	 var_expr="\".wts.gz\"";
	 vars {
	 };
	 var_names{ 	 };
	 bad_vars{ 	 };
	};
       };
       ProgArg @[1] {
	arg_type=NULL;
	type="const taString&";
	name="tag";
	expr {
	 expr="final_tag";
	 flags=;
	 var_expr="$#0#$";
	 vars {
	 };
	 var_names{ final_tag;	 };
	 bad_vars{ 	 };
	};
       };
       ProgArg @[2] {
	arg_type=NULL;
	type="const taString&";
	name="subdir";
	expr {
	 expr="wts_subdir";
	 flags=;
	 var_expr="$#0#$";
	 vars {
	 };
	 var_names{ wts_subdir;	 };
	 bad_vars{ 	 };
	};
       };
       ProgArg @[3] {
	arg_type=NULL;
	type="bool";
	name="dmem_proc_no";
	expr {
	 expr="false";
	 flags=;
	 var_expr="false";
	 vars {
	 };
	 var_names{ 	 };
	 bad_vars{ 	 };
	};
       };
      };
     };
     MethodCall @[5] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$51$;
      method=Network::SaveWeights;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=NULL;
	type="const taString&";
	name="fname";
	expr {
	 expr="fname";
	 flags=;
	 var_expr="$#0#$";
	 vars {
	 };
	 var_names{ fname;	 };
	 bad_vars{ 	 };
	};
       };
       ProgArg @[1] {
	arg_type=NULL;
	type="Network::WtSaveFormat";
	name="fmt";
	expr {
	 expr="Network::NET_FMT";
	 flags=;
	 var_expr="Network::NET_FMT";
	 vars {
	 };
	 var_names{ 	 };
	 bad_vars{ 	 };
	};
       };
      };
     };
    };
   };
  };
 };
 viewers {
  name=;
  el_typ=TopLevelViewer;
  el_def=0;
  MainWindowViewer @[0] {
   m_data=.projects[0]$52$;
   name="DefaultProjectBrowser";
   visible=1;
   m_is_root=0;
   m_is_proj_viewer=1;
   toolbars {
    name=;
    el_typ=ToolBar;
    el_def=0;
    ToolBar @[0] {
     m_data=NULL;
     name="Application";
     visible=0;
     lft=0;
     top=0;
     o=Horizontal;
    };
   };
   frames {
    name=;
    el_typ=FrameViewer;
    el_def=0;
    tabBrowseViewer @[0] {
     m_data=NULL;
     name="Tree";
     visible=1;
     root_typ=LeabraProject;
     root_md=NULL;
     m_root=$52$;
    };
    PanelViewer @[1] {
     m_data=NULL;
     name="Panels";
     visible=1;
    };
    T3DataViewer @[2] {
     m_data=NULL;
     name="DefaultViewer";
     visible=1;
     frames {
      name=;
      el_typ=T3DataViewFrame;
      el_def=0;
      T3DataViewFrame @[0] {
       m_data=NULL;
       name="DefaultFrame";
       visible=1;
       root_view {
	m_data=NULL;
	m_transform=NULL;
	children {
	 name=;
	 el_typ=T3DataView;
	 el_def=0;
	 NetView @[0] {
	  m_data=$1$;
FloatTransform @*(.m_transform) {scale={x=0.6753985: y=0.6753985: z=0.6753985: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  children {
	   name=;
	   el_typ=T3DataView;
	   el_def=0;
	   LayerView @[0] {
	    m_data=.projects[0].networks[0].layers[0]$53$;
FloatTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0.1666667: z=0: }: };
	   };
	   LayerView @[1] {
	    m_data=.projects[0].networks[0].layers[1]$54$;
FloatTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0.5: z=0: }: };
	   };
	   LayerView @[2] {
	    m_data=$36$;
FloatTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0.8333333: z=0: }: };
	   };
	   PrjnView @[3] {
	    m_data=$41$;
FloatTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0.5: y=0.1666667: z=-1: }: };
	    children {
	     name=;
	     el_typ=T3DataView;
	     el_def=0;
	    };
	   };
	   PrjnView @[4] {
	    m_data=.projects[0].networks[0].layers[1].projections[1]$55$;
FloatTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0.5: y=0.8333333: z=-1: }: };
	    children {
	     name=;
	     el_typ=T3DataView;
	     el_def=0;
	    };
	   };
	   PrjnView @[5] {
	    m_data=.projects[0].networks[0].layers[2].projections[0]$56$;
FloatTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0.5: y=0.5: z=-1: }: };
	    children {
	     name=;
	     el_typ=T3DataView;
	     el_def=0;
	    };
	   };
	  };
	  scale {
	   name=;
	   chunks=133;
	   min=-1;
	   max=1;
	   range=1;
	   zero=0;
	   spec=.colorspecs[0]$57$;
	   auto_scale=0;
	  };
	  scale_ranges {
	   name=;
	   el_typ=ScaleRange;
	   el_def=0;
	   ScaleRange @[0] {
	    name="act";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[1] {
	    name="targ";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	  };
	  display=1;
	  ordered_uvg_list{ 8;	  };
	  unit_disp_mode=UDM_BLOCK;
	  unit_text_disp=UTD_NONE;
	  max_size {x=5: y=5: z=3: };
	  font_sizes {
	   net_name=0.05;
	   net_vals=0.05;
	   layer=0.04;
	   layer_vals=0.03;
	   prjn=0.01;
	   unit=0.02;
	  };
	  view_params {
	   xy_square=0;
	   unit_spacing=0.05;
	   prjn_width=0.001;
	   prjn_trans=0.5;
	   lay_trans=0.5;
	   unit_trans=0.6;
	  };
	  network_pos {x=0: y=0: z=0: };
	  network_scale {x=0.6753985: y=0.6753985: z=0.6753985: };
	  network_orient {x=0: y=0: z=1: rot=0: };
	 };
	 GridTableView @[1] {
	  m_data=$13$;
FloatTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=-0.9999813: y=-0.0055778: z=0.00252403: rot=0.8499027: }: translate={x=0.8457018: y=-0.06940984: z=0.08394016: }: };
	  children {
	   name=;
	   el_typ=GridColView;
	   el_def=0;
	   GridColView @[0] {
	    m_data=.projects[0].data.gp[1][0].data[0]$58$;
	    m_transform=NULL;
	    name="batch";
	    visible=1;
	    sticky=0;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[1] {
	    m_data=.projects[0].data.gp[1][0].data[1]$59$;
	    m_transform=NULL;
	    name="epoch";
	    visible=1;
	    sticky=0;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[2] {
	    m_data=.projects[0].data.gp[1][0].data[2]$60$;
	    m_transform=NULL;
	    name="trial";
	    visible=1;
	    sticky=0;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[3] {
	    m_data=.projects[0].data.gp[1][0].data[3]$61$;
	    m_transform=NULL;
	    name="trial_name";
	    visible=1;
	    sticky=0;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[4] {
	    m_data=.projects[0].data.gp[1][0].data[4]$62$;
	    m_transform=NULL;
	    name="group_name";
	    visible=0;
	    sticky=0;
	    text_width=16;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[5] {
	    m_data=.projects[0].data.gp[1][0].data[5]$63$;
	    m_transform=NULL;
	    name="phase_no";
	    visible=0;
	    sticky=0;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[6] {
	    m_data=.projects[0].data.gp[1][0].data[6]$64$;
	    m_transform=NULL;
	    name="minus_cycles";
	    visible=1;
	    sticky=0;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[7] {
	    m_data=.projects[0].data.gp[1][0].data[7]$65$;
	    m_transform=NULL;
	    name="sse";
	    visible=1;
	    sticky=0;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[8] {
	    m_data=.projects[0].data.gp[1][0].data[8]$66$;
	    m_transform=NULL;
	    name="ext_rew";
	    visible=0;
	    sticky=0;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[9] {
	    m_data=.projects[0].data.gp[1][0].data[9]$67$;
	    m_transform=NULL;
	    name="Output_act_m";
	    visible=1;
	    sticky=0;
	    text_width=5;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	  };
	  view_rows=6;
	  view_range {min=0: max=5: };
	  display_on=1;
	  manip_ctrl_on=1;
	  table_pos {x=0.8457018: y=-0.06940984: z=0.08394016: };
	  table_scale {x=1: y=1: z=1: };
	  table_orient {x=-0.9999813: y=-0.0055778: z=0.00252403: rot=0.8499027: };
	  col_n=5;
	  col_range {min=2: max=6: };
	  width=1;
	  grid_on=1;
	  header_on=1;
	  row_num_on=0;
	  two_d_font=0;
	  two_d_font_scale=350;
	  mat_val_text=0;
	  colorscale {
	   name=;
	   chunks=133;
	   min=-1;
	   max=1;
	   range=1;
	   zero=0;
	   spec=$57$;
	   auto_scale=0;
	  };
	  grid_margin=0.01;
	  grid_line_size=0.005;
	  row_num_width=4;
	  mat_block_spc=0.1;
	  mat_block_height=0.2;
	  mat_rot=45;
	  mat_trans=0.6;
	  mat_size_range {min=4: max=16: };
	  text_size_range {min=0.05: max=0.1: };
	 };
	 GridTableView @[2] {
	  m_data=$42$;
FloatTransform @*(.m_transform) {scale={x=0.8087503: y=0.80875: z=0.80875: }: rotate={x=-0.9999999: y=0: z=0: rot=0.4634896: }: translate={x=0.9402148: y=0.7504291: z=-0.673673: }: };
	  children {
	   name=;
	   el_typ=GridColView;
	   el_def=0;
	   GridColView @[0] {
	    m_data=.projects[0].data.gp[1][1].data[0]$68$;
	    m_transform=NULL;
	    name="batch";
	    visible=1;
	    sticky=0;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[1] {
	    m_data=.projects[0].data.gp[1][1].data[1]$69$;
	    m_transform=NULL;
	    name="epoch";
	    visible=1;
	    sticky=0;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[2] {
	    m_data=.projects[0].data.gp[1][1].data[2]$70$;
	    m_transform=NULL;
	    name="avg_sse";
	    visible=1;
	    sticky=0;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[3] {
	    m_data=.projects[0].data.gp[1][1].data[3]$71$;
	    m_transform=NULL;
	    name="cnt_err";
	    visible=1;
	    sticky=0;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[4] {
	    m_data=.projects[0].data.gp[1][1].data[4]$72$;
	    m_transform=NULL;
	    name="avg_ext_rew";
	    visible=0;
	    sticky=0;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[5] {
	    m_data=.projects[0].data.gp[1][1].data[5]$73$;
	    m_transform=NULL;
	    name="avg_cycles";
	    visible=1;
	    sticky=0;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[6] {
	    m_data=.projects[0].data.gp[1][1].data[6]$74$;
	    m_transform=NULL;
	    name="epoch_time_tot";
	    visible=1;
	    sticky=0;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[7] {
	    m_data=.projects[0].data.gp[1][1].data[7]$75$;
	    m_transform=NULL;
	    name="epoch_time_usr";
	    visible=1;
	    sticky=0;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[8] {
	    m_data=.projects[0].data.gp[1][1].data[8]$76$;
	    m_transform=NULL;
	    name="Hidden_Fm_Input_r_wt";
	    visible=1;
	    sticky=0;
	    text_width=30;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	  };
	  view_rows=1;
	  view_range {min=6: max=6: };
	  display_on=1;
	  manip_ctrl_on=1;
	  table_pos {x=0.9402148: y=0.7504291: z=-0.673673: };
	  table_scale {x=0.8087503: y=0.80875: z=0.80875: };
	  table_orient {x=-0.9999999: y=0: z=0: rot=0.4634896: };
	  col_n=1;
	  col_range {min=7: max=7: };
	  width=1;
	  grid_on=1;
	  header_on=1;
	  row_num_on=0;
	  two_d_font=0;
	  two_d_font_scale=350;
	  mat_val_text=0;
	  colorscale {
	   name=;
	   chunks=133;
	   min=-1;
	   max=1;
	   range=1;
	   zero=0;
	   spec=$57$;
	   auto_scale=0;
	  };
	  grid_margin=0.01;
	  grid_line_size=0.005;
	  row_num_width=4;
	  mat_block_spc=0.1;
	  mat_block_height=0.2;
	  mat_rot=0;
	  mat_trans=0.6;
	  mat_size_range {min=4: max=16: };
	  text_size_range {min=0.02: max=0.05: };
	 };
	 GraphTableView @[3] {
	  m_data=$42$;
FloatTransform @*(.m_transform) {scale={x=0.4119503: y=0.4119501: z=0.4119501: }: rotate={x=-1.000219: y=0: z=0: rot=0.005980202: }: translate={x=0.2203933: y=0.9595687: z=0.002735832: }: };
	  children {
	   name=;
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @[0] {
	    m_data=$68$;
	    m_transform=NULL;
	    name="batch";
	    visible=1;
	    sticky=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[1] {
	    m_data=$69$;
	    m_transform=NULL;
	    name="epoch";
	    visible=1;
	    sticky=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[2] {
	    m_data=$70$;
	    m_transform=NULL;
	    name="avg_sse";
	    visible=1;
	    sticky=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[3] {
	    m_data=$71$;
	    m_transform=NULL;
	    name="cnt_err";
	    visible=1;
	    sticky=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[4] {
	    m_data=$72$;
	    m_transform=NULL;
	    name="avg_ext_rew";
	    visible=1;
	    sticky=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[5] {
	    m_data=$73$;
	    m_transform=NULL;
	    name="avg_cycles";
	    visible=1;
	    sticky=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[6] {
	    m_data=$74$;
	    m_transform=NULL;
	    name="epoch_time_tot";
	    visible=1;
	    sticky=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[7] {
	    m_data=$75$;
	    m_transform=NULL;
	    name="epoch_time_usr";
	    visible=1;
	    sticky=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[8] {
	    m_data=$76$;
	    m_transform=NULL;
	    name="Hidden_Fm_Input_r_wt";
	    visible=1;
	    sticky=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	  };
	  view_rows=10000;
	  view_range {min=0: max=6: };
	  display_on=1;
	  manip_ctrl_on=1;
	  table_pos {x=0.2203933: y=0.9595687: z=0.002735832: };
	  table_scale {x=0.4119503: y=0.4119501: z=0.4119501: };
	  table_orient {x=-1.000219: y=0: z=0: rot=0.005980202: };
	  x_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_lookup=NULL;
	   col_name="epoch";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=6: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=6: };
	   range {min=0: max=6: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  z_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Z;
	   col_lookup=NULL;
	   col_name="batch";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=-6e-07: max=6e-07: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  plot_1 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_lookup=NULL;
	   col_name="avg_sse";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=5.402786: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=5.402786: };
	   range {min=0: max=5.402786: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	  };
	  plot_2 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_lookup=NULL;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	   color {name="red": r=1: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=1: };
	   range {min=0: max=1: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=SQUARE;
	  };
	  share_y_axis=0;
	  graph_type=XY;
	  plot_style=LINE;
	  line_width=2;
	  point_size=MEDIUM;
	  point_spacing=1;
	  color_mode=VALUE_COLOR;
	  negative_draw=0;
	  label_spacing=-1;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  err_1 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_lookup=NULL;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	  };
	  err_2 {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_lookup=NULL;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	  };
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_lookup=NULL;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  colorscale {
	   name=;
	   chunks=133;
	   min=-1;
	   max=1;
	   range=0;
	   zero=0;
	   spec=$57$;
	   auto_scale=0;
	  };
	  raster_axis {
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_lookup=NULL;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  width=1;
	  depth=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	};
       };
       camera_pos {x=0.734033: y=1.451766: z=2.032221: };
       camera_orient {x=-0.9862996: y=-0.1528024: z=0.06216618: rot=0.3460761: };
       camera_focdist=2.651429;
      };
     };
    };
   };
   docks {
    name=;
    el_typ=DockViewer;
    el_def=0;
    ToolBoxDockViewer @[0] {
     m_data=NULL;
     name="Tools";
     visible=1;
     dock_flags=DV_MOVABLE|DV_FLOATABLE;
     dock_area=1;
    };
   };
  };
 };
 use_sim_log=0;
 networks {
  name=;
  el_typ=LeabraNetwork;
  el_def=0;
  LeabraNetwork @[0] {
   name="LeabraNetwork_0";
   desc=;
   specs {
    name=;
    el_typ=LeabraUnitSpec;
    el_def=0;
    LeabraUnitSpec @[0] {
     name="LeabraUnitSpec_0";
     desc=;
     unique{      };
     children {
      name=;
      el_typ=LeabraUnitSpec;
      el_def=0;
     };
     act_range {min=0: max=1: range=1: scale=1: };
     bias_con_type=LeabraCon;
     bias_spec {type=LeabraBiasSpec: spec=.projects[0].networks[0].specs[3].children[0]$77$: };
     sse_tol=0.5;
     act_fun=NOISY_XX1;
     act {thr=0.25: gain=600: nvar=0.005: avg_dt=0.005: send_delta=0: i_thr=STD: };
     spike {decay=0.05: v_m_r=0: eq_gain=10: eq_dt=0.02: hard_gain=0.4: };
     depress {p_spike=P_NXX1: rec=0.2: asymp_act=0.5: depl=0.2105263: max_amp=2: };
     opt_thresh {send=0.1: delta=0.005: learn=0.01: updt_wts=1: phase_dif=0: };
     clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
     vm_range {min=0: max=1: range=1: scale=1: };
     v_m_init {type=UNIFORM: mean=0.1500000059604645: var=0: par=1: };
     dt {vm=0.3: net=0.7: d_vm_max=0.025: vm_eq_cyc=0: vm_eq_dt=1: };
     g_bar {e=1: l=0.1: i=1: h=0.01: a=0.03: };
     e_rev {e=1: l=0.15: i=0.15: h=1: a=0: };
     hyst {on=0: b_dt=0.05: a_thr=0.8: d_thr=0.7: g_dt=0.1: init=0: };
     acc {on=0: b_dt=0.01: a_thr=0.5: d_thr=0.1: g_dt=0.1: init=0: };
     act_reg {on=0: min=0: max=0.35: wt_dt=0.2: };
     maxda {val=INET_DA: inet_scale=1: lay_avg_thr=0.01: };
     noise_type=NO_NOISE;
     noise {type=GAUSSIAN: mean=0: var=0.001000000047497451: par=1: };
     noise_sched {
      name=;
      el_typ=SchedItem;
      el_def=0;
      last_ctr=-1;
      default_val=1;
      interpolate=1;
      cur_val=0;
     };
    };
    LeabraLayerSpec @[1] {
     name="HiddenLayer";
     desc=;
     unique{      };
     children {
      name=;
      el_typ=LeabraLayerSpec;
      el_def=0;
      LeabraLayerSpec @[0] {
       name="Input_Output";
       desc=;
       unique{ compute_i;i_kwta_pt;kwta;       };
       children {
	name=;
	el_typ=LeabraLayerSpec;
	el_def=0;
       };
       kwta {k_from=USE_PAT_K: k=12: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
       gp_kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
       inhib_group=ENTIRE_LAYER;
       compute_i=KWTA_INHIB;
       i_kwta_pt=0.25;
       gp_i_pt=0.2;
       tie_brk {on=0: k_thr=1: diff_thr=0.2: };
       adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
       clamp {hard=1: gain=0.5: d_gain=0: };
       decay {event=1: phase=1: phase2=0: clamp_phase2=0: };
       net_rescale {on=0: max_net=0.6: net_extra=0.2: };
       abs_net_adapt {
	on=0;
	trg_net=0.5;
	tol=0.1;
	abs_lrate=0.05;
       };
      };
     };
     kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
     gp_kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
     inhib_group=ENTIRE_LAYER;
     compute_i=KWTA_AVG_INHIB;
     i_kwta_pt=0.6;
     gp_i_pt=0.2;
     tie_brk {on=0: k_thr=1: diff_thr=0.2: };
     adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
     clamp {hard=1: gain=0.5: d_gain=0: };
     decay {event=1: phase=1: phase2=0: clamp_phase2=0: };
     net_rescale {on=0: max_net=0.6: net_extra=0.2: };
     abs_net_adapt {
      on=0;
      trg_net=0.5;
      tol=0.1;
      abs_lrate=0.05;
     };
    };
    FullPrjnSpec @[2] {
     name="FullPrjnSpec_0";
     desc=;
     unique{      };
     children {
      name=;
      el_typ=FullPrjnSpec;
      el_def=0;
     };
     self_con=0;
     init_wts=0;
    };
    LeabraConSpec @[3] {
     name="LeabraConSpec_0";
     desc=;
     unique{      };
     children {
      name=;
      el_typ=LeabraConSpec;
      el_def=0;
      LeabraBiasSpec @[0] {
       name="LeabraBiasSpec_0";
       desc=;
       unique{ rnd;wt_limits;wt_scale;       };
       children {
	name=;
	el_typ=LeabraBiasSpec;
	el_def=0;
       };
       rnd {type=UNIFORM: mean=0: var=0: par=1: };
       wt_limits {type=NONE: min=-1: max=5: sym=0: };
       inhib=0;
       wt_scale {abs=1: rel=1: };
       wt_sig {gain=6: off=1.25: };
       lrate=0.1;
       cur_lrate=0.1;
       lrs_value=EPOCH;
       lrate_sched {
	name=;
	el_typ=SchedItem;
	el_def=0;
	last_ctr=-1;
	default_val=1;
	interpolate=0;
	cur_val=1;
       };
       lmix {hebb=0.1: err=0.9: err_sb=1: };
       savg_cor {cor=0.4: thresh=0.001: norm_con_n=0: };
       rel_net_adapt {
	on=0;
	trg_fm_input=0.85;
	trg_fm_output=0.15;
	trg_lateral=0;
	trg_sum=1;
	tol_lg=0.05;
	tol_sm=0.2;
	rel_lrate=0.05;
       };
       dwt_thresh=0.1;
      };
     };
     rnd {type=UNIFORM: mean=0.5: var=0.25: par=1: };
     wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
     inhib=0;
     wt_scale {abs=1: rel=1: };
     wt_sig {gain=6: off=1.25: };
     lrate=0.1;
     cur_lrate=0.1;
     lrs_value=EPOCH;
     lrate_sched {
      name=;
      el_typ=SchedItem;
      el_def=0;
      last_ctr=-1;
      default_val=1;
      interpolate=0;
      cur_val=1;
     };
     lmix {hebb=0.1: err=0.9: err_sb=1: };
     savg_cor {cor=0.4: thresh=0.001: norm_con_n=0: };
     rel_net_adapt {
      on=0;
      trg_fm_input=0.85;
      trg_fm_output=0.15;
      trg_lateral=0;
      trg_sum=1;
      tol_lg=0.05;
      tol_sm=0.2;
      rel_lrate=0.05;
     };
    };
   };
   layers {
    name=;
    el_typ=LeabraLayer;
    el_def=0;
    pos {x=0: y=0: z=0: };
    LeabraLayer @[0] {
     name="Input";
     layer_type=INPUT;
     pos {x=0: y=0: z=0: };
     un_geom {x=5: y=5: n_not_xy=0: n=25: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=0: y=0: };
     act_geom {x=5: y=5: n_not_xy=0: n=25: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[1].projections[0];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=5: y=5: n_not_xy=0: n=25: };
      units_lesioned=0;
     };
     unit_spec {type=LeabraUnitSpec: spec=.projects[0].networks[0].specs[0]$78$: };
     lesion=0;
     ext_flag=EXT;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     netin {avg=0: max=0: max_i=-1: };
     i_thrs {avg=0: max=0: max_i=-1: };
     acts {avg=0.19: max=0.95: max_i=4: };
     acts_p {avg=0.19: max=0.95: max_i=4: };
     acts_m {avg=0.19: max=0.95: max_i=4: };
     phase_dif_ratio=1;
     kwta {k=5: pct=0.2: pct_c=0.8: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk=0: };
     i_val {kwta=0: g_i=0.25: gp_g_i=0: g_i_orig=0.25: };
     un_g_i {avg=0: max=0: max_i=-1: };
     adapt_i {avg_avg=0.48: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
     spec {type=LeabraLayerSpec: spec=.projects[0].networks[0].specs[1].children[0]$79$: };
     stm_gain=0.5;
     hard_clamped=1;
     dav=0;
     net_rescale=1;
     avg_netin {avg=0: max=0: max_i=-1: };
     avg_netin_sum {avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[1] {
     name="Hidden";
     layer_type=HIDDEN;
     pos {x=0: y=0: z=1: };
     un_geom {x=5: y=5: n_not_xy=0: n=25: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=0: y=0: };
     act_geom {x=5: y=5: n_not_xy=0: n=25: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_Input";
       from_type=CUSTOM;
       from=$53$;
       spec {type=FullPrjnSpec: spec=.projects[0].networks[0].specs[2]$80$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=.projects[0].networks[0].specs[3]$81$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[1] {
       name="Fm_Output";
       from_type=CUSTOM;
       from=$36$;
       spec {type=FullPrjnSpec: spec=$80$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$81$: };
       recv_idx=1;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[2].projections[0];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=5: y=5: n_not_xy=0: n=25: };
      units_lesioned=0;
     };
     unit_spec {type=LeabraUnitSpec: spec=$78$: };
     lesion=0;
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     netin {avg=0.4719576: max=0.7485453: max_i=24: };
     i_thrs {avg=3.436908: max=5.52193: max_i=24: };
     acts {avg=0.2598608: max=0.9386379: max_i=24: };
     acts_p {avg=0.2598608: max=0.9386379: max_i=24: };
     acts_m {avg=0.2599357: max=0.9390887: max_i=24: };
     phase_dif_ratio=1.000289;
     kwta {k=6: pct=0.24: pct_c=0.76: adth_k=1: k_ithr=5.053241: k1_ithr=2.926488: ithr_r=0.5462268: ithr_diff=0.4208691: tie_brk=0: };
     i_val {kwta=4.20254: g_i=4.20254: gp_g_i=0: g_i_orig=4.20254: };
     un_g_i {avg=4.202539: max=4.20254: max_i=0: };
     adapt_i {avg_avg=0.2314311: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
     spec {type=LeabraLayerSpec: spec=.projects[0].networks[0].specs[1]$82$: };
     stm_gain=0.5;
     hard_clamped=0;
     dav=0;
     net_rescale=1;
     avg_netin {avg=0: max=0: max_i=-1: };
     avg_netin_sum {avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     da_updt=0;
     misc_iar{      };
    };
    LeabraLayer @[2] {
     name="Output";
     layer_type=TARGET;
     pos {x=0: y=0: z=2: };
     un_geom {x=5: y=5: n_not_xy=0: n=25: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=0: y=0: };
     act_geom {x=5: y=5: n_not_xy=0: n=25: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_Hidden";
       from_type=CUSTOM;
       from=$54$;
       spec {type=FullPrjnSpec: spec=$80$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$81$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[1].projections[1];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=5: y=5: n_not_xy=0: n=25: };
      units_lesioned=0;
     };
     unit_spec {type=LeabraUnitSpec: spec=$78$: };
     lesion=0;
     ext_flag=TARG|EXT;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     netin {avg=0.4308263: max=0.7362593: max_i=16: };
     i_thrs {avg=3.119443: max=5.415507: max_i=16: };
     acts {avg=0.19: max=0.95: max_i=4: };
     acts_p {avg=0.19: max=0.95: max_i=4: };
     acts_m {avg=0.1942359: max=0.9605935: max_i=16: };
     phase_dif_ratio=1.022294;
     kwta {k=5: pct=0.2: pct_c=0.8: adth_k=1: k_ithr=3.933761: k1_ithr=3.494581: ithr_r=0.1183824: ithr_diff=0.1116438: tie_brk=0: };
     i_val {kwta=3.604376: g_i=0.25: gp_g_i=0: g_i_orig=0.25: };
     un_g_i {avg=3.604377: max=3.604376: max_i=0: };
     adapt_i {avg_avg=0.4231479: i_kwta_pt=1.139225: g_bar_i=1: g_bar_l=0.1: };
     spec {type=LeabraLayerSpec: spec=$79$: };
     stm_gain=0.5;
     hard_clamped=1;
     dav=0;
     net_rescale=1;
     avg_netin {avg=0: max=0: max_i=-1: };
     avg_netin_sum {avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     da_updt=0;
     misc_iar{      };
    };
   };
   no_save_units=1;
   auto_build=AUTO_BUILD;
   train_mode=TRAIN;
   wt_update=ON_LINE;
   small_batch_n=2;
   batch=0;
   epoch=7;
   trial=5;
   cycle=15;
   time=0;
   group_name=;
   trial_name="rdiag";
   output_name=;
   sse=0;
   sum_sse=0;
   avg_sse=0;
   cnt_err_tol=0;
   cnt_err=0;
   cur_sum_sse=0;
   avg_sse_n=0;
   cur_cnt_err=0;
   train_time {name="train_time": start={usr=12821: sys=732: tot=1429237018: }: end={usr=13168: sys=774: tot=1429237408: }: used={usr=347: sys=42: tot=390: }: n_used=1: };
   epoch_time {name="epoch_time": start={usr=13119: sys=768: tot=1429237353: }: end={usr=13166: sys=774: tot=1429237404: }: used={usr=47: sys=6: tot=51: }: n_used=1: };
   trial_time {name="trial_time": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: n_used=0: };
   settle_time {name="settle_time": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: n_used=0: };
   cycle_time {name="cycle_time": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: n_used=0: };
   wt_sync_time {name="wt_sync_time": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: n_used=0: };
   misc_time {name="misc_time": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: n_used=0: };
   dmem_sync_level=DMEM_SYNC_NETWORK;
   dmem_nprocs=1;
   usr1_save_fmt=FULL_NET;
   wt_save_fmt=TEXT;
   lay_layout=THREE_D;
   n_units=75;
   n_cons=1875;
   max_size {x=5: y=5: z=3: };
   font_sizes {
    net_name=0.05;
    net_vals=0.05;
    layer=0.04;
    layer_vals=0.03;
    prjn=0.01;
    unit=0.02;
   };
   view_params {
    xy_square=0;
    unit_spacing=0.05;
    prjn_width=0.001;
    prjn_trans=0.5;
    lay_trans=0.5;
    unit_trans=0.9;
   };
   phase_order=MINUS_PLUS;
   no_plus_test=1;
   trial_init=DECAY_STATE;
   sequence_init=DO_NOTHING;
   first_plus_dwt=ONLY_FIRST_DWT;
   phase=PLUS_PHASE;
   phase_no=2;
   phase_max=2;
   cycle_max=60;
   min_cycles=15;
   min_cycles_phase2=35;
   minus_cycles=15;
   avg_cycles=16.33333;
   avg_cycles_sum=0;
   avg_cycles_n=0;
   netin_mod=1;
   send_delta=0;
   maxda_stopcrit=0.005;
   maxda=0.0002595186;
   trg_max_act_stopcrit=1;
   trg_max_act=0;
   ext_rew=0;
   avg_ext_rew=0;
   avg_ext_rew_sum=0;
   avg_ext_rew_n=0;
  };
 };
};

Data Environment Design

ISSUES

* do data connection points need to be of a specific data type, or could they
  have multiple types? 
  A: may need data typing; ex. text output
* do sources/sinks need to use commensurable data types? or, maybe the connection
  could mediate? or, maybe there must be an explicit converter?
  A: should prob require commensurability -- provide data converter filter
    if necessary
* how do we enable a relatively complex set of data sources to be connected to
  a new network
  A: bind by name/path
* will we need to have data items operating on different frequencies (ex every
  t, every 2nd t, etc.)
  A: Yes -- but under control of sequencer
* note: ConnectionPoint functionality can largely be provided in the UI by
  providing a multi-select/union-like properties tab
  
CRITICISMS

* do we *really* need a ConnectionPoint as distinct from a DataChannel???
  PROS: 
    * encapsulates things probably common to all
  CONS:
    * how generally applicable is the concept really?
    * another entity for users to comprehend
    * only commonifies when subchannels are commensurate (ex rgb,
      but not audio/video)
      
  
Data Environments are an integrated, extensible system for presenting data to and extracting data from the network.

Currently, there are pattern sources, and script sources. We wish to add handling for the following:
  * images
  * sound
  * video
  * simulation input

We want the following capabilities:
  * ability to add filters and other pre/post-processors
  * ability to visualize


We will need the following:

* spec in terms of the network
* extensible design
* implementations of basic types (images, etc.)
* flexibility in linking inputs and targets (ex. image input
  may be linked to a simple pattern target output)
* be able to use one data system with several networks
  (perhaps not simultaneously)

Let us work with the following concepts:
* DataSource -- provides data
* DataSink -- consumes data
* DataConnection (DataCon) -- connects a Source and Sink
* DataTransformer (DataTrans) -- performs a transformation (ex filter)


USE CASES

Let's look at some typical use cases.

1. Single Layer Input
  * data can be a pattern of same dimensions as input layer
  
2. Multi-layer (N) Input
  * there are N pattern channels -- each event will require
    passing the data of a single pattern
    
3. Vision
  * there are 3 channels, R,G,B
  
4. Multi-sensory
  * there is vision, soma, etc.
  
Conformance Use Case

1. Layer has several input layers -- data source should 
   conform.

DATA ATTRIBUTES

* shape -- dimensions, and num elements per dimension
  (note: maybe assume 2d, and just let degenerate case be 1 or 0 d)
* channels -- can have multiple channels (ex RGB)
* txfer mode -- push or pull -- in pull mode, the next item downstream
  controls the txfer of data; ex. a layer input may be in pull mode, in
  which case it controls the fetching of data from the input pattern
  source

DATA OPERATIONS

* there must be one data item in a network that is the controlling item --
  it is the one that initiates all the pushes or pulls that then propagate
  to the other data items -- ex., in pdp sims, the layer is the controller;
  it initiates the "pulls" from its data sources, and the "pushes" to the
  data outputs.

Question
  
  
REQUIREMENTS AND GOALS

* some data is inherently composite
  * we want to be able to connect (or not) to each component individually
  * would be nice to be able to treat composite as a single thing, when
    that would be the typical use
  * consider always treating comp data as inseparable, BUT provide a 
    demultiplexing transformer that will allow access to each channel
    
* the geometry of some sources/sinks should be able to inform other
  components created to mesh with them
  * static conformance: geometry set on creation or attachment
  * dynamic conformance: geometry automatically conforms to connectee
* push/pull operation may or may not be intrinsic
  * filtering component could work on push or pull model


INTERFACES/ENTITIES (OUTLINE)

Here is an outline of the main interfaces and/or entities, along with their
major subtypes and major contained interfaces.

IDataSequencer
  this interface should be provided for any block that supports data in or out,
  including filters -- it provides initialization and sequencing methods -- note
  that blocks with both src/sink have only a single sequencing i/f, as the 
  elements are assumed to be linked, ex. a filter, or a log (where reading would
  correspond to the last element written, etc.)
  
IDataSource
  InputChannels -- provides list of input channels
    
  
    
DataItem
  
Notes:
1. May be no operational difference between Data vs. Ctrl/Mon -- may be primarily
   semantic and/or ui. 

INTERFACES/ENTITIES (DETAIL)

DataItem is the actual piece of data. It is conceptually a N-d array of a specific
data type (ex. float, int). Matrix is a ref-counted value type -- we use smart pointers
of type taMatrix_impl.

Matrix
  attributes:
    geom -- dims, and dim size
    size -- number of elements 
    frames() -- number of frames (size of last dimension)
    frameSize() -- num of elements in each frame
    data_type
    el[] -- data items


DataChannel describes one distinct source/sink of data.

DataChannel
  attributes:
    name -- the name of the channel; may be read only (ex. "red")
    index -- the index of this channel in the container
    geom -- same as for Matrix -- last dim can be 0 
    matrix_type -- type of data: float, int, short int, etc.
  methods:

IDataSequencer
  attributes (must do InitData before they are valid)
    bool is_indexable -- true if you can access randomly 
      (note: automatically implies is_sequential, since it has
      a built-in sequencer)
    bool is_sequential -- true if you can access sequentially
    int num_items -- number of items (if indexable)
    int cur_item -- index of current item, -1 on Init
  methods:
    InitData() -- initializes data system (ex. clears cache, sets state to 0, 
      enumerates count, etc.)
    ResetData() -- if defined, clears out all data
    NextItem() -- go to next sequential item
    GoToItem(int n) -- go to item N, only valid if indexable
  
IDataSource
  attributes:
    IDataSequencer sequencer -- sequencer i/f
    int channel_count -- number of channels
    DataChannel channel(int idx) -- channel spec
  methods:
    bool GetData(MatrixPtr& data, int chan = 0) -- get data for specified channel
    bool GetDataMulti(MatrixPtr_Array& data) -- get data for all channels
    
    
IDataSink
  attributes:
    IDataSequencer sequencer -- sequencer i/f
    int channel_count -- number of channels
    DataChannel channel(int idx) -- channel spec
  methods:
    void SetData(MatrixPtr& data, int chan = 0) -- set data for specified channel
    void SetDataMulti(MatrixPtr_Array& data) -- set data for all channels
     
     
IDataFilter (also must have IDataSource and IDataSink)
  attributes:
    int op_count -- number of operations supported
    String op_desc(int idx) -- description of operation
  methods:
    bool FilterData(int op) -- perform filter operation
    
SHOW DIRECTIVES
---------------

Show directives are used to mark types and members to provide the user control over
the level of detail they see.

SHOW -- makes the item always visible, often used to override things like READ_ONLY
NO_SHOW -- hides something that otherwise would have been visible
HIDDEN -- almost never needs to be seen, generally only for debugging the software
DETAIL -- usually never needs to be seen, but can be helpful for advanced users
EXPERT -- indicates parameters usually only needed in advanced simulations

The directives by themselves are used in general contexts, and are used by default in 
the editor. The directives can be modified to make them applicable to only edit or tree
contexts.

_EDIT -- directive only applies to Edit contexts (ex edit panels/dialogs)
_TREE -- directive only applies to Tree browsing contexts

Show directives can be applied in modified form to a type, in which case, all members
of that type will automatically use the directive (unless overridden)

MEMB_ -- prefix applied to directives on types, to automatically be applied to members.

Notes:
  * READ_ONLY can only be applied to a member, not a type
  * member-level SHOW or NO_SHOW overrides the contrary explicit type-level directive
  * if there is no READ_ONLY, HIDDEN, DETAIL, or EXPERT then the member is 
    implicitly marked NORMAL (there is no actual NORMAL directive however)
  * NO_SHOW w/o _EDIT or _TREE will apply to all contexts,
     ie you can't go  #NO_SHOW #SHOW_TREE

OBJECT DIRECTIVES
-----------------

//TODO: revert this meaning, since we always had the EDIT_INLINE
INLINE -- (existing directive) this now only controls inlining in the gui, not in dumping
//TODO: change this to DUMP_INLINE or SAVE_INLINE to be consistent with EDIT_INLINE
INLINE_DUMP -- replaces INLINE for dump/load
LABEL_ -- (same as item labels) -- can be used to rename types for the view system labels
UAE_OWNER -- for taOBase-derivatives, causes UpdateAfterEdit to get sent to owner->ChildUpdateAfterEdit
CHILDREN_INLINE -- for lists, displays a compact inline form of children in edit panel
NO_CHILDREN_INLINE -- forces use of the verbose member-based list view
FILETYPE -- word used to describe files when saving/loading this type; should be a single noun, ex 'Project' (this directive is always used with the EXT directive)
HIDDEN_INLINE -- (new for Objects) -- don't show this type inline by default for members
New: most of the Member Show directives have counterparts that can be applied to types, and will affect all members of that type:
MEMB_SHOW, MEMB_NO_SHOW, MEMB_HIDDEN, MEMB_DETAIL, MEMB_EXPERT -- general context


ENUM DIRECTIVES (note: this is new)
---------------

BITS -- indicates that the enum values are or'able bit fields -- gui will show series of check boxes, not a drop-down

ENUM ITEM DIRECTIVES (note: this is new)
---------------

NO_BIT -- this is not a bit (typically used for OR'ed enums) -- usable in CSS, but doesn't show in gui


MEMBER DIRECTIVES
-----------------

EXPERT -- show directive, like DETAIL etc.; especially for advanced parameters in net sims
INLINE -- puts an otherwise non-inline member class editor inline, esp. for Array
VARTYPE_READ_ONLY -- user can only change value, not the type, of a Variant
NO_VARTYPE_READ_ONLY -- user can change the type of a Variant
ENUM_TYPE -- for TypeDef* members, indicates to show Enum types (deriving from xxx) in the interface;
  should still include a TYPE_xxx directive to anchor type
EDIT_DIALOG -- for String types, adds a button for an editor dialog (for long strings)
CONDEDIT -- added implicit bool semantics (including dotted submembers), as for Method GHOST
SHOW_INLINE -- can be used to override a type that has HIDDEN_INLINE

Deprecated (within v4)

BROWSE -- shows the member in the browse view, particularly when it would otherwise be hidden.
  use: SHOW_TREE
NO_BROWSE -- don't show the member in the browse view, particularly when it would otherwise be shown.
  use (typically): HIDDEN_TREE


METHOD DIRECTIVES
-----------------

ACTION_xxx -- marks the object as corresponding the indicated "well known" action, ex "editDelete" -- actions can have things like icons and accelerator keys.

MENU_1N -- menu method that can be applied to 1 or more selected items; (note: method can have parameters, if so, then they are supplied in the usual fashion by a popup dialog)

MENU_1_2N -- method that can be applied on 1st selected item, with items 2:N as a parameter; 1st parameter is the type of the object taken as a parameter (note: method can have more parameters, if so, then they are supplied in the usual fashion by a popup dialog)

MENU_2N_1 -- method that can be applied on selected items 2:N with 1st item as a parameter; 1st parameter must be a pointer or reference to type of object 1 (note: method can have more parameters, if so, then they are supplied in the usual fashion by a popup dialog)

MENU_CONTEXT -- puts the menu item directly on the context menu (instead of a submenu) -- ignored in edit dialogs and main menus.

NO_MENU_CONTEXT -- does not put the item anywhere in a context menu.

VMENU -- similar to MENU, but specifies a view item (for DataView classes) -- only VMENU items get put in View window menus. (Note: View items should generally not be edited as data items -- they are usually hidden in the browser hierarchy.)

TYPE_ -- added this; same semantics as for members
TYPE_ON_ -- added this; same semantics as for members
GHOST_ -- added full value semantics, as for member CONDEDIT; implicit bool now also supports submembers (.); implicit bool supports any type: its Variant form is converted to bool
EXT -- (3.x undocumented) as for Object directive, used for a stream (file) argument
FILETYPE -- companion to EXT, see Object directive 

DEPRECATED DIRECTIVES
---------------------

OBJECT DIRECTIVES (DEPRECATED )
-----------------

ARRAY_ALLOC -- wasn't used anywhere, and seemed unnecessary and possibly dangerous

DISPLAY DIRECTIVES

NARROW -- 
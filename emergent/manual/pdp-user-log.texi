@c uncomment the following two lines for 'update every node' command
@c @node  log
@c @chapter Logs and Graphs

@tindex PDPLog
@cindex Logging Data
@cindex Recording Data
@cindex Log Files

Logs provide a convenient method of recording information from the
processes. This information can be as simple as the epoch number of
training or as complicated as a multi-variable statistic. In PDP++
logs are stored on the Project, and pointed to by a process. Like the
network, logs may have many views.  Logs are color-coded brown in the
default color scheme (get it?).

Processes interface with a log by sending it both header and data
information. The header information provides the labels for the columns
of data. Each line of data provides a row of information for each of the
fields in header line.

Logs can record data to log files, which contain columns and rows of
data in text format.  Each line of the log file contains an identifier
that indicates the name of the process which generated the data (or
just _H:) if there is only one updating process. At the start of a log
file, a row of header information is recorded, which identifies the
data in the columns.  Both of these identifiers can be removed with
the shell script @file{bin/getlogdata}, which strips them from the
file, and writes a new file with a @file{.logd} extension.

Note that the log data file is distinct from the object save file,
which will save the parameters associated with the log object, but not
the data in the log itself.  Thus, projects do not save any current
log data.  It has to be specifically saved in a log file.  Functions
to save and load log files are found in the @code{Logfile} menu.

Also, the log object maintains an internal buffer of log data (the size
of which can be set by editing the log, see next section).  This buffer
can be directly accessed through the script language to perform various
data analysis operations.

@menu
* log-variables::               PDPLog Variables
* log-functions::               PDPLog Functions
* log-views::                   Log Views
@end menu

@c ======================================
@c    <node>, <next>, <prev>, <up>
@node  log-variables, log-functions, log, log
@section PDPLog Variables

@table @code
@item File log_file
@vindex log_file of PDPLog
File to use for saving the log. This field is set by using the File
Requester (@pxref{gui-file-requester}), or by using the
log function @code{SetSaveFile()}. This field can be set to @code{NULL} in which
case there is no file i/o.
@item int log_lines
@vindex log_lines of PDPLog
The number of lines recorded so far in the log. This number is
incremented each time the log receives a new line of input.
@item DataTable data
@vindex data of PDPLog
Holds and provides organization for the information sent to the log.
@item int data_bufsz
@vindex data_bufsz of PDPLog
The size in lines of the log buffer. If the log overflows the buffer
size, information is dropped from the beginning of the Log and the buffer
is "scrolled" by @code{data_shift} to make room for the new data.
@item float data_shift
@vindex data_shift of PDPLog
The percentage of the buffer to shift upon overflow.
@item MinMax data_range
@vindex data_range of PDPLog
A structure containing the minimum and maximum line values of the log
s buffer's view of the data in the @code{log_file}.
@item Process_Group log_proc
@vindex log_proc of PDPLog
A link group of processes which log information to this log.  Usually,
there is just one process that sends data to the log.  The menu
functions AddUpdater/RemoveUpdater manipulate this information.
@item String_Array display_labels
@vindex display_labels of PDPLog
Provides replacement labels for data columns.
@end table

@c ======================================
@c    <node>, <next>, <prev>, <up>
@node  log-functions, log-views, log-variables, log
@section PDPLog Functions

On all of the following functions, the optional no_dlg arg will prevent
the popup file requester dialog if true - this dialog comes up even when
a valid file name is specified.

@table @code
@item Actions/GetHeaders()
@findex GetHeaders on PDPLog
Tells all the processes that update this log to send their
current headers to this log.  Use this if you have changed the
statistics being sent to this log.  Note that it causes all existing
data to be removed.  The log will automatically adjust to the addition
and removal of statistics, so this isn't necessary in those cases.
However, it won't notice if a name of a statistic has changed.
@item LogFile/SetSaveFile(char* file_nm, bool no_dlg = false)
@findex SetSaveFile on PDPLog
Pulls up a file chooser dialog that allows one to select the file that
the log will save data into, or sets the log file to the argument if
called from the script language.  This does not save any existing data
in the file, it just opens the file so that any new data will be
recorded.  Use @code{BufferToFile} after setting the save file (or by
itself without a save file set) to actually save currently buffered data
to the file.  Note that this will overwrite any existing file of the
same name.
@item LogFile/SetAppendFile(char* file_nm, bool no_dlg = false)
@findex SetAppendFile on PDPLog
This is just like @code{SetSaveFile}, but it appends to an existing file
instead of writing over it.
@item LogFile/LoadFile(char* file_nm, bool no_dlg = false)
@findex LoadFile on PDPLog
This will load data from a previously-saved log file into this log.
Note that it is possible to load from a log file created by any process,
since it will read the header information from the log file itself.
Thus, one can open a new project, create a @b{GraphLog} object, and do a
Load file on a log from a project that was run in the background, and
get a graph of what happened.
@item LogFile/CloseFile()
@findex CloseFile on PDPLog
Closes any open files. Note that @code{LoadFile} does not close the
log file, because if the file is longer than the current buffer, it
needs to be read from as the user scrolls through the file.
@item LogFile/BufferToFile(char* file_nm, bool no_dlg = false)
@findex BufferToFile on PDPLog
Sends the entire contents of the currently-buffered log data to a log
file.  If there is an open log file and no file name is specified, it
sends to this currently open file.  If there is no open file, then it
will do a SetSaveFile(file_nm, no_dlg) and then dump the buffer to the
file, closing the file afterwards.
@end table

@c ======================================
@c    <node>, <next>, <prev>, <up>
@node  log-views,  , log-functions, log
@section Log Views
@tindex LogView

The PDPLog structure has many options for viewing its data. Each of
these options is represented by a corresponding LogView object. Like
the network object, PDPLogs can have multiple views.

Each of the views has its own methods of interacting with the data,
however all the views have some properties in common. All the views are
window's into the data stored in the log's datatable @code{data}. While
some of the views may show only a portion of the datatable at a time,
the maximum amount of data they can show is limited by the size of the
datatable itself, @code{data_bufsz}. The @code{log_file} however records
all the information sent to log sequentially. Each of the LogViews
provides four buttons which shift the the view's window on the
datatable. If the view's window on the datatable moves outside the range
of the datatable, the datatable is scrolled by moving log's
@code{data_range} throughout the @code{log_file}.

@menu
* log-views-logview::           The LogView Class
* log-views-text::              The Text Log View
* log-views-net::               The Net Log View
* log-views-graph::             The Graph Log View
* log-views-grid::              The Grid Log View
@end menu

@c ======================================
@c    <node>, <next>, <prev>, <up>
@node  log-views-logview, log-views-text, log-views, log-views
@subsection The LogView Class
@tindex LogView

The LogView class provides the general variables, functions, and
interface components for all the LogView subclasses. Visually all
LogView objects have a common interface at the top of the LogView
window. In the top middle of each LogView widow is a set of four
buttons used for scrolling the visible region of the LogView throughout
the data and data logfile: 

@table @asis
@item |< Full Rewind
Load the first @code{data_bufsz} lines of data from the file.
@item <  Rewind
Move back @code{data_shift} lines in the datatable.
@item >  Forward
Move forward @code{data_shift} lines in the datatable.
@item >| Full Forward
Load the last @code{data_bufsz} lines of data from the file.
@end table

To the left of the scroll buttons is a toggle switch which sets the
LogView's updating on or off. To the right of the scroll buttons are
the Update, Init, and Clear buttons. The Update button is the most
benign. Its action merely refreshes the display. The Init button is
does a bit more by rescaling, recentering and recreating the graphical
representation of the LogView based on the settings of the ViewSpecs
and the LogView object. The Clear button destructively removes all the
data from the log and re-initializes the display. It is useful if you
are restarting your Training for example and want to clear out the
statistics gathered for the last Training run. The Clear button does
not affect the log files.

All LogViews have the following functions in their @b{View:Object} menu:
@table @code
@item AddUpdater(SchedProcess* proc)
@findex AddUpdater on LogView
Adds the given process as an updater of this log (i.e., it sends data
to this log).
@item RemoveUpdater(SchedProcess* proc)
@findex RemoveUpdater on LogView
Removes the given process as a sender of data to this log.  This
function can also be used check what process(es) are updating this log.
@end table

All LogViews have the following functions in their @b{Actions} menu:
@table @code
@item StartAnimCapture(img_fmt, img_ctr, sub_dir)
@findex StartAnimCapture on LogView
Starts automatic capturing of window updates to files of given format
saved in given sub directory, with increasing counter extensions
starting with img_ctr.  These images can then be processed to create an
animation of what was displayed in the view.
@item StopAnimCapture()
@findex StopAnimCapture on LogView
Stops the automatic capturing of window updates to files.
@item EditViewSpec(ViewSpec* column)
@findex EditViewSpec on LogView
Brings up an edit dialog for parameters that control the display of given column or
group of data.
@item SetVisibility(ViewSpec* column, bool vis)
@findex SetVisibility on LogView
Determines whether a given column of data is visible (displayed) in
the log view or not.
@item SetLogging(ViewSpec* column, bool log_data, bool also_chg_vis)
@findex SetLogging on LogView
Determines whether a given column of data is logged to the log file,
and, if also_chg_vis is set, it also similarly affects whether the
column is visible (displayed) in the log view or not.  The logging
flag (@code{save_to_file}) is actually stored in the @code{data}
structure on the log object itself, and is thus shared by all views of
this log.
@item UpdateDispLabels()
@findex UpdateDispLabels on LogView
Copies display_labels from the log object to the labels used to display 
data in the log view.  These display_labels are not used by default.
@end table

Furthermore, LogViews have an @b{Analyze} menu that allows one to
analyze columns of data in the log.  This actually occurs by copying
the data to an environment object, and then running analysis routines
on that environment.  See the environment documentation
(@pxref{env-analyze}) to see what other functions are available, and
for greater explanation of these analysis functions.
@table @code
@item CopyToEnv(TAPtr data, TAPtr labels, Environment* env)
@findex CopyToEnv on LogView
Outputs data column (must be group) with labels to environment env
(WARNING: reformats env to fit data!)  Further analysis and
transformations can be performed within the environment.
@item DistMatrixGrid(TAPtr data, TAPtr labels, GridLog* disp_log, DistMetric metric,  bool norm, float tol)
@findex DistMatrixGrid on LogView
Computes and displays in a grid log (NULL = make a new one) the distance
matrix for data (must be group of data) with labels (typically event names). 
@item ClusterPlot(TAPtr data, TAPtr labels, GraphLog* disp_log, bool graphic, DistMetric metric, bool norm, float tol);
@findex ClusterPlot on LogView
Produces a cluster plot (in graph log, NULL = make a new one) of the
given data (with labels). 
@item CorrelMatrixGrid(TAPtr data, TAPtr labels, GraphLog* disp_log);
@findex CorrelMatrixGrid on LogView
Produces a correlation matrix of the given data -- how each column of
values correlates with the other columns across the rows of different
values, and plots this in a grid log.
@item PCAEigenGrid(TAPtr data, TAPtr labels, GraphLog* disp_log);
@findex PCAEigenGrid on LogView
Computes principal components (eigenvectors) of the correlation matrix
of column values across rows of data, and plots these eigenvectors in
a grid log.
@item PCAPrjnPlot(TAPtr data, TAPtr labels, GraphLog* disp_log, int x_axis_component, y_axis_component);
@findex PCAPrjnPlot on LogView
Computes principal components (eigenvectors) of the correlation matrix
of column values across rows of data, and plots the projection of each
row of data against two of these principal components.  This produces a 
simplified two-dimensional representation of the similarity structure
of the data.
@item MDSPrjnPlot(TAPtr data, TAPtr labels, GraphLog* disp_log, int x_axis_component, y_axis_component);
@findex PCAPrjnPlot on LogView
Computes multidimensional scaling (MDS) on the distance matrix of rows
of data, and then plots a projection of each row onto two components
-- this also provides simplified two-dimensional representation of the
similarity structure of the data.
@end table

And as mentioned above, all LogViews have the following Variables:
@table @code
@item bool display_toggle
@vindex display_toggle of LogView
Determines if screen updates from the Update Processes
will affect the display or not. It is sometimes useful to turn off the
complex display updating of the LogView to speed up the Processes. This
variable does not affect the recording of the Log information. Thus if
the @code{display_toggle} is toggled off while a Process is running, and
then toggled back on, the LogView display will reflect all of the data
received when the LogView display was turned off.
@item int view_bufsz
@vindex view_bufsz of LogView
The maximum number of lines of Log data visible in the Display.
@item float view_shift
@vindex view_shift of LogView
The percentage of @code{view_bufsz} to shift when the data exceeds the
@code{view_range}
@item MinMax view_range
@vindex view_range of LogView
The range of currently visible data lines.
@item DT_ViewSpec viewspec
@vindex viewspec of LogView
This DataTable View specification is the place holder for all the
ViewSpecs for the individual columns of data in the log -- edit this
to get at all of the parameters that control the view display.
@end table

@c ======================================
@c    <node>, <next>, <prev>, <up>
@node  log-views-text, log-views-net, log-views-logview, log-views
@subsection The Text LogView
@tindex TextLogView
@tindex TextLog

The Text LogView provides a read-only scrollable window of a textual
representation of the log's data. Across the top of the TextLogView are
the common file I/O buttons and the display toggle. Beneath those
buttons is a horizontally scrollable region of data. The top line of
data will always be the most recent header information the log has
received. It will be printed in bold face type, with each field
separated by the expected size of the data. Beneath the header info and
its separator bar is the actual data. The fields in the data line
correspond to the the fields of header line above.

Each column of data has an associated TextViewSpec which has but one
field:
@table @code
@item width
@vindex width of TextViewSpec
The width (in 8 character blocks) allocated to  the column of data
@end table

Resizing the TextLogView window changes the number of visible data
lines, although you typically need to press @i{Init} to get everything
synced up.

@c ======================================
@c    <node>, <next>, <prev>, <up>
@node  log-views-net, log-views-graph, log-views-text, log-views
@subsection The Net LogView
@tindex NetLogView
@tindex NetLog
@vindex network of NetLogView

The NetLogView is similar to the TextLogView in that it displays the
log's data in a textual representation. Its main difference however is
that instead of displaying the values in its own window, it displays
its data as labels in an associated network's views. Thus the
NetLogView has one important field, @code{network}, which is the
network to display into.  By default, the @code{network} is set to the
one used by the process that updates the log.  The data is displayed
in each of the network's views by adding labels to the NetViews and
changing the text in those labels. The labels can be repositioned (as
a group or individually) and edited in the NetView to change their
fonts.  The labels are arranged in columns at the upper left of the
netview.

The following functions on the @b{Actions} menu are available to
control the display:

@table @code
@item SetNetwork(Network* net)
@findex SetNetwork of NetLogView
Sets the network to display the log data into.  Goes into the default
display in this network.
@item ArrangeLabels(int cols, int rows, int width, float left, float top)
@findex ArranngeLabels of NetLogView
Controls positioning by specifying the number of columns and rows,
their width, and where in the display they should appear (left = 0 =
left side, 1 = right; top = 0 = bottom, 1 = top).
@end table

@c ======================================
@c    <node>, <next>, <prev>, <up>
@node  log-views-graph, log-views-grid, log-views-net, log-views
@subsection The Graph LogView
@tindex GraphLogView
@tindex GraphLog

@ifset html
@ifhtml
<IMG SRC="pics/xor.graphlogview.gif" ALIGN="MIDDLE" ALT="The GraphLogView">
<P>
<B> Figure: </B> The GraphLogView
<P>
@end ifhtml
@end ifset
@iftex
@tex
\medskip
\global\advance\texfigno by 1
\input epsf
\epsfysize=3.0in
\centerline{\epsfbox{/usr/local/pdp++/manual/pics/xor.graphlogview.epsi}}
\noindent {\bf Figure: \number\texfigno} The Graph Log Viewer
@end tex
@end iftex
@ifinfo
Figure of: <The Graph Log Viewer> here
@end ifinfo

The GraphLogView provides a realtime 2D line graph representation of
the log's data. The fields of the header of the log are each graphable
as a separate line in the Graph. The color and style of the lines are
fully customizable by the user as are the range and scaling factors of
the graph itself.

Resizing the GraphLogView window rescales the graph to fit the size of
the window.

@menu
* log-views-graph-fields::       The Field Toggle Buttons
* log-views-graph-graph::        The Graph Area
* log-views-graph-labels::       GraphLogView Labels
* log-views-graph-variables::    GraphLogView Variables
* log-views-graph-functions::    GraphLogView Functions
@end menu

@c ======================================
@c    <node>, <next>, <prev>, <up>
@node  log-views-graph-fields, log-views-graph-graph, log-views-graph, log-views-graph
@subsubsection The Field Toggle Buttons

Each of these fields of data in the GraphLogView's PDPLog are listed
in a vertical scrollbox of toggle buttons in the lower left of the
GraphLogView. Initially all the lines are toggled on, except those
that represent counter data and String data.  By pressing the toggle
button with the left mouse button, the display of the line
corresponding to that field is turned on or off. @b{Pressing the
middle mouse button selects that field to represent the X axis -- a
second press on a group of data selects Row-wise plotting of data}.
Pressing the right mouse button on the field toggle button brings up
an edit dialog for the field, where you can specify all the detailed
parameters controlling its display.

Initially each of the lines is assigned a default line style and
color.  The color of the line is displayed as a small line just to the
left of the toggle button (for String fields, an "-S-" is displayed).
To the right of the toggle button another small line will indicate the
color of the line's y-axis, or a "-X-" if the toggle button's field
represents the X-axis.

The GraphViewSpec provides the following customizable variables:
@tindex DA_GraphViewSpec
@tindex GraphViewSpec
@table @code
@item RGBA line_color
@vindex line_color of GraphLogViewSpec
The color of the line specified as a color name or Red,Green,Blue,Alpha
@item LineType line_type
@vindex line_type of GraphLogViewSpec
Determines if the line is drawn with @code{LINES}, @code{POINTS}, or
both @code{LINES_AND_POINTS}.  If the data is Strings, @code{STRINGS}
is selected by default.  @code{TRACE_COLORS} specifies that each trace
of data gets a different color according to the color scale spectrum
associated with the graph log.  @code{VALUE_COLORS} specifies that the
Y axis values are represented by colors using the color scale spectrum
-- useful for @code{vertical = NO_VERTICAL}. @code{THRESH_POINTS}
draws points whenever the Y axis data value exceeds the @code{thresh}
value.
@item LineStyle line_style
@vindex line_style of GraphLogViewSpec
Determines the how the line component of the GraphLine is drawn. Style
choices are @code{SOLID (______)} , @code{DOT (......)}, @code{DASH (_ _ _
)}, @code{DASH_DOT (_._._.)} . 
@item PointStyle point_style
@vindex point_style of GraphLogViewSpec
Determines the how the point component of the GraphLine is drawn. Style
choices are @code{NONE ( )} , @code{SMALL_DOT (.)}, @code{BIG_DOT (o)},
@code{TICK (|)}, @code{PLUS (+)}.
@item point_mod
@vindex point_mod of GraphLogViewSpec
Specifies spacing of points -- m = modulus value, or number of spaces between
dots, and off = offset from start of data.
@item bool negative_draw
@vindex negative_draw of GraphLogViewSpec
Determines if a line is drawn from right to left if the values of the
X-axis decrease (i.e., between traces).
@item SharedYType shared_y
@vindex shared_y of GraphLogViewSpec
What to do with multiple graph lines that share the Y axis:
@code{OVERLAY_LINES} overlays shared lines on top of each other, while
@code{STACK_LINES} stacks shared values on top of each other in a
non-overlapping manner.
@item VerticalType vertical
@vindex vertical of GraphLogViewSpec
How to manage the vertical (Y) axis.  @code{FULL_VERTICAL} means use
the full vertical axis for displaying Y values, @code{STACK_TRACES}
means arrange subsequent traces of data (pass through the same X axis
values) in non-overlapping vertically-arranged stacks,
@code{NO_VERTICAL} means don't draw any vertical dimension at all (for
@code{line_type = VLAUE_COLORS} or @code{THESH_POINTS}).
@item FloatTwoDCoord trace_incr
@vindex trace_incr of GraphLogViewSpec
Specifies increments in starting coordinates for each subsequent trace
of a line across the same X axis values, producing a 3D-like effect.
For example, x=-2,y=2 means move each subsequent trace to the left and
upwards.
@item float thresh 
@vindex thresh of GraphLogViewSpec
The threshold for @code{line_type} = @code{THRESH_POINTS}.
@item GraphLogViewSpec* axis_spec
@vindex  axis_spec of GraphLogViewSpec
Determines which GraphLogViewSpec should be used as the Y-Axis for
this ViewSpec's data to be scaled by.  This can be any other column
except if this column is used as a Y-axis for other columns.
@item FixedMinMax range
@vindex range of GraphLogViewSpec
This specifies fixed min or max values for the range of values to be
plotted.  Values are only applicable if corresponding @code{fix}
buttons are on.
@item int n_ticks
@vindex n_ticks of GraphLogViewSpec
Maximum number of ticks to use in display of axis number labels
(actual number may be less depending on the labels).
@item GraphLogViewSpec* string_coords
@vindex string_coords of GraphLogViewSpec
Column that contains vertical coordinate values for positioning of String data labels.
@end table

The following functions are also available on the GraphViewSpec:

@table @code
@item PlotRows()
@findex PlotRows of GraphLogViewSpec
Plot the data across rows of grouped columns (x axis = column index, y
axis = values for each column in one row) instead of down the columns.
@item PlotCols()
@findex PlotCols of GraphLogViewSpec
Plot the data down columns (standard mode).
@item GpShareAxis()
@findex GpShareAxis of GraphLogViewSpec
Make every element in this group share the same Y axis, which is the first in the group.
@item GpSepAxes()
@findex GpSepAxes of GraphLogViewSpec
Make every element in this group have its own Y axis.
@end table

@c ======================================
@c    <node>, <next>, <prev>, <up>
@node  log-views-graph-graph, log-views-graph-labels, log-views-graph-fields, log-views-graph
@subsubsection The Graph Area

The Graph Area of the GraphLogView appears as a region consisting of a
field of background color overlaid with a horizontal X axis at the
bottom of the Graph region, one or more vertical Y-axes on the left
edge of the Graph region, lines of data, and optionally text labels
scattered about. The lines of data will not initially be visible until
data is actually recorded in the PDPLog.  If separate graphs are
selected, multiple such graphs may be arranged within the display.

The range of the Axes is determined by the GraphLogViewSpec of their
corresponding fields. The tick marks are displayed as decimal numbers
with a factor of 10 multiplier on the bottom of the Y-axes or left side
of the x-axis. (i.e. If the axis tick read "2.15" and the multiplier
is"10X" then the actual value is 21.5).

The GraphLogView Graph area can be zoomed and scrolled in a similar way
as the Netview by selecting the @i{Mv/Scan} or @i{ReScale} mode buttons
in the upper left of the GraphLogView. In Move/Scan mode, the graph's
coordinates can be moved around by pressing and holding a mouse button in
the background of the graph area. Moving with the left mouse button
allows translations in both the Horizontal and Vertical planes, while
the middle mouse button constrains movement to the Horizontal plane only
and similarly the right mouse only allows Vertical movement. Likewise in
Rescale mode, the left mouse button scales both dimensions, the middle
mouse button only scales the Horizontal, and the right mouse button only
scales the Vertical.

In Move/Scan mode if the mouse button is pressed while the pointer is
over a line in the graph area the pointer will turn to a clenched hand
and the value of the data at the mouse pointer location will appear
beside the pointer. Dragging the mouse with left mouse button pressed
will move a small box along the selected line, jumping from data point
to data point and indicating the values. When the mouse button is
released, the value and location box remain on the line until the
@code{Init} button is pressed on the GraphLogView, or the log's buffer
is overfilled.


@c ======================================
@c    <node>, <next>, <prev>, <up>
@node  log-views-graph-labels, log-views-graph-variables, log-views-graph-graph, log-views-graph
@subsubsection GraphLogView Labels

In addition to the scanned value GraphLabels, general purpose
GraphLabels can be manipulated using the @i{New}, @i{Delete}, and
@i{Edit} GraphLabel action buttons on the left of the GraphLogView
display. The "New" action button creates a label in the graph area. The
"Delete" action button removes selected labels. The "Edit" action button
brings up an Edit dialog for the selected labels.  Editing a label
allows the user to change the text or font of the label, using a
standard XWindows font specification string.  Note that @i{Select} mode
must be activated to select these labels for the Edit and Delete
operations, and that clicking wit the right-mouse-button (RMB) will
automatically edit the label.

@c ======================================
@c    <node>, <next>, <prev>, <up>
@node  log-views-graph-variables, log-views-graph-functions, log-views-graph-labels, log-views-graph
@subsubsection GraphLogView Variables

The GraphLogView provides the following variables for customizing the
appearance of the Graph. To further customize the appearance of the
individual lines of the graph, edit the GraphLogViewSpecs of the
PDPLog's data fields.

@table @code
@item int x_axis_index
@vindex x_axis_index of GraphLogView
The index of the field to be used as the x (horizontal) axis.  Usually
it is easier to select this using the middle-mouse button on a field
button.
@item ViewLabel_Group labels
@vindex labels of GraphLogView
The listing of all the extra labels (string text) on the graph.
@item ColorScaleSpec* colorspec
@vindex colorspec of GraphLogView
The color spectrum for this display (for TRACE_COLOR or VALUE_COLOR line displays).
@item bool separate_graphs
@vindex separate_graphs of GraphLogView
Draw each group of lines sharing a Y axis using separate graphs
@item PosTwoDCoord graph_layout
@vindex graph_layout of GraphLogView
Arrangement of graphs for separate graphs -- these are just rough
constraints -- actual geometry will be adjusted to fit number of graphs.
@end table

@c ======================================
@c    <node>, <next>, <prev>, <up>
@node  log-views-graph-functions,  , log-views-graph-variables, log-views-graph
@subsubsection GraphLogView Functions

The GraphLogView provides the following functions:

@table @code
@item SetColorSpec(ColorScaleSpec* colors)
@findex SetColorSpec on GraphLogView
Set the color spectrum to use for color-coding values (NULL = use default)
@item SetBackGround(RGBA background)
@findex SetBackGround on GraphLogView
Sets the graph area's background color. When printing the graph it is 
useful to set this color to white.
@item UpdateLineFeatures()
@findex UpdateLineFeatures on GraphLogView
Update the update color, line type, point type, etc of lines in accordance with the
current settings for the ordering of these features.  Only visible lines are updated.
@item SetLineFeatures(ColorType color_type, SequenceType sequence_1, SequenceType sequence_2,  SequenceType sequence_3, bool visible_only)
@findex SetLineFeatures on GraphLogView
Sets the features of the all the lines or only the visible lines if
@code{visible_only} is set. The lines' features are determined by
iterating over the possible choices in sequence_1, and then when those
choices are exhausted, incrementing sequence_2 and repeating the
possible choices in sequence_1 again. This is likewise extended to
sequence_3 if need be until all of the lines' features have been set.
The @code{color_type} argument is used to determine the colorscale to
sequence over for the sequence arguments which are set to @code{COLORS}.
The other possible choices of sequence types are @code{LINES} and
@code{POINTS}.

@item SetLineWidths(float line_width)
@findex SetLineWidths on GraphLogView
Set the widths of all lines in the graph to given value
@item SetLineType(LineType line_type)
@findex SetLineType on GraphLogView
Set all line types to given type
@item ShareAxisAfter(GraphViewSpec* axis_var)
@findex on ShareAxisAfter GraphLogView
Make all displayed variables after given axis_var share Y axis with axis_var
@item ShareAxes()
@findex ShareAxes on GraphLogView
Make all groups of columns share the same Y axis
@item SeparateAxes()
@findex SeparateAxes on GraphLogView
Each column of data gets its own Y axis
@item PlotRows()
@findex PlotRows on GraphLogView
Plot the data across rows of grouped columns (x axis = column index, y
axis = values for each column in one row) instead of down the columns
@item PlotCols()
@findex PlotCols on GraphLogView
Plot the data down columns (standard mode)
@item SeparateGraphs(int x_layout, int y_layout)
@findex SeparateGraphs on GraphLogView
Draw each group of lines sharing the same Y axis using separate
graphs, with the given layout of graphs in the display. Sets the
@code{graph_layout} and @code{separate_graphs} parameters.
@item OneGraph()
@findex OneGraph on GraphLogView
Draw all data in one graph (default).
@item TraceIncrement(float x_increment, float y_increment)
@findex TraceIncrement on GraphLogView
Each subsequent trace of data (pass through the same X axis values) is
incremented by given amount, producing a 3D-like effect.
@item StackTraces()
@findex StackTraces on GraphLogView
Arrange subsequent traces of data (pass through the same X axis
values) in non-overlapping vertically-arranged stacks.
@item UnStackTraces()
@findex UnStackTraces on GraphLogView
Subsequent traces of data (pass through the same X axis values) are
plotted overlapping on top of each other.
@item StackSharedAxes()
@findex StackSharedAxes on GraphLogView
Arrange lines that share the same Y axis in non-overlapping vertically-arranged stacks.
@item UnStackSharedAxes()
@findex UnStackSharedAxes on GraphLogView
Lines that share the same Y axis are plotted overlapping on top of each other.
@item SpikeRaster(float thresh)
@findex SpikeRaster on GraphLogView
Display spike rasters with given threshold for cutting a spike
(@code{trace_incr.y = 1}, @code{vertical = NO_VERTICAL},
@code{line_type = TRESH_POINTS}).
@item ColorRaster()
@findex ColorRaster on GraphLogView
Display values as rasters of lines colored according to the values of the lines.
@item StandardLines()
@findex StandardLines on GraphLogView
Get rid of raster-style display and return to 'standard' graph line display.
@item SetXAxis (char* nm)
@findex SetXAxis on GraphLogView 
Sets the @code{x-axis_index} of the view to the field named @code{nm}. If
there is no field named @code{nm} then the index is unchanged.
@end table

@c ======================================
@c    <node>, <next>, <prev>, <up>
@node  log-views-grid,  , log-views-graph, log-views
@subsection The Grid LogView
@tindex GridLogView
@tindex GridLog

@ifset html
@ifhtml
<IMG SRC="pics/xor.gridlogview.gif" ALIGN="MIDDLE" ALT="The GridLogView">
<P>
<B> Figure: </B> The GridLogView
<P>
@end ifhtml
@end ifset
@iftex
@tex
\medskip
\global\advance\texfigno by 1
\input epsf
\epsfysize=3.0in
\centerline{\epsfbox{/usr/local/pdp++/manual/pics/xor.gridlogview.epsi}}
\noindent {\bf Figure: \number\texfigno} The Grid Log Viewer
@end tex
@end iftex
@ifinfo
Figure of: <The Grid Log Viewer> here
@end ifinfo

The GridLogView is similar to the TextLogView in that it displays from
top to bottom sequential lines of Log data. It differs however in that
the values of the data can be displayed as colored blocks similar to the
units in the NetView as well as the text output style of the
TextLogView.  

In addition, the columns of Log data can be arranged in a custom fashion
in a 2-D grid for each "line" of data. This is useful especially for
MonitorStats which generate a separate column of data for each value
recorded from the NetView.  For Example: If a MonitorStat was monitoring
the activations a 5x5 layer it would generate 25 columns of data. In the
GridLogView these 25 columns could be arranged as in a 5x5 grid in the
same layout as the units in the monitored Layer.  Indeed, a monitored
layer automatically sets its geometry to be used for the default
configuration of the GridLogView.

The header label information in the GridLogView is also different in
that is is arranged in the same grid layout as the data and its field
header name labels are selectable and manipulable with the mouse.  This
allows complete interactive configuration of the GridLogView display, as
follows:

@table @b
@item Move with left-mouse-button (LMB)
Clicking and dragging on a header item will move it, in unit-level
chunks, and will then update the display of all the corresponding data
for that column.  Items can be moved anywhere, and overlap is not a
problem (previous versions would crash upon overlap).
@item Reshape with Shift-LMB or middle-mouse-button
For items that are displayed in the header with a grid of boxes (e.g.,
monitored values), you can reshape the grid.  The grid will not shrink
below the number of elements to be displayed, so keep that in mind as
you reshape it.
@item Edit with right-mouse-button (RMB)
Clicking with the right mouse button will pull up the GridLogViewSpec
for that item for more detailed configuration
(@pxref{log-views-grid-custom}). 
@end table

Resizing the GridLogView window changes the number of visible data
lines, always in such a way as to keep the grids roughly square.  So, if
you want to have more items in the display, this can also be achieved by
making the window narrower!

@menu
* log-views-grid-logview::      The GridLogView object
* log-views-grid-custom::       Customizing the GridLogView Display
@end menu

@c ======================================
@c    <node>, <next>, <prev>, <up>
@node  log-views-grid-logview, log-views-grid-custom, log-views-grid, log-views-grid
@subsubsection The GridLogView Class

The GridLogView class provides the following variables for customizing
the display:
@table @code
@item BlockFill fill_type
@vindex fill_type of GridLogView
Controls the way in which the Log data values are
displayed as blocks. The @code{COLOR} setting fills the block with its
value's respective color from the colorbar at the bottom of the
GridLogView display. The @code{AREA} and @code{LINEAR} fill the block with
size-varying spirals in a manner similar to the spirals in the NetView
and described in more detail in that section. (@pxref{net-view}). 
@item ColorScale* colorspec
@vindex colorspec of GridLogView
The colorscale to use for the colorbar at the bottom of the
GridLogView display (@pxref{gui-colors}).
@item int block_size
@vindex block_size of GridLogView
The size (width and height) of the block area for the value
blocks --- note that this is only a @i{maximum} value -- if the blocks
need to be shrunk to fit everything in the current window size, they
will be!
@item int block_border_size
@vindex block_border_size of GridLogView
The horizontal and vertical spacing between the blocks in the
GridLogView.
@item bool header_on
@vindex header_on of GridLogView
Whether to display the header or not (also accessable through the
@i{Hdr} check box on the display itself).
@item bool auto_scale
@vindex auto_scale of GridLogView
Whether to scale the block colors by the actual values of items
displayed, or to use a fixed range given by the colorscale at the bottom
of the screen (also accessable through the @i{Auto} check box on the
display itself).
@item FontSpec view_font
@vindex view_font of GridLogView
Font to use for rendering of all text in the display.
@end table

The GridLogView also provides the following functions:
@table @code
@item SetColorSpec(ColorScaleSpec* colors)
@findex SetColorSpec on GridLogView
Set the color spectrum to use for color-coding values (NULL = use default)
@item SetBlockFill(BlockFill fill_typ)
@findex SetBlockFill on GridLogView
Set's the way that data blocks representing values are displayed
according to the @code{fill_type} variable of the GridLogView, either
@code{COLOR}, @code{AREA}, or @code{LINEAR}.
@item SetBlockSizes(int block_sz, int border sz)
@findex SetBlockSizes on GridLogView
Set's the @i{maximum} size of the data blocks -- actual size can be
smaller depending on size of display.
@item UpdateGridLayout(MatrixLayout layout)
@findex UpdateGridLayout on GridLogView
Arranges the columns of data to fit without gaps, according to the
geometry of the @code{view_spec}. Possible choices for @code{layout} are:
@table @code
@item LFT_RGT_BOT_TOP
@item LFT_RGT_TOP_BOT
@item BOT_TOP_LFT_RGT
@item TOP_BOT_LFT_RGT
@end table
These are explained more fully in the next section.
@item SetViewFontSize(int point_size)
@findex SetViewFontSize on GridLogView
Set the point size of the font used for labels in the display
@item AllBlockTextOn()
@findex AllBlockTextOn on GridLogView
Turn text on (in addition to the block) for all block displayed items.
@item AllBlockTextOff()
@findex AllBlockTextOff on GridLogView
Turn text off for all block displayed items (so they only display as colored blocks).
@end table

@c ======================================
@c    <node>, <next>, <prev>, <up>
@node  log-views-grid-custom,  , log-views-grid-logview, log-views-grid
@subsubsection  Customizing the GridLogView Display
@tindex  DA_GridViewSpec
@tindex  DT_GridViewSpec

In addition to the general customization variables available on the
GridLogView object, the GridViewSpec objects allow precise control
over the positioning and display style of the data elements in the
GridLogView.

Each of the columns of data in the PDPLog has an associated
GridViewSpec in the GridLogView. Some of the columns of data have
been grouped together by their generating statistics and will also have a
DT_GridViewSpec for the entire group of data columns.

The GridViewSpec provides the following customizable variables:

@table @code
@item TDGeometry pos
@vindex pos of GridLogViewSpec
Indicates the @b{absolute} position in the grid in which this data
column's values will appear (i.e., even if the GridLogViewSpec is part
of an associated group of GridLogViewSpecs this variable will indicate
the absolute position of this column's value). The Z component of the
position is ignored. (0,0) is in the lower left corner of each line in
the GridLogView.
@item DisplayStyle display_style
@vindex display_style of GridViewSpec
Controls the way in which the Log data values for this
column are displayed. The choices are:
@table @code
@item TEXT
Display the values as text only
@item BLOCK
Display the values as a colored block
@item TEXT_AND_BLOCK
Display the block overlaid with with text
@end table
@item bool scale_on
@vindex scale_on of GridViewSpec
If set, and if the display style includes BLOCK, then this column of
data will participate in setting the overall scaling of values.
@end table

For data columns organized into groups (e.g., the output of a
MonitorStat on a layer's worth of activations), the DT_GridViewSpec
provides the following variables:

@table @code
@item TDGeometry pos
@vindex pos of DT_GridViewSpec
Indicate the position in the grid in which this group of data columns'
values will appear. The Z component of the position is ignored. (0,0) is
in the lower left corner of each line of the GridLogView.
@item TDGeometry geom
@vindex geom of DT_GridViewSpec
Controls the size of the region in which the GridViewSpecs of the this
DT_GridViewSpec are positioned.
@item MatrixLayout layout
@vindex layout of DT_GridViewSpec
Controls how the individual elements within the group are positioned
relative to each other, as follows (note this is also used in the
UpdateLayout function):
@table @code
@item LFT_RGT_BOT_TOP
Increment column first, then decrement row, start at bottom left:
@example
 789
 456
 123
@end example
@item LFT_RGT_TOP_BOT
Increment column first, then increment row, start at top left:
@example
 123
 456
 789
@end example
@item BOT_TOP_LFT_RGT
Decrement row first, then increment column, start at bottom left:
@example
 369
 258
 147
@end example
@item TOP_BOT_LFT_RGT
Increment row first, then increment column, start at top left:
@example
 147
 258
 369
@end example
@end table

@item Bool use_gp_name
@vindex use_gp_name of DT_GridViewSpec
When this variable is set to @code{true} a single label of the name of
the group's DT_GridViewSpec is used instead of individual labels for all
the GridViewSpecs of the group.  This also determines whether the
display_style used will be that of the group or the individual elements.
@item DisplayStyle display_style
@vindex display_style of DT_GridViewSpec
Controls how the data is displayed, either TEXT, BLOCK, or both.
@end table

The DT_GridViewSpec provides the following functions:
@table @code
@item UpdateLayout(MatrixLayout ml)
@findex UpdateLayout on DT_GridViewSpec
Repositions the GridViewSpecs according to the @code{ml} and the
@code{geom} variable.  See @code{layout} variable above, which is what
is used if @code{DEFAULT} is selected for the @code{ml}, for
descriptions of the layout options.
@end table

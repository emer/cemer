@c uncomment the following two lines for 'update every node' command
@c @node  how
@c @chapter How-to Guide

This chapter provides step-by-step instructions on how to perform
various commonly-used operations.  It contains pointers to the other
sections of the manual that provide more information about each step of
the operation, so look for something close to what you want to do if you
can't find it exactly.  Also, many questions can be answered by looking
at the relevant section of the manual.

It also contains a description of the @code{Wizard} object, which automates
many of these commonly-used tasks.

@menu
* how-proc::                    Questions about Processes
* how-net::                     Questions about Networks
* how-env::                     Questions about Environments
* how-css::                     Questions about CSS
* how-wizard::                  The Wizard Object
@end menu

@c ======================================
@c    <node>, <next>, <prev>, <up>
@node  how-proc, how-net, how, how
@section Questions about Processes

@table @b
@cindex Stopping Criterion
@item How to I set a stopping criterion for training?
The stopping criterion is part of the statistic process that has the
data on which the criterion is based.  Thus, if you want to stop
training based on sum-squared-error, the @b{SE_Stat}
(@pxref{proc-stats-se}) is where to go to set the criterion.  The
criterion is always set in the statistic that is located in the
@code{loop_stats} of the process you wish to stop.  So, if you wan to
stop training, look in the @b{TrainProcess} (@pxref{proc-levels-train})
for the statistic.

@cindex Recording Activations
@cindex State Variables, Logging
@cindex Logging, State Variables
@item How do I record the activations of the units in my network?
This is accomplished by creating a @b{MonitorStat}, which gathers
information from the network and makes it available for logging.  The
easiest way to do this is through the @b{NetView} (@pxref{net-view}),
where you can select the objects to be monitored, the variable to
monitor, and it will create an appropriate MonitorStat for you.  Or,
you can use @code{Stats/RecordLayerValues} from the @b{Wizard}
(@pxref{how-wizard}). Note that the monitor stat is created in the
schedule process that corresponds to the time-grain at which you want
the information recorded.  It is the log of this process which will
show the values you are recording.  For more info, see
@ref{proc-stats-monitor}.

@cindex Principal Components Analysis
@cindex Multidimensional Scaling
@cindex Cluster Plot
@cindex Analysis, of Network Representations
@cindex Representations, Analysis
@cindex Network, Analysis of
@item How do I analyze the representations in my network (e.g., cluster plots, PCA, MDS)?
There are two basic strategies.  Both start by recording data from the
appropriate layer in the network (e.g., the hidden layer), using a
@b{MonitorStat} as described above.  The simplest, but less automated,
technique is just create a log of the recorded data (e.g., if
recording at the Trial process level, create a log of the trial
process -- any kind of log will do, but a @b{GridLog} might be the
most appropriate), and then use the @code{Analyze} menu on the log to
analyze the data (@pxref{log-views-logview}).  When using this
technique, you need to remember to clear the log at the appropriate
time so it contains just the data you want to analyze.

A more automated technique involves copying the monitored information
into an environment using a @b{CopyToEnvStat} -- the environment
serves as a kind of data buffer for the network activations, and
contains the necessary analysis routines.  Once the data is copied
into the environment, you can just use the @code{Analyze} menu, or
better yet, create a @b{DispDataEnvProc} that automatically displays
the results of an analysis of a data environment.  This latter
technique is employed by the @b{Wizard} @code{Stats/Analyze Net Layer}
function, which automates all of the above steps, and is highly
recommended.  Pieces of these steps are also found in related wizard
functions such as @code{Auto Analyze Data Env} and @code{Save Values
in Data Env}.  See @ref{how-wizard}.

Regardless of the technique, the set of available analyses, which
include cluster plots, Principal Components Analysis (PCA), and
Multidimensional Scaling (MDS) are described in the @b{Environment}
@code{Analyze} menu (@pxref{env-analyze}).

@cindex Stats, Receptive Fields
@cindex Network, Receptive Fields
@cindex Receptive Fields
@item How can I get receptive field plots from my network?
The @b{UnitActRFStat} (@pxref{proc-stats-actrf}) and
@b{DispNetWeightsProc} (@pxref{proc-special-misc}) processes both
support the display of receptive fields.  The former uses a
reverse-correlation technique that works for any set of layers,
regardless of connectivity, while the latter only plots directly
connected sets of weights.  These are supported by the @b{Wizard}
@code{Act Based Receptive Field} and @code{Display Net Weights}
functions (@pxref{how-wizard}).

@cindex Reaction Time
@cindex Settling Time
@cindex Cycles to Settle
@cindex Time, Reaction or Settling Cycles
@item How do I record a reaction time measure (cycles) from my network?
Experience in a variety of cases has shown that human reaction times
can be best modeled by recording the number of processing cycles it
takes for a response/output layer unit to exceed some kind of activity
threshold.  This can be measured with the @b{ActThreshRTStat}
@ref{proc-stats-rt} (see also the @b{Wizard} @code{Stop On Act Thresh}
function, @ref{how-wizard}).  One can also use the @b{CyclesToSettle}
statistic (@pxref{proc-stats-misc}) to record however many cycles were
used during a @b{Settle} process, but be careful because the settle
process is typically stopped by a statistic that records the change in
activation over time (in @file{cs++} this is @b{CsMaxDa}; in
@file{leabra++} it is @b{LeabraMaxDa}), to ensure that the activation
changes have gone below some threshold.  This kind of change-based
reaction time measure is typically not such a good measure of human
reaction time.

@cindex Background Processes
@item How do I run my network in the background for training?
Often networks take a while to learn, and it is nice to be able to run
them in the background for a day or two. To do this, get the network all
setup to train, save it, and then use the following type of command:
@example
unix > pdp++ -nogui -f startup.css <myproj> <extra args> &
@end example
where @file{pdp++} refers to the PDP++ executable you are using (bp++,
cs++, etc), and @code{-nogui} tells it to not open up the graphical user
interface, and @code{-f startup.css} is a script file that will automate
the process of loading the project and running it.  For more information
on different startup arguments for PDP++, see @ref{proj-startup}.  Also,
check out the comments at the top of @file{startup.css} (located in the
@file{css/include} directory) to see what kinds of assumptions it makes
about your project.  Also see @ref{proj-scripts} for more useful scripts
that you can use.  See @ref{proj-signals} for information on how to
control the process once it is running in the background.

@cindex Network Auto Save
@item How do I automatically save my networks after training?
This can be accomplished by creating a @b{SaveNetsProc} or
@b{SaveWtsProc} in the @code{final_procs} group of an appropriate Batch
or Train process.  This process names the network with the name field
of the network object plus the current epoch and, if present, batch
counters.  You can set the mod value of this process to save the
networks at different intervals.  An example project using this is
@file{demo/bp/gridsearch_xor.proj.gz}.

There is a CSS script version of this process called
@file{save_networks.css} in the @file{css/include} directory, as well as
a modified version that saves networks that get below some criterion
(which is presumably higher than the stopping criterion), called
@file{save_good_nets.css}.  These scripts are meant to be attached to
@b{ScriptProcess} objects created in the @code{loop_procs} group of an
appropriate Batch or Train process.  They basically just issue a save
command on the network, but they also give the network a name based on
the current epoch and/or batch counters.  See these scripts for more
detailed documentation.

@cindex Process Hierarchy, Changing
@item How do I change one of the processes in my schedule process hierarchy?
All objects can be changed to a different type using the Change Type menu
option (ChangeMyType function in CSS).  In the project view, just select
the object you want to change, and hit the Change Type button, and it
will change the type, and reset all the relevant pointers so your
process hierarchy should remain intact.

@item How do I remove a higher-level process object without losing the lower-level ones?
If you remove a process object by using the @i{.processes/} @i{Remove}
option, it will automatically remove all the processes below the one
removed.  However, if you do @i{Object/Close} on the object itself, it
will just remove itself and close-up the gap between the remaining
processes (in terms of stat aggregation, etc).  The @i{Rmv Obj(s)}
button on the project view also does this kind of remove.  Finally, you
can use the @i{Structure/RemoveSuperProc} and @i{RemoveSubProc} menu
options on a process object itself to remove its parent or sub process.

@item Why can't I change the environment or network pointer in my process?
The @code{environment} and @code{network} pointers are automatically
inherited from the parent process in the hierarchy (this is true for
stats and other process objects hanging off of a given process as well).
This means that you can only change these at the top-level process in a
given hierarchy.  On the other hand, it means that when you want to
change these pointers, you only have to change them in one place and
they are automatically propagated to all processes (@pxref{proc-base}).

@cindex Statistics, Where to Create?
@item Where do I create a given statistic process?
Each statistic process "knows" where to create itself in the standard
schedule process hierarchy.  This default location will be the one shown
when you use the @i{NewStat} menu option in the @i{.processes} menu on
the project.  Use this to create your statistic.  In general, most
statistics should be created in a relatively low-level process, such as
the @b{TrialProcess}, since most stats deal with data that changes
event-by-event.  Remember that you create the stat at the lowest level
so that it can compute the raw information, and these low-level values
can be aggregated up the processing hierarchy if higher-level
information is desired, see @ref{proc-stats}.

@cindex Statistics, Naming
@cindex Naming, Statistics
@item Why can't I change the name of my statistic?
First, the name of the statistic object is not the same as the label
that is associated with that object in the log (though they are
related), so changing one will not change the other.  The Stat object
names are automatically set to reflect the aggregation and layer
settings of the stat, see @ref{proc-stats}.  This is true as long as the
name contains the type name of the stat (e.g., SE_Stat), so if you want
to give a stat a custom name, make sure it doesn't include the type
name.

To change the label associated with the stat as it @emph{appears in the
log}, you need to edit the @b{StatVal} object(s) that contains the value of
the statistic.  This object contains a @code{name} field, which is what
determines the label used by the log.  However, as it appears on most
stats (e.g., SE_Stat), the @code{name} field is hidden, so you have to
use the CSS script to set it.  Typing:

@example
css> .processes[1].loop_stats[0].se.Edit();
@end example

will pull up an editor for the epoch level SE_Stat StatVal (which is the
member @code{se} of an SE_Stat) in the @file{demo/bp/xor.proj.gz} demo,
and allow you to edit the name.  Alternatively you can use
@i{PDP++Root/Object/Browe} and click your way through the process
hierarchy until you get to the variable you want to change, and then hit
@i{Select} to edit it.  You will have to do a @code{GetHeaders} on the
log to see this new name.  Other stats like ScriptStat have a list of
StatVals, which, when edited, allow you to edit the names directly.

An easier alternative is to simply change the @code{display_name} of the
@b{ViewSpec} in the relevant log.

@cindex Epoch Counter
@item How do I get the epoch counter into my testing process?
The epoch counter, which is on the @b{TrainProcess} is not directly
available to a testing process, which typically is created at the epoch
level.  Thus, you need to add a @b{EpochCounterStat} to the final stats
of the process where you want to see the epoch counter.  This gets the
counter off of the network itself.  To get other counters from the
training process hierarchy (i.e., the batch counter), use the
@b{ProcCounterStat}.  For more info, see @ref{proc-stats-misc}.

@cindex Closest Event
@item How do I determine which event is closest to the output my network actually produced?
The @b{ClosestEventStat} does exactly this, see
@ref{proc-stats-close-event}. 

@cindex Cross-validation
@item How do I create a cross-validation setup?
Cross-validation is accomplished by periodically testing during
training.  Thus, you simply need to create a testing process
hierarchy, (at the Epoch level), and link your testing epoch process
into the @code{loop_procs} of the training process.  This can be done
with the @b{Wizard} @code{Processes/Cross Validation} function
(@pxref{how-wizard}).  You should set the modulo factor (in the
@code{mod} field of the process) of your testing epoch process to
reflect the frequency with which you want to perform testing.  See
@file{demo/bp_misc/bp_xval.proj.gz} for a demonstration of a
cross-validation training setup.

@item How do I set the stopping criteria for training based on testing error (e.g., for cross-validation)?
Add an aggregator stat of the testing epoch stat in the
@code{final_stats} of your training epoch process (i.e., make an
@b{SE_Stat} there, set its @code{time_agg.from} to point to your test
epoch @b{SE_Stat}, use the @code{LAST} operator).  You will want to
create aggregates of this stat (which is itself an aggregator) using
@code{LAST}, and set the stopping criterion in the aggregator of this
stat in the loop_stats of the train process.  This is all accomplished
by the @b{Wizard} @code{Processes/Cross Validation} function.  The
project @file{demo/bp_misc/bp_dig_xval.proj.gz} contains an example of
this.

@item How do I graph both training and testing error (e.g., for cross-validation)?
If you follow the steps for the previous item, a graph log at the level
of the training epoch process will show both the training and testing
error.  Again, see the demo project.

@cindex Hybrid Networks
@item How do I make a hybrid network of two different types of
algorithms?  Since all schedule process types assume that a given
network has all of the appropriate types of objects (i.e., @b{BpUnit}'s,
@b{BpCon}'s, etc for backprop), you have to create two separate
networks, and then link them together with a @b{BridgeProcess}, see
@ref{proc-special-bridge}.

@cindex Parallel Processing
@cindex DMEM
@cindex MPI
@cindex Distributed Memory Processing
@cindex Event-wise Distributed Memory Processing
@item How do I setup distributed memory processing across events?
The EpochProcess supports distributed memory processing of events
(using the MPI protocol), where each processor operates on a different
set of events, sharing its results with the other processors to
achieve processing of the entire epoch.  This implies batch-mode
weight updates.  This is very efficient, and can produce nearly-linear
speedups in the number of additional processors used.  See
@ref{proc-epoch-dmem} for details.
@end table

@c ======================================
@c    <node>, <next>, <prev>, <up>
@node  how-net, how-env, how-proc, how
@section Questions about Networks

For information about how to build a network using the network viewer,
see @ref{net-build} and the tutorial @ref{tut-config}.  Also, many
questions can be answered by looking at the chapter on networks
@ref{net}. 

@table @b
@cindex Parameters, Different
@item How to I get certain units to use a different parameter than others?
For example, if you want certain units to use a different learning rate,
or activation function, or gain, etc... This is done by making a new
@b{UnitSpec} or @b{ConSpec} (depending on where the relevant parameter
is), and telling the relevant units or connections to use this new spec.
It is recommended that you create the spec as a child of an existing
spec (@pxref{obj-spec}), so that all the other parameters will
automatically be inherited by the new spec (except for the one you
change).  The easiest way to apply a different spec is to select the
relevant units or projections, and use the @i{Selections} menu on the
@b{NetView} (@pxref{net-view}) to set the spec.  The tutorial now has an
example of how to do this (@pxref{tut-config-running}).

@cindex Projections vs. Connections
@item What is the difference between Projections and Connections?
Projections specify the broad patterns of connectivity between layers.
Connections are the actual unit-to-unit weights and other parameters
which actually implement this connectivity.  Thus, there is always a
projection associated with a set of connections. See @ref{net-prjn}
for more details.

@cindex Weight Sharing
@cindex Weight Linking
@item How do I implement weight sharing/linking?
The @b{TesselPrjnSpec} (@pxref{net-prjn-tessel}) and the @b{LinkPrjnSpec}
(@pxref{net-prjn-misc}) are two types of projection specifications
(@pxref{net-prjn}) that implement weight sharing.  The
@b{TesselPrjnSpec} generates repeated patterns of connectivity, and it
can automatically link all of the repeated patterns together with the
same set of weights.  Thus, a set of units in a receiving layer can all
have the same receptive field from a given sending layer, and all of the
units can use the same set of weights to define their receptive field.
The @b{LinkPrjnSpec} allows individual or small groups of weights to be
specifically linked together, even if these connections are in different
layers in the network.  It does not generate any connectivity itself, it
simply causes existing connections to share weights.

@cindex Lesion, Temporary
@cindex Layer Lesion
@item Can I temporarily lesion a layer in my network?
Sometimes, one wants to pre-train part of a network on one task, and
then subject the rest of the network to some more complex task.  This
process is greatly facilitated by being able to create the entire
network at the outset, and then temporarily "lesion" certain layers
during pre-training.  This can be accomplished by simply checking the
@code{lesion} flag on the @b{Layer} object (@pxref{net-layer}).

@cindex Lesion, Weights
@cindex Lesion, Units
@item Are there functions for lesioning the weights or units in the network?
Yes, @code{LesionCons}, @code{AddNoiseToWeights},
@code{TransformWeights}, and @code{PruneCons} all perform various
manipulations on the weights in a network, and could be used to
simulation "lesions" of the network.  @code{LesionUnits} lesions units.
These functions, like most in the network, can be called at various
levels of granularity from a single group of weights (or units) up to
the entire network.  See (@pxref{net-net}) for details.

@cindex Initial Weights
@cindex Weights, Initial Values
@item How can I use a specified (non-random) set of initial weight values?
There are several ways to do this.  One is to write a CSS script to set
the weight values by reading them in from a file or from values coded
into the script itself.  This script can be attached to a
@b{ScriptPrjnSpec} so it is run automatically when the network is
connected (@pxref{net-prjn-misc}).  It is also possible to use a
@b{TesselPrjnSpec} (@pxref{net-prjn-tessel}) or @b{RandomPrjnSpec}
(@pxref{net-prjn-random}) in conjunction with the @code{init_wts} flag
to specify initial weight patterns, which are used instead of the random
ones whenever the network is initialized (@pxref{net-prjn-spec}).  You
could also construct a "donor" network that had the intial weights set
as you wanted them (by hand or whatever), and then use the
@code{CopyFrom} or @code{Copy_Weights} function to initialize your
training net from the donor net (@pxref{net-net}).  Similarly, you could
use @code{WriteWeights} and @code{ReadWeights} to save and load weights
from a file.

@cindex Weights, Matrix View
@item Is there a way to view the weights for a set of multiple units at the same time?
Yes -- the function @code{GridViewWeights} on the network (in the
@i{Actions} menu) will display the entire weight matrix between two
layers of the network on a GridLog.  Also, you can plot a matrix of
events from an environment using the @code{EnvToGrid} function on an
environment (@i{Generate} menu).  This is useful for activity-based
receptive fields computed via the @b{UnitActRFStat}
(@pxref{proc-stats-actrf}), which are stored in an @b{Environment}.

@cindex Parallel Processing
@cindex DMEM
@cindex MPI
@cindex Distributed Memory Processing
@cindex Network, Distributed Memory Processing
@item How do I setup distributed memory processing across multiple processors?
The Network object supports distributed memory processing of
connections (using the MPI protocol), where each processor maintains a
different set of connections and performs operations on only this
subset, sharing its results with the other processors to achieve
processing of the entire network.  See @ref{net-dmem} for details on
how to configure this.  Given the relatively large amount of
communication required, this is efficient only for relatively large
networks (e.g., above 250 units per layer for 4 layers).  In
benchmarks on Pentium 4 Xeon cluster system connected with a fast
Myrinet fiber optic switched network connection, networks of 500 units
per layer for 4 layers achieved @emph{better} than 2x speedup by
splitting across 2 processors, presumably by making the split network
fit within processor cache whereas the entire one did not.  This did
not scale that well for more than 2 processors, suggesting that cache
is the biggest factor for this form of dmem processing.  However,
there is also the ability to distribute events across multiple
processors, which achieves more reliable speedups
(@pxref{proc-epoch-dmem}).
@end table

@c ======================================
@c    <node>, <next>, <prev>, <up>
@node  how-env, how-css, how-net, how
@section Questions about Environments

@table @b
@cindex Event Frequencies
@cindex Frequency, Events
@item How do I present events with different frequencies?
There is a type of environment that implements frequency-based
presentation of events.  See @ref{env-freq} for details.  Note that you
can do @code{Change Type} on an existing environment to change it to a
frequency environment, retaining all the patterns, etc.  However, you'll
also need to convert the individual events to @b{FreqEvents} using
change type on them.  An alternative is to create a new FreqEnv, create
the proper number of Freq Events, and then do @code{CopyTo} on the
original environment to copy its stuff to the new one.

@cindex Sequences of Events
@cindex Event Sequences
@item How do I present sequences of events in order?
This requires both a structured environment and a set of processes that
can use that structure to present sequences.  The environment must
simply have the events in sub-groups where each sub-group defines a
different sequence of events (@pxref{env-seq}).  The @b{SequenceEpoch}
and the @b{SequenceProcess} work together to present sequenced events.
The @b{SequenceEpoch} iterates through the different sequences (groups)
of events (and determines if they are randomized or not at that level),
and the @b{SequenceProcess} iterates through the events in a given
sequence (and determines the order of the events themselves).  See
@ref{proc-special-seq} for details.

@cindex Patterns, from a file
@cindex Events, from a file
@cindex File, reading events from
@item How do I read patterns/events from a file?
The function @code{ReadText} on the @b{Environment} object will read
in events from a text file, including files formatted for the old PDP
software.  This file has a simple format.  See @ref{env-import} for
details on the file format and how to use the function.

@item How do I read patterns/events from a file INCREMENTALLY during training?
The object @b{FromFileEnv} (@pxref{env-other}) reads events one epoch
or one event at a time from a file (either text or binary format) for
presentation to the network.  This should be useful for very large
environments or very large patterns, or both.  Reading one event at a
time uses the ``interactive'' interface to the environment
(GetNextEvent) meaning that the @b{InteractiveEpoch} epoch process
(@pxref{proc-special-inter}) must be used.

@cindex Events, Presenting
@cindex Presenting Events
@item How do I present an arbirarily-selected event to the network?
First, view the Environment that contains the event, scroll the list of
events to the desired one, and use the right-mouse-button to edit that
event.  This brings up an 'Edit' dialog, containing a 'PresentEvent'
button at the bottom.  Clicking this button will present the event using
the selected TrialProcess (which must already be created, and determines
which network is used, etc). 

@cindex Events, Different Targets
@item How do I have some events that set the output target, and others
that don't, or more generally, have events do different things within
the environment?
How an event is presented to the network, and the very
configuration of the event itself, is determined by the @b{EventSpec}
and its associated @b{PatternSpec}s.  These can be configured by hitting
@i{Edit Specs} on the @b{EnviroView}.  To have different events do
different things, you need two (or more) different event specs.  Once
you have configured the different event specs, you can click on events
(after doing @i{Edit Events}) and select @i{View: Action/Set Event Spec}
to set the event specs for the selected events.

@cindex Event Specs, updating from Network
@cindex Pattern Specs, updating from Network
@item How can I quickly update my Event specifications (pattern layout, size) from corresponding layers on the network.
Within the environment viewer, select @b{UpdateAllEventSpecs} in the
@i{Actions} menu -- this will automatically update the events to match
the current network geometry.  This function is also available in the
Wizard.

@cindex Interactive Environments
@cindex Environments, Interactive
@item How do I create an interactive environment where events depend on network responses?
This is implemented through a combination of an
@b{InteractiveScriptEnv} environment (@pxref{env-other}) and and an
@b{InteractiveEpoch} epoch process (@pxref{proc-special-inter}).  See
@file{demo/leabra/nav.proj.gz} for a working example.

@cindex Labeling Environment Patterns
@cindex Environment Patterns, Labeling
@cindex Value Labels
@item How do I label the event pattern values so I know what they stand for?
The @code{value_names} field in the @b{PatternSpec} provide labels for
the pattern values.  These can be edited in the enviro view in the
@i{Edit Specs} mode, by clicking on a pattern and hitting the @b{Edit
Names} button. To see them, you need to make sure the @b{Val Txt:}
field in the viewer is set to @b{NAMES} or @b{BOTH}.

@end table

@c ======================================
@c    <node>, <next>, <prev>, <up>
@node  how-css,  how-wizard, how-env, how
@section Questions about CSS 

@table @b

@cindex CSS, Type Information
@item How do I know what functions or members are available in CSS?
Use the 'type' command, such as 'type UnitSpec', which will display a
list of all CSS-accesable type information for that object, including
descriptive comments.  If you just type 'type' with no arguments, then a
list of all defined types is presented.

@cindex CSS, Object Copying
@item How do I call the copy operator (=) for a hard-coded objects in CSS?
Hard coded types are a little different than types defined within CSS
(e.g., a Unit is a hard-coded type), because they are used to refer to
things like units, layers, etc, in the network, which are external to
css. In particular, they are *always* pointers. There is no such thing
as a 'Unit un' in css -- its always really (implicitly) 'Unit* un'. So,
dereferencing a pointer to a hard-coded object doesn't do anything,
meaning that it can't tell the difference between assigning the pointer
to point to a new object, and copying the object that the pointer
currently points to.  To explicitly invoke the object's copy operator,
use the CopyFrom() member function (e.g., Unit* un = .units[0];
un.CopyFrom(.units[1]); ).  Note that if you obtain a pointer to a
hard-coded object via a "path" in the object hierarchy, then it knows
that this is not just a free css pointer, and it will apply CopyFrom
when you do '='.

@cindex Scripts, Auto-Run Errors
@item How do I deal with errors in Scripts that are auto-running at startup?
If you startup the program with the project name on the
command line, then the project will load over and over again if there is
an error with a script that is set to run upon loading the project
(auto-run).  The solution is to load the project from the Root menu, and
to immediately move the mouse over the xterminal window, and type a
Return into that window when the error occurs.  Then, you can debug the
problem with the script at the point where the error occurred.

@end table

@c ======================================
@c    <node>, <next>, <prev>, <up>
@node  how-wizard,  , how-css, how
@section The Wizard Object
@tindex Wizard
@cindex Wizard

The Wizard object is located in the .wizards menu on the project --
one is automatically created whenever a project is created or opened.
In the default color scheme, the wizard has a whitish-blue-green
(azure) background.  There are 6 main categories of actions that the
wizard can perform, corresponding to the main types of simulation
objects that can be created, which are arranged as button-menu's along
the bottom of the Wizard dialog.

Typically, the wizard actions prompt you for all the information
required -- the one exception is the Network configuration, which is
maintained in the values in the wizard dialog (@code{n_layers},
@code{layer_cfg}, @code{connectivity}).  The @code{Defaults} menu has
options for standard configurations of these network parameters.

So, if you want to make a network other than a simple three-layer
architecture (the default), select @code{Defaults/Multi Layer Net} and
specify how many of each type of layer (input, hidden, output) you
want.

@b{General usage:} in general you can just proceed left-right,
top-bottom in the menu buttons.  Once you have the configuration of
the network as desired (either from the Defaults functions or just by
setting by hand) then @b{Network/Std Network} will make the network
for you.  The other options below this (for some versions) contain
other optional kinds of network structures that can be constructed.
For example, @code{bp++} has an option for making an @code{SRN
Context} layer for simple recurrent networks, and @code{leabra++} has
a number of options including unit-based inhibition (instead of the
usual kWTA).

The @b{Environment/Std Env} will construct a standard (basic)
environment to fit the network configuration.  If you subsequently
change the network configuration, the @code{Update Env Fm Net} will
sync them back up.  Other options include making event groups
(@code{Sequence Events}, @code{Time Seq Events}).  Note that the
environment object, once constructed, has some useful generation
functions in the @code{Generate} menu (@pxref{env-gen}).

The @b{Processes/Std Procs} menu will make a standard process
hierarchy for training your network, starting with a Batch process at
the highest level.  The easiest way to manipulate these processes once
created is in the Project view (@pxref{proj-viewer}).  However, the
@code{Processes} menu contains a number of options for commonly-used
process types such as automatically saving networks (at the end of
training), setting up an automatic testing process, cross-validation,
and configuring the processes to deal with sequences of events within
an epoch (event groups) (@pxref{proc-special-seq}).

The @b{Stats} menu can be used to create statistics for monitoring
the network as it trains.  @code{Record Layer Values} creates a
@code{MonitorStat} (@pxref{proc-stats-monitor}) to record layer data
in a log associated with a given process.  Functions @code{Save Values
In Data Env}, @code{Auto Analyze Data Env}, and @code{Analyze Net
Layer} all support the analysis of recorded values
(@pxref{env-analyze}).  The @code{Act Based Receptive Field} creates
an @b{UnitActRFStat} for recording a receptive field for any layer in
the network from any other set of layers (even if they are not
connected) using a ``reverse correlation'' technique as described in
@ref{proc-stats-actrf}.  It also automatically displays these weights
at a higher level of processing.  @code{Display Net Weights} makes a
@b{DispNetWeightsProc} (@pxref{proc-special-misc}).  @code{Stop On Act
Thresh} makes an @b{ActThreshRTStat} to stop settling when network
activations exceed threshold, providing a reaction time measure
(@pxref{proc-stats-rt}).  @code{Add Counters to Test} and @code{Get
Stats From Proc} provide ways of sharing information across different
process hierarchies (e.g., training and testing).  @code{Add Time
Counter} creates a @b{TimeCounterStat} that generates an
ever-increasing time counter that cuts across processing hierarchy
loops, and is initialized by a @b{TimeCounterResetProc}
(@pxref{proc-stats-ctrs}).

The @b{Logs/Std Logs} menu creates standard logs (trial, epoch and
batch), while @code{Log Process} provides a way of creating a log for
a given processing level.


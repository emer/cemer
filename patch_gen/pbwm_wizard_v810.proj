// ta_Dump File v3.0 -- code v8.0.9.0 rev10743
LeabraProject .projects[0] { 
 Doc_Group @.docs = [0] {
 };

 Wizard_Group @.wizards = [1] {
  LeabraWizard @[0] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @[0] { };
    UserDataItem @[1] { };
   };
  };
 };

 ControlPanel_Group @.ctrl_panels = [4] {
  ControlPanel @[0] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @[0] { };
   };

   ControlPanelMember_Group @.mbrs = [3] {
    ControlPanelMember @[0] { };
    ControlPanelMember @[1] { };
    ControlPanelMember @[2] { };
   };

   ControlPanelMethod_Group @.mths = [4] {
    ControlPanelMethod @[0] { };
    ControlPanelMethod @[1] { };
    ControlPanelMethod @[2] { };
    ControlPanelMethod @[3] { };
   };
  };
  ClusterRun @[1] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @[0] { };
   };

   ControlPanelMember_Group @.mbrs = [0] {
   };

   ControlPanelMethod_Group @.mths = [0] {
   };

   ParamSearchAlgo_List @.search_algos = [0] {
   };
  };
  ControlPanel @[2] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @[0] { };
   };

   ControlPanelMember_Group @.mbrs = [18] {
    ControlPanelMember @[0] { };
    ControlPanelMember @[1] { };
    ControlPanelMember @[2] { };
    ControlPanelMember @[3] { };
    ControlPanelMember @[4] { };
    ControlPanelMember @[5] { };
    ControlPanelMember @[6] { };
    ControlPanelMember @[7] { };
    ControlPanelMember @[8] { };
    ControlPanelMember @[9] { };
    ControlPanelMember @[10] { };
    ControlPanelMember @[11] { };
    ControlPanelMember @[12] { };
    ControlPanelMember @[13] { };
    ControlPanelMember @[14] { };
    ControlPanelMember @[15] { };
    ControlPanelMember @[16] { };
    ControlPanelMember @[17] { };
   };

   ControlPanelMethod_Group @.mths = [0] {
   };
  };
  ControlPanel @[3] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @[0] { };
   };

   ControlPanelMember_Group @.mbrs = [2] {
    ControlPanelMember @[0] { };
    ControlPanelMember @[1] { };
    ControlPanelMember_Group @.gp[0] = [11] { 
     ControlPanelMember @[0] { };
     ControlPanelMember @[1] { };
     ControlPanelMember @[2] { };
     ControlPanelMember @[3] { };
     ControlPanelMember @[4] { };
     ControlPanelMember @[5] { };
     ControlPanelMember @[6] { };
     ControlPanelMember @[7] { };
     ControlPanelMember @[8] { };
     ControlPanelMember @[9] { };
     ControlPanelMember @[10] { };
    };
    ControlPanelMember_Group @.gp[1] = [16] { 
     ControlPanelMember @[0] { };
     ControlPanelMember @[1] { };
     ControlPanelMember @[2] { };
     ControlPanelMember @[3] { };
     ControlPanelMember @[4] { };
     ControlPanelMember @[5] { };
     ControlPanelMember @[6] { };
     ControlPanelMember @[7] { };
     ControlPanelMember @[8] { };
     ControlPanelMember @[9] { };
     ControlPanelMember @[10] { };
     ControlPanelMember @[11] { };
     ControlPanelMember @[12] { };
     ControlPanelMember @[13] { };
     ControlPanelMember @[14] { };
     ControlPanelMember @[15] { };
    };
   };

   ControlPanelMethod_Group @.mths = [0] {
   };
  };
 };

 ParamSet_Group @.active_params = [0] {
 };

 ArchivedParams_Group @.archived_params = [0] {
 };

 DataTable_Group @.data = [0] {
  DataTable_Group @.gp[0] = [1] { 
   DataTable @[0] { 
    DataTableCols @.data = [3] {
     String_Data @[0] { };
     float_Data @[1] { };
     float_Data @[2] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };
   };
  };
  DataTable_Group @.gp[1] = [4] { 
   DataTable @[0] { 
    DataTableCols @.data = [166] {
     int_Data @[0] { };
     int_Data @[1] { };
     String_Data @[2] { };
     int_Data @[3] { };
     int_Data @[4] { };
     int_Data @[5] { };
     float_Data @[6] { };
     String_Data @[7] { };
     String_Data @[8] { };
     String_Data @[9] { };
     float_Data @[10] { };
     float_Data @[11] { };
     float_Data @[12] { };
     float_Data @[13] { };
     float_Data @[14] { };
     float_Data @[15] { };
     float_Data @[16] { };
     float_Data @[17] { };
     float_Data @[18] { };
     float_Data @[19] { };
     float_Data @[20] { };
     float_Data @[21] { };
     float_Data @[22] { };
     float_Data @[23] { };
     float_Data @[24] { };
     float_Data @[25] { };
     float_Data @[26] { };
     float_Data @[27] { };
     float_Data @[28] { };
     float_Data @[29] { };
     float_Data @[30] { };
     float_Data @[31] { };
     float_Data @[32] { };
     float_Data @[33] { };
     float_Data @[34] { };
     float_Data @[35] { };
     float_Data @[36] { };
     float_Data @[37] { };
     float_Data @[38] { };
     float_Data @[39] { };
     float_Data @[40] { };
     float_Data @[41] { };
     float_Data @[42] { };
     float_Data @[43] { };
     float_Data @[44] { };
     float_Data @[45] { };
     float_Data @[46] { };
     float_Data @[47] { };
     float_Data @[48] { };
     float_Data @[49] { };
     float_Data @[50] { };
     float_Data @[51] { };
     float_Data @[52] { };
     float_Data @[53] { };
     float_Data @[54] { };
     float_Data @[55] { };
     float_Data @[56] { };
     float_Data @[57] { };
     float_Data @[58] { };
     float_Data @[59] { };
     float_Data @[60] { };
     float_Data @[61] { };
     float_Data @[62] { };
     float_Data @[63] { };
     float_Data @[64] { };
     float_Data @[65] { };
     float_Data @[66] { };
     float_Data @[67] { };
     float_Data @[68] { };
     float_Data @[69] { };
     float_Data @[70] { };
     float_Data @[71] { };
     float_Data @[72] { };
     float_Data @[73] { };
     float_Data @[74] { };
     float_Data @[75] { };
     float_Data @[76] { };
     float_Data @[77] { };
     float_Data @[78] { };
     float_Data @[79] { };
     float_Data @[80] { };
     float_Data @[81] { };
     float_Data @[82] { };
     float_Data @[83] { };
     float_Data @[84] { };
     float_Data @[85] { };
     float_Data @[86] { };
     float_Data @[87] { };
     float_Data @[88] { };
     float_Data @[89] { };
     float_Data @[90] { };
     float_Data @[91] { };
     float_Data @[92] { };
     float_Data @[93] { };
     float_Data @[94] { };
     float_Data @[95] { };
     float_Data @[96] { };
     float_Data @[97] { };
     float_Data @[98] { };
     float_Data @[99] { };
     float_Data @[100] { };
     float_Data @[101] { };
     float_Data @[102] { };
     float_Data @[103] { };
     float_Data @[104] { };
     float_Data @[105] { };
     float_Data @[106] { };
     float_Data @[107] { };
     float_Data @[108] { };
     float_Data @[109] { };
     float_Data @[110] { };
     float_Data @[111] { };
     float_Data @[112] { };
     float_Data @[113] { };
     float_Data @[114] { };
     float_Data @[115] { };
     float_Data @[116] { };
     float_Data @[117] { };
     float_Data @[118] { };
     float_Data @[119] { };
     float_Data @[120] { };
     float_Data @[121] { };
     float_Data @[122] { };
     float_Data @[123] { };
     float_Data @[124] { };
     float_Data @[125] { };
     float_Data @[126] { };
     float_Data @[127] { };
     float_Data @[128] { };
     float_Data @[129] { };
     float_Data @[130] { };
     float_Data @[131] { };
     float_Data @[132] { };
     float_Data @[133] { };
     float_Data @[134] { };
     float_Data @[135] { };
     float_Data @[136] { };
     float_Data @[137] { };
     float_Data @[138] { };
     float_Data @[139] { };
     float_Data @[140] { };
     float_Data @[141] { };
     float_Data @[142] { };
     float_Data @[143] { };
     float_Data @[144] { };
     float_Data @[145] { };
     float_Data @[146] { };
     float_Data @[147] { };
     float_Data @[148] { };
     float_Data @[149] { };
     float_Data @[150] { };
     float_Data @[151] { };
     float_Data @[152] { };
     float_Data @[153] { };
     float_Data @[154] { };
     float_Data @[155] { };
     float_Data @[156] { };
     float_Data @[157] { };
     float_Data @[158] { };
     float_Data @[159] { };
     float_Data @[160] { };
     float_Data @[161] { };
     float_Data @[162] { };
     float_Data @[163] { };
     float_Data @[164] { };
     float_Data @[165] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };
   };
   DataTable @[1] { 
    DataTableCols @.data = [425] {
     int_Data @[0] { };
     int_Data @[1] { };
     float_Data @[2] { };
     float_Data @[3] { };
     float_Data @[4] { };
     float_Data @[5] { };
     float_Data @[6] { };
     float_Data @[7] { };
     float_Data @[8] { };
     float_Data @[9] { };
     float_Data @[10] { };
     float_Data @[11] { };
     float_Data @[12] { };
     float_Data @[13] { };
     float_Data @[14] { };
     float_Data @[15] { };
     float_Data @[16] { };
     float_Data @[17] { };
     float_Data @[18] { };
     float_Data @[19] { };
     float_Data @[20] { };
     float_Data @[21] { };
     float_Data @[22] { };
     float_Data @[23] { };
     float_Data @[24] { };
     float_Data @[25] { };
     float_Data @[26] { };
     float_Data @[27] { };
     float_Data @[28] { };
     float_Data @[29] { };
     float_Data @[30] { };
     float_Data @[31] { };
     float_Data @[32] { };
     float_Data @[33] { };
     float_Data @[34] { };
     float_Data @[35] { };
     float_Data @[36] { };
     float_Data @[37] { };
     float_Data @[38] { };
     float_Data @[39] { };
     float_Data @[40] { };
     float_Data @[41] { };
     float_Data @[42] { };
     float_Data @[43] { };
     float_Data @[44] { };
     float_Data @[45] { };
     float_Data @[46] { };
     float_Data @[47] { };
     float_Data @[48] { };
     float_Data @[49] { };
     float_Data @[50] { };
     float_Data @[51] { };
     float_Data @[52] { };
     float_Data @[53] { };
     float_Data @[54] { };
     float_Data @[55] { };
     float_Data @[56] { };
     float_Data @[57] { };
     float_Data @[58] { };
     float_Data @[59] { };
     float_Data @[60] { };
     float_Data @[61] { };
     float_Data @[62] { };
     float_Data @[63] { };
     float_Data @[64] { };
     float_Data @[65] { };
     float_Data @[66] { };
     float_Data @[67] { };
     float_Data @[68] { };
     float_Data @[69] { };
     float_Data @[70] { };
     float_Data @[71] { };
     float_Data @[72] { };
     float_Data @[73] { };
     float_Data @[74] { };
     float_Data @[75] { };
     float_Data @[76] { };
     float_Data @[77] { };
     float_Data @[78] { };
     float_Data @[79] { };
     float_Data @[80] { };
     float_Data @[81] { };
     float_Data @[82] { };
     float_Data @[83] { };
     float_Data @[84] { };
     float_Data @[85] { };
     float_Data @[86] { };
     float_Data @[87] { };
     float_Data @[88] { };
     float_Data @[89] { };
     float_Data @[90] { };
     float_Data @[91] { };
     float_Data @[92] { };
     float_Data @[93] { };
     float_Data @[94] { };
     float_Data @[95] { };
     float_Data @[96] { };
     float_Data @[97] { };
     float_Data @[98] { };
     float_Data @[99] { };
     float_Data @[100] { };
     float_Data @[101] { };
     float_Data @[102] { };
     float_Data @[103] { };
     float_Data @[104] { };
     float_Data @[105] { };
     float_Data @[106] { };
     float_Data @[107] { };
     float_Data @[108] { };
     float_Data @[109] { };
     float_Data @[110] { };
     float_Data @[111] { };
     float_Data @[112] { };
     float_Data @[113] { };
     float_Data @[114] { };
     float_Data @[115] { };
     float_Data @[116] { };
     float_Data @[117] { };
     float_Data @[118] { };
     float_Data @[119] { };
     float_Data @[120] { };
     float_Data @[121] { };
     float_Data @[122] { };
     float_Data @[123] { };
     float_Data @[124] { };
     float_Data @[125] { };
     float_Data @[126] { };
     float_Data @[127] { };
     float_Data @[128] { };
     float_Data @[129] { };
     float_Data @[130] { };
     float_Data @[131] { };
     float_Data @[132] { };
     float_Data @[133] { };
     float_Data @[134] { };
     float_Data @[135] { };
     float_Data @[136] { };
     float_Data @[137] { };
     float_Data @[138] { };
     float_Data @[139] { };
     float_Data @[140] { };
     float_Data @[141] { };
     float_Data @[142] { };
     float_Data @[143] { };
     float_Data @[144] { };
     float_Data @[145] { };
     float_Data @[146] { };
     float_Data @[147] { };
     float_Data @[148] { };
     float_Data @[149] { };
     float_Data @[150] { };
     float_Data @[151] { };
     float_Data @[152] { };
     float_Data @[153] { };
     float_Data @[154] { };
     float_Data @[155] { };
     float_Data @[156] { };
     float_Data @[157] { };
     float_Data @[158] { };
     float_Data @[159] { };
     float_Data @[160] { };
     float_Data @[161] { };
     float_Data @[162] { };
     float_Data @[163] { };
     float_Data @[164] { };
     float_Data @[165] { };
     float_Data @[166] { };
     float_Data @[167] { };
     float_Data @[168] { };
     float_Data @[169] { };
     float_Data @[170] { };
     float_Data @[171] { };
     float_Data @[172] { };
     float_Data @[173] { };
     float_Data @[174] { };
     float_Data @[175] { };
     float_Data @[176] { };
     float_Data @[177] { };
     float_Data @[178] { };
     float_Data @[179] { };
     float_Data @[180] { };
     float_Data @[181] { };
     float_Data @[182] { };
     float_Data @[183] { };
     float_Data @[184] { };
     float_Data @[185] { };
     float_Data @[186] { };
     float_Data @[187] { };
     float_Data @[188] { };
     float_Data @[189] { };
     float_Data @[190] { };
     float_Data @[191] { };
     float_Data @[192] { };
     float_Data @[193] { };
     float_Data @[194] { };
     float_Data @[195] { };
     float_Data @[196] { };
     float_Data @[197] { };
     float_Data @[198] { };
     float_Data @[199] { };
     float_Data @[200] { };
     float_Data @[201] { };
     float_Data @[202] { };
     float_Data @[203] { };
     float_Data @[204] { };
     float_Data @[205] { };
     float_Data @[206] { };
     float_Data @[207] { };
     float_Data @[208] { };
     float_Data @[209] { };
     float_Data @[210] { };
     float_Data @[211] { };
     float_Data @[212] { };
     float_Data @[213] { };
     float_Data @[214] { };
     float_Data @[215] { };
     float_Data @[216] { };
     float_Data @[217] { };
     float_Data @[218] { };
     float_Data @[219] { };
     float_Data @[220] { };
     float_Data @[221] { };
     float_Data @[222] { };
     float_Data @[223] { };
     float_Data @[224] { };
     float_Data @[225] { };
     float_Data @[226] { };
     float_Data @[227] { };
     float_Data @[228] { };
     float_Data @[229] { };
     float_Data @[230] { };
     float_Data @[231] { };
     float_Data @[232] { };
     float_Data @[233] { };
     float_Data @[234] { };
     float_Data @[235] { };
     float_Data @[236] { };
     float_Data @[237] { };
     float_Data @[238] { };
     float_Data @[239] { };
     float_Data @[240] { };
     float_Data @[241] { };
     float_Data @[242] { };
     float_Data @[243] { };
     float_Data @[244] { };
     float_Data @[245] { };
     float_Data @[246] { };
     float_Data @[247] { };
     float_Data @[248] { };
     float_Data @[249] { };
     float_Data @[250] { };
     float_Data @[251] { };
     float_Data @[252] { };
     float_Data @[253] { };
     float_Data @[254] { };
     float_Data @[255] { };
     float_Data @[256] { };
     float_Data @[257] { };
     float_Data @[258] { };
     float_Data @[259] { };
     float_Data @[260] { };
     float_Data @[261] { };
     float_Data @[262] { };
     float_Data @[263] { };
     float_Data @[264] { };
     float_Data @[265] { };
     float_Data @[266] { };
     float_Data @[267] { };
     float_Data @[268] { };
     float_Data @[269] { };
     float_Data @[270] { };
     float_Data @[271] { };
     float_Data @[272] { };
     float_Data @[273] { };
     float_Data @[274] { };
     float_Data @[275] { };
     float_Data @[276] { };
     float_Data @[277] { };
     float_Data @[278] { };
     float_Data @[279] { };
     float_Data @[280] { };
     float_Data @[281] { };
     float_Data @[282] { };
     float_Data @[283] { };
     float_Data @[284] { };
     float_Data @[285] { };
     float_Data @[286] { };
     float_Data @[287] { };
     float_Data @[288] { };
     float_Data @[289] { };
     float_Data @[290] { };
     float_Data @[291] { };
     float_Data @[292] { };
     float_Data @[293] { };
     float_Data @[294] { };
     float_Data @[295] { };
     float_Data @[296] { };
     float_Data @[297] { };
     float_Data @[298] { };
     float_Data @[299] { };
     float_Data @[300] { };
     float_Data @[301] { };
     float_Data @[302] { };
     float_Data @[303] { };
     float_Data @[304] { };
     float_Data @[305] { };
     float_Data @[306] { };
     float_Data @[307] { };
     float_Data @[308] { };
     float_Data @[309] { };
     float_Data @[310] { };
     float_Data @[311] { };
     float_Data @[312] { };
     float_Data @[313] { };
     float_Data @[314] { };
     float_Data @[315] { };
     float_Data @[316] { };
     float_Data @[317] { };
     float_Data @[318] { };
     float_Data @[319] { };
     float_Data @[320] { };
     float_Data @[321] { };
     float_Data @[322] { };
     float_Data @[323] { };
     float_Data @[324] { };
     float_Data @[325] { };
     float_Data @[326] { };
     float_Data @[327] { };
     float_Data @[328] { };
     float_Data @[329] { };
     float_Data @[330] { };
     float_Data @[331] { };
     float_Data @[332] { };
     float_Data @[333] { };
     float_Data @[334] { };
     float_Data @[335] { };
     float_Data @[336] { };
     float_Data @[337] { };
     float_Data @[338] { };
     float_Data @[339] { };
     float_Data @[340] { };
     float_Data @[341] { };
     float_Data @[342] { };
     float_Data @[343] { };
     float_Data @[344] { };
     float_Data @[345] { };
     float_Data @[346] { };
     float_Data @[347] { };
     float_Data @[348] { };
     float_Data @[349] { };
     float_Data @[350] { };
     float_Data @[351] { };
     float_Data @[352] { };
     float_Data @[353] { };
     float_Data @[354] { };
     float_Data @[355] { };
     float_Data @[356] { };
     float_Data @[357] { };
     float_Data @[358] { };
     float_Data @[359] { };
     float_Data @[360] { };
     float_Data @[361] { };
     float_Data @[362] { };
     float_Data @[363] { };
     float_Data @[364] { };
     float_Data @[365] { };
     float_Data @[366] { };
     float_Data @[367] { };
     float_Data @[368] { };
     float_Data @[369] { };
     float_Data @[370] { };
     float_Data @[371] { };
     float_Data @[372] { };
     float_Data @[373] { };
     float_Data @[374] { };
     float_Data @[375] { };
     float_Data @[376] { };
     float_Data @[377] { };
     float_Data @[378] { };
     float_Data @[379] { };
     float_Data @[380] { };
     float_Data @[381] { };
     float_Data @[382] { };
     float_Data @[383] { };
     float_Data @[384] { };
     float_Data @[385] { };
     float_Data @[386] { };
     float_Data @[387] { };
     float_Data @[388] { };
     float_Data @[389] { };
     float_Data @[390] { };
     float_Data @[391] { };
     float_Data @[392] { };
     float_Data @[393] { };
     float_Data @[394] { };
     float_Data @[395] { };
     float_Data @[396] { };
     float_Data @[397] { };
     float_Data @[398] { };
     float_Data @[399] { };
     float_Data @[400] { };
     float_Data @[401] { };
     float_Data @[402] { };
     float_Data @[403] { };
     float_Data @[404] { };
     float_Data @[405] { };
     float_Data @[406] { };
     float_Data @[407] { };
     float_Data @[408] { };
     float_Data @[409] { };
     float_Data @[410] { };
     float_Data @[411] { };
     float_Data @[412] { };
     float_Data @[413] { };
     float_Data @[414] { };
     float_Data @[415] { };
     float_Data @[416] { };
     float_Data @[417] { };
     float_Data @[418] { };
     float_Data @[419] { };
     float_Data @[420] { };
     float_Data @[421] { };
     float_Data @[422] { };
     float_Data @[423] { };
     float_Data @[424] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };
   };
   DataTable @[2] { 
    DataTableCols @.data = [55] {
     int_Data @[0] { };
     int_Data @[1] { };
     String_Data @[2] { };
     int_Data @[3] { };
     int_Data @[4] { };
     int_Data @[5] { };
     float_Data @[6] { };
     String_Data @[7] { };
     String_Data @[8] { };
     String_Data @[9] { };
     float_Data @[10] { };
     float_Data @[11] { };
     float_Data @[12] { };
     float_Data @[13] { };
     float_Data @[14] { };
     float_Data @[15] { };
     float_Data @[16] { };
     float_Data @[17] { };
     float_Data @[18] { };
     float_Data @[19] { };
     float_Data @[20] { };
     float_Data @[21] { };
     float_Data @[22] { };
     float_Data @[23] { };
     float_Data @[24] { };
     float_Data @[25] { };
     float_Data @[26] { };
     float_Data @[27] { };
     float_Data @[28] { };
     float_Data @[29] { };
     float_Data @[30] { };
     float_Data @[31] { };
     float_Data @[32] { };
     float_Data @[33] { };
     float_Data @[34] { };
     float_Data @[35] { };
     float_Data @[36] { };
     float_Data @[37] { };
     float_Data @[38] { };
     float_Data @[39] { };
     float_Data @[40] { };
     float_Data @[41] { };
     float_Data @[42] { };
     float_Data @[43] { };
     float_Data @[44] { };
     float_Data @[45] { };
     float_Data @[46] { };
     float_Data @[47] { };
     float_Data @[48] { };
     float_Data @[49] { };
     float_Data @[50] { };
     float_Data @[51] { };
     float_Data @[52] { };
     float_Data @[53] { };
     float_Data @[54] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };
   };
   DataTable @[3] { 
    DataTableCols @.data = [54] {
     int_Data @[0] { };
     int_Data @[1] { };
     float_Data @[2] { };
     float_Data @[3] { };
     float_Data @[4] { };
     float_Data @[5] { };
     float_Data @[6] { };
     float_Data @[7] { };
     float_Data @[8] { };
     float_Data @[9] { };
     float_Data @[10] { };
     float_Data @[11] { };
     float_Data @[12] { };
     float_Data @[13] { };
     float_Data @[14] { };
     float_Data @[15] { };
     float_Data @[16] { };
     float_Data @[17] { };
     float_Data @[18] { };
     float_Data @[19] { };
     float_Data @[20] { };
     float_Data @[21] { };
     float_Data @[22] { };
     float_Data @[23] { };
     float_Data @[24] { };
     float_Data @[25] { };
     float_Data @[26] { };
     float_Data @[27] { };
     float_Data @[28] { };
     float_Data @[29] { };
     float_Data @[30] { };
     float_Data @[31] { };
     float_Data @[32] { };
     float_Data @[33] { };
     float_Data @[34] { };
     float_Data @[35] { };
     float_Data @[36] { };
     float_Data @[37] { };
     float_Data @[38] { };
     float_Data @[39] { };
     float_Data @[40] { };
     float_Data @[41] { };
     float_Data @[42] { };
     float_Data @[43] { };
     float_Data @[44] { };
     float_Data @[45] { };
     float_Data @[46] { };
     float_Data @[47] { };
     float_Data @[48] { };
     float_Data @[49] { };
     float_Data @[50] { };
     float_Data @[51] { };
     float_Data @[52] { };
     float_Data @[53] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };
   };
  };
  DataTable_Group @.gp[2] { 
  };
 };

 Program_TopGroup @.programs = [1] {
  Program @[0] { 
   UserDataItem_List @*(.user_data_) {
    UserData_DocLink @[0] { };
   };

   ProgObjList @.objs = [0] {
   };

   ProgType_List @.types = [0] {
   };

   ProgVar_List @.args = [2] {
    ProgVar @[0] { };
    ProgVar @[1] { };
   };

   ProgVar_List @.vars = [12] {
    ProgVar @[0] { };
    ProgVar @[1] { };
    ProgVar @[2] { };
    ProgVar @[3] { };
    ProgVar @[4] { };
    ProgVar @[5] { };
    ProgVar @[6] { };
    ProgVar @[7] { };
    ProgVar @[8] { };
    ProgVar @[9] { };
    ProgVar @[10] { };
    ProgVar @[11] { };
   };

   Function_List @.functions = [0] {
   };

   ProgEl_List @.init_code = [0] {
   };

   ProgEl_List @.prog_code = [30] {
    RegisterArgs @[0] { };
    PrintExpr @[1] { };
    Comment @[2] { };
    ProgVarFmArg @[3] { };
    ProgVarFmArg @[4] { };
    ProgVarFmArg @[5] { };
    ProgVarFmArg @[6] { };
    ProgVarFmArg @[7] { };
    ProgVarFmArg @[8] { };
    ProgVarFmArg @[9] { };
    ProgVarFmArg @[10] { };
    ProgVarFmArg @[11] { };
    ControlPanelsFmArgs @[12] { };
    If @[13] { 
     ProgEl_List @.true_code = [1] {
      MethodCall @[0] { 
       ProgArg_List @.meth_args = [2] {
	ProgArg @[0] { };
	ProgArg @[1] { };
       };
      };
     };
    };
    Comment @[14] { };
    Comment @[15] { };
    If @[16] { 
     ProgEl_List @.true_code = [4] {
      ProgVarFmArg @[0] { };
      MiscCall @[1] { 
       ProgArg_List @.meth_args = [2] {
	ProgArg @[0] { };
	ProgArg @[1] { };
       };
      };
      VarIncr @[2] { };
      If @[3] { 
       ProgEl_List @.true_code = [2] {
	MethodCall @[0] { 
	 ProgArg_List @.meth_args = [4] {
	  ProgArg @[0] { };
	  ProgArg @[1] { };
	  ProgArg @[2] { };
	  ProgArg @[3] { };
	 };
	};
	MiscCall @[1] { 
	 ProgArg_List @.meth_args = [1] {
	  ProgArg @[0] { };
	 };
	};
       };
      };
     };
    };
    Else @[17] { 
     ProgEl_List @.true_code = [2] {
      MethodCall @[0] { 
       ProgArg_List @.meth_args = [4] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
	ProgArg @[3] { };
       };
      };
      MiscCall @[1] { 
       ProgArg_List @.meth_args = [1] {
	ProgArg @[0] { };
       };
      };
     };
    };
    MiscCall @[18] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    Comment @[19] { };
    MethodCall @[20] { 
     ProgArg_List @.meth_args = [4] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
      ProgArg @[3] { };
     };
    };
    MethodCall @[21] { 
     ProgArg_List @.meth_args = [3] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
     };
    };
    PrintVar @[22] { };
    Comment @[23] { };
    MethodCall @[24] { 
     ProgArg_List @.meth_args = [4] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
      ProgArg @[3] { };
     };
    };
    MethodCall @[25] { 
     ProgArg_List @.meth_args = [3] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
     };
    };
    PrintVar @[26] { };
    OtherProgramVar @[27] { };
    PrintExpr @[28] { };
    ProgramCall @[29] { 
     ProgArg_List @.prog_args = [2] {
      ProgArg @[0] { };
      ProgArg @[1] { };
     };
    };
   };
  };
  Program_Group @.gp[0] = [10] { 
   Program @[0] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @[0] { };
     ProgVar @[1] { };
    };

    ProgVar_List @.vars = [3] {
     ProgVar @[0] { };
     ProgVar @[1] { };
     ProgVar @[2] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [1] {
     NetCounterInit @[0] { };
    };

    ProgEl_List @.prog_code = [4] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [1] {
       ProgVar @[0] { };
      };
     };
     AssignExpr @[1] { };
     MemberAssign @[2] { };
     ForLoop @[3] { 
      ProgEl_List @.loop_code = [2] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [3] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	 ProgArg @[2] { };
	};
       };
       NetCounterIncr @[1] { };
      };
     };
    };
   };
   Program @[1] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [2] {
     RndSeed_List @[0] { 
      taList @.seeds = [25] {
       RndSeed @[0] { };
       RndSeed @[1] { };
       RndSeed @[2] { };
       RndSeed @[3] { };
       RndSeed @[4] { };
       RndSeed @[5] { };
       RndSeed @[6] { };
       RndSeed @[7] { };
       RndSeed @[8] { };
       RndSeed @[9] { };
       RndSeed @[10] { };
       RndSeed @[11] { };
       RndSeed @[12] { };
       RndSeed @[13] { };
       RndSeed @[14] { };
       RndSeed @[15] { };
       RndSeed @[16] { };
       RndSeed @[17] { };
       RndSeed @[18] { };
       RndSeed @[19] { };
       RndSeed @[20] { };
       RndSeed @[21] { };
       RndSeed @[22] { };
       RndSeed @[23] { };
       RndSeed @[24] { };
      };
     };
     RndSeed @[1] { };
    };

    ProgType_List @.types = [1] {
     DynEnumType @[0] { 
      DynEnumItem_List @.enums = [3] {
       DynEnumItem @[0] { };
       DynEnumItem @[1] { };
       DynEnumItem @[2] { };
      };
     };
    };

    ProgVar_List @.args = [3] {
     ProgVar @[0] { };
     ProgVar @[1] { };
     ProgVar @[2] { };
    };

    ProgVar_List @.vars = [12] {
     ProgVar @[0] { };
     ProgVar @[1] { };
     ProgVar @[2] { };
     ProgVar @[3] { };
     ProgVar @[4] { };
     ProgVar @[5] { };
     ProgVar @[6] { };
     ProgVar @[7] { };
     ProgVar @[8] { };
     ProgVar @[9] { };
     ProgVar @[10] { };
     ProgVar @[11] { };
    };

    Function_List @.functions = [1] {
     Function @[0] { 
      ProgVar_List @.args = [0] {
      };

      ProgEl_List @.fun_code = [2] {
       LocalVars @[0] { 
	ProgVar_List @.local_vars = [0] {
	};
       };
       Switch @[1] { 
	ProgEl_List @.cases = [3] {
	 CaseBlock @[0] { 
	  ProgEl_List @.prog_code = [1] {
	   MethodCall @[0] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	   };
	  };
	 };
	 CaseBlock @[1] { 
	  ProgEl_List @.prog_code = [1] {
	   MethodCall @[0] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	   };
	  };
	 };
	 CaseBlock @[2] { 
	  ProgEl_List @.prog_code = [1] {
	   MethodCall @[0] { 
	    ProgArg_List @.meth_args = [1] {
	     ProgArg @[0] { };
	    };
	   };
	  };
	 };
	};
       };
      };
     };
    };

    ProgEl_List @.init_code = [7] {
     AssignExpr @[0] { };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     AssignExpr @[2] { };
     AssignExpr @[3] { };
     FunctionCall @[4] { 
      ProgArg_List @.fun_args = [0] {
      };
     };
     WtInitPrompt @[5] { 
      ProgEl_List @.yes_code = [3] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
       MethodCall @[1] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
       PrintExpr @[2] { };
      };
     };
     AssignExpr @[6] { };
    };

    ProgEl_List @.prog_code = [10] {
     AssignExpr @[0] { };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     AssignExpr @[2] { };
     MemberAssign @[3] { };
     FunctionCall @[4] { 
      ProgArg_List @.fun_args = [0] {
      };
     };
     If @[5] { 
      ProgEl_List @.true_code = [2] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
       PrintExpr @[1] { };
      };
     };
     AssignExpr @[6] { };
     WhileLoop @[7] { 
      ProgEl_List @.loop_code = [5] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [2] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	};
       };
       NetCounterIncr @[1] { };
       If @[2] { 
	ProgEl_List @.true_code = [2] {
	 VarIncr @[0] { };
	 IfBreak @[1] { };
	};
       };
       Else @[3] { 
	ProgEl_List @.true_code = [1] {
	 AssignExpr @[0] { };
	};
       };
       If @[4] { 
	ProgEl_List @.true_code = [1] {
	 If @[0] { 
	  ProgEl_List @.true_code = [1] {
	   ProgramCall @[0] { 
	    ProgArg_List @.prog_args = [1] {
	     ProgArg @[0] { };
	    };
	   };
	  };
	 };
	};
       };
      };
     };
     If @[8] { 
      ProgEl_List @.true_code = [1] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [1] {
	 ProgArg @[0] { };
	};
       };
      };
     };
     MethodCall @[9] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
    };
   };
   Program @[2] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @[0] { };
     ProgVar @[1] { };
    };

    ProgVar_List @.vars = [6] {
     ProgVar @[0] { };
     ProgVar @[1] { };
     ProgVar @[2] { };
     ProgVar @[3] { };
     ProgVar @[4] { };
     ProgVar @[5] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [2] {
     NetCounterInit @[0] { };
     AssignExpr @[1] { };
    };

    ProgEl_List @.prog_code = [10] {
     NetCounterInit @[0] { };
     AssignExpr @[1] { };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetDataLoop @[5] { 
      ProgEl_List @.loop_code = [2] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [2] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	};
       };
       If @[1] { 
	ProgEl_List @.true_code = [1] {
	 StopStepPoint @[0] { };
	};
       };
      };
     };
     If @[6] { 
      ProgEl_List @.true_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
      };
     };
     MethodCall @[7] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[8] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[9] { 
      ProgArg_List @.prog_args = [1] {
       ProgArg @[0] { };
      };
     };
    };
   };
   Program @[3] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @[0] { };
     ProgVar @[1] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @[0] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [10] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [1] {
       ProgVar @[0] { };
      };
     };
     If @[1] { 
      ProgEl_List @.true_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     Comment @[3] { };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[5] { 
      ProgArg_List @.prog_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     ForLoop @[6] { 
      ProgEl_List @.loop_code = [1] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [2] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	};
       };
      };
     };
     MethodCall @[7] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[8] { 
      ProgArg_List @.prog_args = [1] {
       ProgArg @[0] { };
      };
     };
     NetUpdateView @[9] { };
    };
   };
   Program @[4] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @[0] { };
     ProgVar @[1] { };
    };

    ProgVar_List @.vars = [2] {
     ProgVar @[0] { };
     ProgVar @[1] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [1] {
     NetCounterInit @[0] { };
    };

    ProgEl_List @.prog_code = [10] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [2] {
       ProgVar @[0] { };
       ProgVar @[1] { };
      };
     };
     Comment @[1] { };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[3] { 
      ProgArg_List @.prog_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[5] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ForLoop @[6] { 
      ProgEl_List @.loop_code = [2] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [1] {
	 ProgArg @[0] { };
	};
       };
       AssignExpr @[1] { };
      };
     };
     MethodCall @[7] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[8] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetUpdateView @[9] { };
    };
   };
   Program @[5] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @[0] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @[0] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [2] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetUpdateView @[1] { };
    };
   };
   Program @[6] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [1] {
     LayerWriter @[0] { 
      LayerDataEl_List @.layer_data = [3] {
       LayerWriterEl @[0] { };
       LayerWriterEl @[1] { };
       LayerWriterEl @[2] { };
      };
     };
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @[0] { };
     ProgVar @[1] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @[0] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [3] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };

    ProgEl_List @.prog_code = [2] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
    };
   };
   Program @[7] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [1] {
     NetMonitor @[0] { 
      NetMonItem_List @.items = [26] {
       NetMonItem @[0] { };
       NetMonItem @[1] { };
       NetMonItem @[2] { };
       NetMonItem @[3] { };
       NetMonItem @[4] { };
       NetMonItem @[5] { };
       NetMonItem @[6] { };
       NetMonItem @[7] { };
       NetMonItem @[8] { };
       NetMonItem @[9] { };
       NetMonItem @[10] { };
       NetMonItem @[11] { };
       NetMonItem @[12] { };
       NetMonItem @[13] { };
       NetMonItem @[14] { };
       NetMonItem @[15] { };
       NetMonItem @[16] { };
       NetMonItem @[17] { };
       NetMonItem @[18] { };
       NetMonItem @[19] { };
       NetMonItem @[20] { };
       NetMonItem @[21] { };
       NetMonItem @[22] { };
       NetMonItem @[23] { };
       NetMonItem @[24] { };
       NetMonItem @[25] { };
      };
     };
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @[0] { };
    };

    ProgVar_List @.vars = [2] {
     ProgVar @[0] { };
     ProgVar @[1] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [3] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };

    ProgEl_List @.prog_code = [4] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
    };
   };
   Program @[8] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [1] {
     NetMonitor @[0] { 
      NetMonItem_List @.items = [30] {
       NetMonItem @[0] { };
       NetMonItem @[1] { };
       NetMonItem @[2] { };
       NetMonItem @[3] { };
       NetMonItem @[4] { };
       NetMonItem @[5] { };
       NetMonItem @[6] { };
       NetMonItem @[7] { };
       NetMonItem @[8] { };
       NetMonItem @[9] { };
       NetMonItem @[10] { };
       NetMonItem @[11] { };
       NetMonItem @[12] { };
       NetMonItem @[13] { };
       NetMonItem @[14] { };
       NetMonItem @[15] { };
       NetMonItem @[16] { };
       NetMonItem @[17] { };
       NetMonItem @[18] { };
       NetMonItem @[19] { };
       NetMonItem @[20] { };
       NetMonItem @[21] { };
       NetMonItem @[22] { };
       NetMonItem @[23] { };
       NetMonItem @[24] { };
       NetMonItem @[25] { };
       NetMonItem @[26] { };
       NetMonItem @[27] { };
       NetMonItem @[28] { };
       NetMonItem @[29] { };
      };
     };
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @[0] { };
    };

    ProgVar_List @.vars = [3] {
     ProgVar @[0] { };
     ProgVar @[1] { };
     ProgVar @[2] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [4] {
     AssignExpr @[0] { };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };

    ProgEl_List @.prog_code = [7] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     AssignExpr @[2] { };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [4] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
       ProgArg @[3] { };
      };
     };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [4] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
       ProgArg @[3] { };
      };
     };
     MethodCall @[5] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     Comment @[6] { };
    };
   };
   Program @[9] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @[0] { };
    };

    ProgVar_List @.vars = [6] {
     ProgVar @[0] { };
     ProgVar @[1] { };
     ProgVar @[2] { };
     ProgVar @[3] { };
     ProgVar @[4] { };
     ProgVar @[5] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [6] {
     If @[0] { 
      ProgEl_List @.true_code = [1] {
       ReturnExpr @[0] { };
      };
     };
     MiscCall @[1] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MiscCall @[2] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     AssignExpr @[3] { };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [4] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
       ProgArg @[3] { };
      };
     };
     MethodCall @[5] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
    };
   };
  };
  Program_Group @.gp[1] = [7] { 
   Program @[0] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @[0] { };
    };

    ProgVar_List @.vars = [6] {
     ProgVar @[0] { };
     ProgVar @[1] { };
     ProgVar @[2] { };
     ProgVar @[3] { };
     ProgVar @[4] { };
     ProgVar @[5] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [2] {
     NetCounterInit @[0] { };
     AssignExpr @[1] { };
    };

    ProgEl_List @.prog_code = [11] {
     NetCounterInit @[0] { };
     MemberAssign @[1] { };
     AssignExpr @[2] { };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetDataLoop @[5] { 
      ProgEl_List @.loop_code = [1] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [2] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	};
       };
      };
     };
     If @[6] { 
      ProgEl_List @.true_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
      };
     };
     MethodCall @[7] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[8] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[9] { 
      ProgArg_List @.prog_args = [1] {
       ProgArg @[0] { };
      };
     };
     MemberAssign @[10] { };
    };
   };
   Program @[1] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @[0] { };
     ProgVar @[1] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @[0] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [10] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [1] {
       ProgVar @[0] { };
      };
     };
     If @[1] { 
      ProgEl_List @.true_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     Comment @[3] { };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[5] { 
      ProgArg_List @.prog_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     ForLoop @[6] { 
      ProgEl_List @.loop_code = [1] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [2] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	};
       };
      };
     };
     MethodCall @[7] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[8] { 
      ProgArg_List @.prog_args = [1] {
       ProgArg @[0] { };
      };
     };
     NetUpdateView @[9] { };
    };
   };
   Program @[2] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @[0] { };
     ProgVar @[1] { };
    };

    ProgVar_List @.vars = [2] {
     ProgVar @[0] { };
     ProgVar @[1] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [1] {
     NetCounterInit @[0] { };
    };

    ProgEl_List @.prog_code = [10] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [2] {
       ProgVar @[0] { };
       ProgVar @[1] { };
      };
     };
     Comment @[1] { };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[3] { 
      ProgArg_List @.prog_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[5] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ForLoop @[6] { 
      ProgEl_List @.loop_code = [2] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [1] {
	 ProgArg @[0] { };
	};
       };
       AssignExpr @[1] { };
      };
     };
     MethodCall @[7] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[8] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetUpdateView @[9] { };
    };
   };
   Program @[3] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @[0] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @[0] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [2] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetUpdateView @[1] { };
    };
   };
   Program @[4] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [1] {
     LayerWriter @[0] { 
      LayerDataEl_List @.layer_data = [3] {
       LayerWriterEl @[0] { };
       LayerWriterEl @[1] { };
       LayerWriterEl @[2] { };
      };
     };
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @[0] { };
     ProgVar @[1] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @[0] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [3] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };

    ProgEl_List @.prog_code = [2] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
    };
   };
   Program @[5] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [1] {
     NetMonitor @[0] { 
      NetMonItem_List @.items = [20] {
       NetMonItem @[0] { };
       NetMonItem @[1] { };
       NetMonItem @[2] { };
       NetMonItem @[3] { };
       NetMonItem @[4] { };
       NetMonItem @[5] { };
       NetMonItem @[6] { };
       NetMonItem @[7] { };
       NetMonItem @[8] { };
       NetMonItem @[9] { };
       NetMonItem @[10] { };
       NetMonItem @[11] { };
       NetMonItem @[12] { };
       NetMonItem @[13] { };
       NetMonItem @[14] { };
       NetMonItem @[15] { };
       NetMonItem @[16] { };
       NetMonItem @[17] { };
       NetMonItem @[18] { };
       NetMonItem @[19] { };
      };
     };
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @[0] { };
    };

    ProgVar_List @.vars = [2] {
     ProgVar @[0] { };
     ProgVar @[1] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [3] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };

    ProgEl_List @.prog_code = [4] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
    };
   };
   Program @[6] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [1] {
     NetMonitor @[0] { 
      NetMonItem_List @.items = [19] {
       NetMonItem @[0] { };
       NetMonItem @[1] { };
       NetMonItem @[2] { };
       NetMonItem @[3] { };
       NetMonItem @[4] { };
       NetMonItem @[5] { };
       NetMonItem @[6] { };
       NetMonItem @[7] { };
       NetMonItem @[8] { };
       NetMonItem @[9] { };
       NetMonItem @[10] { };
       NetMonItem @[11] { };
       NetMonItem @[12] { };
       NetMonItem @[13] { };
       NetMonItem @[14] { };
       NetMonItem @[15] { };
       NetMonItem @[16] { };
       NetMonItem @[17] { };
       NetMonItem @[18] { };
      };
     };
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @[0] { };
    };

    ProgVar_List @.vars = [3] {
     ProgVar @[0] { };
     ProgVar @[1] { };
     ProgVar @[2] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [4] {
     AssignExpr @[0] { };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };

    ProgEl_List @.prog_code = [6] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     AssignExpr @[2] { };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [4] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
       ProgArg @[3] { };
      };
     };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [4] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
       ProgArg @[3] { };
      };
     };
     MethodCall @[5] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
    };
   };
  };
 };

 taViewer_List @.viewers = [1] {
  MainWindowViewer @[0] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @[0] { };
    UserDataItem @[1] { };
    UserDataItem @[2] { };
    UserDataItem @[3] { };
    UserDataItem @[4] { };
    UserDataItem @[5] { };
   };

   ToolBar_List @.toolbars = [1] {
    ToolBar @[0] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
   };

   FrameViewer_List @.frames = [3] {
    BrowseViewerTaBase @[0] { };
    PanelViewer @[1] { };
    T3PanelViewer @[2] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };

     T3Panel_List @.panels = [3] {
      T3Panel @[0] { 
       T3DataView_List @.root_view.children = [1] {
	NetView @[0] { 
	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };

	 ScaleRange_List @.scale_ranges = [12] {
	  ScaleRange @[0] { };
	  ScaleRange @[1] { };
	  ScaleRange @[2] { };
	  ScaleRange @[3] { };
	  ScaleRange @[4] { };
	  ScaleRange @[5] { };
	  ScaleRange @[6] { };
	  ScaleRange @[7] { };
	  ScaleRange @[8] { };
	  ScaleRange @[9] { };
	  ScaleRange @[10] { };
	  ScaleRange @[11] { };
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @[0] { };
	T3SavedView @[1] { };
	T3SavedView @[2] { };
	T3SavedView @[3] { };
	T3SavedView @[4] { };
	T3SavedView @[5] { };
	T3SavedView @[6] { };
	T3SavedView @[7] { };
	T3SavedView @[8] { };
	T3SavedView @[9] { };
       };
      };
      T3Panel @[1] { 
       T3DataView_List @.root_view.children = [1] {
	GraphTableView @[0] { 
	 T3DataView_List @.children = [425] {
	  GraphColView @[0] { };
	  GraphColView @[1] { };
	  GraphColView @[2] { };
	  GraphColView @[3] { };
	  GraphColView @[4] { };
	  GraphColView @[5] { };
	  GraphColView @[6] { };
	  GraphColView @[7] { };
	  GraphColView @[8] { };
	  GraphColView @[9] { };
	  GraphColView @[10] { };
	  GraphColView @[11] { };
	  GraphColView @[12] { };
	  GraphColView @[13] { };
	  GraphColView @[14] { };
	  GraphColView @[15] { };
	  GraphColView @[16] { };
	  GraphColView @[17] { };
	  GraphColView @[18] { };
	  GraphColView @[19] { };
	  GraphColView @[20] { };
	  GraphColView @[21] { };
	  GraphColView @[22] { };
	  GraphColView @[23] { };
	  GraphColView @[24] { };
	  GraphColView @[25] { };
	  GraphColView @[26] { };
	  GraphColView @[27] { };
	  GraphColView @[28] { };
	  GraphColView @[29] { };
	  GraphColView @[30] { };
	  GraphColView @[31] { };
	  GraphColView @[32] { };
	  GraphColView @[33] { };
	  GraphColView @[34] { };
	  GraphColView @[35] { };
	  GraphColView @[36] { };
	  GraphColView @[37] { };
	  GraphColView @[38] { };
	  GraphColView @[39] { };
	  GraphColView @[40] { };
	  GraphColView @[41] { };
	  GraphColView @[42] { };
	  GraphColView @[43] { };
	  GraphColView @[44] { };
	  GraphColView @[45] { };
	  GraphColView @[46] { };
	  GraphColView @[47] { };
	  GraphColView @[48] { };
	  GraphColView @[49] { };
	  GraphColView @[50] { };
	  GraphColView @[51] { };
	  GraphColView @[52] { };
	  GraphColView @[53] { };
	  GraphColView @[54] { };
	  GraphColView @[55] { };
	  GraphColView @[56] { };
	  GraphColView @[57] { };
	  GraphColView @[58] { };
	  GraphColView @[59] { };
	  GraphColView @[60] { };
	  GraphColView @[61] { };
	  GraphColView @[62] { };
	  GraphColView @[63] { };
	  GraphColView @[64] { };
	  GraphColView @[65] { };
	  GraphColView @[66] { };
	  GraphColView @[67] { };
	  GraphColView @[68] { };
	  GraphColView @[69] { };
	  GraphColView @[70] { };
	  GraphColView @[71] { };
	  GraphColView @[72] { };
	  GraphColView @[73] { };
	  GraphColView @[74] { };
	  GraphColView @[75] { };
	  GraphColView @[76] { };
	  GraphColView @[77] { };
	  GraphColView @[78] { };
	  GraphColView @[79] { };
	  GraphColView @[80] { };
	  GraphColView @[81] { };
	  GraphColView @[82] { };
	  GraphColView @[83] { };
	  GraphColView @[84] { };
	  GraphColView @[85] { };
	  GraphColView @[86] { };
	  GraphColView @[87] { };
	  GraphColView @[88] { };
	  GraphColView @[89] { };
	  GraphColView @[90] { };
	  GraphColView @[91] { };
	  GraphColView @[92] { };
	  GraphColView @[93] { };
	  GraphColView @[94] { };
	  GraphColView @[95] { };
	  GraphColView @[96] { };
	  GraphColView @[97] { };
	  GraphColView @[98] { };
	  GraphColView @[99] { };
	  GraphColView @[100] { };
	  GraphColView @[101] { };
	  GraphColView @[102] { };
	  GraphColView @[103] { };
	  GraphColView @[104] { };
	  GraphColView @[105] { };
	  GraphColView @[106] { };
	  GraphColView @[107] { };
	  GraphColView @[108] { };
	  GraphColView @[109] { };
	  GraphColView @[110] { };
	  GraphColView @[111] { };
	  GraphColView @[112] { };
	  GraphColView @[113] { };
	  GraphColView @[114] { };
	  GraphColView @[115] { };
	  GraphColView @[116] { };
	  GraphColView @[117] { };
	  GraphColView @[118] { };
	  GraphColView @[119] { };
	  GraphColView @[120] { };
	  GraphColView @[121] { };
	  GraphColView @[122] { };
	  GraphColView @[123] { };
	  GraphColView @[124] { };
	  GraphColView @[125] { };
	  GraphColView @[126] { };
	  GraphColView @[127] { };
	  GraphColView @[128] { };
	  GraphColView @[129] { };
	  GraphColView @[130] { };
	  GraphColView @[131] { };
	  GraphColView @[132] { };
	  GraphColView @[133] { };
	  GraphColView @[134] { };
	  GraphColView @[135] { };
	  GraphColView @[136] { };
	  GraphColView @[137] { };
	  GraphColView @[138] { };
	  GraphColView @[139] { };
	  GraphColView @[140] { };
	  GraphColView @[141] { };
	  GraphColView @[142] { };
	  GraphColView @[143] { };
	  GraphColView @[144] { };
	  GraphColView @[145] { };
	  GraphColView @[146] { };
	  GraphColView @[147] { };
	  GraphColView @[148] { };
	  GraphColView @[149] { };
	  GraphColView @[150] { };
	  GraphColView @[151] { };
	  GraphColView @[152] { };
	  GraphColView @[153] { };
	  GraphColView @[154] { };
	  GraphColView @[155] { };
	  GraphColView @[156] { };
	  GraphColView @[157] { };
	  GraphColView @[158] { };
	  GraphColView @[159] { };
	  GraphColView @[160] { };
	  GraphColView @[161] { };
	  GraphColView @[162] { };
	  GraphColView @[163] { };
	  GraphColView @[164] { };
	  GraphColView @[165] { };
	  GraphColView @[166] { };
	  GraphColView @[167] { };
	  GraphColView @[168] { };
	  GraphColView @[169] { };
	  GraphColView @[170] { };
	  GraphColView @[171] { };
	  GraphColView @[172] { };
	  GraphColView @[173] { };
	  GraphColView @[174] { };
	  GraphColView @[175] { };
	  GraphColView @[176] { };
	  GraphColView @[177] { };
	  GraphColView @[178] { };
	  GraphColView @[179] { };
	  GraphColView @[180] { };
	  GraphColView @[181] { };
	  GraphColView @[182] { };
	  GraphColView @[183] { };
	  GraphColView @[184] { };
	  GraphColView @[185] { };
	  GraphColView @[186] { };
	  GraphColView @[187] { };
	  GraphColView @[188] { };
	  GraphColView @[189] { };
	  GraphColView @[190] { };
	  GraphColView @[191] { };
	  GraphColView @[192] { };
	  GraphColView @[193] { };
	  GraphColView @[194] { };
	  GraphColView @[195] { };
	  GraphColView @[196] { };
	  GraphColView @[197] { };
	  GraphColView @[198] { };
	  GraphColView @[199] { };
	  GraphColView @[200] { };
	  GraphColView @[201] { };
	  GraphColView @[202] { };
	  GraphColView @[203] { };
	  GraphColView @[204] { };
	  GraphColView @[205] { };
	  GraphColView @[206] { };
	  GraphColView @[207] { };
	  GraphColView @[208] { };
	  GraphColView @[209] { };
	  GraphColView @[210] { };
	  GraphColView @[211] { };
	  GraphColView @[212] { };
	  GraphColView @[213] { };
	  GraphColView @[214] { };
	  GraphColView @[215] { };
	  GraphColView @[216] { };
	  GraphColView @[217] { };
	  GraphColView @[218] { };
	  GraphColView @[219] { };
	  GraphColView @[220] { };
	  GraphColView @[221] { };
	  GraphColView @[222] { };
	  GraphColView @[223] { };
	  GraphColView @[224] { };
	  GraphColView @[225] { };
	  GraphColView @[226] { };
	  GraphColView @[227] { };
	  GraphColView @[228] { };
	  GraphColView @[229] { };
	  GraphColView @[230] { };
	  GraphColView @[231] { };
	  GraphColView @[232] { };
	  GraphColView @[233] { };
	  GraphColView @[234] { };
	  GraphColView @[235] { };
	  GraphColView @[236] { };
	  GraphColView @[237] { };
	  GraphColView @[238] { };
	  GraphColView @[239] { };
	  GraphColView @[240] { };
	  GraphColView @[241] { };
	  GraphColView @[242] { };
	  GraphColView @[243] { };
	  GraphColView @[244] { };
	  GraphColView @[245] { };
	  GraphColView @[246] { };
	  GraphColView @[247] { };
	  GraphColView @[248] { };
	  GraphColView @[249] { };
	  GraphColView @[250] { };
	  GraphColView @[251] { };
	  GraphColView @[252] { };
	  GraphColView @[253] { };
	  GraphColView @[254] { };
	  GraphColView @[255] { };
	  GraphColView @[256] { };
	  GraphColView @[257] { };
	  GraphColView @[258] { };
	  GraphColView @[259] { };
	  GraphColView @[260] { };
	  GraphColView @[261] { };
	  GraphColView @[262] { };
	  GraphColView @[263] { };
	  GraphColView @[264] { };
	  GraphColView @[265] { };
	  GraphColView @[266] { };
	  GraphColView @[267] { };
	  GraphColView @[268] { };
	  GraphColView @[269] { };
	  GraphColView @[270] { };
	  GraphColView @[271] { };
	  GraphColView @[272] { };
	  GraphColView @[273] { };
	  GraphColView @[274] { };
	  GraphColView @[275] { };
	  GraphColView @[276] { };
	  GraphColView @[277] { };
	  GraphColView @[278] { };
	  GraphColView @[279] { };
	  GraphColView @[280] { };
	  GraphColView @[281] { };
	  GraphColView @[282] { };
	  GraphColView @[283] { };
	  GraphColView @[284] { };
	  GraphColView @[285] { };
	  GraphColView @[286] { };
	  GraphColView @[287] { };
	  GraphColView @[288] { };
	  GraphColView @[289] { };
	  GraphColView @[290] { };
	  GraphColView @[291] { };
	  GraphColView @[292] { };
	  GraphColView @[293] { };
	  GraphColView @[294] { };
	  GraphColView @[295] { };
	  GraphColView @[296] { };
	  GraphColView @[297] { };
	  GraphColView @[298] { };
	  GraphColView @[299] { };
	  GraphColView @[300] { };
	  GraphColView @[301] { };
	  GraphColView @[302] { };
	  GraphColView @[303] { };
	  GraphColView @[304] { };
	  GraphColView @[305] { };
	  GraphColView @[306] { };
	  GraphColView @[307] { };
	  GraphColView @[308] { };
	  GraphColView @[309] { };
	  GraphColView @[310] { };
	  GraphColView @[311] { };
	  GraphColView @[312] { };
	  GraphColView @[313] { };
	  GraphColView @[314] { };
	  GraphColView @[315] { };
	  GraphColView @[316] { };
	  GraphColView @[317] { };
	  GraphColView @[318] { };
	  GraphColView @[319] { };
	  GraphColView @[320] { };
	  GraphColView @[321] { };
	  GraphColView @[322] { };
	  GraphColView @[323] { };
	  GraphColView @[324] { };
	  GraphColView @[325] { };
	  GraphColView @[326] { };
	  GraphColView @[327] { };
	  GraphColView @[328] { };
	  GraphColView @[329] { };
	  GraphColView @[330] { };
	  GraphColView @[331] { };
	  GraphColView @[332] { };
	  GraphColView @[333] { };
	  GraphColView @[334] { };
	  GraphColView @[335] { };
	  GraphColView @[336] { };
	  GraphColView @[337] { };
	  GraphColView @[338] { };
	  GraphColView @[339] { };
	  GraphColView @[340] { };
	  GraphColView @[341] { };
	  GraphColView @[342] { };
	  GraphColView @[343] { };
	  GraphColView @[344] { };
	  GraphColView @[345] { };
	  GraphColView @[346] { };
	  GraphColView @[347] { };
	  GraphColView @[348] { };
	  GraphColView @[349] { };
	  GraphColView @[350] { };
	  GraphColView @[351] { };
	  GraphColView @[352] { };
	  GraphColView @[353] { };
	  GraphColView @[354] { };
	  GraphColView @[355] { };
	  GraphColView @[356] { };
	  GraphColView @[357] { };
	  GraphColView @[358] { };
	  GraphColView @[359] { };
	  GraphColView @[360] { };
	  GraphColView @[361] { };
	  GraphColView @[362] { };
	  GraphColView @[363] { };
	  GraphColView @[364] { };
	  GraphColView @[365] { };
	  GraphColView @[366] { };
	  GraphColView @[367] { };
	  GraphColView @[368] { };
	  GraphColView @[369] { };
	  GraphColView @[370] { };
	  GraphColView @[371] { };
	  GraphColView @[372] { };
	  GraphColView @[373] { };
	  GraphColView @[374] { };
	  GraphColView @[375] { };
	  GraphColView @[376] { };
	  GraphColView @[377] { };
	  GraphColView @[378] { };
	  GraphColView @[379] { };
	  GraphColView @[380] { };
	  GraphColView @[381] { };
	  GraphColView @[382] { };
	  GraphColView @[383] { };
	  GraphColView @[384] { };
	  GraphColView @[385] { };
	  GraphColView @[386] { };
	  GraphColView @[387] { };
	  GraphColView @[388] { };
	  GraphColView @[389] { };
	  GraphColView @[390] { };
	  GraphColView @[391] { };
	  GraphColView @[392] { };
	  GraphColView @[393] { };
	  GraphColView @[394] { };
	  GraphColView @[395] { };
	  GraphColView @[396] { };
	  GraphColView @[397] { };
	  GraphColView @[398] { };
	  GraphColView @[399] { };
	  GraphColView @[400] { };
	  GraphColView @[401] { };
	  GraphColView @[402] { };
	  GraphColView @[403] { };
	  GraphColView @[404] { };
	  GraphColView @[405] { };
	  GraphColView @[406] { };
	  GraphColView @[407] { };
	  GraphColView @[408] { };
	  GraphColView @[409] { };
	  GraphColView @[410] { };
	  GraphColView @[411] { };
	  GraphColView @[412] { };
	  GraphColView @[413] { };
	  GraphColView @[414] { };
	  GraphColView @[415] { };
	  GraphColView @[416] { };
	  GraphColView @[417] { };
	  GraphColView @[418] { };
	  GraphColView @[419] { };
	  GraphColView @[420] { };
	  GraphColView @[421] { };
	  GraphColView @[422] { };
	  GraphColView @[423] { };
	  GraphColView @[424] { };
	 };

	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };

	 GraphPlotView_List @.plots = [16] {
	  GraphPlotView @[0] { };
	  GraphPlotView @[1] { };
	  GraphPlotView @[2] { };
	  GraphPlotView @[3] { };
	  GraphPlotView @[4] { };
	  GraphPlotView @[5] { };
	  GraphPlotView @[6] { };
	  GraphPlotView @[7] { };
	  GraphPlotView @[8] { };
	  GraphPlotView @[9] { };
	  GraphPlotView @[10] { };
	  GraphPlotView @[11] { };
	  GraphPlotView @[12] { };
	  GraphPlotView @[13] { };
	  GraphPlotView @[14] { };
	  GraphPlotView @[15] { };
	 };

	 GraphPlotView_List @.errbars = [16] {
	  GraphPlotView @[0] { };
	  GraphPlotView @[1] { };
	  GraphPlotView @[2] { };
	  GraphPlotView @[3] { };
	  GraphPlotView @[4] { };
	  GraphPlotView @[5] { };
	  GraphPlotView @[6] { };
	  GraphPlotView @[7] { };
	  GraphPlotView @[8] { };
	  GraphPlotView @[9] { };
	  GraphPlotView @[10] { };
	  GraphPlotView @[11] { };
	  GraphPlotView @[12] { };
	  GraphPlotView @[13] { };
	  GraphPlotView @[14] { };
	  GraphPlotView @[15] { };
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @[0] { };
	T3SavedView @[1] { };
	T3SavedView @[2] { };
	T3SavedView @[3] { };
	T3SavedView @[4] { };
	T3SavedView @[5] { };
	T3SavedView @[6] { };
	T3SavedView @[7] { };
	T3SavedView @[8] { };
	T3SavedView @[9] { };
       };
      };
      T3Panel @[2] { 
       T3DataView_List @.root_view.children = [1] {
	GridTableView @[0] { 
	 T3DataView_List @.children = [55] {
	  GridColView @[0] { };
	  GridColView @[1] { };
	  GridColView @[2] { };
	  GridColView @[3] { };
	  GridColView @[4] { };
	  GridColView @[5] { };
	  GridColView @[6] { };
	  GridColView @[7] { };
	  GridColView @[8] { };
	  GridColView @[9] { };
	  GridColView @[10] { };
	  GridColView @[11] { };
	  GridColView @[12] { };
	  GridColView @[13] { };
	  GridColView @[14] { };
	  GridColView @[15] { };
	  GridColView @[16] { };
	  GridColView @[17] { };
	  GridColView @[18] { };
	  GridColView @[19] { };
	  GridColView @[20] { };
	  GridColView @[21] { };
	  GridColView @[22] { };
	  GridColView @[23] { };
	  GridColView @[24] { };
	  GridColView @[25] { };
	  GridColView @[26] { };
	  GridColView @[27] { };
	  GridColView @[28] { };
	  GridColView @[29] { };
	  GridColView @[30] { };
	  GridColView @[31] { };
	  GridColView @[32] { };
	  GridColView @[33] { };
	  GridColView @[34] { };
	  GridColView @[35] { };
	  GridColView @[36] { };
	  GridColView @[37] { };
	  GridColView @[38] { };
	  GridColView @[39] { };
	  GridColView @[40] { };
	  GridColView @[41] { };
	  GridColView @[42] { };
	  GridColView @[43] { };
	  GridColView @[44] { };
	  GridColView @[45] { };
	  GridColView @[46] { };
	  GridColView @[47] { };
	  GridColView @[48] { };
	  GridColView @[49] { };
	  GridColView @[50] { };
	  GridColView @[51] { };
	  GridColView @[52] { };
	  GridColView @[53] { };
	  GridColView @[54] { };
	 };

	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @[0] { };
	T3SavedView @[1] { };
	T3SavedView @[2] { };
	T3SavedView @[3] { };
	T3SavedView @[4] { };
	T3SavedView @[5] { };
	T3SavedView @[6] { };
	T3SavedView @[7] { };
	T3SavedView @[8] { };
	T3SavedView @[9] { };
       };
      };
     };
    };
   };

   DockViewer_List @.docks = [1] {
    ToolBoxDockViewer @[0] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
      UserDataItem @[1] { };
      UserDataItem @[2] { };
      UserDataItem @[3] { };
      UserDataItem @[4] { };
      UserDataItem @[5] { };
     };
    };
   };
  };
 };

 Network_Group @.networks = [1] {
  LeabraNetwork @[0] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @[0] { };
    UserDataItem @[1] { };
    UserDataItem @[2] { };
    UserDataItem @[3] { };
    UserDataItem @[4] { };
    UserDataItem @[5] { };
    UserDataItem @[6] { };
    UserDataItem @[7] { };
    UserDataItem @[8] { };
    UserDataItem @[9] { };
    UserDataItem @[10] { };
    UserDataItem @[11] { };
    UserDataItem @[12] { };
    UserDataItem @[13] { };
    UserDataItem @[14] { };
    UserDataItem @[15] { };
    UserDataItem @[16] { };
    UserDataItem @[17] { };
    UserDataItem @[18] { };
    UserDataItem @[19] { };
    UserDataItem @[20] { };
    UserDataItem @[21] { };
    UserDataItem @[22] { };
    UserDataItem @[23] { };
    UserDataItem @[24] { };
    UserDataItem @[25] { };
    UserDataItem @[26] { };
   };

   BaseSpec_Group @.specs = [4] {
    LeabraLayerSpec @[0] { 
     BaseSpec_Group @.children = [1] {
      LeabraLayerSpec @[0] { 
       BaseSpec_Group @.children = [0] {
       };
      };
     };
    };
    LeabraUnitSpec @[1] { 
     BaseSpec_Group @.children = [0] {
     };

     Schedule @.noise_sched = [0] {
     };
    };
    LeabraConSpec @[2] { 
     BaseSpec_Group @.children = [2] {
      LeabraBiasSpec @[0] { 
       BaseSpec_Group @.children = [0] {
       };

       Schedule @.lrate_sched = [0] {
       };
      };
      LeabraConSpec @[1] { 
       BaseSpec_Group @.children = [0] {
       };

       Schedule @.lrate_sched = [0] {
       };
      };
     };

     Schedule @.lrate_sched = [0] {
     };
    };
    FullPrjnSpec @[3] { 
     BaseSpec_Group @.children = [0] {
     };
    };
    BaseSpec_Group @.gp[0] = [9] { 
     LeabraUnitSpec @[0] { 
      BaseSpec_Group @.children = [11] {
       LeabraUnitSpec @[0] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.noise_sched = [0] {
	};
       };
       LHbRMTgUnitSpec @[1] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.noise_sched = [0] {
	};
       };
       PPTgUnitSpec @[2] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.noise_sched = [0] {
	};
       };
       VTAUnitSpec @[3] { 
	BaseSpec_Group @.children = [1] {
	 VTAUnitSpec @[0] { 
	  BaseSpec_Group @.children = [0] {
	  };

	  Schedule @.noise_sched = [0] {
	  };
	 };
	};

	Schedule @.noise_sched = [0] {
	};
       };
       DRNUnitSpec @[4] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.noise_sched = [0] {
	};
       };
       TANUnitSpec @[5] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.noise_sched = [0] {
	};
       };
       LeabraUnitSpec @[6] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.noise_sched = [0] {
	};
       };
       LeabraUnitSpec @[7] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.noise_sched = [0] {
	};
       };
       BasAmygUnitSpec @[8] { 
	BaseSpec_Group @.children = [3] {
	 BasAmygUnitSpec @[0] { 
	  BaseSpec_Group @.children = [0] {
	  };

	  Schedule @.noise_sched = [0] {
	  };
	 };
	 BasAmygUnitSpec @[1] { 
	  BaseSpec_Group @.children = [0] {
	  };

	  Schedule @.noise_sched = [0] {
	  };
	 };
	 BasAmygUnitSpec @[2] { 
	  BaseSpec_Group @.children = [0] {
	  };

	  Schedule @.noise_sched = [0] {
	  };
	 };
	};

	Schedule @.noise_sched = [0] {
	};
       };
       MSNUnitSpec @[9] { 
	BaseSpec_Group @.children = [3] {
	 MSNUnitSpec @[0] { 
	  BaseSpec_Group @.children = [0] {
	  };

	  Schedule @.noise_sched = [0] {
	  };
	 };
	 MSNUnitSpec @[1] { 
	  BaseSpec_Group @.children = [0] {
	  };

	  Schedule @.noise_sched = [0] {
	  };
	 };
	 MSNUnitSpec @[2] { 
	  BaseSpec_Group @.children = [0] {
	  };

	  Schedule @.noise_sched = [0] {
	  };
	 };
	};

	Schedule @.noise_sched = [0] {
	};
       };
       MSNUnitSpec @[10] { 
	BaseSpec_Group @.children = [3] {
	 MSNUnitSpec @[0] { 
	  BaseSpec_Group @.children = [0] {
	  };

	  Schedule @.noise_sched = [0] {
	  };
	 };
	 MSNUnitSpec @[1] { 
	  BaseSpec_Group @.children = [0] {
	  };

	  Schedule @.noise_sched = [0] {
	  };
	 };
	 MSNUnitSpec @[2] { 
	  BaseSpec_Group @.children = [0] {
	  };

	  Schedule @.noise_sched = [0] {
	  };
	 };
	};

	Schedule @.noise_sched = [0] {
	};
       };
      };

      Schedule @.noise_sched = [0] {
      };
     };
     LeabraConSpec @[1] { 
      BaseSpec_Group @.children = [4] {
       LatAmygConSpec @[0] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       BasAmygConSpec @[1] { 
	BaseSpec_Group @.children = [3] {
	 BasAmygConSpec @[0] { 
	  BaseSpec_Group @.children = [0] {
	  };

	  Schedule @.lrate_sched = [0] {
	  };
	 };
	 BasAmygConSpec @[1] { 
	  BaseSpec_Group @.children = [0] {
	  };

	  Schedule @.lrate_sched = [0] {
	  };
	 };
	 BasAmygConSpec @[2] { 
	  BaseSpec_Group @.children = [0] {
	  };

	  Schedule @.lrate_sched = [0] {
	  };
	 };
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       MSNConSpec @[2] { 
	BaseSpec_Group @.children = [3] {
	 MSNConSpec @[0] { 
	  BaseSpec_Group @.children = [0] {
	  };

	  Schedule @.lrate_sched = [0] {
	  };
	 };
	 MSNConSpec @[1] { 
	  BaseSpec_Group @.children = [0] {
	  };

	  Schedule @.lrate_sched = [0] {
	  };
	 };
	 MSNConSpec @[2] { 
	  BaseSpec_Group @.children = [0] {
	  };

	  Schedule @.lrate_sched = [0] {
	  };
	 };
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       MSNConSpec @[3] { 
	BaseSpec_Group @.children = [3] {
	 MSNConSpec @[0] { 
	  BaseSpec_Group @.children = [0] {
	  };

	  Schedule @.lrate_sched = [0] {
	  };
	 };
	 MSNConSpec @[1] { 
	  BaseSpec_Group @.children = [0] {
	  };

	  Schedule @.lrate_sched = [0] {
	  };
	 };
	 MSNConSpec @[2] { 
	  BaseSpec_Group @.children = [0] {
	  };

	  Schedule @.lrate_sched = [0] {
	  };
	 };
	};

	Schedule @.lrate_sched = [0] {
	};
       };
      };

      Schedule @.lrate_sched = [0] {
      };
     };
     LeabraConSpec @[2] { 
      BaseSpec_Group @.children = [7] {
       LeabraBiasSpec @[0] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       LeabraConSpec @[1] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       SendDeepModConSpec @[2] { 
	BaseSpec_Group @.children = [1] {
	 SendDeepModConSpec @[0] { 
	  BaseSpec_Group @.children = [0] {
	  };

	  Schedule @.lrate_sched = [0] {
	  };
	 };
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       SendDeepModConSpec @[3] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       SendDeepRawConSpec @[4] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       LeabraConSpec @[5] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       LeabraConSpec @[6] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
      };

      Schedule @.lrate_sched = [0] {
      };
     };
     MarkerConSpec @[3] { 
      BaseSpec_Group @.children = [0] {
      };

      Schedule @.lrate_sched = [0] {
      };
     };
     LeabraLayerSpec @[4] { 
      BaseSpec_Group @.children = [6] {
       LeabraLayerSpec @[0] { 
	BaseSpec_Group @.children = [0] {
	};
       };
       LeabraLayerSpec @[1] { 
	BaseSpec_Group @.children = [0] {
	};
       };
       LeabraLayerSpec @[2] { 
	BaseSpec_Group @.children = [1] {
	 LeabraLayerSpec @[0] { 
	  BaseSpec_Group @.children = [0] {
	  };
	 };
	};
       };
       LeabraLayerSpec @[3] { 
	BaseSpec_Group @.children = [0] {
	};
       };
       LeabraLayerSpec @[4] { 
	BaseSpec_Group @.children = [0] {
	};
       };
       ExtRewLayerSpec @[5] { 
	BaseSpec_Group @.children = [0] {
	};
       };
      };
     };
     FullPrjnSpec @[5] { 
      BaseSpec_Group @.children = [0] {
      };
     };
     OneToOnePrjnSpec @[6] { 
      BaseSpec_Group @.children = [0] {
      };
     };
     GpOneToOnePrjnSpec @[7] { 
      BaseSpec_Group @.children = [0] {
      };
     };
     TesselPrjnSpec @[8] { 
      BaseSpec_Group @.children = [0] {
      };

      TessEl_List @.send_offs = [1] {
       TessEl @[0] { };
      };
     };
    };
    BaseSpec_Group @.gp[1] = [11] { 
     LeabraUnitSpec @[0] { 
      BaseSpec_Group @.children = [8] {
       MSNUnitSpec @[0] { 
	BaseSpec_Group @.children = [1] {
	 MSNUnitSpec @[0] { 
	  BaseSpec_Group @.children = [0] {
	  };

	  Schedule @.noise_sched = [0] {
	  };
	 };
	};

	Schedule @.noise_sched = [0] {
	};
       };
       GPiInvUnitSpec @[1] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.noise_sched = [0] {
	};
       };
       LeabraUnitSpec @[2] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.noise_sched = [0] {
	};
       };
       PatchUnitSpec @[3] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.noise_sched = [0] {
	};
       };
       PFCUnitSpec @[4] { 
	BaseSpec_Group @.children = [1] {
	 PFCUnitSpec @[0] { 
	  BaseSpec_Group @.children = [0] {
	  };

	  Schedule @.noise_sched = [0] {
	  };

	  DataTableCols @.dyn_table.data = [5] {
	   String_Data @[0] { };
	   String_Data @[1] { };
	   float_Data @[2] { };
	   float_Data @[3] { };
	   float_Data @[4] { };
	  };

	  DataOpList @.dyn_table.last_sort_spec.ops = [0] {
	  };
	 };
	};

	Schedule @.noise_sched = [0] {
	};

	DataTableCols @.dyn_table.data = [5] {
	 String_Data @[0] { };
	 String_Data @[1] { };
	 float_Data @[2] { };
	 float_Data @[3] { };
	 float_Data @[4] { };
	};

	DataOpList @.dyn_table.last_sort_spec.ops = [0] {
	};
       };
       PFCUnitSpec @[5] { 
	BaseSpec_Group @.children = [1] {
	 PFCUnitSpec @[0] { 
	  BaseSpec_Group @.children = [0] {
	  };

	  Schedule @.noise_sched = [0] {
	  };

	  DataTableCols @.dyn_table.data = [5] {
	   String_Data @[0] { };
	   String_Data @[1] { };
	   float_Data @[2] { };
	   float_Data @[3] { };
	   float_Data @[4] { };
	  };

	  DataOpList @.dyn_table.last_sort_spec.ops = [0] {
	  };
	 };
	};

	Schedule @.noise_sched = [0] {
	};

	DataTableCols @.dyn_table.data = [5] {
	 String_Data @[0] { };
	 String_Data @[1] { };
	 float_Data @[2] { };
	 float_Data @[3] { };
	 float_Data @[4] { };
	};

	DataOpList @.dyn_table.last_sort_spec.ops = [0] {
	};
       };
       LeabraUnitSpec @[6] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.noise_sched = [0] {
	};
       };
       LeabraUnitSpec @[7] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.noise_sched = [0] {
	};
       };
      };

      Schedule @.noise_sched = [0] {
      };
     };
     LeabraConSpec @[1] { 
      BaseSpec_Group @.children = [2] {
       MSNConSpec @[0] { 
	BaseSpec_Group @.children = [2] {
	 MSNConSpec @[0] { 
	  BaseSpec_Group @.children = [0] {
	  };

	  Schedule @.lrate_sched = [0] {
	  };
	 };
	 MSNConSpec @[1] { 
	  BaseSpec_Group @.children = [0] {
	  };

	  Schedule @.lrate_sched = [0] {
	  };
	 };
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       LeabraDeltaConSpec @[1] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
      };

      Schedule @.lrate_sched = [0] {
      };
     };
     LeabraConSpec @[2] { 
      BaseSpec_Group @.children = [5] {
       DeepCtxtConSpec @[0] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       LeabraConSpec @[1] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       LeabraConSpec @[2] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       LeabraConSpec @[3] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       LeabraConSpec @[4] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
      };

      Schedule @.lrate_sched = [0] {
      };
     };
     LeabraConSpec @[3] { 
      BaseSpec_Group @.children = [5] {
       LeabraBiasSpec @[0] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       MarkerConSpec @[1] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       SendDeepModConSpec @[2] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       LeabraConSpec @[3] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       SendDeepRawConSpec @[4] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
      };

      Schedule @.lrate_sched = [0] {
      };
     };
     LeabraLayerSpec @[4] { 
      BaseSpec_Group @.children = [4] {
       LeabraLayerSpec @[0] { 
	BaseSpec_Group @.children = [0] {
	};
       };
       LeabraLayerSpec @[1] { 
	BaseSpec_Group @.children = [0] {
	};
       };
       LeabraLayerSpec @[2] { 
	BaseSpec_Group @.children = [1] {
	 LeabraLayerSpec @[0] { 
	  BaseSpec_Group @.children = [0] {
	  };
	 };
	};
       };
       LeabraLayerSpec @[3] { 
	BaseSpec_Group @.children = [1] {
	 LeabraLayerSpec @[0] { 
	  BaseSpec_Group @.children = [0] {
	  };
	 };
	};
       };
      };
     };
     FullPrjnSpec @[5] { 
      BaseSpec_Group @.children = [0] {
      };
     };
     OneToOnePrjnSpec @[6] { 
      BaseSpec_Group @.children = [0] {
      };
     };
     GpOneToOnePrjnSpec @[7] { 
      BaseSpec_Group @.children = [0] {
      };
     };
     BgPfcPrjnSpec @[8] { 
      BaseSpec_Group @.children = [2] {
       BgPfcPrjnSpec @[0] { 
	BaseSpec_Group @.children = [0] {
	};

	DataTableCols @.bg_table.data = [5] {
	 String_Data @[0] { };
	 int_Data @[1] { 
	  UserDataItem_List @*(.user_data_) {
	   UserDataItem @[0] { };
	  };
	 };
	 int_Data @[2] { 
	  UserDataItem_List @*(.user_data_) {
	   UserDataItem @[0] { };
	  };
	 };
	 int_Data @[3] { 
	  UserDataItem_List @*(.user_data_) {
	   UserDataItem @[0] { };
	  };
	 };
	 int_Data @[4] { 
	  UserDataItem_List @*(.user_data_) {
	   UserDataItem @[0] { };
	  };
	 };
	};

	DataOpList @.bg_table.last_sort_spec.ops = [0] {
	};
       };
       BgPfcPrjnSpec @[1] { 
	BaseSpec_Group @.children = [0] {
	};

	DataTableCols @.bg_table.data = [5] {
	 String_Data @[0] { };
	 int_Data @[1] { 
	  UserDataItem_List @*(.user_data_) {
	   UserDataItem @[0] { };
	  };
	 };
	 int_Data @[2] { 
	  UserDataItem_List @*(.user_data_) {
	   UserDataItem @[0] { };
	  };
	 };
	 int_Data @[3] { 
	  UserDataItem_List @*(.user_data_) {
	   UserDataItem @[0] { };
	  };
	 };
	 int_Data @[4] { 
	  UserDataItem_List @*(.user_data_) {
	   UserDataItem @[0] { };
	  };
	 };
	};

	DataOpList @.bg_table.last_sort_spec.ops = [0] {
	};
       };
      };

      DataTableCols @.bg_table.data = [5] {
       String_Data @[0] { };
       int_Data @[1] { 
	UserDataItem_List @*(.user_data_) {
	 UserDataItem @[0] { };
	};
       };
       int_Data @[2] { 
	UserDataItem_List @*(.user_data_) {
	 UserDataItem @[0] { };
	};
       };
       int_Data @[3] { 
	UserDataItem_List @*(.user_data_) {
	 UserDataItem @[0] { };
	};
       };
       int_Data @[4] { 
	UserDataItem_List @*(.user_data_) {
	 UserDataItem @[0] { };
	};
       };
      };

      DataOpList @.bg_table.last_sort_spec.ops = [0] {
      };
     };
     TiledGpRFPrjnSpec @[9] { 
      BaseSpec_Group @.children = [0] {
      };
     };
     TesselPrjnSpec @[10] { 
      BaseSpec_Group @.children = [0] {
      };

      TessEl_List @.send_offs = [1] {
       TessEl @[0] { };
      };
     };
    };
   };

   ParamSeq_Group @.param_seqs = [0] {
   };

   Layer_Group @.layers = [3] {
    LeabraLayer @[0] { 
     Projection_Group @.projections = [0] {
     };

     Unit_Group @.units = [25] {
     };
    };
    LeabraLayer @[1] { 
     Projection_Group @.projections = [3] {
      LeabraPrjn @[0] { };
      LeabraPrjn @[1] { };
      LeabraPrjn @[2] { };
     };

     Unit_Group @.units = [25] {
     };
    };
    LeabraLayer @[2] { 
     Projection_Group @.projections = [2] {
      LeabraPrjn @[0] { };
      LeabraPrjn @[1] { };
     };

     Unit_Group @.units = [25] {
     };
    };
    Layer_Group @.gp[0] = [6] { 
     LeabraLayer @[0] { 
      Projection_Group @.projections = [1] {
       LeabraPrjn @[0] { };
      };

      Unit_Group @.units = [1] {
      };
     };
     LeabraLayer @[1] { 
      Projection_Group @.projections = [0] {
      };

      Unit_Group @.units = [1] {
      };
     };
     LeabraLayer @[2] { 
      Projection_Group @.projections = [0] {
      };

      Unit_Group @.units = [1] {
      };
     };
     LeabraLayer @[3] { 
      Projection_Group @.projections = [0] {
      };

      Unit_Group @.units = [1] {
      };
     };
     LeabraLayer @[4] { 
      Projection_Group @.projections = [0] {
      };

      Unit_Group @.units = [1] {
      };
     };
     LeabraLayer @[5] { 
      Projection_Group @.projections = [2] {
       LeabraPrjn @[0] { };
       LeabraPrjn @[1] { };
      };

      Unit_Group @.units = [3] {
      };
     };
    };
    Layer_Group @.gp[1] = [7] { 
     LeabraLayer @[0] { 
      Projection_Group @.projections = [4] {
       LeabraPrjn @[0] { };
       LeabraPrjn @[1] { };
       LeabraPrjn @[2] { };
       LeabraPrjn @[3] { };
      };

      Unit_Group @.units = [2] {
      };
     };
     LeabraLayer @[1] { 
      Projection_Group @.projections = [4] {
       LeabraPrjn @[0] { };
       LeabraPrjn @[1] { };
       LeabraPrjn @[2] { };
       LeabraPrjn @[3] { };
      };

      Unit_Group @.units = [1] {
      };
     };
     LeabraLayer @[2] { 
      Projection_Group @.projections = [4] {
       LeabraPrjn @[0] { };
       LeabraPrjn @[1] { };
       LeabraPrjn @[2] { };
       LeabraPrjn @[3] { };
      };

      Unit_Group @.units = [1] {
      };
     };
     LeabraLayer @[3] { 
      Projection_Group @.projections = [2] {
       LeabraPrjn @[0] { };
       LeabraPrjn @[1] { };
      };

      Unit_Group @.units = [1] {
      };
     };
     LeabraLayer @[4] { 
      Projection_Group @.projections = [4] {
       LeabraPrjn @[0] { };
       LeabraPrjn @[1] { };
       LeabraPrjn @[2] { };
       LeabraPrjn @[3] { };
      };

      Unit_Group @.units = [1] {
      };
     };
     LeabraLayer @[5] { 
      Projection_Group @.projections = [5] {
       LeabraPrjn @[0] { };
       LeabraPrjn @[1] { };
       LeabraPrjn @[2] { };
       LeabraPrjn @[3] { };
       LeabraPrjn @[4] { };
      };

      Unit_Group @.units = [1] {
      };
     };
     LeabraLayer @[6] { 
      Projection_Group @.projections = [2] {
       LeabraPrjn @[0] { };
       LeabraPrjn @[1] { };
      };

      Unit_Group @.units = [1] {
      };
     };
    };
    Layer_Group @.gp[2] = [8] { 
     LeabraLayer @[0] { 
      Projection_Group @.projections = [3] {
       LeabraPrjn @[0] { };
       LeabraPrjn @[1] { };
       LeabraPrjn @[2] { };
      };

      Unit_Group @.units = [1] {
      };
     };
     LeabraLayer @[1] { 
      Projection_Group @.projections = [3] {
       LeabraPrjn @[0] { };
       LeabraPrjn @[1] { };
       LeabraPrjn @[2] { };
      };

      Unit_Group @.units = [1] {
      };
     };
     LeabraLayer @[2] { 
      Projection_Group @.projections = [3] {
       LeabraPrjn @[0] { };
       LeabraPrjn @[1] { };
       LeabraPrjn @[2] { };
      };

      Unit_Group @.units = [1] {
      };
     };
     LeabraLayer @[3] { 
      Projection_Group @.projections = [3] {
       LeabraPrjn @[0] { };
       LeabraPrjn @[1] { };
       LeabraPrjn @[2] { };
      };

      Unit_Group @.units = [1] {
      };
     };
     LeabraLayer @[4] { 
      Projection_Group @.projections = [3] {
       LeabraPrjn @[0] { };
       LeabraPrjn @[1] { };
       LeabraPrjn @[2] { };
      };

      Unit_Group @.units = [1] {
      };
     };
     LeabraLayer @[5] { 
      Projection_Group @.projections = [3] {
       LeabraPrjn @[0] { };
       LeabraPrjn @[1] { };
       LeabraPrjn @[2] { };
      };

      Unit_Group @.units = [1] {
      };
     };
     LeabraLayer @[6] { 
      Projection_Group @.projections = [3] {
       LeabraPrjn @[0] { };
       LeabraPrjn @[1] { };
       LeabraPrjn @[2] { };
      };

      Unit_Group @.units = [1] {
      };
     };
     LeabraLayer @[7] { 
      Projection_Group @.projections = [3] {
       LeabraPrjn @[0] { };
       LeabraPrjn @[1] { };
       LeabraPrjn @[2] { };
      };

      Unit_Group @.units = [1] {
      };
     };
    };
    Layer_Group @.gp[3] = [6] { 
     LeabraLayer @[0] { 
      Projection_Group @.projections = [1] {
       LeabraPrjn @[0] { };
      };

      Unit_Group @.units = [1] {
      };
     };
     LeabraLayer @[1] { 
      Projection_Group @.projections = [5] {
       LeabraPrjn @[0] { };
       LeabraPrjn @[1] { };
       LeabraPrjn @[2] { };
       LeabraPrjn @[3] { };
       LeabraPrjn @[4] { };
      };

      Unit_Group @.units = [1] {
      };
     };
     LeabraLayer @[2] { 
      Projection_Group @.projections = [10] {
       LeabraPrjn @[0] { };
       LeabraPrjn @[1] { };
       LeabraPrjn @[2] { };
       LeabraPrjn @[3] { };
       LeabraPrjn @[4] { };
       LeabraPrjn @[5] { };
       LeabraPrjn @[6] { };
       LeabraPrjn @[7] { };
       LeabraPrjn @[8] { };
       LeabraPrjn @[9] { };
      };

      Unit_Group @.units = [1] {
      };
     };
     LeabraLayer @[3] { 
      Projection_Group @.projections = [1] {
       LeabraPrjn @[0] { };
      };

      Unit_Group @.units = [1] {
      };
     };
     LeabraLayer @[4] { 
      Projection_Group @.projections = [5] {
       LeabraPrjn @[0] { };
       LeabraPrjn @[1] { };
       LeabraPrjn @[2] { };
       LeabraPrjn @[3] { };
       LeabraPrjn @[4] { };
      };

      Unit_Group @.units = [1] {
      };
     };
     LeabraLayer @[5] { 
      Projection_Group @.projections = [2] {
       LeabraPrjn @[0] { };
       LeabraPrjn @[1] { };
      };

      Unit_Group @.units = [1] {
      };
     };
    };
    Layer_Group @.gp[4] = [11] { 
     LeabraLayer @[0] { 
      Projection_Group @.projections = [8] {
       LeabraPrjn @[0] { };
       LeabraPrjn @[1] { };
       LeabraPrjn @[2] { };
       LeabraPrjn @[3] { };
       LeabraPrjn @[4] { };
       LeabraPrjn @[5] { };
       LeabraPrjn @[6] { };
       LeabraPrjn @[7] { };
      };

      Unit_Group @.units = [128] {
      };
     };
     LeabraLayer @[1] { 
      Projection_Group @.projections = [8] {
       LeabraPrjn @[0] { };
       LeabraPrjn @[1] { };
       LeabraPrjn @[2] { };
       LeabraPrjn @[3] { };
       LeabraPrjn @[4] { };
       LeabraPrjn @[5] { };
       LeabraPrjn @[6] { };
       LeabraPrjn @[7] { };
      };

      Unit_Group @.units = [128] {
      };
     };
     LeabraLayer @[2] { 
      Projection_Group @.projections = [3] {
       LeabraPrjn @[0] { };
       LeabraPrjn @[1] { };
       LeabraPrjn @[2] { };
      };

      Unit_Group @.units = [1] {
      };
     };
     LeabraLayer @[3] { 
      Projection_Group @.projections = [1] {
       LeabraPrjn @[0] { };
      };

      Unit_Group @.units = [4] {
      };
     };
     LeabraLayer @[4] { 
      Projection_Group @.projections = [1] {
       LeabraPrjn @[0] { };
      };

      Unit_Group @.units = [8] {
      };
     };
     LeabraLayer @[5] { 
      Projection_Group @.projections = [2] {
       LeabraPrjn @[0] { };
       LeabraPrjn @[1] { };
      };

      Unit_Group @.units = [8] {
      };
     };
     LeabraLayer @[6] { 
      Projection_Group @.projections = [5] {
       LeabraPrjn @[0] { };
       LeabraPrjn @[1] { };
       LeabraPrjn @[2] { };
       LeabraPrjn @[3] { };
       LeabraPrjn @[4] { };
      };

      Unit_Group @.units = [140] {
      };
     };
     LeabraLayer @[7] { 
      Projection_Group @.projections = [1] {
       LeabraPrjn @[0] { };
      };

      Unit_Group @.units = [140] {
      };
     };
     LeabraLayer @[8] { 
      Projection_Group @.projections = [3] {
       LeabraPrjn @[0] { };
       LeabraPrjn @[1] { };
       LeabraPrjn @[2] { };
      };

      Unit_Group @.units = [64] {
      };
     };
     LeabraLayer @[9] { 
      Projection_Group @.projections = [3] {
       LeabraPrjn @[0] { };
       LeabraPrjn @[1] { };
       LeabraPrjn @[2] { };
      };

      Unit_Group @.units = [140] {
      };
     };
     LeabraLayer @[10] { 
      Projection_Group @.projections = [1] {
       LeabraPrjn @[0] { };
      };

      Unit_Group @.units = [140] {
      };
     };
    };
   };

   Weights_List @.weights = [0] {
   };
  };
 };
};
LeabraProject .projects[0] {
 name="pbwm_wizard_v810";
 desc=;
 tags=;
 version {
  major=8;
  minor=0;
  step=0;
 };
 author="Randall C. O'Reilly";
 email="emergent-users@grey.colorado.edu";
 license {
  license=GPLv2;
  owner_name="Regents of the University of Colorado";
  org="CCNLab at the University of Colorado Boulder";
  year="2016";
  custom=;
 };
 pub_cite=;
 wiki {wiki="": page_name="": };
 docs {
  name="docs";
  el_typ=taDoc;
  el_def=0;
 };
 wizards {
  name="wizards";
  el_typ=LeabraWizard;
  el_def=0;
  LeabraWizard @[0] {
   UserDataItem_List @*(.user_data_) {
    name="UserDataItem_List_6";
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {name="NO_CLIP": value=1: val_type_fixed=0: };
    UserDataItem @[1] {name="user_pinned": value=1: val_type_fixed=0: };
   };
   name="LeabraWizard_0";
  };
 };
 ctrl_panels {
  name="ctrl_panels";
  el_typ=ControlPanel;
  el_def=0;
  master_and_clones=0;
  ControlPanel @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {name="user_pinned": value=1: val_type_fixed=0: };
   };
   name="ControlPanel";
   cp_state=REGULAR;
   updt_while_running=0;
   desc=;
   mbrs {
    name="mbrs";
    el_typ=ControlPanelMember;
    el_def=0;
    ControlPanelMember @[0] {
     label="leabra_con_spec_0_lrate";
     short_label=0;
     cust_label=0;
     desc="[Default: 0.04]  learning rate -- how fast the weights change per experience -- since version 7.8.5, a hidden factor of 2 has been removed, so this should be 2x what you used to use previously (e.g., default used to be .02, now is .04) -- this governs the rate of change for the fastest adapting weights -- see slow_wts for a more slowly adapting factor";
     cust_desc=0;
     base=.networks[0].specs[2]$$;
     mbr=LeabraConSpec::lrate;
     data {ctrl_type=CONTROL: is_numeric=1: is_single=1: state=EXPLORE: saved_value="": range="0:1:0.1": notes="": };
    };
    ControlPanelMember @[1] {
     label="leabra_cycle_update_net_view";
     short_label=0;
     cust_label=0;
     desc="determines whether network views will be updated on a cycle-by-cycle basis (slow, but often quite useful for seeing how processing is proceeding)";
     cust_desc=1;
     base=.programs.gp[0][5].vars[0]$$;
     mbr=ProgVar::bool_val;
     data {ctrl_type=CONTROL: is_numeric=0: is_single=1: state=EXPLORE: saved_value="": range="0:1:0.1": notes="": };
    };
    ControlPanelMember @[2] {
     label="cycle_qtr";
     short_label=1;
     cust_label=0;
     desc="[Default: true]  one CycleRun runs for a full quarter number of actual cycles -- this greatly speeds up processing by reducing threading overhead, but prevents e.g., interactive viewing at the individual cycle level -- this is not saved -- have to re-engage it when needed, to prevent unintentionally slowing everything down";
     cust_desc=0;
     base=.networks[0].times$$;
     mbr=LeabraTimes::cycle_qtr;
     data {ctrl_type=CONTROL: is_numeric=0: is_single=1: state=EXPLORE: saved_value="": range="0:1:0.1": notes="": };
    };
   };
   mths {
    name="mths";
    el_typ=ControlPanelMethod;
    el_def=0;
    group_type=GT_BUTTONS;
    ControlPanelMethod @[0] {
     label="Train_Init";
     short_label=0;
     cust_label=1;
     desc=" run init_code, global variables retain current values unless reset in the init_code";
     cust_desc=0;
     base=.programs.gp[0][1]$$;
     mth=Program::Init;
    };
    ControlPanelMethod @[1] {
     label="Train_Run";
     short_label=0;
     cust_label=1;
     desc=" run the program -- if not yet Init, will run Init first";
     cust_desc=0;
     base=$.programs.gp[0][1]$;
     mth=Program::Run_Gui;
    };
    ControlPanelMethod @[2] {
     label="Train_Step";
     short_label=0;
     cust_label=1;
     desc=" step the program at the level of the given program -- if NULL then step_prog default value will be used";
     cust_desc=0;
     base=$.programs.gp[0][1]$;
     mth=Program::Step_Gui;
    };
    ControlPanelMethod @[3] {
     label="Train_Stop";
     short_label=0;
     cust_label=1;
     desc=" stop the current program at its next natural stopping point (i.e., cleanly stopping when appropriate chunks of computation have completed)";
     cust_desc=0;
     base=$.programs.gp[0][1]$;
     mth=Program::Stop;
    };
   };
  };
  ClusterRun @[1] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {name="user_pinned": value=1: val_type_fixed=0: };
   };
   name="ClusterRun";
   cp_state=REGULAR;
   updt_while_running=0;
   desc=;
   mbrs {
    name="mbrs";
    el_typ=ControlPanelMember;
    el_def=0;
   };
   mths {
    name="mths";
    el_typ=ControlPanelMethod;
    el_def=0;
    group_type=GT_BUTTONS;
   };
   search_algos {
    name="search_algos";
    el_typ=ParamSearchAlgo;
    el_def=0;
   };
   use_search_algo=0;
   cur_search_algo=NULL;
   set_proj_name=0;
   proj_name=;
   auto_updt_interval=10;
   auto_updt_timeout=30;
   cluster=;
   clusters=;
   users=;
   last_submit_time=;
   notes=;
   label=;
   extra_files=;
   svn_repo=;
   repo_url=;
   queue=;
   run_time=;
   exe_cmd="emergent";
   ram_gb=-1;
   n_threads=2;
   use_mpi=0;
   mpi_nodes=10;
   mpi_per_node=1;
   parallel_batch=0;
   pb_batches=10;
   pb_n_batches_per=1;
   nowin_x=0;
   enable_kill=0;
   enable_load=0;
   enable_notes=0;
  };
  ControlPanel @[2] {
   UserDataItem_List @*(.user_data_) {
    name="UserDataItem_List_1";
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {name="user_pinned": value=1: val_type_fixed=0: };
   };
   name="PVLV";
   cp_state=REGULAR;
   updt_while_running=0;
   desc=;
   mbrs {
    name="mbrs";
    el_typ=ControlPanelMember;
    el_def=0;
    ControlPanelMember @[0] {
     label="lat_amyg_lrate";
     short_label=0;
     cust_label=1;
     desc="[Default: 0.04]  learning rate -- how fast the weights change per experience -- since version 7.8.5, a hidden factor of 2 has been removed, so this should be 2x what you used to use previously (e.g., default used to be .02, now is .04) -- this governs the rate of change for the fastest adapting weights -- see slow_wts for a more slowly adapting factor";
     cust_desc=0;
     base=.networks[0].specs.gp[0][1].children[0]$$;
     mbr=LeabraConSpec::lrate;
     data {ctrl_type=CONTROL: is_numeric=1: is_single=1: state=EXPLORE: saved_value="0.2": range="": notes="": };
    };
    ControlPanelMember @[1] {
     label="bas_amyg_acq_pos_lrate";
     short_label=0;
     cust_label=1;
     desc="[Default: 0.04]  learning rate -- how fast the weights change per experience -- since version 7.8.5, a hidden factor of 2 has been removed, so this should be 2x what you used to use previously (e.g., default used to be .02, now is .04) -- this governs the rate of change for the fastest adapting weights -- see slow_wts for a more slowly adapting factor";
     cust_desc=0;
     base=.networks[0].specs.gp[0][1].children[1]$$;
     mbr=LeabraConSpec::lrate;
     data {ctrl_type=CONTROL: is_numeric=1: is_single=1: state=EXPLORE: saved_value="0.2": range="": notes="": };
    };
    ControlPanelMember @[2] {
     label="bas_amyg_acq_neg_lrate";
     short_label=0;
     cust_label=1;
     desc="[Default: 0.04]  learning rate -- how fast the weights change per experience -- since version 7.8.5, a hidden factor of 2 has been removed, so this should be 2x what you used to use previously (e.g., default used to be .02, now is .04) -- this governs the rate of change for the fastest adapting weights -- see slow_wts for a more slowly adapting factor";
     cust_desc=0;
     base=.networks[0].specs.gp[0][1].children[1].children[0]$$;
     mbr=LeabraConSpec::lrate;
     data {ctrl_type=CONTROL: is_numeric=1: is_single=1: state=EXPLORE: saved_value="0.2": range="": notes="": };
    };
    ControlPanelMember @[3] {
     label="bas_amyg_ext_pos_lrate";
     short_label=0;
     cust_label=1;
     desc="[Default: 0.04]  learning rate -- how fast the weights change per experience -- since version 7.8.5, a hidden factor of 2 has been removed, so this should be 2x what you used to use previously (e.g., default used to be .02, now is .04) -- this governs the rate of change for the fastest adapting weights -- see slow_wts for a more slowly adapting factor";
     cust_desc=0;
     base=.networks[0].specs.gp[0][1].children[1].children[1]$$;
     mbr=LeabraConSpec::lrate;
     data {ctrl_type=CONTROL: is_numeric=1: is_single=1: state=EXPLORE: saved_value="0.025": range="": notes="": };
    };
    ControlPanelMember @[4] {
     label="bas_amyg_ext_neg_lrate";
     short_label=0;
     cust_label=1;
     desc="[Default: 0.04]  learning rate -- how fast the weights change per experience -- since version 7.8.5, a hidden factor of 2 has been removed, so this should be 2x what you used to use previously (e.g., default used to be .02, now is .04) -- this governs the rate of change for the fastest adapting weights -- see slow_wts for a more slowly adapting factor";
     cust_desc=0;
     base=.networks[0].specs.gp[0][1].children[1].children[2]$$;
     mbr=LeabraConSpec::lrate;
     data {ctrl_type=CONTROL: is_numeric=1: is_single=1: state=EXPLORE: saved_value="0.025": range="": notes="": };
    };
    ControlPanelMember @[5] {
     label="vs_patch_lrate";
     short_label=0;
     cust_label=1;
     desc="[Default: 0.04]  learning rate -- how fast the weights change per experience -- since version 7.8.5, a hidden factor of 2 has been removed, so this should be 2x what you used to use previously (e.g., default used to be .02, now is .04) -- this governs the rate of change for the fastest adapting weights -- see slow_wts for a more slowly adapting factor";
     cust_desc=0;
     base=.networks[0].specs.gp[0][1].children[2]$$;
     mbr=LeabraConSpec::lrate;
     data {ctrl_type=CONTROL: is_numeric=1: is_single=1: state=EXPLORE: saved_value="0.03": range="": notes="": };
    };
    ControlPanelMember @[6] {
     label="vs_matrix_lrate";
     short_label=0;
     cust_label=1;
     desc="[Default: 0.04]  learning rate -- how fast the weights change per experience -- since version 7.8.5, a hidden factor of 2 has been removed, so this should be 2x what you used to use previously (e.g., default used to be .02, now is .04) -- this governs the rate of change for the fastest adapting weights -- see slow_wts for a more slowly adapting factor";
     cust_desc=0;
     base=.networks[0].specs.gp[0][1].children[3]$$;
     mbr=LeabraConSpec::lrate;
     data {ctrl_type=CONTROL: is_numeric=1: is_single=1: state=EXPLORE: saved_value="0.06": range="": notes="": };
    };
    ControlPanelMember @[7] {
     label="bas_amyg_ext_pos_g_bar";
     short_label=0;
     cust_label=1;
     desc=" [Defaults: 1, .1, 1] maximal conductances for channels";
     cust_desc=0;
     base=.networks[0].specs.gp[0][0].children[8].children[0]$$;
     mbr=LeabraUnitSpec::g_bar;
     data {ctrl_type=CONTROL: is_numeric=0: is_single=0: state=EXPLORE: saved_value="{user_data_=NULL: e=1: l=0.3: i=1: }": range="": notes="": };
    };
    ControlPanelMember @[8] {
     label="bas_amyg_ext_neg_g_bar";
     short_label=0;
     cust_label=1;
     desc=" [Defaults: 1, .1, 1] maximal conductances for channels";
     cust_desc=0;
     base=.networks[0].specs.gp[0][0].children[8].children[2]$$;
     mbr=LeabraUnitSpec::g_bar;
     data {ctrl_type=CONTROL: is_numeric=0: is_single=0: state=EXPLORE: saved_value="{user_data_=NULL: e=1: l=0.3: i=1: }": range="": notes="": };
    };
    ControlPanelMember @[9] {
     label="lhb_rmtg_lhb";
     short_label=0;
     cust_label=1;
     desc=" lhb options and misc specs";
     cust_desc=0;
     base=.networks[0].specs.gp[0][0].children[1]$$;
     mbr=LHbRMTgUnitSpec::lhb;
     data {ctrl_type=CONTROL: is_numeric=0: is_single=0: state=EXPLORE: saved_value="{user_data_=NULL: patch_cur=true: matrix_td=false: pvneg_discount=0.8: rec_data=false: }": range="": notes="": };
    };
    ControlPanelMember @[10] {
     label="lhb_rmtg_gains";
     short_label=0;
     cust_label=1;
     desc=" gain parameters (multiplicative constants) for various sources of inputs";
     cust_desc=0;
     base=$.networks[0].specs.gp[0][0].children[1]$;
     mbr=LHbRMTgUnitSpec::gains;
     data {ctrl_type=CONTROL: is_numeric=0: is_single=0: state=EXPLORE: saved_value="{user_data_=NULL: all=1: vspatch_pos_D1=1: vspatch_pos_D2=1: vspatch_pos_disinhib_gain=0.2: vsmatrix_pos_D1=1: vsmatrix_pos_D2=1: vspatch_neg_D1=1: vspatch_neg_D2=1: vsmatrix_neg_D1=1: vsmatrix_neg_D2=1: }": range="": notes="": };
    };
    ControlPanelMember @[11] {
     label="pptg_d_net_gain";
     short_label=0;
     cust_label=1;
     desc=" extra multiplicative gain factor to apply to the net input delta -- brings this delta back into the typical range so that more standard activation functions can be used";
     cust_desc=0;
     base=.networks[0].specs.gp[0][0].children[2]$$;
     mbr=PPTgUnitSpec::d_net_gain;
     data {ctrl_type=CONTROL: is_numeric=1: is_single=1: state=EXPLORE: saved_value="1": range="": notes="": };
    };
    ControlPanelMember @[12] {
     label="vta_p_da";
     short_label=0;
     cust_label=1;
     desc=" parameters for the pvlv da computation";
     cust_desc=0;
     base=.networks[0].specs.gp[0][0].children[3]$$;
     mbr=VTAUnitSpec::da;
     data {ctrl_type=CONTROL: is_numeric=0: is_single=0: state=EXPLORE: saved_value="{user_data_=NULL: tonic_da=0: patch_cur=true: se_gain=0.1: rec_data=false: }": range="": notes="": };
    };
    ControlPanelMember @[13] {
     label="vta_p_gains";
     short_label=0;
     cust_label=1;
     desc=" gains for various parameters";
     cust_desc=0;
     base=$.networks[0].specs.gp[0][0].children[3]$;
     mbr=VTAUnitSpec::gains;
     data {ctrl_type=CONTROL: is_numeric=0: is_single=0: state=EXPLORE: saved_value="{user_data_=NULL: da_gain=1: pptg_gain=1: lhb_gain=1: pv_gain=1: pvi_burst_shunt_gain=1.05: pvi_anti_burst_shunt_gain=1: pvi_dip_shunt_gain=0: pvi_anti_dip_shunt_gain=0: }": range="": notes="": };
    };
    ControlPanelMember @[14] {
     label="vta_p_lv_block";
     short_label=0;
     cust_label=1;
     desc=" how LV signals are blocked by PV and LHbRMTg dip signals -- there are good reasons for these signals to block LV, because they reflect a stronger overall signal about outcomes, compared to the more 'speculative' LV signal";
     cust_desc=0;
     base=$.networks[0].specs.gp[0][0].children[3]$;
     mbr=VTAUnitSpec::lv_block;
     data {ctrl_type=CONTROL: is_numeric=0: is_single=0: state=EXPLORE: saved_value="{user_data_=NULL: pos_pv=1: lhb_dip=2: }": range="": notes="": };
    };
    ControlPanelMember @[15] {
     label="drn_se";
     short_label=0;
     cust_label=1;
     desc=" parameters for computing serotonin values";
     cust_desc=0;
     base=.networks[0].specs.gp[0][0].children[4]$$;
     mbr=DRNUnitSpec::se;
     data {ctrl_type=CONTROL: is_numeric=0: is_single=0: state=EXPLORE: saved_value="{user_data_=NULL: se_out_gain=1: se_base=0: se_inc_tau=50: da_pos_tau=10: da_neg_tau=10: se_pv_tau=20: se_state_tau=200: sub_pos=true: se_inc_dt=0.02: da_pos_dt=0.1: da_neg_dt=0.1: se_pv_dt=0.05: se_state_dt=0.005: }": range="": notes="": };
    };
    ControlPanelMember @[16] {
     label="pvlv_lay_inhib";
     short_label=0;
     cust_label=1;
     desc=" how to compute layer-wide inhibition -- uses feedforward (FF) and feedback (FB) inhibition (FFFB) based on average netinput (FF) and activation (FB) -- net inhibition is MAX of all operative inhibition -- any inhibitory unit inhibition is just added on top of this computed inhibition";
     cust_desc=0;
     base=.networks[0].specs.gp[0][4]$$;
     mbr=LeabraLayerSpec::lay_inhib;
     data {ctrl_type=CONTROL: is_numeric=0: is_single=0: state=EXPLORE: saved_value="{user_data_=NULL: on=true: gi=1: ff=1: fb=0: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.714286: }": range="": notes="": };
    };
    ControlPanelMember @[17] {
     label="pvlv_inhib_misc";
     short_label=0;
     cust_label=1;
     desc=" extra parameters for special forms of inhibition beyond the basic FFFB dynamic specified in inhib";
     cust_desc=0;
     base=$.networks[0].specs.gp[0][4]$;
     mbr=LeabraLayerSpec::inhib_misc;
     data {ctrl_type=CONTROL: is_numeric=0: is_single=0: state=EXPLORE: saved_value="{user_data_=NULL: net_thr=0: thr_rel=true: self_fb=0.3: self_tau=1.4: fb_up_immed=false: self_dt=0.714286: }": range="": notes="": };
    };
   };
   mths {
    name="mths";
    el_typ=ControlPanelMethod;
    el_def=0;
    group_type=GT_BUTTONS;
   };
  };
  ControlPanel @[3] {
   UserDataItem_List @*(.user_data_) {
    name="UserDataItem_List_1";
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {name="user_pinned": value=1: val_type_fixed=0: };
   };
   name="PBWM";
   cp_state=REGULAR;
   updt_while_running=0;
   desc=;
   mbrs {
    name="mbrs";
    el_typ=ControlPanelMember;
    el_def=0;
    ControlPanelMember @[0] {
     label="pbwm_deep_raw_qtr";
     short_label=0;
     cust_label=1;
     desc=;
     cust_desc=1;
     base=.networks[0].specs.gp[1][0]$$;
     mbr=LeabraUnitSpec::deep_raw_qtr;
     data {ctrl_type=CONTROL: is_numeric=0: is_single=1: state=EXPLORE: saved_value="Q2|Q4": range="": notes="": };
    };
    ControlPanelMember @[1] {
     label="bg_lrn_learn_qtr";
     short_label=0;
     cust_label=1;
     desc=" quarters after which learning (Compute_dWt) should take place<br> * Q1:  first quarter<br> * Q2:  second quarter<br> * Q3:  third quarter -- posterior cortical minus phase<br> * Q4:  fourth quarter -- posterior cortical plus phase";
     cust_desc=0;
     base=.networks[0].specs.gp[1][1]$$;
     mbr=LeabraConSpec::learn_qtr;
     data {ctrl_type=CONTROL: is_numeric=0: is_single=1: state=EXPLORE: saved_value="Q2|Q4": range="": notes="": };
    };
    ControlPanelMember_Group @.gp[0] {
     name="PFC";
     el_typ=ControlPanelMember;
     el_def=0;
     ControlPanelMember @[0] {
      label="pfc_mnt_gate";
      short_label=0;
      cust_label=1;
      desc=" PFC specifications for gating-related parameters";
      cust_desc=0;
      base=.networks[0].specs.gp[1][0].children[4]$$;
      mbr=PFCUnitSpec::gate;
      data {ctrl_type=CONTROL: is_numeric=0: is_single=0: state=EXPLORE: saved_value="{user_data_=NULL: out_gate=false: mnt_thal=1: gate_thr=0.2: prv_qtr=true: }": range="": notes="": };
     };
     ControlPanelMember @[1] {
      label="pfc_mnt_maint";
      short_label=0;
      cust_label=1;
      desc=" PFC specifications for maintenance-related parameters";
      cust_desc=0;
      base=$.networks[0].specs.gp[1][0].children[4]$;
      mbr=PFCUnitSpec::maint;
      data {ctrl_type=CONTROL: is_numeric=0: is_single=0: state=EXPLORE: saved_value="{user_data_=NULL: s_mnt_min=0.3: s_mnt_max=0.5: mnt_net_max=0.5: clear=0.5: use_dyn=true: max_mnt=100: }": range="": notes="": };
     };
     ControlPanelMember @[2] {
      label="pfc_mnt_n_dyns";
      short_label=0;
      cust_label=1;
      desc=" number of different temporal dynamic profiles for different PFC units, all triggered by a single gating event -- each row of units within a PFC unit group shares the same dynamics -- there should be an even multiple of n_dyns rows (y unit group size) per unit group";
      cust_desc=0;
      base=$.networks[0].specs.gp[1][0].children[4]$;
      mbr=PFCUnitSpec::n_dyns;
      data {ctrl_type=CONTROL: is_numeric=1: is_single=1: state=EXPLORE: saved_value="1": range="": notes="": };
     };
     ControlPanelMember @[3] {
      label="pfc_out_gate";
      short_label=0;
      cust_label=1;
      desc=" PFC specifications for gating-related parameters";
      cust_desc=0;
      base=.networks[0].specs.gp[1][0].children[5]$$;
      mbr=PFCUnitSpec::gate;
      data {ctrl_type=CONTROL: is_numeric=0: is_single=0: state=EXPLORE: saved_value="{user_data_=NULL: out_gate=true: mnt_thal=1: gate_thr=0.2: prv_qtr=false: }": range="": notes="": };
     };
     ControlPanelMember @[4] {
      label="pfc_out_maint";
      short_label=0;
      cust_label=1;
      desc=" PFC specifications for maintenance-related parameters";
      cust_desc=0;
      base=$.networks[0].specs.gp[1][0].children[5]$;
      mbr=PFCUnitSpec::maint;
      data {ctrl_type=CONTROL: is_numeric=0: is_single=0: state=EXPLORE: saved_value="{user_data_=NULL: s_mnt_min=0.3: s_mnt_max=0.5: mnt_net_max=0.5: clear=0.5: use_dyn=true: max_mnt=1: }": range="": notes="": };
     };
     ControlPanelMember @[5] {
      label="pfc_unit_gp_inhib";
      short_label=0;
      cust_label=1;
      desc=" how to compute unit-group-level inhibition (only relevant if layer actually has unit groups -- net inhibition is MAX of all operative inhibition -- uses feedforward (FF) and feedback (FB) inhibition (FFFB) based on average netinput (FF) and activation (FB) -- any inhibitory unit inhibition is just added on top of this computed inhibition";
      cust_desc=0;
      base=.networks[0].specs.gp[1][4].children[3]$$;
      mbr=LeabraLayerSpec::unit_gp_inhib;
      data {ctrl_type=CONTROL: is_numeric=0: is_single=0: state=EXPLORE: saved_value="{user_data_=NULL: on=true: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.714286: }": range="": notes="": };
     };
     ControlPanelMember @[6] {
      label="pfc_lay_inhib";
      short_label=0;
      cust_label=1;
      desc=" how to compute layer-wide inhibition -- uses feedforward (FF) and feedback (FB) inhibition (FFFB) based on average netinput (FF) and activation (FB) -- net inhibition is MAX of all operative inhibition -- any inhibitory unit inhibition is just added on top of this computed inhibition";
      cust_desc=0;
      base=$.networks[0].specs.gp[1][4].children[3]$;
      mbr=LeabraLayerSpec::lay_inhib;
      data {ctrl_type=CONTROL: is_numeric=0: is_single=0: state=EXPLORE: saved_value="{user_data_=NULL: on=false: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.714286: }": range="": notes="": };
     };
     ControlPanelMember @[7] {
      label="pfc_avg_act";
      short_label=0;
      cust_label=1;
      desc=" expected average activity levels in the layer -- used for computing running-average computation that is then used for netinput scaling (also specifies time constant for updating average), and for the target value for adapting inhibition in inhib_adapt";
      cust_desc=0;
      base=$.networks[0].specs.gp[1][4].children[3]$;
      mbr=LeabraLayerSpec::avg_act;
      data {ctrl_type=CONTROL: is_numeric=0: is_single=0: state=EXPLORE: saved_value="{user_data_=NULL: targ_init=0.2: fixed=true: use_ext_act=false: tau=100: adjust=1: dt=0.01: }": range="": notes="": };
     };
     ControlPanelMember @[8] {
      label="pfc_lrn_lrate";
      short_label=0;
      cust_label=1;
      desc="[Default: 0.04]  learning rate -- how fast the weights change per experience -- since version 7.8.5, a hidden factor of 2 has been removed, so this should be 2x what you used to use previously (e.g., default used to be .02, now is .04) -- this governs the rate of change for the fastest adapting weights -- see slow_wts for a more slowly adapting factor";
      cust_desc=0;
      base=.networks[0].specs.gp[1][2]$$;
      mbr=LeabraConSpec::lrate;
      data {ctrl_type=CONTROL: is_numeric=1: is_single=1: state=EXPLORE: saved_value="0.01": range="": notes="": };
     };
     ControlPanelMember @[9] {
      label="pfc_lrn_learn_qtr";
      short_label=0;
      cust_label=1;
      desc=" quarters after which learning (Compute_dWt) should take place<br> * Q1:  first quarter<br> * Q2:  second quarter<br> * Q3:  third quarter -- posterior cortical minus phase<br> * Q4:  fourth quarter -- posterior cortical plus phase";
      cust_desc=0;
      base=$.networks[0].specs.gp[1][2]$;
      mbr=LeabraConSpec::learn_qtr;
      data {ctrl_type=CONTROL: is_numeric=0: is_single=1: state=EXPLORE: saved_value="Q2|Q4": range="": notes="": };
     };
     ControlPanelMember @[10] {
      label="pfc_fm_trc_wt_scale";
      short_label=0;
      cust_label=1;
      desc=" scale effective weight values to control the overall strength of a projection -- relative shifts balance among different projections, while absolute is a direct multipler";
      cust_desc=0;
      base=.networks[0].specs.gp[1][2].children[2]$$;
      mbr=LeabraConSpec::wt_scale;
      data {ctrl_type=CONTROL: is_numeric=0: is_single=0: state=EXPLORE: saved_value="{user_data_=NULL: abs=1: rel=0.1: no_plus_net=false: }": range="": notes="": };
     };
    };
    ControlPanelMember_Group @.gp[1] {
     name="BG";
     el_typ=ControlPanelMember;
     el_def=0;
     ControlPanelMember @[0] {
      label="matrix_matrix";
      short_label=0;
      cust_label=1;
      desc=" parameters for Matrix activation dynamics";
      cust_desc=0;
      base=.networks[0].specs.gp[1][0].children[0]$$;
      mbr=MSNUnitSpec::matrix;
      data {ctrl_type=CONTROL: is_numeric=0: is_single=0: state=EXPLORE: saved_value="{user_data_=NULL: out_ach_inhib=0.2: n_mnt_x=-1: }": range="": notes="": };
     };
     ControlPanelMember @[1] {
      label="matrix_noise";
      short_label=0;
      cust_label=1;
      desc=;
      cust_desc=1;
      base=$.networks[0].specs.gp[1][0].children[0]$;
      mbr=LeabraUnitSpec::noise;
      data {ctrl_type=CONTROL: is_numeric=0: is_single=0: state=EXPLORE: saved_value="{user_data_=NULL: name=\"noise\": type=GAUSSIAN: mean=0: var=0.001: par=1: }": range="": notes="": };
     };
     ControlPanelMember @[2] {
      label="matrix_deep_mod_min";
      short_label=0;
      cust_label=1;
      desc=;
      cust_desc=1;
      base=.networks[0].specs.gp[1][0].children[0].deep$$;
      mbr=DeepSpec::mod_min;
      data {ctrl_type=CONTROL: is_numeric=1: is_single=1: state=EXPLORE: saved_value="0.2": range="": notes="": };
     };
     ControlPanelMember @[3] {
      label="matrix_unit_gp_inhib";
      short_label=0;
      cust_label=1;
      desc=" how to compute unit-group-level inhibition (only relevant if layer actually has unit groups -- net inhibition is MAX of all operative inhibition -- uses feedforward (FF) and feedback (FB) inhibition (FFFB) based on average netinput (FF) and activation (FB) -- any inhibitory unit inhibition is just added on top of this computed inhibition";
      cust_desc=0;
      base=.networks[0].specs.gp[1][4].children[0]$$;
      mbr=LeabraLayerSpec::unit_gp_inhib;
      data {ctrl_type=CONTROL: is_numeric=0: is_single=0: state=EXPLORE: saved_value="{user_data_=NULL: on=true: gi=1.9: ff=1: fb=0: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.714286: }": range="": notes="": };
     };
     ControlPanelMember @[4] {
      label="matrix_lay_inhib";
      short_label=0;
      cust_label=1;
      desc=" how to compute layer-wide inhibition -- uses feedforward (FF) and feedback (FB) inhibition (FFFB) based on average netinput (FF) and activation (FB) -- net inhibition is MAX of all operative inhibition -- any inhibitory unit inhibition is just added on top of this computed inhibition";
      cust_desc=0;
      base=$.networks[0].specs.gp[1][4].children[0]$;
      mbr=LeabraLayerSpec::lay_inhib;
      data {ctrl_type=CONTROL: is_numeric=0: is_single=0: state=EXPLORE: saved_value="{user_data_=NULL: on=true: gi=1.9: ff=1: fb=0.5: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.714286: }": range="": notes="": };
     };
     ControlPanelMember @[5] {
      label="matrix_inhib_misc";
      short_label=0;
      cust_label=1;
      desc=" extra parameters for special forms of inhibition beyond the basic FFFB dynamic specified in inhib";
      cust_desc=0;
      base=$.networks[0].specs.gp[1][4].children[0]$;
      mbr=LeabraLayerSpec::inhib_misc;
      data {ctrl_type=CONTROL: is_numeric=0: is_single=0: state=EXPLORE: saved_value="{user_data_=NULL: net_thr=0: thr_rel=true: self_fb=0.3: self_tau=1.4: fb_up_immed=false: self_dt=0.714286: }": range="": notes="": };
     };
     ControlPanelMember @[6] {
      label="matrix_del_inhib";
      short_label=0;
      cust_label=1;
      desc=" delayed inhibition, as a function of per-unit net input on prior trial and/or phase -- produces temporal derivative effects";
      cust_desc=0;
      base=$.networks[0].specs.gp[1][4].children[0]$;
      mbr=LeabraLayerSpec::del_inhib;
      data {ctrl_type=CONTROL: is_numeric=0: is_single=0: state=EXPLORE: saved_value="{user_data_=NULL: on=true: prv_trl=0: prv_q=0.03: }": range="": notes="": };
     };
     ControlPanelMember @[7] {
      label="matrix_lrate";
      short_label=0;
      cust_label=1;
      desc=;
      cust_desc=1;
      base=.networks[0].specs.gp[1][1].children[0]$$;
      mbr=LeabraConSpec::lrate;
      data {ctrl_type=CONTROL: is_numeric=1: is_single=1: state=EXPLORE: saved_value="0.04": range="": notes="": };
     };
     ControlPanelMember @[8] {
      label="matrix_trace";
      short_label=0;
      cust_label=1;
      desc=" parameters for trace-based learning ";
      cust_desc=0;
      base=$.networks[0].specs.gp[1][1].children[0]$;
      mbr=MSNConSpec::trace;
      data {ctrl_type=CONTROL: is_numeric=0: is_single=0: state=EXPLORE: saved_value="{user_data_=NULL: ach_reset_thr=0.5: msn_deriv=true: max_vs_deep_mod=0.5: }": range="": notes="": };
     };
     ControlPanelMember @[9] {
      label="matrix_tr_thal";
      short_label=0;
      cust_label=1;
      desc=" gain parameters for trace-based thalamic-gated learning ";
      cust_desc=0;
      base=$.networks[0].specs.gp[1][1].children[0]$;
      mbr=MSNConSpec::tr_thal;
      data {ctrl_type=CONTROL: is_numeric=0: is_single=0: state=EXPLORE: saved_value="{user_data_=NULL: full_params=false: not_gated=0.7: gate_go_pos=1: gate_go_neg=1: gate_nogo_pos=0.1: gate_nogo_neg=1: not_go_pos=0.7: not_go_neg=0.7: not_nogo_pos=0.7: not_nogo_neg=0.7: }": range="": notes="": };
     };
     ControlPanelMember @[10] {
      label="matrix_wt_scale";
      short_label=0;
      cust_label=1;
      desc=" scale effective weight values to control the overall strength of a projection -- relative shifts balance among different projections, while absolute is a direct multipler";
      cust_desc=0;
      base=.networks[0].specs.gp[1][1].children[0].children[1]$$;
      mbr=LeabraConSpec::wt_scale;
      data {ctrl_type=CONTROL: is_numeric=0: is_single=0: state=EXPLORE: saved_value="{user_data_=NULL: abs=1: rel=0.1: no_plus_net=false: }": range="": notes="": };
     };
     ControlPanelMember @[11] {
      label="gpi_gpi";
      short_label=0;
      cust_label=1;
      desc=" parameters controlling the gpi functionality: how to weight the Go vs. NoGo pathway inputs, and gating threshold";
      cust_desc=0;
      base=.networks[0].specs.gp[1][0].children[1]$$;
      mbr=GPiInvUnitSpec::gpi;
      data {ctrl_type=CONTROL: is_numeric=0: is_single=0: state=EXPLORE: saved_value="{user_data_=NULL: net_gain=3: nogo=1: gate_thr=0.2: thr_act=true: min_thal=0.2: tot_gain=4: thal_rescale=1: }": range="": notes="": };
     };
     ControlPanelMember @[12] {
      label="gpi_lay_inhib";
      short_label=0;
      cust_label=1;
      desc=;
      cust_desc=1;
      base=.networks[0].specs.gp[1][4].children[2]$$;
      mbr=LeabraLayerSpec::lay_inhib;
      data {ctrl_type=CONTROL: is_numeric=0: is_single=0: state=EXPLORE: saved_value="{user_data_=NULL: on=true: gi=1.8: ff=1: fb=0.5: fb_tau=1.4: max_vs_avg=1: ff0=0.1: fb_dt=0.714286: }": range="": notes="": };
     };
     ControlPanelMember @[13] {
      label="gpe_nogo_lay_inhib";
      short_label=0;
      cust_label=1;
      desc=;
      cust_desc=1;
      base=.networks[0].specs.gp[1][4].children[2].children[0]$$;
      mbr=LeabraLayerSpec::lay_inhib;
      data {ctrl_type=CONTROL: is_numeric=0: is_single=0: state=EXPLORE: saved_value="{user_data_=NULL: on=true: gi=2.2: ff=1: fb=0.5: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.714286: }": range="": notes="": };
     };
     ControlPanelMember @[14] {
      label="patch_shunt_factor";
      short_label=0;
      cust_label=1;
      desc="[Default: 0.2;0.5]  multiplies the dopamine value by this factor -- 0 = complete shunting -- should be a factor < 1.0";
      cust_desc=0;
      base=.networks[0].specs.gp[1][0].children[3]$$;
      mbr=PatchUnitSpec::shunt_factor;
      data {ctrl_type=CONTROL: is_numeric=1: is_single=1: state=EXPLORE: saved_value="0.2": range="": notes="": };
     };
     ControlPanelMember @[15] {
      label="patch_shunt_ach";
      short_label=0;
      cust_label=1;
      desc="[Default: true]  also shunt the ACh value driven from TAN units -- this prevents clearing of MSNConSpec traces -- more plausibly the patch units directly interfere with the effects of TAN's rather than through ach, but it is easier to implement with ach shunting here.";
      cust_desc=0;
      base=$.networks[0].specs.gp[1][0].children[3]$;
      mbr=PatchUnitSpec::shunt_ach;
      data {ctrl_type=CONTROL: is_numeric=0: is_single=1: state=EXPLORE: saved_value="true": range="": notes="": };
     };
    };
   };
   mths {
    name="mths";
    el_typ=ControlPanelMethod;
    el_def=0;
    group_type=GT_BUTTONS;
   };
  };
 };
 active_params {
  name="active_params";
  el_typ=ParamSet;
  el_def=0;
  master_and_clones=0;
 };
 archived_params {
  name="archived_params";
  el_typ=ParamSet;
  el_def=0;
  master_and_clones=0;
 };
 data {
  name="data";
  el_typ=DataTable;
  el_def=0;
  save_tables=1;
  DataTable_Group @.gp[0] {
   name="InputData";
   el_typ=DataTable;
   el_def=0;
   save_tables=1;
   DataTable @[0] {
    name="StdInputData";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @[0] {
      name="Name";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       name="ar";
      [6] "checks";"mitvert";"midhoriz";"rdiag";"ldiag";"random";      };
     };
     float_Data @[1] {
      name="Input";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=1;
      cell_geom{ 5;5;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [2] ;;      };
      width=5;
      matrix_col_width=10;
      ar {
       name="ar";
      [5 5 6] 1;0;0;0;1;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
1;0;0;0;1;0;0;1;0;0;
0;0;1;0;0;0;0;1;0;0;
0;0;1;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
1;1;1;1;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;1;0;0;0;1;0;0;
0;1;0;0;0;1;0;0;0;0;
1;0;0;0;0;0;1;0;0;0;
0;0;1;0;0;0;0;0;1;0;
0;0;0;0;1;1;0;0;0;0;
0;0;0;1;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;0;0;
      };
     };
     float_Data @[2] {
      name="Output";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=1;
      cell_geom{ 5;5;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [2] ;;      };
      width=6;
      matrix_col_width=10;
      ar {
       name="ar";
      [5 5 6] 1;0;0;0;1;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
1;0;0;0;1;0;0;1;0;0;
0;0;1;0;0;0;0;1;0;0;
0;0;1;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
1;1;1;1;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;1;0;0;0;1;0;0;
0;1;0;0;0;1;0;0;0;0;
1;0;0;0;0;0;1;0;0;0;
0;0;1;0;0;0;0;0;1;0;
0;0;0;0;1;1;0;0;0;0;
0;0;0;1;0;0;1;0;0;1;
1;0;0;0;0;0;0;0;0;0;
      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [6] 0;1;2;3;4;5;    };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
   };
  };
  DataTable_Group @.gp[1] {
   name="OutputData";
   el_typ=DataTable;
   el_def=0;
   save_tables=1;
   DataTable @[0] {
    name="TrialOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      name="batch";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     int_Data @[1] {
      name="epoch";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     String_Data @[2] {
      name="train_mode";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     int_Data @[3] {
      name="group";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     int_Data @[4] {
      name="trial";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     int_Data @[5] {
      name="tick";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @[6] {
      name="time";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     String_Data @[7] {
      name="trial_name";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @[8] {
      name="group_name";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @[9] {
      name="output_name";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     float_Data @[10] {
      name="rt_cycles";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=9;
      matrix_col_width=10;
     };
     float_Data @[11] {
      name="sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @[12] {
      name="norm_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @[13] {
      name="cos_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @[14] {
      name="ext_rew";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @[15] {
      name="Output_lay_sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
     };
     float_Data @[16] {
      name="Output_lay_bin_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
     };
     float_Data @[17] {
      name="Output_lay_norm_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
     };
     float_Data @[18] {
      name="Output_lay_cos_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
     };
     float_Data @[19] {
      name="Hidden_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=17;
      matrix_col_width=10;
     };
     float_Data @[20] {
      name="Output_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=17;
      matrix_col_width=10;
     };
     float_Data @[21] {
      name="PosPV_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[22] {
      name="ExtRew_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[23] {
      name="LatAmyg_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[24] {
      name="BAAcqPosD1_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[25] {
      name="BAExtPosD2_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[26] {
      name="CAPos_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[27] {
      name="BAAcqNegD2_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[28] {
      name="BAExtNegD1_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[29] {
      name="CANeg_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[30] {
      name="VSPatchPosD1_lay_net_sd";
      col_flags=PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[31] {
      name="VSPatchPosD2_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[32] {
      name="VSPatchNegD2_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[33] {
      name="VSPatchNegD1_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[34] {
      name="VSMatrixPosD1_lay_net_sd";
      col_flags=PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[35] {
      name="VSMatrixPosD2_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[36] {
      name="VSMatrixNegD2_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[37] {
      name="VSMatrixNegD1_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[38] {
      name="PPTg_p_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[39] {
      name="VTAp_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[40] {
      name="LHbRMTg_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[41] {
      name="PPTg_n_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[42] {
      name="VTAn_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[43] {
      name="DRN_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[44] {
      name="MatrixGo_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[45] {
      name="MatrixNoGo_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[46] {
      name="MatrixTAN_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[47] {
      name="PFCmnt_patch_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[48] {
      name="GPeNoGo_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[49] {
      name="GPi_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[50] {
      name="PFCmnt_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[51] {
      name="PFCmnt_deep_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[52] {
      name="PFCmnt_trc_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[53] {
      name="PFCout_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[54] {
      name="PFCout_deep_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[55] {
      name="net_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=12;
      matrix_col_width=10;
     };
     float_Data @[56] {
      name="net_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
     };
     float_Data @[57] {
      name="net_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     float_Data @[58] {
      name="Hidden_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=15;
      matrix_col_width=10;
     };
     float_Data @[59] {
      name="Output_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=15;
      matrix_col_width=10;
     };
     float_Data @[60] {
      name="PosPV_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[61] {
      name="ExtRew_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[62] {
      name="LatAmyg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[63] {
      name="BAAcqPosD1_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[64] {
      name="BAExtPosD2_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[65] {
      name="CAPos_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[66] {
      name="BAAcqNegD2_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[67] {
      name="BAExtNegD1_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[68] {
      name="CANeg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[69] {
      name="VSPatchPosD1_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[70] {
      name="VSPatchPosD2_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[71] {
      name="VSPatchNegD2_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[72] {
      name="VSPatchNegD1_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[73] {
      name="VSMatrixPosD1_cos_diff";
      col_flags=PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[74] {
      name="VSMatrixPosD2_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[75] {
      name="VSMatrixNegD2_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[76] {
      name="VSMatrixNegD1_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[77] {
      name="PPTg_p_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[78] {
      name="VTAp_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[79] {
      name="LHbRMTg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[80] {
      name="PPTg_n_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[81] {
      name="VTAn_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[82] {
      name="DRN_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[83] {
      name="MatrixGo_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[84] {
      name="MatrixNoGo_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[85] {
      name="MatrixTAN_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[86] {
      name="PFCmnt_patch_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[87] {
      name="GPeNoGo_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[88] {
      name="GPi_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[89] {
      name="PFCmnt_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[90] {
      name="PFCmnt_deep_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[91] {
      name="PFCmnt_trc_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[92] {
      name="PFCout_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[93] {
      name="PFCout_deep_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[94] {
      name="Hidden_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=21;
      matrix_col_width=10;
     };
     float_Data @[95] {
      name="Output_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=21;
      matrix_col_width=10;
     };
     float_Data @[96] {
      name="PosPV_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[97] {
      name="ExtRew_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[98] {
      name="LatAmyg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[99] {
      name="BAAcqPosD1_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[100] {
      name="BAExtPosD2_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[101] {
      name="CAPos_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[102] {
      name="BAAcqNegD2_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[103] {
      name="BAExtNegD1_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[104] {
      name="CANeg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[105] {
      name="VSPatchPosD1_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[106] {
      name="VSPatchPosD2_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[107] {
      name="VSPatchNegD2_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[108] {
      name="VSPatchNegD1_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[109] {
      name="VSMatrixPosD1_trial_cos_diff";
      col_flags=PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[110] {
      name="VSMatrixPosD2_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[111] {
      name="VSMatrixNegD2_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[112] {
      name="VSMatrixNegD1_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[113] {
      name="PPTg_p_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[114] {
      name="VTAp_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[115] {
      name="LHbRMTg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[116] {
      name="PPTg_n_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[117] {
      name="VTAn_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[118] {
      name="DRN_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[119] {
      name="MatrixGo_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[120] {
      name="MatrixNoGo_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[121] {
      name="MatrixTAN_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[122] {
      name="PFCmnt_patch_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[123] {
      name="GPeNoGo_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[124] {
      name="GPi_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[125] {
      name="PFCmnt_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[126] {
      name="PFCmnt_deep_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[127] {
      name="PFCmnt_trc_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[128] {
      name="PFCout_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[129] {
      name="PFCout_deep_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[130] {
      name="Hidden_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
     };
     float_Data @[131] {
      name="Output_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
     };
     float_Data @[132] {
      name="PosPV_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[133] {
      name="ExtRew_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[134] {
      name="LatAmyg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[135] {
      name="BAAcqPosD1_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[136] {
      name="BAExtPosD2_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[137] {
      name="CAPos_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[138] {
      name="BAAcqNegD2_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[139] {
      name="BAExtNegD1_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[140] {
      name="CANeg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[141] {
      name="VSPatchPosD1_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[142] {
      name="VSPatchPosD2_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[143] {
      name="VSPatchNegD2_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[144] {
      name="VSPatchNegD1_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[145] {
      name="VSMatrixPosD1_avg_act_diff";
      col_flags=PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[146] {
      name="VSMatrixPosD2_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[147] {
      name="VSMatrixNegD2_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[148] {
      name="VSMatrixNegD1_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[149] {
      name="PPTg_p_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[150] {
      name="VTAp_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[151] {
      name="LHbRMTg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[152] {
      name="PPTg_n_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[153] {
      name="VTAn_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[154] {
      name="DRN_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[155] {
      name="MatrixGo_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[156] {
      name="MatrixNoGo_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[157] {
      name="MatrixTAN_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[158] {
      name="PFCmnt_patch_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[159] {
      name="GPeNoGo_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[160] {
      name="GPi_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[161] {
      name="PFCmnt_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[162] {
      name="PFCmnt_deep_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[163] {
      name="PFCmnt_trc_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[164] {
      name="PFCout_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[165] {
      name="PFCout_deep_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
   };
   DataTable @[1] {
    name="EpochOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      name="batch";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     int_Data @[1] {
      name="epoch";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @[2] {
      name="avg_sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @[3] {
      name="cnt_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @[4] {
      name="pct_cor";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @[5] {
      name="pct_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @[6] {
      name="avg_norm_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=12;
      matrix_col_width=10;
     };
     float_Data @[7] {
      name="avg_cos_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=11;
      matrix_col_width=10;
     };
     float_Data @[8] {
      name="avg_ext_rew";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=11;
      matrix_col_width=10;
     };
     float_Data @[9] {
      name="avg_cycles";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=10;
      matrix_col_width=10;
     };
     float_Data @[10] {
      name="epoch_time_tot";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
     };
     float_Data @[11] {
      name="epoch_time_usr";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
     };
     float_Data @[12] {
      name="Output_lay_avg_sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
     };
     float_Data @[13] {
      name="Output_lay_cnt_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
     };
     float_Data @[14] {
      name="Output_lay_pct_cor";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
     };
     float_Data @[15] {
      name="Output_lay_pct_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
     };
     float_Data @[16] {
      name="Output_lay_avg_norm_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=23;
      matrix_col_width=10;
     };
     float_Data @[17] {
      name="Output_lay_avg_cos_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=22;
      matrix_col_width=10;
     };
     float_Data @[18] {
      name="net_avg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     float_Data @[19] {
      name="net_avg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=22;
      matrix_col_width=10;
     };
     float_Data @[20] {
      name="net_avg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=20;
      matrix_col_width=10;
     };
     float_Data @[21] {
      name="Hidden_avg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
     };
     float_Data @[22] {
      name="Output_avg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
     };
     float_Data @[23] {
      name="PosPV_avg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[24] {
      name="ExtRew_avg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[25] {
      name="LatAmyg_avg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[26] {
      name="BAAcqPosD1_avg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[27] {
      name="BAExtPosD2_avg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[28] {
      name="CAPos_avg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[29] {
      name="BAAcqNegD2_avg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[30] {
      name="BAExtNegD1_avg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[31] {
      name="CANeg_avg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[32] {
      name="VSPatchPosD1_avg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[33] {
      name="VSPatchPosD2_avg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[34] {
      name="VSPatchNegD2_avg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[35] {
      name="VSPatchNegD1_avg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[36] {
      name="VSMatrixPosD1_avg_cos_diff";
      col_flags=PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[37] {
      name="VSMatrixPosD2_avg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[38] {
      name="VSMatrixNegD2_avg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[39] {
      name="VSMatrixNegD1_avg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[40] {
      name="PPTg_p_avg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[41] {
      name="VTAp_avg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[42] {
      name="LHbRMTg_avg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[43] {
      name="PPTg_n_avg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[44] {
      name="VTAn_avg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[45] {
      name="DRN_avg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[46] {
      name="MatrixGo_avg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[47] {
      name="MatrixNoGo_avg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[48] {
      name="MatrixTAN_avg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[49] {
      name="PFCmnt_patch_avg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[50] {
      name="GPeNoGo_avg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[51] {
      name="GPi_avg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[52] {
      name="PFCmnt_avg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[53] {
      name="PFCmnt_deep_avg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[54] {
      name="PFCmnt_trc_avg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[55] {
      name="PFCout_avg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[56] {
      name="PFCout_deep_avg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[57] {
      name="Hidden_avg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=25;
      matrix_col_width=10;
     };
     float_Data @[58] {
      name="Output_avg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=25;
      matrix_col_width=10;
     };
     float_Data @[59] {
      name="PosPV_avg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[60] {
      name="ExtRew_avg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[61] {
      name="LatAmyg_avg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[62] {
      name="BAAcqPosD1_avg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[63] {
      name="BAExtPosD2_avg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[64] {
      name="CAPos_avg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[65] {
      name="BAAcqNegD2_avg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[66] {
      name="BAExtNegD1_avg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[67] {
      name="CANeg_avg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[68] {
      name="VSPatchPosD1_avg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[69] {
      name="VSPatchPosD2_avg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[70] {
      name="VSPatchNegD2_avg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[71] {
      name="VSPatchNegD1_avg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[72] {
      name="VSMatrixPosD1_avg_trial_cos_diff";
      col_flags=PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[73] {
      name="VSMatrixPosD2_avg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[74] {
      name="VSMatrixNegD2_avg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[75] {
      name="VSMatrixNegD1_avg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[76] {
      name="PPTg_p_avg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[77] {
      name="VTAp_avg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[78] {
      name="LHbRMTg_avg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[79] {
      name="PPTg_n_avg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[80] {
      name="VTAn_avg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[81] {
      name="DRN_avg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[82] {
      name="MatrixGo_avg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[83] {
      name="MatrixNoGo_avg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[84] {
      name="MatrixTAN_avg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[85] {
      name="PFCmnt_patch_avg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[86] {
      name="GPeNoGo_avg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[87] {
      name="GPi_avg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[88] {
      name="PFCmnt_avg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[89] {
      name="PFCmnt_deep_avg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[90] {
      name="PFCmnt_trc_avg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[91] {
      name="PFCout_avg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[92] {
      name="PFCout_deep_avg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[93] {
      name="Hidden_avg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=23;
      matrix_col_width=10;
     };
     float_Data @[94] {
      name="Output_avg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=23;
      matrix_col_width=10;
     };
     float_Data @[95] {
      name="PosPV_avg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[96] {
      name="ExtRew_avg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[97] {
      name="LatAmyg_avg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[98] {
      name="BAAcqPosD1_avg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[99] {
      name="BAExtPosD2_avg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[100] {
      name="CAPos_avg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[101] {
      name="BAAcqNegD2_avg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[102] {
      name="BAExtNegD1_avg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[103] {
      name="CANeg_avg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[104] {
      name="VSPatchPosD1_avg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[105] {
      name="VSPatchPosD2_avg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[106] {
      name="VSPatchNegD2_avg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[107] {
      name="VSPatchNegD1_avg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[108] {
      name="VSMatrixPosD1_avg_avg_act_diff";
      col_flags=PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[109] {
      name="VSMatrixPosD2_avg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[110] {
      name="VSMatrixNegD2_avg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[111] {
      name="VSMatrixNegD1_avg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[112] {
      name="PPTg_p_avg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[113] {
      name="VTAp_avg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[114] {
      name="LHbRMTg_avg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[115] {
      name="PPTg_n_avg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[116] {
      name="VTAn_avg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[117] {
      name="DRN_avg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[118] {
      name="MatrixGo_avg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[119] {
      name="MatrixNoGo_avg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[120] {
      name="MatrixTAN_avg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[121] {
      name="PFCmnt_patch_avg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[122] {
      name="GPeNoGo_avg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[123] {
      name="GPi_avg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[124] {
      name="PFCmnt_avg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[125] {
      name="PFCmnt_deep_avg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[126] {
      name="PFCmnt_trc_avg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[127] {
      name="PFCout_avg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[128] {
      name="PFCout_deep_avg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[129] {
      name="Hidden_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=17;
      matrix_col_width=10;
     };
     float_Data @[130] {
      name="Output_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=17;
      matrix_col_width=10;
     };
     float_Data @[131] {
      name="PosPV_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[132] {
      name="ExtRew_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[133] {
      name="LatAmyg_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[134] {
      name="BAAcqPosD1_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[135] {
      name="BAExtPosD2_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[136] {
      name="CAPos_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[137] {
      name="BAAcqNegD2_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[138] {
      name="BAExtNegD1_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[139] {
      name="CANeg_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[140] {
      name="VSPatchPosD1_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[141] {
      name="VSPatchPosD2_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[142] {
      name="VSPatchNegD2_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[143] {
      name="VSPatchNegD1_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[144] {
      name="VSMatrixPosD1_avg_net_sd";
      col_flags=PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[145] {
      name="VSMatrixPosD2_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[146] {
      name="VSMatrixNegD2_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[147] {
      name="VSMatrixNegD1_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[148] {
      name="PPTg_p_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[149] {
      name="VTAp_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[150] {
      name="LHbRMTg_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[151] {
      name="PPTg_n_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[152] {
      name="VTAn_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[153] {
      name="DRN_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[154] {
      name="MatrixGo_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[155] {
      name="MatrixNoGo_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[156] {
      name="MatrixTAN_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[157] {
      name="PFCmnt_patch_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[158] {
      name="GPeNoGo_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[159] {
      name="GPi_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[160] {
      name="PFCmnt_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[161] {
      name="PFCmnt_deep_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[162] {
      name="PFCmnt_trc_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[163] {
      name="PFCout_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[164] {
      name="PFCout_deep_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[165] {
      name="Hidden_hog_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
     };
     float_Data @[166] {
      name="Output_hog_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
     };
     float_Data @[167] {
      name="PosPV_hog_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[168] {
      name="ExtRew_hog_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[169] {
      name="LatAmyg_hog_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[170] {
      name="BAAcqPosD1_hog_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[171] {
      name="BAExtPosD2_hog_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[172] {
      name="CAPos_hog_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[173] {
      name="BAAcqNegD2_hog_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[174] {
      name="BAExtNegD1_hog_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[175] {
      name="CANeg_hog_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[176] {
      name="VSPatchPosD1_hog_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[177] {
      name="VSPatchPosD2_hog_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[178] {
      name="VSPatchNegD2_hog_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[179] {
      name="VSPatchNegD1_hog_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[180] {
      name="VSMatrixPosD1_hog_pct";
      col_flags=PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[181] {
      name="VSMatrixPosD2_hog_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[182] {
      name="VSMatrixNegD2_hog_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[183] {
      name="VSMatrixNegD1_hog_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[184] {
      name="PPTg_p_hog_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[185] {
      name="VTAp_hog_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[186] {
      name="LHbRMTg_hog_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[187] {
      name="PPTg_n_hog_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[188] {
      name="VTAn_hog_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[189] {
      name="DRN_hog_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[190] {
      name="MatrixGo_hog_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[191] {
      name="MatrixNoGo_hog_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[192] {
      name="MatrixTAN_hog_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[193] {
      name="PFCmnt_patch_hog_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[194] {
      name="GPeNoGo_hog_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[195] {
      name="GPi_hog_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[196] {
      name="PFCmnt_hog_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[197] {
      name="PFCmnt_deep_hog_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[198] {
      name="PFCmnt_trc_hog_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[199] {
      name="PFCout_hog_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[200] {
      name="PFCout_deep_hog_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[201] {
      name="Hidden_dead_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=15;
      matrix_col_width=10;
     };
     float_Data @[202] {
      name="Output_dead_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=15;
      matrix_col_width=10;
     };
     float_Data @[203] {
      name="PosPV_dead_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[204] {
      name="ExtRew_dead_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[205] {
      name="LatAmyg_dead_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[206] {
      name="BAAcqPosD1_dead_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[207] {
      name="BAExtPosD2_dead_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[208] {
      name="CAPos_dead_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[209] {
      name="BAAcqNegD2_dead_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[210] {
      name="BAExtNegD1_dead_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[211] {
      name="CANeg_dead_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[212] {
      name="VSPatchPosD1_dead_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[213] {
      name="VSPatchPosD2_dead_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[214] {
      name="VSPatchNegD2_dead_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[215] {
      name="VSPatchNegD1_dead_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[216] {
      name="VSMatrixPosD1_dead_pct";
      col_flags=PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[217] {
      name="VSMatrixPosD2_dead_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[218] {
      name="VSMatrixNegD2_dead_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[219] {
      name="VSMatrixNegD1_dead_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[220] {
      name="PPTg_p_dead_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[221] {
      name="VTAp_dead_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[222] {
      name="LHbRMTg_dead_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[223] {
      name="PPTg_n_dead_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[224] {
      name="VTAn_dead_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[225] {
      name="DRN_dead_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[226] {
      name="MatrixGo_dead_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[227] {
      name="MatrixNoGo_dead_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[228] {
      name="MatrixTAN_dead_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[229] {
      name="PFCmnt_patch_dead_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[230] {
      name="GPeNoGo_dead_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[231] {
      name="GPi_dead_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[232] {
      name="PFCmnt_dead_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[233] {
      name="PFCmnt_deep_dead_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[234] {
      name="PFCmnt_trc_dead_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[235] {
      name="PFCout_dead_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[236] {
      name="PFCout_deep_dead_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[237] {
      name="Hidden_netmax";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=13;
      matrix_col_width=10;
     };
     float_Data @[238] {
      name="Output_netmax";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=13;
      matrix_col_width=10;
     };
     float_Data @[239] {
      name="PosPV_netmax";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[240] {
      name="ExtRew_netmax";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[241] {
      name="LatAmyg_netmax";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[242] {
      name="BAAcqPosD1_netmax";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[243] {
      name="BAExtPosD2_netmax";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[244] {
      name="CAPos_netmax";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[245] {
      name="BAAcqNegD2_netmax";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[246] {
      name="BAExtNegD1_netmax";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[247] {
      name="CANeg_netmax";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[248] {
      name="VSPatchPosD1_netmax";
      col_flags=PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[249] {
      name="VSPatchPosD2_netmax";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[250] {
      name="VSPatchNegD2_netmax";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[251] {
      name="VSPatchNegD1_netmax";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[252] {
      name="VSMatrixPosD1_netmax";
      col_flags=PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[253] {
      name="VSMatrixPosD2_netmax";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[254] {
      name="VSMatrixNegD2_netmax";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[255] {
      name="VSMatrixNegD1_netmax";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[256] {
      name="PPTg_p_netmax";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[257] {
      name="VTAp_netmax";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[258] {
      name="LHbRMTg_netmax";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[259] {
      name="PPTg_n_netmax";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[260] {
      name="VTAn_netmax";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[261] {
      name="DRN_netmax";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[262] {
      name="MatrixGo_netmax";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[263] {
      name="MatrixNoGo_netmax";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[264] {
      name="MatrixTAN_netmax";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[265] {
      name="PFCmnt_patch_netmax";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[266] {
      name="GPeNoGo_netmax";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[267] {
      name="GPi_netmax";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[268] {
      name="PFCmnt_netmax";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[269] {
      name="PFCmnt_deep_netmax";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[270] {
      name="PFCmnt_trc_netmax";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[271] {
      name="PFCout_netmax";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[272] {
      name="PFCout_deep_netmax";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[273] {
      name="Hidden_avg_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
     };
     float_Data @[274] {
      name="Output_avg_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
     };
     float_Data @[275] {
      name="PosPV_avg_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[276] {
      name="ExtRew_avg_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[277] {
      name="LatAmyg_avg_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[278] {
      name="BAAcqPosD1_avg_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[279] {
      name="BAExtPosD2_avg_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[280] {
      name="CAPos_avg_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[281] {
      name="BAAcqNegD2_avg_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[282] {
      name="BAExtNegD1_avg_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[283] {
      name="CANeg_avg_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[284] {
      name="VSPatchPosD1_avg_act";
      col_flags=PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[285] {
      name="VSPatchPosD2_avg_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[286] {
      name="VSPatchNegD2_avg_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[287] {
      name="VSPatchNegD1_avg_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[288] {
      name="VSMatrixPosD1_avg_act";
      col_flags=PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[289] {
      name="VSMatrixPosD2_avg_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[290] {
      name="VSMatrixNegD2_avg_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[291] {
      name="VSMatrixNegD1_avg_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[292] {
      name="PPTg_p_avg_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[293] {
      name="VTAp_avg_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[294] {
      name="LHbRMTg_avg_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[295] {
      name="PPTg_n_avg_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[296] {
      name="VTAn_avg_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[297] {
      name="DRN_avg_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[298] {
      name="MatrixGo_avg_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[299] {
      name="MatrixNoGo_avg_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[300] {
      name="MatrixTAN_avg_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[301] {
      name="PFCmnt_patch_avg_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[302] {
      name="GPeNoGo_avg_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[303] {
      name="GPi_avg_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[304] {
      name="PFCmnt_avg_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[305] {
      name="PFCmnt_deep_avg_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[306] {
      name="PFCmnt_trc_avg_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[307] {
      name="PFCout_avg_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[308] {
      name="PFCout_deep_avg_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[309] {
      name="Hidden_Fm_Input_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=22;
      matrix_col_width=10;
     };
     float_Data @[310] {
      name="Hidden_Fm_Output_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=23;
      matrix_col_width=10;
     };
     float_Data @[311] {
      name="Hidden_Fm_PFCout_deep_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[312] {
      name="Output_Fm_Hidden_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=23;
      matrix_col_width=10;
     };
     float_Data @[313] {
      name="Output_Fm_PFCout_deep_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[314] {
      name="PosPV_Fm_ExtRew_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[315] {
      name="ExtRew_Marker_Fm_RewTarg_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[316] {
      name="ExtRew_Marker_Fm_Output_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[317] {
      name="LatAmyg_Marker_Fm_VTAp_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[318] {
      name="LatAmyg_Marker_Fm_VTAn_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[319] {
      name="LatAmyg_Fm_Input_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[320] {
      name="LatAmyg_Fm_PFCmnt_deep_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[321] {
      name="BAAcqPosD1_Deep_Raw_Fm_PosPV_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[322] {
      name="BAAcqPosD1_Marker_Fm_VTAp_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[323] {
      name="BAAcqPosD1_Fm_LatAmyg_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[324] {
      name="BAAcqPosD1_Inhib_Fm_BAExtPosD2_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[325] {
      name="BAExtPosD2_Deep_Mod_Fm_BAAcqPosD1_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[326] {
      name="BAExtPosD2_Marker_Fm_VTAp_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[327] {
      name="BAExtPosD2_Fm_LatAmyg_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[328] {
      name="BAExtPosD2_Fm_Input_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[329] {
      name="CAPos_Fm_PosPV_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[330] {
      name="CAPos_Fm_BAAcqPosD1_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[331] {
      name="BAAcqNegD2_Deep_Raw_Fm_NegPV_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[332] {
      name="BAAcqNegD2_Marker_Fm_VTAp_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[333] {
      name="BAAcqNegD2_Fm_LatAmyg_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[334] {
      name="BAAcqNegD2_Inhib_Fm_BAExtNegD1_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[335] {
      name="BAExtNegD1_Deep_Mod_Fm_BAAcqNegD2_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[336] {
      name="BAExtNegD1_Deep_Raw_Fm_NegPV_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[337] {
      name="BAExtNegD1_Marker_Fm_VTAp_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[338] {
      name="BAExtNegD1_Fm_LatAmyg_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[339] {
      name="BAExtNegD1_Fm_Input_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[340] {
      name="CANeg_Fm_NegPV_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[341] {
      name="CANeg_Fm_BAAcqNegD2_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[342] {
      name="VSPatchPosD1_Marker_Fm_VTAp_netrel";
      col_flags=PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[343] {
      name="VSPatchPosD1_Deep_Mod_Fm_BAAcqPosD1_netrel";
      col_flags=PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[344] {
      name="VSPatchPosD1_Fm_Input_netrel";
      col_flags=PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[345] {
      name="VSPatchPosD2_Marker_Fm_VTAp_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[346] {
      name="VSPatchPosD2_Deep_Mod_Fm_BAAcqPosD1_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[347] {
      name="VSPatchPosD2_Fm_Input_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[348] {
      name="VSPatchNegD2_Marker_Fm_VTAp_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[349] {
      name="VSPatchNegD2_Deep_Mod_Fm_BAAcqNegD2_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[350] {
      name="VSPatchNegD2_Fm_Input_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[351] {
      name="VSPatchNegD1_Marker_Fm_VTAp_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[352] {
      name="VSPatchNegD1_Deep_Mod_Fm_BAAcqNegD2_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[353] {
      name="VSPatchNegD1_Fm_Input_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[354] {
      name="VSMatrixPosD1_Marker_Fm_VTAp_netrel";
      col_flags=PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[355] {
      name="VSMatrixPosD1_Deep_Mod_Fm_BAAcqPosD1_netrel";
      col_flags=PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[356] {
      name="VSMatrixPosD1_Fm_Input_netrel";
      col_flags=PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[357] {
      name="VSMatrixPosD2_Marker_Fm_VTAp_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[358] {
      name="VSMatrixPosD2_Deep_Mod_Fm_VSMatrixPosD1_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[359] {
      name="VSMatrixPosD2_Fm_Input_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[360] {
      name="VSMatrixNegD2_Marker_Fm_VTAp_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[361] {
      name="VSMatrixNegD2_Deep_Mod_Fm_BAAcqNegD2_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[362] {
      name="VSMatrixNegD2_Fm_Input_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[363] {
      name="VSMatrixNegD1_Marker_Fm_VTAp_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[364] {
      name="VSMatrixNegD1_Deep_Mod_Fm_VSMatrixNegD2_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[365] {
      name="VSMatrixNegD1_Fm_Input_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[366] {
      name="PPTg_p_Fm_CAPos_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[367] {
      name="VTAp_Marker_Fm_PPTg_p_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[368] {
      name="VTAp_Marker_Fm_LHbRMTg_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[369] {
      name="VTAp_Marker_Fm_PosPV_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[370] {
      name="VTAp_Marker_Fm_VSPatchPosD1_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[371] {
      name="VTAp_Marker_Fm_VSPatchPosD2_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[372] {
      name="LHbRMTg_Marker_Fm_PosPV_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[373] {
      name="LHbRMTg_Marker_Fm_NegPV_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[374] {
      name="LHbRMTg_Marker_Fm_VSPatchPosD1_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[375] {
      name="LHbRMTg_Marker_Fm_VSPatchPosD2_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[376] {
      name="LHbRMTg_Marker_Fm_VSPatchNegD2_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[377] {
      name="LHbRMTg_Marker_Fm_VSPatchNegD1_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[378] {
      name="LHbRMTg_Marker_Fm_VSMatrixPosD1_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[379] {
      name="LHbRMTg_Marker_Fm_VSMatrixPosD2_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[380] {
      name="LHbRMTg_Marker_Fm_VSMatrixNegD2_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[381] {
      name="LHbRMTg_Marker_Fm_VSMatrixNegD1_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[382] {
      name="PPTg_n_Fm_CANeg_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[383] {
      name="VTAn_Marker_Fm_PPTg_n_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[384] {
      name="VTAn_Marker_Fm_LHbRMTg_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[385] {
      name="VTAn_Marker_Fm_NegPV_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[386] {
      name="VTAn_Marker_Fm_VSPatchNegD2_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[387] {
      name="VTAn_Marker_Fm_VSPatchNegD1_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[388] {
      name="DRN_Marker_Fm_NegPV_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[389] {
      name="DRN_Marker_Fm_PosPV_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[390] {
      name="MatrixGo_Marker_Fm_GPi_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[391] {
      name="MatrixGo_Marker_Fm_VTAp_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[392] {
      name="MatrixGo_Marker_Fm_MatrixTAN_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[393] {
      name="MatrixGo_Marker_Fm_PFCmnt_patch_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[394] {
      name="MatrixGo_Deep_Raw_Fm_GPeNoGo_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[395] {
      name="MatrixGo_Fm_PFCmnt_deep_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[396] {
      name="MatrixGo_Fm_PFCmnt_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[397] {
      name="MatrixGo_Fm_Input_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[398] {
      name="MatrixNoGo_Marker_Fm_GPi_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[399] {
      name="MatrixNoGo_Marker_Fm_VTAp_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[400] {
      name="MatrixNoGo_Marker_Fm_MatrixTAN_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[401] {
      name="MatrixNoGo_Marker_Fm_PFCmnt_patch_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[402] {
      name="MatrixNoGo_Deep_Raw_Fm_GPeNoGo_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[403] {
      name="MatrixNoGo_Fm_PFCmnt_deep_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[404] {
      name="MatrixNoGo_Fm_PFCmnt_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[405] {
      name="MatrixNoGo_Fm_Input_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[406] {
      name="MatrixTAN_Marker_Fm_RewTarg_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[407] {
      name="MatrixTAN_Fm_Input_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[408] {
      name="PFCmnt_patch_Fm_PFCmnt_deep_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[409] {
      name="GPeNoGo_Fm_MatrixNoGo_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[410] {
      name="GPi_Fm_MatrixGo_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[411] {
      name="GPi_Fm_GPeNoGo_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[412] {
      name="PFCmnt_Marker_Fm_GPi_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[413] {
      name="PFCmnt_Deep_Mod_Fm_PFCmnt_deep_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[414] {
      name="PFCmnt_Marker_Fm_PFCout_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[415] {
      name="PFCmnt_Fm_PFCmnt_trc_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[416] {
      name="PFCmnt_Fm_Input_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[417] {
      name="PFCmnt_deep_Ctxt_Fm_PFCmnt_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[418] {
      name="PFCmnt_trc_Marker_Fm_GPi_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[419] {
      name="PFCmnt_trc_Fm_PFCmnt_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[420] {
      name="PFCmnt_trc_Deep_Raw_Fm_Input_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[421] {
      name="PFCout_Marker_Fm_GPi_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[422] {
      name="PFCout_Deep_Mod_Fm_PFCout_deep_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[423] {
      name="PFCout_Fm_PFCmnt_deep_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[424] {
      name="PFCout_deep_Ctxt_Fm_PFCout_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
   };
   DataTable @[2] {
    name="TestTrialOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      name="batch";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     int_Data @[1] {
      name="epoch";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     String_Data @[2] {
      name="train_mode";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     int_Data @[3] {
      name="group";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     int_Data @[4] {
      name="trial";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     int_Data @[5] {
      name="tick";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @[6] {
      name="time";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     String_Data @[7] {
      name="trial_name";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @[8] {
      name="group_name";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @[9] {
      name="output_name";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     float_Data @[10] {
      name="rt_cycles";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=9;
      matrix_col_width=10;
     };
     float_Data @[11] {
      name="sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @[12] {
      name="norm_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @[13] {
      name="cos_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @[14] {
      name="ext_rew";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @[15] {
      name="Output_lay_sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
     };
     float_Data @[16] {
      name="Output_lay_bin_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
     };
     float_Data @[17] {
      name="Output_lay_norm_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
     };
     float_Data @[18] {
      name="Output_lay_cos_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
     };
     float_Data @[19] {
      name="Hidden_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=17;
      matrix_col_width=10;
     };
     float_Data @[20] {
      name="Output_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=17;
      matrix_col_width=10;
     };
     float_Data @[21] {
      name="PosPV_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[22] {
      name="ExtRew_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[23] {
      name="LatAmyg_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[24] {
      name="BAAcqPosD1_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[25] {
      name="BAExtPosD2_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[26] {
      name="CAPos_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[27] {
      name="BAAcqNegD2_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[28] {
      name="BAExtNegD1_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[29] {
      name="CANeg_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[30] {
      name="VSPatchPosD1_lay_net_sd";
      col_flags=PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[31] {
      name="VSPatchPosD2_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[32] {
      name="VSPatchNegD2_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[33] {
      name="VSPatchNegD1_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[34] {
      name="VSMatrixPosD1_lay_net_sd";
      col_flags=PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[35] {
      name="VSMatrixPosD2_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[36] {
      name="VSMatrixNegD2_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[37] {
      name="VSMatrixNegD1_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[38] {
      name="PPTg_p_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[39] {
      name="VTAp_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[40] {
      name="LHbRMTg_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[41] {
      name="PPTg_n_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[42] {
      name="VTAn_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[43] {
      name="DRN_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[44] {
      name="MatrixGo_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[45] {
      name="MatrixNoGo_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[46] {
      name="MatrixTAN_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[47] {
      name="PFCmnt_patch_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[48] {
      name="GPeNoGo_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[49] {
      name="GPi_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[50] {
      name="PFCmnt_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[51] {
      name="PFCmnt_deep_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[52] {
      name="PFCmnt_trc_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[53] {
      name="PFCout_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[54] {
      name="PFCout_deep_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
   };
   DataTable @[3] {
    name="TestEpochOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      name="batch";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     int_Data @[1] {
      name="epoch";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @[2] {
      name="avg_sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @[3] {
      name="cnt_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @[4] {
      name="pct_cor";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @[5] {
      name="pct_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @[6] {
      name="avg_norm_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=12;
      matrix_col_width=10;
     };
     float_Data @[7] {
      name="avg_cos_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=11;
      matrix_col_width=10;
     };
     float_Data @[8] {
      name="avg_ext_rew";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=11;
      matrix_col_width=10;
     };
     float_Data @[9] {
      name="avg_cycles";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=10;
      matrix_col_width=10;
     };
     float_Data @[10] {
      name="epoch_time_tot";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
     };
     float_Data @[11] {
      name="epoch_time_usr";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
     };
     float_Data @[12] {
      name="Output_lay_avg_sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
     };
     float_Data @[13] {
      name="Output_lay_cnt_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
     };
     float_Data @[14] {
      name="Output_lay_pct_cor";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
     };
     float_Data @[15] {
      name="Output_lay_pct_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
     };
     float_Data @[16] {
      name="Output_lay_avg_norm_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=23;
      matrix_col_width=10;
     };
     float_Data @[17] {
      name="Output_lay_avg_cos_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=22;
      matrix_col_width=10;
     };
     float_Data @[18] {
      name="Hidden_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=17;
      matrix_col_width=10;
     };
     float_Data @[19] {
      name="Output_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=17;
      matrix_col_width=10;
     };
     float_Data @[20] {
      name="PosPV_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[21] {
      name="ExtRew_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[22] {
      name="LatAmyg_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[23] {
      name="BAAcqPosD1_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[24] {
      name="BAExtPosD2_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[25] {
      name="CAPos_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[26] {
      name="BAAcqNegD2_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[27] {
      name="BAExtNegD1_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[28] {
      name="CANeg_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[29] {
      name="VSPatchPosD1_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[30] {
      name="VSPatchPosD2_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[31] {
      name="VSPatchNegD2_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[32] {
      name="VSPatchNegD1_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[33] {
      name="VSMatrixPosD1_avg_net_sd";
      col_flags=PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[34] {
      name="VSMatrixPosD2_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[35] {
      name="VSMatrixNegD2_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[36] {
      name="VSMatrixNegD1_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[37] {
      name="PPTg_p_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[38] {
      name="VTAp_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[39] {
      name="LHbRMTg_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[40] {
      name="PPTg_n_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[41] {
      name="VTAn_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[42] {
      name="DRN_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[43] {
      name="MatrixGo_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[44] {
      name="MatrixNoGo_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[45] {
      name="MatrixTAN_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[46] {
      name="PFCmnt_patch_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[47] {
      name="GPeNoGo_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[48] {
      name="GPi_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[49] {
      name="PFCmnt_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[50] {
      name="PFCmnt_deep_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[51] {
      name="PFCmnt_trc_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[52] {
      name="PFCout_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[53] {
      name="PFCout_deep_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
   };
  };
  DataTable_Group @.gp[2] {
   name="AnalysisData";
   el_typ=DataTable;
   el_def=0;
   save_tables=1;
  };
 };
 programs {
  name="programs";
  el_typ=Program;
  el_def=0;
  tags=;
  desc=;
  debug_mode=0;
  Program @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserData_DocLink;
    el_def=0;
    UserData_DocLink @[0] {name="DocLink": doc=.programs[0].doc$$: };
   };
   name="LeabraStartup";
   short_nm="Startup";
   tags="Leabra, Startup";
   desc="run project in the background command line is: emergent -nogui -ni -p <project name>.proj [epochs=xxx] [batch_start=xxx] [n_batches=xx} [tag=xxx] and other opts -- see code";
   version {
    major=8;
    minor=0;
    step=0;
   };
   author="Randall C. O'Reilly";
   email="emergent-users@grey.colorado.edu";
   flags=STARTUP_RUN;
   stop_step_cond {
    expr=;
   };
   objs {
    name="objs";
    el_typ=taNBase;
    el_def=0;
   };
   types {
    name="types";
    el_typ=DynEnumType;
    el_def=0;
   };
   args {
    name="args";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="network";
     var_type=T_Object;
     object_type=LeabraNetwork;
     object_val=.networks[0]$$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
     reference=0;
     desc="network to operate on -- updates batch counter on network and passes it to train program";
     init_from=NULL;
    };
    ProgVar @[1] {
     name="input_data";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.data.gp[0][0]$$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
     reference=0;
     desc="datatable with training patterns -- not used by this program, but passed to train program";
     init_from=NULL;
    };
   };
   vars {
    name="vars";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="train_prog";
     var_type=T_Object;
     object_type=Program;
     object_val=$.programs.gp[0][1]$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|EDIT_VAL;
     reference=0;
     desc="set this to point to your train process";
     init_from=NULL;
    };
    ProgVar @[1] {
     name="batch_prog";
     var_type=T_Object;
     object_type=Program;
     object_val=.programs.gp[0][0]$$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="set this to point to your batch process";
     init_from=NULL;
    };
    ProgVar @[2] {
     name="param_set";
     var_type=T_String;
     string_val=;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="name of saved parameter set to apply at startup";
     init_from=NULL;
    };
    ProgVar @[3] {
     name="tag";
     var_type=T_String;
     string_val="_gui";
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[4] {
     name="batch_str";
     var_type=T_String;
     string_val="00";
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="batch number as a string (leading zeros)";
     init_from=NULL;
    };
    ProgVar @[5] {
     name="log_dir";
     var_type=T_String;
     string_val=;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="log file directory";
     init_from=NULL;
    };
    ProgVar @[6] {
     name="log_file_nm";
     var_type=T_String;
     string_val=;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="name of log file";
     init_from=NULL;
    };
    ProgVar @[7] {
     name="batch_start";
     var_type=T_Int;
     int_val=0;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="batch starting number";
     init_from=NULL;
    };
    ProgVar @[8] {
     name="EpochOutputData";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.data.gp[1][1]$$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[9] {
     name="TrialOutputData";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.data.gp[1][0]$$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[10] {
     name="MyClusterRun";
     var_type=T_Object;
     object_type=ClusterRun;
     object_val=.ctrl_panels[1]$$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[11] {
     name="param_sets";
     var_type=T_Object;
     object_type=ParamSet_Group;
     object_val=.active_params$$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   functions {
    name="functions";
    el_typ=Function;
    el_def=0;
   };
   init_code {
    name="init_code";
    el_typ=ProgCode;
    el_def=0;
   };
   prog_code {
    name="prog_code";
    el_typ=ProgCode;
    el_def=0;
    RegisterArgs @[0] {
     name="RegisterArgs_RegisterArgs";
     desc="This is KEY!!! actually processes all args, including those from ProgVarFmArg guys below";
     flags=CAN_REVERT_TO_CODE;
     code_string="Register Args";
    };
    PrintExpr @[1] {
     name="PrintExpr_PrintLoadedproje_ojects0filename";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Print \"Loaded project: \" << .projects[0].file_name";
     expr {
      expr="\"Loaded project: \" << .projects[0].file_name";
     };
     debug=0;
    };
    Comment @[2] {
     name="Comment_Stdvariablesinst_upprogramitself";
     desc="= Std variables in startup program itself =";
     flags=CAN_REVERT_TO_CODE;
     code_string="// = Std variables in startup program itself =";
    };
    ProgVarFmArg @[3] {
     name="ProgVarFmArg_SetVartaginProgr_artupfromArgtag";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Set Var:tag in Program:LeabraStartup from Arg:tag";
     prog=.programs[0]$$;
     var_name="tag";
     arg_name="tag";
    };
    ProgVarFmArg @[4] {
     name="ProgVarFmArg_SetVarlogdirinPr_upfromArglogdir";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Set Var:log_dir in Program:LeabraStartup from Arg:log_dir";
     prog=$.programs[0]$;
     var_name="log_dir";
     arg_name="log_dir";
    };
    ProgVarFmArg @[5] {
     name="ProgVarFmArg_SetVarparamsetin_fromArgparamset";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Set Var:param_set in Program:LeabraStartup from Arg:param_set";
     prog=$.programs[0]$;
     var_name="param_set";
     arg_name="param_set";
    };
    ProgVarFmArg @[6] {
     name="ProgVarFmArg_SetVarmaxepochin_infromArgepochs";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Set Var:max_epoch in Program:LeabraTrain from Arg:epochs";
     prog=$.programs.gp[0][1]$;
     var_name="max_epoch";
     arg_name="epochs";
    };
    ProgVarFmArg @[7] {
     name="ProgVarFmArg_SetVarrndinitinP_nfromArgrndinit";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Set Var:rnd_init in Program:LeabraTrain from Arg:rnd_init";
     prog=$.programs.gp[0][1]$;
     var_name="rnd_init";
     arg_name="rnd_init";
    };
    ProgVarFmArg @[8] {
     name="ProgVarFmArg_SetVarbatchstart_omArgbatchstart";
     desc="starting batch -- replaces b_start";
     flags=NEW_EL|CAN_REVERT_TO_CODE;
     code_string="Set Var:batch_start in Program:LeabraBatch from Arg:batch_start";
     prog=$.programs.gp[0][0]$;
     var_name="batch_start";
     arg_name="batch_start";
    };
    ProgVarFmArg @[9] {
     name="ProgVarFmArg_SetVarnbatchesin_fromArgnbatches";
     desc="number of batches to run";
     flags=NEW_EL|CAN_REVERT_TO_CODE;
     code_string="Set Var:n_batches in Program:LeabraBatch from Arg:n_batches";
     prog=$.programs.gp[0][0]$;
     var_name="n_batches";
     arg_name="n_batches";
    };
    ProgVarFmArg @[10] {
     name="ProgVarFmArg_SetVarsavewtsint_savewtsinterval";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Set Var:save_wts_interval in Program:LeabraTrain from Arg:save_wts_interval";
     prog=$.programs.gp[0][1]$;
     var_name="save_wts_interval";
     arg_name="save_wts_interval";
    };
    ProgVarFmArg @[11] {
     name="ProgVarFmArg_SetVarsavefinalw_Argsavefinalwts";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Set Var:save_final_wts in Program:LeabraTrain from Arg:save_final_wts";
     prog=$.programs.gp[0][1]$;
     var_name="save_final_wts";
     arg_name="save_final_wts";
    };
    ControlPanelsFmArgs @[12] {
     name="ControlPanelsFmArgs_CtrlPanelFmArgsvarMyClusterRun";
     desc="sets any arg listed in the control panel";
     flags=NEW_EL|CAN_REVERT_TO_CODE;
     code_string="CtrlPanel Fm Args: var = MyClusterRun ";
     ctrl_panel_var=.programs[0].vars[10]$$;
    };
    If @[13] {
     name="If_ifparamsetnonempty";
     desc="set variables to values stored in a param set";
     flags=CAN_REVERT_TO_CODE;
     code_string="if (param_set.nonempty())";
     cond {
      expr="param_set.nonempty()";
     };
     true_code {
      name="true_code";
      el_typ=ProgCode;
      el_def=0;
      MethodCall @[0] {
       name="MethodCall_paramsetsActivat_aramSetparamset";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="param_sets->LoadParamSet(param_set)";
       result_var=NULL;
       obj=.programs[0].vars[11]$$;
       method=ParamSet_Group::ActivateParamSet;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="set_name";
	 required=1;
	 def_val=;
	 prev_expr="param_set";
	 expr {
	  expr="param_set";
	 };
	};
	ProgArg @[1] {
	 arg_type=bool;
	 type="bool";
	 name="err_not_found";
	 required=0;
	 def_val="true";
	 prev_expr=;
	 expr {
	  expr=;
	 };
	};
       };
       meth_sig="bool ActivateParamSet(taString& set_name, bool err_not_found = true)";
       meth_desc=" find given parameter set by name within this group, and call CopySavedtoActive(true) on that ParamSet if found, otherwise emit an error (if err_not_found) -- one step function for applying named parameter sets in programs";
      };
     };
    };
    Comment @[14] {
     name="Comment_Addyourownvariableshere";
     desc="= Add your own variables here =";
     flags=CAN_REVERT_TO_CODE;
     code_string="// = Add your own variables here =";
    };
    Comment @[15] {
     name="Comment_Belowsaveslogfil_ndarddatatables";
     desc="= Below saves log files of standard data tables =";
     flags=CAN_REVERT_TO_CODE;
     code_string="// = Below saves log files of standard data tables =";
    };
    If @[16] {
     name="If_iftaMiscCheckArgByNamebatchstart";
     desc="set tag for starting batch (new code in v 8.0)";
     flags=NEW_EL|CAN_REVERT_TO_CODE;
     code_string="if (taMisc::CheckArgByName(\"batch_start\"))";
     cond {
      expr="taMisc::CheckArgByName(\"batch_start\")";
     };
     true_code {
      name="true_code";
      el_typ=ProgCode;
      el_def=0;
      ProgVarFmArg @[0] {
       name="ProgVarFmArg_SetVarbatchstart_omArgbatchstart";
       desc="read in the arg to us too, so we can set file names based on it";
       flags=CAN_REVERT_TO_CODE;
       code_string="Set Var:batch_start in Program:LeabraStartup from Arg:batch_start";
       prog=$.programs[0]$;
       var_name="batch_start";
       arg_name="batch_start";
      };
      MiscCall @[1] {
       name="MiscCall_batchstrtaMiscLe_erosbatchstart2";
       desc="string version with leading zeros";
       flags=CAN_REVERT_TO_CODE;
       code_string="batch_str = taMisc::LeadingZeros(batch_start, 2)";
       result_var=.programs[0].vars[4]$$;
       object_type=taMisc;
       method=taMisc::LeadingZeros;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=int;
	 type="int";
	 name="num";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="batch_start";
	 };
	};
	ProgArg @[1] {
	 arg_type=int;
	 type="int";
	 name="len";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="2";
	 };
	};
       };
      };
      VarIncr @[2] {
       name="VarIncr_tagbatchstr";
       desc="add to tag for setting log file names";
       flags=CAN_REVERT_TO_CODE;
       code_string="tag += \".\" + batch_str";
       var=.programs[0].vars[3]$$;
       expr {
	expr="\".\" + batch_str";
       };
      };
      If @[3] {
       name="If_ifbatchstart0";
       desc="save startup args: only for first job in parallel batch mode, or this should be 0 otherwise in any case";
       flags=CAN_REVERT_TO_CODE;
       code_string="if (batch_start == 0)";
       cond {
	expr="batch_start == 0";
       };
       true_code {
	name="true_code";
	el_typ=ProgCode;
	el_def=0;
	MethodCall @[0] {
	 name="MethodCall_logfilenmEpochOu_e001logdirfalse";
	 desc="save args to file: last arg is to include dmem proc number";
	 flags=CAN_REVERT_TO_CODE;
	 code_string="log_file_nm = EpochOutputData->GetFileNameFmProject(\".args\", tag.before(\".00\",-1), log_dir, false)";
	 result_var=.programs[0].vars[6]$$;
	 obj=.programs[0].vars[8]$$;
	 method=taBase::GetFileNameFmProject;
	 meth_args {
	  name="meth_args";
	  el_typ=ProgArg;
	  el_def=0;
	  ProgArg @[0] {
	   arg_type=const_taString_ref;
	   type="taString&";
	   name="ext";
	   required=1;
	   def_val=;
	   prev_expr=;
	   expr {
	    expr="\".args\"";
	   };
	  };
	  ProgArg @[1] {
	   arg_type=const_taString_ref;
	   type="taString&";
	   name="tag";
	   required=0;
	   def_val="\"\"";
	   prev_expr=;
	   expr {
	    expr="tag.before(\".00\",-1)";
	   };
	  };
	  ProgArg @[2] {
	   arg_type=const_taString_ref;
	   type="taString&";
	   name="subdir";
	   required=0;
	   def_val="\"\"";
	   prev_expr=;
	   expr {
	    expr="log_dir";
	   };
	  };
	  ProgArg @[3] {
	   arg_type=bool;
	   type="bool";
	   name="dmem_proc_no";
	   required=0;
	   def_val="false";
	   prev_expr=;
	   expr {
	    expr="false";
	   };
	  };
	 };
	 meth_sig="taString GetFileNameFmProject(taString& ext, taString& tag, taString& subdir, bool dmem_proc_no = false)";
	 meth_desc=" get file name from project file name -- useful for saving files associated with the project; ext = extension; tag = additional tag; subdir = additional directory after any existing in project name; fname = proj->base_name (subdir) + tag + ext; if dmem_proc_no, add dmem proc no to file name. empty if project not found";
	};
	MiscCall @[1] {
	 name="MiscCall_taMiscFullArgStr_ToFilelogfilenm";
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="taMisc::FullArgStringToFile(log_file_nm)";
	 result_var=NULL;
	 object_type=taMisc;
	 method=taMisc::FullArgStringToFile;
	 meth_args {
	  name="meth_args";
	  el_typ=ProgArg;
	  el_def=0;
	  ProgArg @[0] {
	   arg_type=const_taString_ref;
	   type="taString&";
	   name="fname";
	   required=1;
	   def_val="\"\"";
	   prev_expr=;
	   expr {
	    expr="log_file_nm";
	   };
	  };
	 };
	};
       };
      };
     };
    };
    Else @[17] {
     name="Else_If_iftaMiscCheckArgByNamebatchstart";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="else";
     cond {
      expr=;
     };
     true_code {
      name="true_code";
      el_typ=ProgCode;
      el_def=0;
      MethodCall @[0] {
       name="MethodCall_logfilenmEpochOu_staglogdirfalse";
       desc="save args to file: last arg is to include dmem proc number";
       flags=CAN_REVERT_TO_CODE;
       code_string="log_file_nm = EpochOutputData->GetFileNameFmProject(\".args\", tag, log_dir, false)";
       result_var=$.programs[0].vars[6]$;
       obj=$.programs[0].vars[8]$;
       method=taBase::GetFileNameFmProject;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="ext";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="\".args\"";
	 };
	};
	ProgArg @[1] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="tag";
	 required=0;
	 def_val="\"\"";
	 prev_expr=;
	 expr {
	  expr="tag";
	 };
	};
	ProgArg @[2] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="subdir";
	 required=0;
	 def_val="\"\"";
	 prev_expr=;
	 expr {
	  expr="log_dir";
	 };
	};
	ProgArg @[3] {
	 arg_type=bool;
	 type="bool";
	 name="dmem_proc_no";
	 required=0;
	 def_val="false";
	 prev_expr=;
	 expr {
	  expr="false";
	 };
	};
       };
       meth_sig="taString GetFileNameFmProject(taString& ext, taString& tag, taString& subdir, bool dmem_proc_no = false)";
       meth_desc=" get file name from project file name -- useful for saving files associated with the project; ext = extension; tag = additional tag; subdir = additional directory after any existing in project name; fname = proj->base_name (subdir) + tag + ext; if dmem_proc_no, add dmem proc no to file name. empty if project not found";
      };
      MiscCall @[1] {
       name="MiscCall_taMiscFullArgStr_ToFilelogfilenm";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="taMisc::FullArgStringToFile(log_file_nm)";
       result_var=NULL;
       object_type=taMisc;
       method=taMisc::FullArgStringToFile;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="fname";
	 required=1;
	 def_val="\"\"";
	 prev_expr=;
	 expr {
	  expr="log_file_nm";
	 };
	};
       };
      };
     };
    };
    MiscCall @[18] {
     name="MiscCall_taMiscReportUnusedArgstrue";
     desc="report any args that didn't get used!";
     flags=NEW_EL|CAN_REVERT_TO_CODE;
     code_string="taMisc::ReportUnusedArgs(true)";
     result_var=NULL;
     object_type=taMisc;
     method=taMisc::ReportUnusedArgs;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=bool;
       type="bool";
       name="err";
       required=0;
       def_val="true";
       prev_expr=;
       expr {
	expr="true";
       };
      };
     };
    };
    Comment @[19] {
     name="Comment_Saveepochlogonbydefault";
     desc="== Save epoch log -- on by default ==";
     flags=CAN_REVERT_TO_CODE;
     code_string="// == Save epoch log -- on by default ==";
    };
    MethodCall @[20] {
     name="MethodCall_logfilenmEpochOu_ttaglogdirfalse";
     desc="last arg is to include dmem proc number";
     flags=CAN_REVERT_TO_CODE;
     code_string="log_file_nm = EpochOutputData->GetFileNameFmProject(\".epc.dat\", tag, log_dir, false)";
     result_var=$.programs[0].vars[6]$;
     obj=$.programs[0].vars[8]$;
     method=taBase::GetFileNameFmProject;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="ext";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="\".epc.dat\"";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="taString&";
       name="tag";
       required=0;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="tag";
       };
      };
      ProgArg @[2] {
       arg_type=const_taString_ref;
       type="taString&";
       name="subdir";
       required=0;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="log_dir";
       };
      };
      ProgArg @[3] {
       arg_type=bool;
       type="bool";
       name="dmem_proc_no";
       required=0;
       def_val="false";
       prev_expr=;
       expr {
	expr="false";
       };
      };
     };
     meth_sig="taString GetFileNameFmProject(taString& ext, taString& tag, taString& subdir, bool dmem_proc_no = false)";
     meth_desc=" get file name from project file name -- useful for saving files associated with the project; ext = extension; tag = additional tag; subdir = additional directory after any existing in project name; fname = proj->base_name (subdir) + tag + ext; if dmem_proc_no, add dmem proc no to file name. empty if project not found";
    };
    MethodCall @[21] {
     name="MethodCall_EpochOutputDataS_filenmfalsetrue";
     desc="last arg is to restrict log to dmem_proc = 0";
     flags=CAN_REVERT_TO_CODE;
     code_string="EpochOutputData->SaveDataLog(log_file_nm, false, true)";
     result_var=NULL;
     obj=$.programs[0].vars[8]$;
     method=DataTable::SaveDataLog;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="fname";
       required=0;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="log_file_nm";
       };
      };
      ProgArg @[1] {
       arg_type=bool;
       type="bool";
       name="append";
       required=0;
       def_val="false";
       prev_expr=;
       expr {
	expr="false";
       };
      };
      ProgArg @[2] {
       arg_type=bool;
       type="bool";
       name="dmem_proc_0";
       required=0;
       def_val="true";
       prev_expr=;
       expr {
	expr="true";
       };
      };
     };
     meth_sig="void SaveDataLog(taString& fname, bool append = false, bool dmem_proc_0 = true)";
     meth_desc=" incrementally save each new row of data that is written to the datatable (at WriteClose()) to given file. writes the header first if not appending to existing file. if running under demem, dmem_proc_0 determines if only the first processor writes to the log file, or if all processors write";
    };
    PrintVar @[22] {
     name="PrintVar_PrintSavingepoch_datatologfilenm";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Print  \"Saving epoch log data to:\" log_file_nm";
     message="Saving epoch log data to:";
     print_var=$.programs[0].vars[6]$;
     print_var2=NULL;
     print_var3=NULL;
     print_var4=NULL;
     print_var5=NULL;
     print_var6=NULL;
     debug=0;
    };
    Comment @[23] {
     name="Comment_SavetriallogOFFbydefault";
     desc="== Save trial log -- OFF by default ==";
     flags=CAN_REVERT_TO_CODE;
     code_string="// == Save trial log -- OFF by default ==";
    };
    MethodCall @[24] {
     name="MethodCall_logfilenmTrialOu_attaglogdirtrue";
     desc="last arg is to include dmem proc number";
     flags=OFF|CAN_REVERT_TO_CODE;
     code_string="log_file_nm = TrialOutputData->GetFileNameFmProject(\".trl.dat\", tag, log_dir, true)";
     result_var=$.programs[0].vars[6]$;
     obj=.programs[0].vars[9]$$;
     method=taBase::GetFileNameFmProject;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="ext";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="\".trl.dat\"";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="taString&";
       name="tag";
       required=0;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="tag";
       };
      };
      ProgArg @[2] {
       arg_type=const_taString_ref;
       type="taString&";
       name="subdir";
       required=0;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="log_dir";
       };
      };
      ProgArg @[3] {
       arg_type=bool;
       type="bool";
       name="dmem_proc_no";
       required=0;
       def_val="false";
       prev_expr=;
       expr {
	expr="true";
       };
      };
     };
     meth_sig="taString GetFileNameFmProject(taString& ext, taString& tag, taString& subdir, bool dmem_proc_no = false)";
     meth_desc=" get file name from project file name -- useful for saving files associated with the project; ext = extension; tag = additional tag; subdir = additional directory after any existing in project name; fname = proj->base_name (subdir) + tag + ext; if dmem_proc_no, add dmem proc no to file name. empty if project not found";
    };
    MethodCall @[25] {
     name="MethodCall_TrialOutputDataS_ilenmfalsefalse";
     desc="last arg is to restrict log to dmem_proc = 0";
     flags=OFF|CAN_REVERT_TO_CODE;
     code_string="TrialOutputData->SaveDataLog(log_file_nm, false, false)";
     result_var=NULL;
     obj=$.programs[0].vars[9]$;
     method=DataTable::SaveDataLog;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="fname";
       required=0;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="log_file_nm";
       };
      };
      ProgArg @[1] {
       arg_type=bool;
       type="bool";
       name="append";
       required=0;
       def_val="false";
       prev_expr=;
       expr {
	expr="false";
       };
      };
      ProgArg @[2] {
       arg_type=bool;
       type="bool";
       name="dmem_proc_0";
       required=0;
       def_val="true";
       prev_expr=;
       expr {
	expr="false";
       };
      };
     };
     meth_sig="void SaveDataLog(taString& fname, bool append = false, bool dmem_proc_0 = true)";
     meth_desc=" incrementally save each new row of data that is written to the datatable (at WriteClose()) to given file. writes the header first if not appending to existing file. if running under demem, dmem_proc_0 determines if only the first processor writes to the log file, or if all processors write";
    };
    PrintVar @[26] {
     name="PrintVar_PrintSavingtrial_datatologfilenm";
     desc=;
     flags=OFF|CAN_REVERT_TO_CODE;
     code_string="Print  \"Saving trial log data to:\" log_file_nm";
     message="Saving trial log data to:";
     print_var=$.programs[0].vars[6]$;
     print_var2=NULL;
     print_var3=NULL;
     print_var4=NULL;
     print_var5=NULL;
     print_var6=NULL;
     debug=0;
    };
    OtherProgramVar @[27] {
     name="OtherProgramVar_VarsToprogramSav_tagvar2var3var4";
     desc="propagate the tag";
     flags=CAN_REVERT_TO_CODE;
     code_string="Vars To:  program=SaveWeights set=to  var_1=tag  var_2=?  var_3=?  var_4=? ";
     other_prog=.programs.gp[0][9]$$;
     set_other=1;
     var_1=$.programs[0].vars[3]$;
     var_2=NULL;
     var_3=NULL;
     var_4=NULL;
    };
    PrintExpr @[28] {
     name="PrintExpr_PrintRunningbatchprogname";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Print \"Running: \" << batch_prog.name";
     expr {
      expr="\"Running: \" << batch_prog.name";
     };
     debug=0;
    };
    ProgramCall @[29] {
     name="ProgramCall_LeabraBatchnetworkinputdata";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LeabraBatch(network, input_data)";
     prog_args {
      name="prog_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=LeabraNetwork;
       type="LeabraNetwork*";
       name="network";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="network";
       };
      };
      ProgArg @[1] {
       arg_type=DataTable;
       type="DataTable*";
       name="input_data";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="input_data";
       };
      };
     };
     target=$.programs.gp[0][0]$;
     targ_ld_init="*LeabraBatch*";
    };
   };
   step_prog=NULL;
   step_n=1;
   doc {
    name="doc";
    desc=;
    web_doc=1;
    wiki="emergent";
    url="Startup_program";
    full_url="https://grey.colorado.edu/emergent/index.php/Startup_program";
    text_size=1;
    text=;
    html_text=;
   };
  };
  Program_Group @.gp[0] {
   name="LeabraAll_Std";
   el_typ=Program;
   el_def=0;
   tags="Leabra, Std, All";
   desc="The full set of programs for training a standard Leabra network";
   debug_mode=0;
   Program @[0] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[0][0].doc$$: };
    };
    name="LeabraBatch";
    short_nm="Batch";
    tags="Leabra, Std";
    desc="Iterate over training runs (a batch of training runs) -- just a simple loop that calls training program";
    version {
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=0;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to operate on -- updates batch counter on network and passes it to train program";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.data.gp[0][0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="datatable with training patterns -- not used by this program, but passed to train program";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="batch";
      var_type=T_Int;
      int_val=0;
      object_scope=NULL;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="batch counter";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="batch_start";
      var_type=T_Int;
      int_val=0;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="batch number to start on";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="n_batches";
      var_type=T_Int;
      int_val=10;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="number of batches to run";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      name="NetCounterInit_NetCounterInitbatch";
      desc="initializes local batch counter and batch field on network";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: batch";
      network_var=.programs.gp[0][0].args[0]$$;
      local_ctr_var=.programs.gp[0][0].vars[0]$$;
      counter=Network::batch;
      update_after=0;
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      name="LocalVars_LocalVars1vars";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (1 vars)";
      local_vars {
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
       ProgVar @[0] {
	name="i";
	var_type=T_Int;
	int_val=0;
	object_scope=NULL;
	flags=LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
      };
     };
     AssignExpr @[1] {
      name="AssignExpr_batchbatchstart";
      desc="start at the start";
      flags=CAN_REVERT_TO_CODE;
      code_string="batch = batch_start";
      result_var=$.programs.gp[0][0].vars[0]$;
      expr {
       expr="batch_start";
      };
     };
     MemberAssign @[2] {
      name="MemberAssign_networkbatchbatch";
      desc="update network";
      flags=CAN_REVERT_TO_CODE;
      code_string="network.batch = batch";
      obj=$.programs.gp[0][0].args[0]$;
      path="batch";
      expr {
       expr="batch";
      };
      update_after=0;
     };
     ForLoop @[3] {
      name="ForLoop_fori0inbatchesi";
      desc="main loop over training runs";
      flags=CAN_REVERT_TO_CODE;
      code_string="for (i=0; i<n_batches; i++)";
      loop_code {
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	name="ProgramCall_LeabraTrainnetworkinputdatatrue";
	desc="run the training program -- sets the network and input_data args";
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraTrain(network, input_data, true)";
	prog_args {
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="input_data";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=bool;
	  type="bool";
	  name="no_prompts";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="true";
	  };
	 };
	};
	target=$.programs.gp[0][1]$;
	targ_ld_init="*LeabraTrain*";
       };
       NetCounterIncr @[1] {
	name="NetCounterIncr_NetCounterIncrbatch";
	desc="increment the local batch counter and copy to network";
	flags=CAN_REVERT_TO_CODE;
	code_string="Net Counter Incr: batch";
	network_var=$.programs.gp[0][0].args[0]$;
	local_ctr_var=$.programs.gp[0][0].vars[0]$;
	counter=Network::batch;
	update_after=0;
       };
      };
      init {
       expr="i=0";
      };
      test {
       expr="i<n_batches";
      };
      iter {
       expr="i++";
      };
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraBatch";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraBatch";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[1] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[0][1].doc$$: };
    };
    name="LeabraTrain";
    short_nm="Train";
    tags="Leabra, Train, RndSeedList";
    desc="A complete training run of a Leabra network: iterating over epochs until the network has learned the task.  Also has a list of random seeds that are tied to the network batch counter, providing consistent runs regardless of what happens in the training of each network, or where it is run (e.g., on different processors)";
    version {
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=0;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=RndSeed;
     el_def=0;
     RndSeed_List @[0] {
      name="rnd_seeds";
      seeds {
       name="seeds";
       el_typ=RndSeed;
       el_def=0;
       RndSeed @[0] {
	name="RndSeed_1";
	rnd_seed=2878175685;
       };
       RndSeed @[1] {
	name="RndSeed_2";
	rnd_seed=2878175686;
       };
       RndSeed @[2] {
	name="RndSeed_3";
	rnd_seed=2878175687;
       };
       RndSeed @[3] {
	name="RndSeed_4";
	rnd_seed=2878175688;
       };
       RndSeed @[4] {
	name="RndSeed_5";
	rnd_seed=2878175689;
       };
       RndSeed @[5] {
	name="RndSeed_6";
	rnd_seed=2878175690;
       };
       RndSeed @[6] {
	name="RndSeed_7";
	rnd_seed=2878175691;
       };
       RndSeed @[7] {
	name="RndSeed_8";
	rnd_seed=2878175692;
       };
       RndSeed @[8] {
	name="RndSeed_9";
	rnd_seed=2878175693;
       };
       RndSeed @[9] {
	name="RndSeed_10";
	rnd_seed=2878175694;
       };
       RndSeed @[10] {
	name="RndSeed_11";
	rnd_seed=2878175695;
       };
       RndSeed @[11] {
	name="RndSeed_12";
	rnd_seed=2878175696;
       };
       RndSeed @[12] {
	name="RndSeed_13";
	rnd_seed=2878175697;
       };
       RndSeed @[13] {
	name="RndSeed_14";
	rnd_seed=2878175698;
       };
       RndSeed @[14] {
	name="RndSeed_15";
	rnd_seed=2878175699;
       };
       RndSeed @[15] {
	name="RndSeed_16";
	rnd_seed=2878175700;
       };
       RndSeed @[16] {
	name="RndSeed_17";
	rnd_seed=2878175701;
       };
       RndSeed @[17] {
	name="RndSeed_18";
	rnd_seed=2878175702;
       };
       RndSeed @[18] {
	name="RndSeed_19";
	rnd_seed=2878175703;
       };
       RndSeed @[19] {
	name="RndSeed_20";
	rnd_seed=2878175704;
       };
       RndSeed @[20] {
	name="RndSeed_21";
	rnd_seed=2878175705;
       };
       RndSeed @[21] {
	name="RndSeed_22";
	rnd_seed=2878175706;
       };
       RndSeed @[22] {
	name="RndSeed_23";
	rnd_seed=2878175707;
       };
       RndSeed @[23] {
	name="RndSeed_24";
	rnd_seed=2878175708;
       };
       RndSeed @[24] {
	name="RndSeed_25";
	rnd_seed=2878175709;
       };
      };
     };
     RndSeed @[1] {
      name="rnd_seed";
      rnd_seed=1208639044;
     };
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
     DynEnumType @[0] {
      name="RndInitType";
      desc=;
      enums {
       name="enums";
       el_typ=DynEnumItem;
       el_def=0;
       DynEnumItem @[0] {
	name="OLD_SEED";
	value=0;
	desc="use stored random seed value (recreates same sequence every time)";
       };
       DynEnumItem @[1] {
	name="NEW_SEED";
	value=1;
	desc="generate new random seed (new sequence of random numbers)";
       };
       DynEnumItem @[2] {
	name="BATCH_SEEDS";
	value=2;
	desc="use a fixed list of random seeds with the current batch number selecting the seed to use -- provides a consistent set of initial conditions for each batch regardless..";
       };
      };
      bits=0;
     };
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.data.gp[0][0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[2] {
      name="no_prompts";
      var_type=T_Bool;
      bool_val=0;
      object_scope=NULL;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="If train is called by other programs (e.g., Batch), they should set this to true -- otherwise it is reset to false in Init";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="max_epoch";
      var_type=T_Int;
      int_val=500;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[1] {
      name="epoch";
      var_type=T_Int;
      int_val=0;
      object_scope=NULL;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[2] {
      name="train_mode";
      var_type=T_HardEnum;
      int_val=1;
      object_scope=NULL;
      hard_enum_type=Network::TrainMode;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[3] {
      name="rnd_init";
      var_type=T_DynEnum;
      object_scope=NULL;
      dyn_enum_val {
       user_data_=NULL;
       enum_type=.programs.gp[0][1].types[0]$$;
       value=2;
      };
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="how to initialize the random numbers when the Init button is pressed";
      init_from=NULL;
     };
     ProgVar @[4] {
      name="err_stopcrit";
      var_type=T_Real;
      real_val=0;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="stopping criterion for training, in terms of count of trials with errors in the epoch (nework cnt_err)";
      init_from=NULL;
     };
     ProgVar @[5] {
      name="n_under_thr";
      var_type=T_Int;
      int_val=2;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="number of times network needs to be under stopcrit threshold to actually stop";
      init_from=NULL;
     };
     ProgVar @[6] {
      name="save_final_wts";
      var_type=T_Bool;
      bool_val=0;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="save the network's weights at the end of training?  ";
      init_from=NULL;
     };
     ProgVar @[7] {
      name="save_wts_interval";
      var_type=T_Int;
      int_val=-1;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="save the weights every this many epochs, if number is >= 1 (otherwise do not save weights)";
      init_from=NULL;
     };
     ProgVar @[8] {
      name="n_under_cnt";
      var_type=T_Int;
      int_val=0;
      object_scope=NULL;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current under threshold counter";
      init_from=NULL;
     };
     ProgVar @[9] {
      name="rnd_seeds";
      var_type=T_Object;
      object_type=RndSeed_List;
      object_val=.programs.gp[0][1].objs[0]$$;
      object_scope=NULL;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[10] {
      name="train_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=.networks[0].train_time$$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[11] {
      name="rnd_seed";
      var_type=T_Object;
      object_type=RndSeed;
      object_val=.programs.gp[0][1].objs[1]$$;
      object_scope=NULL;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
     Function @[0] {
      name="GetRandomSeed";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="GetRandomSeed() returns: int";
      return_type=T_Int;
      object_type=taOBase;
      args {
       name="args";
       el_typ=ProgVar;
       el_def=0;
      };
      fun_code {
       name="fun_code";
       el_typ=ProgCode;
       el_def=0;
       LocalVars @[0] {
	name="LocalVars_LocalVars0vars";
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="LocalVars (0 vars)";
	local_vars {
	 name="local_vars";
	 el_typ=ProgVar;
	 el_def=0;
	};
       };
       Switch @[1] {
	name="Switch_switchrndinit";
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="switch(rnd_init)";
	switch_var=.programs.gp[0][1].vars[3]$$;
	cases {
	 name="cases";
	 el_typ=CaseBlock;
	 el_def=0;
	 CaseBlock @[0] {
	  name="CaseBlock_caseOLDSEED";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="case: OLD_SEED";
	  prog_code {
	   name="prog_code";
	   el_typ=ProgCode;
	   el_def=0;
	   MethodCall @[0] {
	    name="MethodCall_rndseedOldSeed";
	    desc="restore previous random seed (all runs produce same results) -- click on rnd_seed object to generate a new seed to use for this if you want";
	    flags=CAN_REVERT_TO_CODE;
	    code_string="rnd_seed->OldSeed()";
	    result_var=NULL;
	    obj=.programs.gp[0][1].vars[11]$$;
	    method=RndSeed::OldSeed;
	    meth_args {
	     name="meth_args";
	     el_typ=ProgArg;
	     el_def=0;
	    };
	    meth_sig="void OldSeed()";
	    meth_desc=" restore current seed to random num generator";
	   };
	  };
	  case_val {
	   expr="OLD_SEED";
	  };
	  is_default=0;
	 };
	 CaseBlock @[1] {
	  name="CaseBlock_caseNEWSEED";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="case: NEW_SEED";
	  prog_code {
	   name="prog_code";
	   el_typ=ProgCode;
	   el_def=0;
	   MethodCall @[0] {
	    name="MethodCall_rndseedNewSeed";
	    desc="new random numbers each time";
	    flags=CAN_REVERT_TO_CODE;
	    code_string="rnd_seed->NewSeed()";
	    result_var=NULL;
	    obj=$.programs.gp[0][1].vars[11]$;
	    method=RndSeed::NewSeed;
	    meth_args {
	     name="meth_args";
	     el_typ=ProgArg;
	     el_def=0;
	    };
	    meth_sig="void NewSeed()";
	    meth_desc=" set the seed to a new random value (based on time and process id)";
	   };
	  };
	  case_val {
	   expr="NEW_SEED";
	  };
	  is_default=0;
	 };
	 CaseBlock @[2] {
	  name="CaseBlock_caseBATCHSEEDS";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="case: BATCH_SEEDS";
	  prog_code {
	   name="prog_code";
	   el_typ=ProgCode;
	   el_def=0;
	   MethodCall @[0] {
	    name="MethodCall_rndseedsUseSeedn_dseedsseedssize";
	    desc="restore previous random seed (all runs produce same results); change to NewSeed to have new random numbers each time";
	    flags=CAN_REVERT_TO_CODE;
	    code_string="rnd_seeds->UseSeed(network.batch % rnd_seeds.seeds.size)";
	    result_var=NULL;
	    obj=.programs.gp[0][1].vars[9]$$;
	    method=RndSeed_List::UseSeed;
	    meth_args {
	     name="meth_args";
	     el_typ=ProgArg;
	     el_def=0;
	     ProgArg @[0] {
	      arg_type=int;
	      type="int";
	      name="idx";
	      required=1;
	      def_val=;
	      prev_expr=;
	      expr {
	       expr="network.batch % rnd_seeds.seeds.size";
	      };
	     };
	    };
	    meth_sig="void UseSeed(int idx)";
	    meth_desc=" use seed at given index in the list (does OldSeed on it); wraps around (modulus) if idx is > list size (issues warning)";
	   };
	  };
	  case_val {
	   expr="BATCH_SEEDS";
	  };
	  is_default=0;
	 };
	};
       };
      };
     };
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     AssignExpr @[0] {
      name="AssignExpr_nopromptsfalse";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="no_prompts = false";
      result_var=.programs.gp[0][1].args[2]$$;
      expr {
       expr="false";
      };
     };
     MethodCall @[1] {
      name="MethodCall_networkCheckConfigfalse";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="network->CheckConfig(false)";
      result_var=NULL;
      obj=.programs.gp[0][1].args[0]$$;
      method=taBase::CheckConfig;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
     AssignExpr @[2] {
      name="AssignExpr_traintimernetworktraintime";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="train_timer = network.train_time";
      result_var=.programs.gp[0][1].vars[10]$$;
      expr {
       expr="network.train_time";
      };
     };
     AssignExpr @[3] {
      name="AssignExpr_nundercnt0";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="n_under_cnt = 0";
      result_var=.programs.gp[0][1].vars[8]$$;
      expr {
       expr="0";
      };
     };
     FunctionCall @[4] {
      name="FunctionCall_GetRandomSeed";
      desc="initialize random seed";
      flags=CAN_REVERT_TO_CODE;
      code_string="GetRandomSeed()";
      result_var=NULL;
      fun=.programs.gp[0][1].functions[0]$$;
      fun_args {
       name="fun_args";
       el_typ=ProgArg;
       el_def=0;
      };
     };
     WtInitPrompt @[5] {
      name="WtInitPrompt_ifguiDoyouwantto_eNetworkWeights";
      desc="don't initialize weights without checking";
      flags=CAN_REVERT_TO_CODE;
      code_string="if (gui && \"Do you want to Initialize Network Weights\")";
      prompt="Do you want to Initialize Network Weights";
      yes_label="Yes";
      no_label="No";
      yes_code {
       name="yes_code";
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	name="MethodCall_networkBuild";
	desc="need to have built network by now in any case, so do it here to make double sure -- prevents errs when loading project with startup program";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Build()";
	result_var=NULL;
	obj=$.programs.gp[0][1].args[0]$;
	method=Network::Build;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Build()";
	meth_desc=" Build the network units and Connect them (calls CheckSpecs/BuildLayers/Units/Prjns and Connect)";
       };
       MethodCall @[1] {
	name="MethodCall_networkInitWeights";
	desc="initialize network weights: could also load pre-set weights or something else here";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Init_Weights()";
	result_var=NULL;
	obj=$.programs.gp[0][1].args[0]$;
	method=Network::Init_Weights;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Init_Weights()";
	meth_desc=" Initialize the weights -- also inits acts, counters and stats -- does unit level threaded and then does Layers after";
       };
       PrintExpr @[2] {
	name="PrintExpr_Printnetworkname_ghtsInitialized";
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="Print network.name << \" Weights Initialized\"";
	expr {
	 expr="network.name << \" Weights Initialized\"";
	};
	debug=0;
       };
      };
     };
     AssignExpr @[6] {
      name="AssignExpr_epochnetworkepoch";
      desc="grab the official network epoch counter: will be initialized if needed by now";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch = network.epoch";
      result_var=.programs.gp[0][1].vars[1]$$;
      expr {
       expr="network.epoch";
      };
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     AssignExpr @[0] {
      name="AssignExpr_traintimernetworktraintime";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="train_timer = network.train_time";
      result_var=$.programs.gp[0][1].vars[10]$;
      expr {
       expr="network.train_time";
      };
     };
     MethodCall @[1] {
      name="MethodCall_traintimerStartTimertrue";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="train_timer->StartTimer(true)";
      result_var=NULL;
      obj=$.programs.gp[0][1].vars[10]$;
      method=TimeUsed::StartTimer;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	prev_expr=;
	expr {
	 expr="true";
	};
       };
      };
      meth_sig="void StartTimer(bool reset_used = true)";
      meth_desc=" record the current time as the starting time, and optionally reset the time used information";
     };
     AssignExpr @[2] {
      name="AssignExpr_nundercnt0";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="n_under_cnt = 0";
      result_var=$.programs.gp[0][1].vars[8]$;
      expr {
       expr="0";
      };
     };
     MemberAssign @[3] {
      name="MemberAssign_networktrainmodetrainmode";
      desc="set network's training mode to our local value";
      flags=CAN_REVERT_TO_CODE;
      code_string="network.train_mode = train_mode";
      obj=$.programs.gp[0][1].args[0]$;
      path="train_mode";
      expr {
       expr="train_mode";
      };
      update_after=0;
     };
     FunctionCall @[4] {
      name="FunctionCall_GetRandomSeed";
      desc="initialize random seed";
      flags=CAN_REVERT_TO_CODE;
      code_string="GetRandomSeed()";
      result_var=NULL;
      fun=$.programs.gp[0][1].functions[0]$;
      fun_args {
       name="fun_args";
       el_typ=ProgArg;
       el_def=0;
      };
     };
     If @[5] {
      name="If_ifnoprompts";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="if (no_prompts)";
      cond {
       expr="no_prompts";
      };
      true_code {
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	name="MethodCall_networkInitWeights";
	desc="initialize network weights: could also load pre-set weights or something else here";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Init_Weights()";
	result_var=NULL;
	obj=$.programs.gp[0][1].args[0]$;
	method=Network::Init_Weights;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Init_Weights()";
	meth_desc=" Initialize the weights -- also inits acts, counters and stats -- does unit level threaded and then does Layers after";
       };
       PrintExpr @[1] {
	name="PrintExpr_Printnetworkname_ghtsInitialized";
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="Print network.name << \" Weights Initialized\"";
	expr {
	 expr="network.name << \" Weights Initialized\"";
	};
	debug=0;
       };
      };
     };
     AssignExpr @[6] {
      name="AssignExpr_epochnetworkepoch";
      desc="grab the official network epoch counter: will be initialized if needed by now";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch = network.epoch";
      result_var=$.programs.gp[0][1].vars[1]$;
      expr {
       expr="network.epoch";
      };
     };
     WhileLoop @[7] {
      name="WhileLoop_whileepochmaxepoch";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="while (epoch < max_epoch)";
      loop_code {
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	name="ProgramCall_LeabraEpochnetworkinputdata";
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraEpoch(network, input_data)";
	prog_args {
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
	target=.programs.gp[0][2]$$;
	targ_ld_init="*LeabraEpoch*";
       };
       NetCounterIncr @[1] {
	name="NetCounterIncr_NetCounterIncrepoch";
	desc="increment the epoch counter";
	flags=CAN_REVERT_TO_CODE;
	code_string="Net Counter Incr: epoch";
	network_var=$.programs.gp[0][1].args[0]$;
	local_ctr_var=$.programs.gp[0][1].vars[1]$;
	counter=Network::epoch;
	update_after=0;
       };
       If @[2] {
	name="If_ifnetworkcnterrerrstopcrit";
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="if (network.cnt_err <= err_stopcrit)";
	cond {
	 expr="network.cnt_err <= err_stopcrit";
	};
	true_code {
	 name="true_code";
	 el_typ=ProgCode;
	 el_def=0;
	 VarIncr @[0] {
	  name="VarIncr_nundercnt1";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="n_under_cnt += 1";
	  var=$.programs.gp[0][1].vars[8]$;
	  expr {
	   expr="1";
	  };
	 };
	 IfBreak @[1] {
	  name="IfBreak_ifnundercntnunderthrbreak";
	  desc="stop if errors go below stopping criterion (note: could use sse or avg_sse here too)";
	  flags=CAN_REVERT_TO_CODE;
	  code_string="if(n_under_cnt >=  n_under_thr) break";
	  cond {
	   expr="n_under_cnt >=  n_under_thr";
	  };
	 };
	};
       };
       Else @[3] {
	name="Else_If_ifnetworkcnterrerrstopcrit";
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="else";
	cond {
	 expr=;
	};
	true_code {
	 name="true_code";
	 el_typ=ProgCode;
	 el_def=0;
	 AssignExpr @[0] {
	  name="AssignExpr_nundercnt0";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="n_under_cnt = 0";
	  result_var=$.programs.gp[0][1].vars[8]$;
	  expr {
	   expr="0";
	  };
	 };
	};
       };
       If @[4] {
	name="If_ifsavewtsinterval1";
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="if (save_wts_interval >= 1)";
	cond {
	 expr="save_wts_interval >= 1";
	};
	true_code {
	 name="true_code";
	 el_typ=ProgCode;
	 el_def=0;
	 If @[0] {
	  name="If_ifepochsavewtsinterval0";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="if (epoch % save_wts_interval == 0)";
	  cond {
	   expr="epoch % save_wts_interval == 0";
	  };
	  true_code {
	   name="true_code";
	   el_typ=ProgCode;
	   el_def=0;
	   ProgramCall @[0] {
	    name="ProgramCall_SaveWeightsnetwork";
	    desc=;
	    flags=CAN_REVERT_TO_CODE;
	    code_string="SaveWeights(network)";
	    prog_args {
	     name="prog_args";
	     el_typ=ProgArg;
	     el_def=0;
	     ProgArg @[0] {
	      arg_type=Network;
	      type="LeabraNetwork*";
	      name="network";
	      required=1;
	      def_val=;
	      prev_expr=;
	      expr {
	       expr="network";
	      };
	     };
	    };
	    target=$.programs.gp[0][9]$;
	    targ_ld_init="*SaveWeights*";
	   };
	  };
	 };
	};
       };
      };
      test {
       expr="epoch < max_epoch";
      };
     };
     If @[8] {
      name="If_ifsavefinalwts";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="if (save_final_wts)";
      cond {
       expr="save_final_wts";
      };
      true_code {
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	name="ProgramCall_SaveWeightsnetwork";
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="SaveWeights(network)";
	prog_args {
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=Network;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="network";
	  };
	 };
	};
	target=$.programs.gp[0][9]$;
	targ_ld_init="*SaveWeights*";
       };
      };
     };
     MethodCall @[9] {
      name="MethodCall_traintimerEndTimer";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="train_timer->EndTimer()";
      result_var=NULL;
      obj=$.programs.gp[0][1].vars[10]$;
      method=TimeUsed::EndTimer;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void EndTimer()";
      meth_desc=" record the current time as the ending time, and compute difference as the time used";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraTrain";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraTrain";
     text_size=1;
     text=;
     html_text="<!DOCTYPE html><html lang=\"en\" dir=\"ltr\" class=\"client-js\"><head>
<meta charset=\"UTF-8\">
<title>LeabraTrain - emergent</title>
<script>document.documentElement.className = document.documentElement.className.replace( /(^|\\s)client-nojs(\\s|$)/, \"$1client-js$2\" );</script>
<script>window.RLQ = window.RLQ || []; window.RLQ.push( function () {
mw.config.set({\"wgCanonicalNamespace\":\"\",\"wgCanonicalSpecialPageName\":!1,\"wgNamespaceNumber\":0,\"wgPageName\":\"LeabraTrain\",\"wgTitle\":\"LeabraTrain\",\"wgCurRevisionId\":11266,\"wgRevisionId\":11266,\"wgArticleId\":2767,\"wgIsArticle\":!0,\"wgIsRedirect\":!1,\"wgAction\":\"view\",\"wgUserName\":\"Oreilly\",\"wgUserGroups\":[\"bureaucrat\",\"svnadmins\",\"sysop\",\"*\",\"user\",\"autoconfirmed\"],\"wgCategories\":[],\"wgBreakFrames\":!1,\"wgPageContentLanguage\":\"en\",\"wgPageContentModel\":\"wikitext\",\"wgSeparatorTransformTable\":[\"\",\"\"],\"wgDigitTransformTable\":[\"\",\"\"],\"wgDefaultDateFormat\":\"dmy\",\"wgMonthNames\":[\"\",\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"],\"wgMonthNamesShort\":[\"\",\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"],\"wgRelevantPageName\":\"LeabraTrain\",\"wgRelevantArticleId\":2767,\"wgUserId\":3,\"wgUserEditCount\":2418,\"wgUserRegistration\":1178051527000,\"wgUserNewMsgRevisionId\":null,\"wgIsProbablyEditable\":!0,
\"wgRestrictionEdit\":[],\"wgRestrictionMove\":[],\"sfgAutocompleteValues\":[],\"sfgAutocompleteOnAllChars\":!1,\"sfgFieldProperties\":[],\"sfgDependentFields\":[],\"sfgShowOnSelect\":[],\"sfgScriptPath\":\"/emergent/extensions/SemanticForms\",\"wgSVGEditEditor\":\"http://svg-edit.googlecode.com/svn/trunk/editor/svg-editor.html\",\"wgHeaderTabsTabIndexes\":[],\"wgWikiEditorEnabledModules\":{\"toolbar\":!0,\"dialogs\":!0,\"preview\":!0,\"publish\":!1},\"wgCategoryTreePageCategoryOptions\":\"{\\\"mode\\\":0,\\\"hideprefix\\\":20,\\\"showcount\\\":true,\\\"namespaces\\\":false}\"});mw.loader.implement(\"user.options\",function($,jQuery){mw.user.options.set({\"ccmeonemails\":\"1\",\"enotifminoredits\":\"1\",\"imagesize\":\"0\",\"previewontop\":\"\",\"rows\":\"30\",\"thumbsize\":\"0\",\"underline\":\"0\",\"watchmoves\":\"1\",\"editsection\":\"1\",\"rememberpassword\":\"1\",\"timecorrection\":\"ZoneInfo|-360|America/Denver\",\"watchlisttoken\":\"14fd6c804d78e99930123181974c128b983adb9e\"});});mw.loader.implement(\"user.tokens\",function($,jQuery){mw.user.tokens.set({\"editToken\":\"3b26cf5f182fe7fb29af6a6ca01dd6cb57342b95+\\\\\",\"patrolToken\":\"6f879f5a78cf8bf62c088b26f37a826a57342b95+\\\\\",\"watchToken\":\"0f5971aae38fcb23ba50cc900260a01757342b95+\\\\\"});});mw.loader.load([\"ext.smw.style\",\"ext.smw.tooltips\",\"mediawiki.page.startup\",\"mediawiki.legacy.wikibits\",\"skins.vector.js\"]);
} );</script>
<link rel=\"stylesheet\" href=\"/emergent/load.php?debug=false&amp;lang=en&amp;modules=mediawiki.legacy.commonPrint%2Cshared%7Cmediawiki.sectionAnchor%7Cmediawiki.skinning.interface%7Cskins.vector.styles&amp;only=styles&amp;skin=vector\">
<link rel=\"stylesheet\" href=\"/emergent/extensions/HeaderTabs/skins/ext.headertabs.large.css\">
<meta name=\"ResourceLoaderDynamicStyles\" content=\"\">
<link rel=\"stylesheet\" href=\"/emergent/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=styles&amp;skin=vector\">
<style>a{text-decoration:none}</style>
<script async=\"\" src=\"/emergent/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=vector\"></script>
<meta name=\"generator\" content=\"MediaWiki 1.26.2\">
<link rel=\"ExportRDF\" type=\"application/rdf+xml\" title=\"LeabraTrain\" href=\"/emergent/index.php?title=Special:ExportRDF/LeabraTrain&amp;xmlmime=rdf\">
<link rel=\"alternate\" type=\"application/x-wiki\" title=\"Edit\" href=\"/emergent/index.php?title=LeabraTrain&amp;action=edit\">
<link rel=\"edit\" title=\"Edit\" href=\"/emergent/index.php?title=LeabraTrain&amp;action=edit\">
<link rel=\"shortcut icon\" href=\"/emergent/favicon.ico\">
<link rel=\"search\" type=\"application/opensearchdescription+xml\" href=\"/emergent/opensearch_desc.php\" title=\"emergent (en)\">
<link rel=\"EditURI\" type=\"application/rsd+xml\" href=\"https://grey.colorado.edu/emergent/api.php?action=rsd\">
<link rel=\"alternate\" type=\"application/atom+xml\" title=\"emergent Atom feed\" href=\"/emergent/index.php?title=Special:RecentChanges&amp;feed=atom\">
<!--[if lt IE 7]><style type=\"text/css\">body{behavior:url(\"/emergent/skins/Vector/csshover.min.htc\")}</style><![endif]-->
<script src=\"/emergent/load.php?debug=false&amp;lang=en&amp;modules=jquery%2Cmediawiki&amp;only=scripts&amp;skin=vector&amp;version=EaPOpX%2FG\"></script></head>
<body class=\"mediawiki ltr sitedir-ltr ns-0 ns-subject page-LeabraTrain skin-vector action-view\">
		<div id=\"mw-page-base\" class=\"noprint\"></div>
		<div id=\"mw-head-base\" class=\"noprint\"></div>
		<div id=\"content\" class=\"mw-body\" role=\"main\">
			<a id=\"top\"></a>

						<div class=\"mw-indicators\">
</div>
			<h1 id=\"firstHeading\" class=\"firstHeading\" lang=\"en\">LeabraTrain</h1>
									<div id=\"bodyContent\" class=\"mw-body-content\">
									<div id=\"siteSub\">From emergent</div>
								<div id=\"contentSub\"></div>
												<div id=\"jump-to-nav\" class=\"mw-jump\">
					Jump to:					<a href=\"#mw-head\">navigation</a>, 					<a href=\"#p-search\">search</a>
				</div>
				<div id=\"mw-content-text\" lang=\"en\" dir=\"ltr\" class=\"mw-content-ltr\"><p>LeabraTrain is the standard <a href=\"/emergent/index.php/Program\" title=\"Program\">Program</a> for training <a href=\"/emergent/index.php/Leabra\" title=\"Leabra\">Leabra</a> networks.  It iterates over <a href=\"/emergent/index.php?title=LeabraEpoch&amp;action=edit&amp;redlink=1\" class=\"new\" title=\"LeabraEpoch (page does not exist)\">LeabraEpoch</a> epochs, optionally until a training criterion has been met, or for a specified maximum number of epochs.
</p><p>You can easily customize this program to do different things at different points in the training process, for example by examining the network.epoch value (or the local copy of that value, epoch).
</p>
<!-- 
NewPP limit report
Cached time: 20160512070701
Cache expiry: 86400
Dynamic content: false
CPU time usage: 0.011 seconds
Real time usage: 0.014 seconds
Preprocessor visited node count: 1/1000000
Preprocessor generated node count: 4/1000000
Post?expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 1/40
Expensive parser function count: 0/100
-->

<!-- 
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.000      1 - -total
-->

<!-- Saved in parser cache with key pdpwiki:pcache:idhash:2767-0!*!0!*!*!*!* and timestamp 20160512070701 and revision id 11266
 -->
</div>					<div class=\"printfooter\">
						Retrieved from \"<a dir=\"ltr\" href=\"https://grey.colorado.edu/emergent/index.php?title=LeabraTrain&amp;oldid=11266\">https://grey.colorado.edu/emergent/index.php?title=LeabraTrain&amp;oldid=11266</a>\"					</div>
				<div id=\"catlinks\" class=\"catlinks catlinks-allhidden\"></div>				<div class=\"visualClear\"></div>
							</div>
		</div>
		<div id=\"mw-navigation\">
			<h2>Navigation menu</h2>

			<div id=\"mw-head\">
									<div id=\"p-personal\" role=\"navigation\" class=\"\" aria-labelledby=\"p-personal-label\">
						<h3 id=\"p-personal-label\">Personal tools</h3>
						<ul>
							<li id=\"pt-userpage\"><a href=\"/emergent/index.php/User:Oreilly\" dir=\"auto\" title=\"Your user page [.]\" accesskey=\".\">Oreilly</a></li><li id=\"pt-mytalk\"><a href=\"/emergent/index.php/User_talk:Oreilly\" class=\"new\" title=\"Your talk page [n]\" accesskey=\"n\">Talk</a></li><li id=\"pt-preferences\"><a href=\"/emergent/index.php/Special:Preferences\" title=\"Your preferences\">Preferences</a></li><li id=\"pt-watchlist\"><a href=\"/emergent/index.php/Special:Watchlist\" title=\"A list of pages you are monitoring for changes [l]\" accesskey=\"l\">Watchlist</a></li><li id=\"pt-mycontris\"><a href=\"/emergent/index.php/Special:Contributions/Oreilly\" title=\"A list of your contributions [y]\" accesskey=\"y\">Contributions</a></li><li id=\"pt-logout\"><a href=\"/emergent/index.php?title=Special:UserLogout&amp;returnto=LeabraTrain\" title=\"Log out\">Log out</a></li>						</ul>
					</div>
									<div id=\"left-navigation\">
										<div id=\"p-namespaces\" role=\"navigation\" class=\"vectorTabs\" aria-labelledby=\"p-namespaces-label\">
						<h3 id=\"p-namespaces-label\">Namespaces</h3>
						<ul>
															<li id=\"ca-nstab-main\" class=\"selected\"><span><a href=\"/emergent/index.php/LeabraTrain\" title=\"View the content page [c]\" accesskey=\"c\">Page</a></span></li>
															<li id=\"ca-talk\" class=\"new\"><span><a href=\"/emergent/index.php?title=Talk:LeabraTrain&amp;action=edit&amp;redlink=1\" title=\"Discussion about the content page [t]\" accesskey=\"t\" rel=\"discussion\">Discussion</a></span></li>
													</ul>
					</div>
										<div id=\"p-variants\" role=\"navigation\" class=\"vectorMenu emptyPortlet\" aria-labelledby=\"p-variants-label\">
												<h3 id=\"p-variants-label\">
							<span>Variants</span><a href=\"#\"></a>
						</h3>

						<div class=\"menu\">
							<ul>
															</ul>
						</div>
					</div>
									</div>
				<div id=\"right-navigation\">
										<div id=\"p-views\" role=\"navigation\" class=\"vectorTabs\" aria-labelledby=\"p-views-label\">
						<h3 id=\"p-views-label\">Views</h3>
						<ul>
															<li id=\"ca-view\" class=\"selected\"><span><a href=\"/emergent/index.php/LeabraTrain\">Read</a></span></li>
															<li id=\"ca-edit\"><span><a href=\"/emergent/index.php?title=LeabraTrain&amp;action=edit\" title=\"Edit this page [e]\" accesskey=\"e\">Edit</a></span></li>
															<li id=\"ca-history\" class=\"collapsible\"><span><a href=\"/emergent/index.php?title=LeabraTrain&amp;action=history\" title=\"Past revisions of this page [h]\" accesskey=\"h\">View history</a></span></li>
															<li id=\"ca-unwatch\" class=\"icon\"><span><a href=\"/emergent/index.php?title=LeabraTrain&amp;action=unwatch&amp;token=c6d7363e22d4c0d44ac7ca2a8c59165157342b95%2B%5C\" title=\"Remove this page from your watchlist [w]\" accesskey=\"w\">Unwatch</a></span></li>
													</ul>
					</div>
										<div id=\"p-cactions\" role=\"navigation\" class=\"vectorMenu\" aria-labelledby=\"p-cactions-label\">
						<h3 id=\"p-cactions-label\"><span>More</span><a href=\"#\"></a></h3>

						<div class=\"menu\">
							<ul>
																	<li id=\"ca-delete\">
										<a href=\"/emergent/index.php?title=LeabraTrain&amp;action=delete\" title=\"Delete this page [d]\" accesskey=\"d\">Delete</a>
									</li>
																	<li id=\"ca-move\">
										<a href=\"/emergent/index.php/Special:MovePage/LeabraTrain\" title=\"Move this page [m]\" accesskey=\"m\">Move</a>
									</li>
																	<li id=\"ca-protect\">
										<a href=\"/emergent/index.php?title=LeabraTrain&amp;action=protect\" title=\"Protect this page [=]\" accesskey=\"=\">Protect</a>
									</li>
																	<li id=\"ca-purge\">
										<a href=\"/emergent/index.php?title=LeabraTrain&amp;action=purge\">Refresh</a>
									</li>
															</ul>
						</div>
					</div>
										<div id=\"p-search\" role=\"search\">
						<h3>
							<label for=\"searchInput\">Search</label>
						</h3>

						<form action=\"/emergent/index.php\" id=\"searchform\">
							<div id=\"simpleSearch\">
							<input type=\"search\" name=\"search\" placeholder=\"Search\" title=\"Search emergent [f]\" accesskey=\"f\" id=\"searchInput\"><input type=\"hidden\" value=\"Special:Search\" name=\"title\"><input type=\"submit\" name=\"fulltext\" value=\"Search\" title=\"Search the pages for this text\" id=\"mw-searchButton\" class=\"searchButton mw-fallbackSearchButton\"><input type=\"submit\" name=\"go\" value=\"Go\" title=\"Go to a page with this exact name if it exists\" id=\"searchButton\" class=\"searchButton\">							</div>
						</form>
					</div>
									</div>
			</div>
			<div id=\"mw-panel\">
				<div id=\"p-logo\" role=\"banner\"><a class=\"mw-wiki-logo\" href=\"/emergent/index.php/Main_Page\" title=\"Visit the main page\"></a></div>
						<div class=\"portal\" role=\"navigation\" id=\"p-navigation\" aria-labelledby=\"p-navigation-label\">
			<h3 id=\"p-navigation-label\">Navigation</h3>

			<div class=\"body\">
									<ul>
						<li id=\"n-mainpage-description\"><a href=\"/emergent/index.php/Main_Page\" title=\"Visit the main page [z]\" accesskey=\"z\">Main page</a></li><li id=\"n-recentchanges\"><a href=\"/emergent/index.php/Special:RecentChanges\" title=\"A list of recent changes in the wiki [r]\" accesskey=\"r\">Recent changes</a></li><li id=\"n-Documentation\"><a href=\"/emergent/index.php/User_hub\">Documentation</a></li><li id=\"n-Submit-a-bug\"><a href=\"/emergent/index.php/How_to_submit_a_bug_report\">Submit a bug</a></li><li id=\"n-Bug-tracker\"><a href=\"//grey.colorado.edu/cgi-bin/bugzilla/index.cgi\" rel=\"nofollow\">Bug tracker</a></li><li id=\"n-Mailing-list\"><a href=\"//grey.colorado.edu/cgi-bin/mailman/listinfo/emergent-users\" rel=\"nofollow\">Mailing list</a></li>					</ul>
							</div>
		</div>
			<div class=\"portal\" role=\"navigation\" id=\"p-tb\" aria-labelledby=\"p-tb-label\">
			<h3 id=\"p-tb-label\">Tools</h3>

			<div class=\"body\">
									<ul>
						<li id=\"t-whatlinkshere\"><a href=\"/emergent/index.php/Special:WhatLinksHere/LeabraTrain\" title=\"A list of all wiki pages that link here [j]\" accesskey=\"j\">What links here</a></li><li id=\"t-recentchangeslinked\"><a href=\"/emergent/index.php/Special:RecentChangesLinked/LeabraTrain\" title=\"Recent changes in pages linked from this page [k]\" accesskey=\"k\">Related changes</a></li><li id=\"t-upload\"><a href=\"/emergent/index.php/Special:Upload\" title=\"Upload files [u]\" accesskey=\"u\">Upload file</a></li><li id=\"t-specialpages\"><a href=\"/emergent/index.php/Special:SpecialPages\" title=\"A list of all special pages [q]\" accesskey=\"q\">Special pages</a></li><li id=\"t-permalink\"><a href=\"/emergent/index.php?title=LeabraTrain&amp;oldid=11266\" title=\"Permanent link to this revision of the page\">Permanent link</a></li><li id=\"t-info\"><a href=\"/emergent/index.php?title=LeabraTrain&amp;action=info\" title=\"More information about this page\">Page information</a></li><li id=\"t-smwbrowselink\"><a href=\"/emergent/index.php/Special:Browse/LeabraTrain\" rel=\"smw-browse\">Browse properties</a></li>					</ul>
							</div>
		</div>
			<div class=\"portal\" role=\"navigation\" id=\"p-coll-print_export\" aria-labelledby=\"p-coll-print_export-label\">
			<h3 id=\"p-coll-print_export-label\">Print/export</h3>

			<div class=\"body\">
									<ul>
						<li id=\"coll-create_a_book\"><a href=\"/emergent/index.php?title=Special:Book&amp;bookcmd=book_creator&amp;referer=LeabraTrain\">Create a book</a></li><li id=\"coll-download-as-rl\"><a href=\"/emergent/index.php?title=Special:Book&amp;bookcmd=render_article&amp;arttitle=LeabraTrain&amp;oldid=11266&amp;writer=rl\">Download as PDF</a></li><li id=\"t-print\"><a href=\"/emergent/index.php?title=LeabraTrain&amp;printable=yes\" title=\"Printable version of this page [p]\" accesskey=\"p\">Printable version</a></li>					</ul>
							</div>
		</div>
				</div>
		</div>
		<div id=\"footer\" role=\"contentinfo\">
							<ul id=\"footer-info\">
											<li id=\"footer-info-lastmod\"> This page was last modified on 12 May 2016, at 01:07.</li>
									</ul>
							<ul id=\"footer-places\">
											<li id=\"footer-places-about\"><a href=\"/emergent/index.php/emergent:About\" title=\"emergent:About\">About emergent</a></li>
									</ul>
										<ul id=\"footer-icons\" class=\"noprint\">
											<li id=\"footer-poweredbyico\">
							<a href=\"//www.mediawiki.org/\"><img src=\"/emergent/resources/assets/poweredby_mediawiki_88x31.png\" alt=\"Powered by MediaWiki\" srcset=\"/emergent/resources/assets/poweredby_mediawiki_132x47.png 1.5x, /emergent/resources/assets/poweredby_mediawiki_176x62.png 2x\" width=\"88\" height=\"31\"></a><a href=\"https://www.semantic-mediawiki.org/wiki/Semantic_MediaWiki\"><img src=\"/emergent/extensions/SemanticMediaWiki/resources/images/smw_button.png\" alt=\"Powered by Semantic MediaWiki\" width=\"88\" height=\"31\"></a>						</li>
									</ul>
						<div style=\"clear:both\"></div>
		</div>
		<script>window.RLQ = window.RLQ || []; window.RLQ.push( function () {
mw.loader.state({\"user\":\"ready\",\"user.groups\":\"ready\"});mw.loader.load([\"mediawiki.action.view.postEdit\",\"site\",\"mediawiki.user\",\"mediawiki.hidpi\",\"mediawiki.page.ready\",\"mediawiki.searchSuggest\",\"mediawiki.page.watch.ajax\",\"ext.headertabs\"]);
} );</script><script>window.RLQ = window.RLQ || []; window.RLQ.push( function () {
mw.config.set({\"wgBackendResponseTime\":155});
} );</script>
	

</body></html>";
    };
   };
   Program @[2] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[0][2].doc$$: };
    };
    name="LeabraEpoch";
    short_nm="Epoch";
    tags="Leabra, Std";
    desc="iterates over all of the items in a data table and calls LeabraTrial process on them";
    version {
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=2;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to operate on";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.data.gp[0][0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="table of patterns to present to the network, one row at a time";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="data_loop_order";
      var_type=T_HardEnum;
      int_val=1;
      object_scope=NULL;
      hard_enum_type=DataLoop::Order;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="controls the order in which events (rows of the input data datatable) are presented to the network
(SEQUENTIAL, PERMUTED, RANDOM)";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="trial";
      var_type=T_Int;
      int_val=0;
      object_scope=NULL;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current trial (event) within the epoch -- increments automatically";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.data.gp[1][0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="trial-level output data -- we reset it every epoch by default, so it just contains last epoch of data";
      init_from=NULL;
     };
     ProgVar @[3] {
      name="step_on_err";
      var_type=T_Bool;
      bool_val=0;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="when you step at the Epoch level, this will automatically step through to the next point at which an error was made -- you can use the netview history to replay what happend";
      init_from=NULL;
     };
     ProgVar @[4] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=.networks[0].epoch_time$$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="timer to record time required to perform one epoch of processing (object is on network -- this is a pointer to it)";
      init_from=NULL;
     };
     ProgVar @[5] {
      name="data_loop_index";
      var_type=T_Int;
      int_val=6;
      object_scope=NULL;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="index counter for the looping over items in the input_data datatable (not always the same as trial counter, depending on distributed memory computation)";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      name="NetCounterInit_NetCounterInittrial";
      desc="initialize trial counter (local variable and in the network)";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: trial";
      network_var=.programs.gp[0][2].args[0]$$;
      local_ctr_var=.programs.gp[0][2].vars[1]$$;
      counter=Network::trial;
      update_after=0;
     };
     AssignExpr @[1] {
      name="AssignExpr_epochtimernetworkepochtime";
      desc="get pointer to epoch timer object on network";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer = network.epoch_time";
      result_var=.programs.gp[0][2].vars[4]$$;
      expr {
       expr="network.epoch_time";
      };
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      name="NetCounterInit_NetCounterInittrial";
      desc="initialize trial counter (local variable and in the network)";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: trial";
      network_var=$.programs.gp[0][2].args[0]$;
      local_ctr_var=$.programs.gp[0][2].vars[1]$;
      counter=Network::trial;
      update_after=0;
     };
     AssignExpr @[1] {
      name="AssignExpr_epochtimernetworkepochtime";
      desc="get pointer to epoch timer object on network";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer = network.epoch_time";
      result_var=$.programs.gp[0][2].vars[4]$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[2] {
      name="MethodCall_epochtimerStartTimertrue";
      desc="start the epoch timer to record computation time per epoch";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer->StartTimer(true)";
      result_var=NULL;
      obj=$.programs.gp[0][2].vars[4]$;
      method=TimeUsed::StartTimer;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	prev_expr=;
	expr {
	 expr="true";
	};
       };
      };
      meth_sig="void StartTimer(bool reset_used = true)";
      meth_desc=" record the current time as the starting time, and optionally reset the time used information";
     };
     MethodCall @[3] {
      name="MethodCall_networkInitEpoch";
      desc="added in 8.0: essential for param_seqs";
      flags=NEW_EL|CAN_REVERT_TO_CODE;
      code_string="network->Init_Epoch()";
      result_var=NULL;
      obj=$.programs.gp[0][2].args[0]$;
      method=Network::Init_Epoch;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Init_Epoch()";
      meth_desc=" Initializes network state at the start of a new epoch -- updates parameters according to param_seq for example";
     };
     MethodCall @[4] {
      name="MethodCall_trialmondataResetData";
      desc="reset trial-level monitor data every epoch, so it reflects only the most recent epoch's worth of data (turn flags OFF to accumulate trial data across entire training run)";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_mon_data->ResetData()";
      result_var=NULL;
      obj=.programs.gp[0][2].vars[2]$$;
      method=DataTable::ResetData;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void ResetData()";
      meth_desc=" deletes all the data (rows), but keeps the column structure -- this cannot be undone!";
     };
     NetDataLoop @[5] {
      name="NetDataLoop_NetDataLoopPERMU_ardatalooporder";
      desc="iterates over the events/rows of input_data, according to data_loop_order variable";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Data Loop (PERMUTED):  table=input_data  index=data_loop_index  order_var=data_loop_order ";
      loop_code {
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	name="ProgramCall_LeabraTrialnetworkinputdata";
	desc="run the trial program, passing network and input_data";
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraTrial(network, input_data)";
	prog_args {
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
	target=.programs.gp[0][3]$$;
	targ_ld_init="*LeabraTrial*";
       };
       If @[1] {
	name="If_ifsteponerrnetworksse00";
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="if (step_on_err && network.sse > 0.0)";
	cond {
	 expr="step_on_err && network.sse > 0.0";
	};
	true_code {
	 name="true_code";
	 el_typ=ProgCode;
	 el_def=0;
	 StopStepPoint @[0] {
	  name="StopStepPoint_StopStepPoint";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="Stop_Step Point";
	  cond {
	   expr=;
	  };
	 };
	};
       };
      };
      data_var=.programs.gp[0][2].args[1]$$;
      index_var=.programs.gp[0][2].vars[5]$$;
      order_var=.programs.gp[0][2].vars[0]$$;
      order=PERMUTED;
      update_after=0;
      dmem_nprocs=1;
      dmem_this_proc=0;
      grouped=0;
      group_col 9 0="Group";
      group_index_var=NULL;
      group_order_var=NULL;
      group_order=PERMUTED;
      group_idx_list{       };
     };
     If @[6] {
      name="If_ifnetworkwtupdateNetworkBATCH";
      desc="if full batch mode, update only at end of epoch";
      flags=CAN_REVERT_TO_CODE;
      code_string="if (network.wt_update == Network::BATCH)";
      cond {
       expr="network.wt_update == Network::BATCH";
      };
      true_code {
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	name="MethodCall_networkComputeWeights";
	desc="final update of weights based on accumulated changes";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Compute_Weights()";
	result_var=NULL;
	obj=$.programs.gp[0][2].args[0]$;
	method=Network::Compute_Weights;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Compute_Weights()";
	meth_desc=" update weights for whole net: calls DMem_SumDWts before doing update if in dmem mode";
       };
      };
     };
     MethodCall @[7] {
      name="MethodCall_networkComputeEpochStats";
      desc="network accumulates some core statistics over the epoch -- this finalizes that process and computes summary stats";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Compute_EpochStats()";
      result_var=NULL;
      obj=$.programs.gp[0][2].args[0]$;
      method=LeabraNetwork::Compute_EpochStats;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Compute_EpochStats()";
      meth_desc=" compute epoch-level statistics; calls DMem_ComputeAggs (if dmem) and EpochSSE -- specific algos may add more compute epoch-level statistics, including SSE, AvgExtRew and AvgCycles";
     };
     MethodCall @[8] {
      name="MethodCall_epochtimerEndTimer";
      desc="done with the computation in the epoch -- record time it took";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer->EndTimer()";
      result_var=NULL;
      obj=$.programs.gp[0][2].vars[4]$;
      method=TimeUsed::EndTimer;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void EndTimer()";
      meth_desc=" record the current time as the ending time, and compute difference as the time used";
     };
     ProgramCall @[9] {
      name="ProgramCall_LeabraEpochMonitornetwork";
      desc="run program that records data from network and possibly other sources about the epoch";
      flags=CAN_REVERT_TO_CODE;
      code_string="LeabraEpochMonitor(network)";
      prog_args {
       name="prog_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      target=.programs.gp[0][8]$$;
      targ_ld_init="*LeabraEpochMonitor*";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraEpoch";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraEpoch";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[3] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[0][3].doc$$: };
    };
    name="LeabraTrial";
    short_nm="Trial";
    tags="Leabra, Std";
    desc="Leabra processing of a single input/output event or external information, over a single alpha frequency cycle (100 msec / 10 Hz) -- iterates over gamma-frequency (25 msec / 40 Hz) quarter-trials";
    version {
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=0;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to operate on -- typically set by higher-level calling programs";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.data.gp[0][0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="datatable containing training input/output patterns";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=0;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="determines whether to update any network view displays after trial is completed";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      name="LocalVars_LocalVars1vars";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (1 vars)";
      local_vars {
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
       ProgVar @[0] {
	name="qtr";
	var_type=T_Int;
	int_val=0;
	object_scope=NULL;
	flags=LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
      };
     };
     If @[1] {
      name="If_ifnetworkCompute_stnetworktrial1";
      desc="test if it is time to update the weight values from delta weights (dWt) computed over trials";
      flags=CAN_REVERT_TO_CODE;
      code_string="if (network.Compute_Weights_Test(network.trial+1))";
      cond {
       expr="network.Compute_Weights_Test(network.trial+1)";
      };
      true_code {
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	name="MethodCall_networkComputeWeights";
	desc="update weights -- do this at start instead of end, so that dwt is valid";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Compute_Weights()";
	result_var=NULL;
	obj=.programs.gp[0][3].args[0]$$;
	method=Network::Compute_Weights;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Compute_Weights()";
	meth_desc=" update weights for whole net: calls DMem_SumDWts before doing update if in dmem mode";
       };
      };
     };
     MethodCall @[2] {
      name="MethodCall_networkTrialInit";
      desc="initializes various counters at start of trial";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Trial_Init()";
      result_var=NULL;
      obj=$.programs.gp[0][3].args[0]$;
      method=LeabraNetwork::Trial_Init;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Trial_Init()";
      meth_desc=" initialize at start of trial (init specs, Decay state)";
     };
     Comment @[3] {
      name="Comment_notecanapplyinpu_Quarterasneeded";
      desc="== note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
      flags=CAN_REVERT_TO_CODE;
      code_string="// == note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
     };
     MethodCall @[4] {
      name="MethodCall_networkInitInputData";
      desc="resets input data, before getting new external inputs data from apply inputs call";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Init_InputData()";
      result_var=NULL;
      obj=$.programs.gp[0][3].args[0]$;
      method=Network::Init_InputData;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Init_InputData()";
      meth_desc=" Initializes external and target inputs";
     };
     ProgramCall @[5] {
      name="ProgramCall_ApplyInputsnetworkinputdata";
      desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
      flags=CAN_REVERT_TO_CODE;
      code_string="ApplyInputs(network, input_data)";
      prog_args {
       name="prog_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
       ProgArg @[1] {
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="input_data";
	};
       };
      };
      target=.programs.gp[0][6]$$;
      targ_ld_init="*ApplyInputs*";
     };
     ForLoop @[6] {
      name="ForLoop_forqtr0qtr4qtr";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="for (qtr = 0; qtr < 4; qtr++)";
      loop_code {
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	name="ProgramCall_LeabraQuarternetworkinputdata";
	desc="run the quarter program (which iterates over cyles of network activation updating) for each quarter";
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraQuarter(network, input_data)";
	prog_args {
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
	target=.programs.gp[0][4]$$;
	targ_ld_init="*LeabraQuarter*";
       };
      };
      init {
       expr="qtr = 0";
      };
      test {
       expr="qtr < 4";
      };
      iter {
       expr="qtr++";
      };
     };
     MethodCall @[7] {
      name="MethodCall_networkTrialFinal";
      desc="after the trial is over, do final computations";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Trial_Final()";
      result_var=NULL;
      obj=$.programs.gp[0][3].args[0]$;
      method=LeabraNetwork::Trial_Final;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Trial_Final()";
      meth_desc=" do final processing after trial: Compute_AbsRelNetin";
     };
     ProgramCall @[8] {
      name="ProgramCall_LeabraTrialMonitornetwork";
      desc="records data about the trial-level processing to a datatable for graphing/processing";
      flags=CAN_REVERT_TO_CODE;
      code_string="LeabraTrialMonitor(network)";
      prog_args {
       name="prog_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      target=.programs.gp[0][7]$$;
      targ_ld_init="*LeabraTrialMonitor*";
     };
     NetUpdateView @[9] {
      name="NetUpdateView_NetUpdateView";
      desc="update the network view(s) (only if update_net_view is true)";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Update View";
      network_var=$.programs.gp[0][3].args[0]$;
      update_var=.programs.gp[0][3].vars[0]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraTrial";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraTrial";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[4] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[0][4].doc$$: };
    };
    name="LeabraQuarter";
    short_nm="Quarter";
    tags="Leabra, Std";
    desc="iterates over cycles of activation updating for a gamma-frequency (25 msec / 40 Hz) quarter of an alpha frequency (100 msec / 10 Hz) trial";
    version {
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=0;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.data.gp[0][0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="cycle";
      var_type=T_Int;
      int_val=0;
      object_scope=NULL;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current cycle of settling (local loop counter)";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="if true, will update network views at end of settling";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      name="NetCounterInit_NetCounterInitcycle";
      desc="initialize local cycle counter and corresponding counter on network";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: cycle";
      network_var=.programs.gp[0][4].args[0]$$;
      local_ctr_var=.programs.gp[0][4].vars[0]$$;
      counter=Network::cycle;
      update_after=0;
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      name="LocalVars_LocalVars2vars";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (2 vars)";
      local_vars {
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
       ProgVar @[0] {
	name="cycle_max";
	var_type=T_Int;
	int_val=0;
	object_scope=NULL;
	flags=LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
       ProgVar @[1] {
	name="cyc";
	var_type=T_Int;
	int_val=0;
	object_scope=NULL;
	flags=LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
      };
     };
     Comment @[1] {
      name="Comment_notecanapplyinpu_Quarterasneeded";
      desc="== note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
      flags=CAN_REVERT_TO_CODE;
      code_string="// == note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
     };
     MethodCall @[2] {
      name="MethodCall_networkInitInputData";
      desc="resets input data, before getting new external inputs data from apply inputs call";
      flags=OFF|CAN_REVERT_TO_CODE;
      code_string="network->Init_InputData()";
      result_var=NULL;
      obj=$.programs.gp[0][4].args[0]$;
      method=Network::Init_InputData;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Init_InputData()";
      meth_desc=" Initializes external and target inputs";
     };
     ProgramCall @[3] {
      name="ProgramCall_ApplyInputsnetworkinputdata";
      desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
      flags=OFF|CAN_REVERT_TO_CODE;
      code_string="ApplyInputs(network, input_data)";
      prog_args {
       name="prog_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
       ProgArg @[1] {
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="input_data";
	};
       };
      };
      target=$.programs.gp[0][6]$;
      targ_ld_init="*ApplyInputs*";
     };
     MethodCall @[4] {
      name="MethodCall_networkQuarterInit";
      desc="initializes various counters at start of settling";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Quarter_Init()";
      result_var=NULL;
      obj=$.programs.gp[0][4].args[0]$;
      method=LeabraNetwork::Quarter_Init;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Quarter_Init()";
      meth_desc=" initialize network for quarter-level processing (hard clamp, netscale)";
     };
     MethodCall @[5] {
      name="MethodCall_cyclemaxnetworkCycleRunMax";
      desc="will be 25 if network times.cycle_qtr is true, else 1";
      flags=CAN_REVERT_TO_CODE;
      code_string="cycle_max = network->CycleRunMax()";
      result_var=.programs.gp[0][4].prog_code[0].local_vars[0]$$;
      obj=$.programs.gp[0][4].args[0]$;
      method=LeabraNetwork::CycleRunMax;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="int CycleRunMax()";
      meth_desc=" max loop counter for running cycles in a gamma quarter of processing, taking into account the fact that threading can run multiple cycles per Cycle_Run call if quarter flag is set";
     };
     ForLoop @[6] {
      name="ForLoop_forcyc0cyccyclemaxcyc";
      desc="// the main loop over cycles of updating";
      flags=CAN_REVERT_TO_CODE;
      code_string="for (cyc=0; cyc<cycle_max; cyc++)";
      loop_code {
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	name="ProgramCall_LeabraCyclenetwork";
	desc="run the cycle program -- can run multiple cycles at a time due to threading";
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraCycle(network)";
	prog_args {
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="network";
	  };
	 };
	};
	target=.programs.gp[0][5]$$;
	targ_ld_init="*LeabraCycle*";
       };
       AssignExpr @[1] {
	name="AssignExpr_cyclenetworkcycle";
	desc="grab the updated cycle count";
	flags=CAN_REVERT_TO_CODE;
	code_string="cycle = network.cycle";
	result_var=$.programs.gp[0][4].vars[0]$;
	expr {
	 expr="network.cycle";
	};
       };
      };
      init {
       expr="cyc=0";
      };
      test {
       expr="cyc<cycle_max";
      };
      iter {
       expr="cyc++";
      };
     };
     MethodCall @[7] {
      name="MethodCall_networkQuarterFinal";
      desc="perform final operations at end of settling (storing final activations, etc)";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Quarter_Final()";
      result_var=NULL;
      obj=$.programs.gp[0][4].args[0]$;
      method=LeabraNetwork::Quarter_Final;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Quarter_Final()";
      meth_desc=" do final processing after each quarter: ";
     };
     MethodCall @[8] {
      name="MethodCall_networkComputePhaseStats";
      desc="compute appropriate stats for each phase (MinusStats, PlusStats)";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Compute_PhaseStats()";
      result_var=NULL;
      obj=$.programs.gp[0][4].args[0]$;
      method=LeabraNetwork::Compute_PhaseStats;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Compute_PhaseStats()";
      meth_desc=" compute MinusStats at the end of the minus phase, and PlusStats at the end of the plus phase -- this is preferred over the previous implementation of calling TrialStats only at the end of the minus phase, which required targets to be present in the minus phase, which is not always the case";
     };
     NetUpdateView @[9] {
      name="NetUpdateView_NetUpdateView";
      desc="update network views, if update_net_view == true";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Update View";
      network_var=$.programs.gp[0][4].args[0]$;
      update_var=.programs.gp[0][4].vars[1]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraQuarter";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraQuarter";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[5] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[0][5].doc$$: };
    };
    name="LeabraCycle";
    short_nm="Cycle";
    tags="Leabra, Std";
    desc="runs one cycle of leabra processing (updating net inputs and activations)";
    version {
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=0;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="determines whether network views will be updated on a cycle-by-cycle basis (slow, but often quite useful for seeing how processing is proceeding)";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      name="MethodCall_networkCycleRun";
      desc="this does all the standard leabra processing of activation updating -- either 1 cycle (1 msec) or 25 cycles if times.cycle_qtr is TRUE (default)";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Cycle_Run()";
      result_var=NULL;
      obj=.programs.gp[0][5].args[0]$$;
      method=LeabraNetwork::Cycle_Run;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Cycle_Run()";
      meth_desc=" compute cycle(s) of updating: netinput, inhibition, activations -- multiple cycles can be run depending on lthreads.n_cycles setting and whether multiple threads are actually being used -- see lthreads.n_threads_act";
     };
     NetUpdateView @[1] {
      name="NetUpdateView_NetUpdateView";
      desc="update network views if update_net_view == true";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Update View";
      network_var=$.programs.gp[0][5].args[0]$;
      update_var=$.programs.gp[0][5].vars[0]$;
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraCycle";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraCycle";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[6] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[0][6].doc$$: };
    };
    name="ApplyInputs";
    short_nm="Inputs";
    tags="Network, InputData, Apply";
    desc="apply the current input data to the network as external input and target values";
    version {
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=LayerWriter;
     el_def=0;
     LayerWriter @[0] {
      name="LayerWriter_0";
      data=$.data.gp[0][0]$;
      network=$.networks[0]$;
      layer_data {
       name="layer_data";
       el_typ=LayerWriterEl;
       el_def=0;
       LayerWriterEl @[0] {
	col_name="Input";
	net_target=LAYER;
	layer_name="Input";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=EXT;
	noise {name="RandomSpec_7": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[1] {
	col_name="Name";
	net_target=TRIAL_NAME;
	layer_name="Name";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=0;
	noise {name="RandomSpec_9": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[2] {
	col_name="Output";
	net_target=LAYER;
	layer_name="Output";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=TARG;
	noise {name="noise": type=NONE: mean=0: var=0.5: par=1: };
       };
      };
     };
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to apply inputs to -- typically set by calling program";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.data.gp[0][0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="input datatable containing input/output patterns";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="layer_writer_0";
      var_type=T_Object;
      object_type=LayerWriter;
      object_val=.programs.gp[0][6].objs[0]$$;
      object_scope=NULL;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="this is a pointer to the LayerWriter object in objs -- edit that object to determine how information is presented to the network";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      name="MethodCall_layerwriter0SetD_nputdatanetwork";
      desc="sets the datatable and network for the layer writer, so it knows what to write to";
      flags=CAN_REVERT_TO_CODE;
      code_string="layer_writer_0->SetDataNetwork(input_data, network)";
      result_var=NULL;
      obj=.programs.gp[0][6].vars[0]$$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="db";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* db, Network* net)";
      meth_desc=" set the data table and network pointers -- convenience function for programs ";
     };
     MethodCall @[1] {
      name="MethodCall_layerwriter0AutoConfig";
      desc="configure to fit the network and input data -- this may cause spurious warning messages and problems in some cases so just turn it OFF if necessary";
      flags=CAN_REVERT_TO_CODE;
      code_string="layer_writer_0->AutoConfig()";
      result_var=NULL;
      obj=$.programs.gp[0][6].vars[0]$;
      method=LayerWriter::AutoConfig;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="remove_unused";
	required=0;
	def_val="true";
	prev_expr=;
	expr {
	 expr=;
	};
       };
      };
      meth_sig="void AutoConfig(bool remove_unused = true)";
      meth_desc=" do a 'best guess' configuration of items by matching up like-named data Channels and network Layers -- if remove_unused is true, then layer writer elements that existed previously but were not found in input data and network are removed";
     };
     MethodCall @[2] {
      name="MethodCall_layerwriter0CheckConfigfalse";
      desc="check the configuration of the layer writer -- will emit warnings and errors for missing or misconfigured items";
      flags=CAN_REVERT_TO_CODE;
      code_string="layer_writer_0->CheckConfig(false)";
      result_var=NULL;
      obj=$.programs.gp[0][6].vars[0]$;
      method=taList_impl::CheckConfig;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      name="MethodCall_layerwriter0SetD_nputdatanetwork";
      desc="sets the datatable and network for the layer writer, so it knows what to write to";
      flags=CAN_REVERT_TO_CODE;
      code_string="layer_writer_0->SetDataNetwork(input_data, network)";
      result_var=NULL;
      obj=$.programs.gp[0][6].vars[0]$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="db";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* db, Network* net)";
      meth_desc=" set the data table and network pointers -- convenience function for programs ";
     };
     MethodCall @[1] {
      name="MethodCall_layerwriter0ApplyInputData";
      desc="apply inputs to the network!  layer writer has all the key specs";
      flags=CAN_REVERT_TO_CODE;
      code_string="layer_writer_0->ApplyInputData()";
      result_var=NULL;
      obj=$.programs.gp[0][6].vars[0]$;
      method=LayerWriter::ApplyInputData;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="bool ApplyInputData()";
      meth_desc=" apply data to the layers, using the network's current context settings (TEST,TRAIN,etc) -- returns success";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="ApplyInputs";
     full_url="https://grey.colorado.edu/emergent/index.php/ApplyInputs";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[7] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[0][7].doc$$: };
    };
    name="LeabraTrialMonitor";
    short_nm="TrialMon";
    tags="Leabra, Std, Monitor";
    desc="monitor trial-level data from the network (and potentially other sources) -- stores results in datatable (TrialOutputData typically) that can be used for graph/grid views and further analysis ";
    version {
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @[0] {
      name="trial_netmon";
      items {
       name="items";
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @[0] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[1] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[2] {
	name="train_mode";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="train_mode";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[3] {
	name="group";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="group";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[4] {
	name="trial";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="trial";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[5] {
	name="tick";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="tick";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[6] {
	name="time";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="time";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[7] {
	name="trial_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="trial_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[8] {
	name="group_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="group_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[9] {
	name="output_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[10] {
	name="rt_cycles";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="rt_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[11] {
	name="sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[12] {
	name="norm_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="norm_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[13] {
	name="cos_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="cos_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[14] {
	name="ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[15] {
	name="lay_sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.sse";
	var_label="lay_sse";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[16] {
	name="lay_bin_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.bin_err";
	var_label="lay_bin_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[17] {
	name="lay_norm_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.norm_err";
	var_label="lay_norm_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[18] {
	name="lay_cos_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.cos_err";
	var_label="lay_cos_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[19] {
	name="lay_net_sd";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.net_sd";
	var_label="lay_net_sd";
	name_style=AUTO_NAME;
	max_name_len=13;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[20] {
	name="net_cos_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="cos_diff";
	var_label="net_cos_diff";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[21] {
	name="net_trial_cos_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="trial_cos_diff";
	var_label="net_trial_cos_diff";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[22] {
	name="net_avg_act_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="avg_act_diff";
	var_label="net_avg_act_diff";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[23] {
	name="cos_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.cos_diff";
	var_label="cos_diff";
	name_style=AUTO_NAME;
	max_name_len=13;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[24] {
	name="trial_cos_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.trial_cos_diff";
	var_label="trial_cos_diff";
	name_style=AUTO_NAME;
	max_name_len=13;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[25] {
	name="avg_act_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.avg_act_diff";
	var_label="avg_act_diff";
	name_style=AUTO_NAME;
	max_name_len=13;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$.networks[0]$;
      data=$.data.gp[1][0]$;
      rmv_orphan_cols=1;
     };
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to record data from";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.data.gp[1][0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="data table to record trial-level data to (this program writes new data to this table!)";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="trial_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.programs.gp[0][7].objs[0]$$;
      object_scope=NULL;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="pointer to the NetMonitor object in objs secton of this program that contains configuration for what to record and where to get it";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      name="MethodCall_trialnetmonSetDa_lmondatanetwork";
      desc="set the network and datatable for the NetMonitor";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->SetDataNetwork(trial_mon_data, network)";
      result_var=NULL;
      obj=.programs.gp[0][7].vars[1]$$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* dt, Network* net)";
      meth_desc=" set both the data table and network -- convenient for programs -- calls ResetDataTableCols too -- don't call if columns are manually added or this is adding additional rows to a table";
     };
     MethodCall @[1] {
      name="MethodCall_trialnetmonCheckConfigfalse";
      desc="check the configuration of the network monitor -- will emit warnings and errors for misconfigurations";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->CheckConfig(false)";
      result_var=NULL;
      obj=$.programs.gp[0][7].vars[1]$;
      method=taBase::CheckConfig;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
     MethodCall @[2] {
      name="MethodCall_trialnetmonUpdateMonitorstrue";
      desc="update the monitor items and data schema based on current settings of the NetMonitor object";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->UpdateMonitors(true)";
      result_var=NULL;
      obj=$.programs.gp[0][7].vars[1]$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="true";
	};
       };
      };
      meth_sig="void UpdateMonitors(bool reset_first = false)";
      meth_desc=" old name for UpdateDataTable";
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      name="MethodCall_trialmondataAddBlankRow";
      desc="add a new blank row to the data";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_mon_data->AddBlankRow()";
      result_var=NULL;
      obj=.programs.gp[0][7].vars[0]$$;
      method=DataTable::AddBlankRow;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="int AddBlankRow()";
      meth_desc=" add a new row to the data table, sets read (source) and write (sink) index to this last row (as in ReadItem or WriteItem), so that subsequent data routines refer to this new row, and returns row ";
     };
     MethodCall @[1] {
      name="MethodCall_trialnetmonGetMonVals";
      desc="get the new monitor data from the network and other sources -- this does the main work";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->GetMonVals()";
      result_var=NULL;
      obj=$.programs.gp[0][7].vars[1]$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void GetMonVals()";
      meth_desc=" get all the values and store in current row of data table -- call in program to get new data";
     };
     MethodCall @[2] {
      name="MethodCall_trialmondataWriteClose";
      desc="update views and other things after writing new data to monitor data table";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_mon_data->WriteClose()";
      result_var=NULL;
      obj=$.programs.gp[0][7].vars[0]$;
      method=DataTable::WriteClose;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void WriteClose()";
      meth_desc=" closes up a write operation -- call when done writing data -- performs any post-writing cleanup/closing of files, etc";
     };
     MethodCall @[3] {
      name="MethodCall_networkDMemShare_tatrialmondata1";
      desc="only functional for dmem projects: synchronizes trial data across processes so that all distributed memory processors have the same trial-level data, despite having run only a subset of them each";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->DMem_ShareTrialData(trial_mon_data, 1)";
      result_var=NULL;
      obj=.programs.gp[0][7].args[0]$$;
      method=Network::DMem_ShareTrialData;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="n_rows";
	required=0;
	def_val="1";
	prev_expr=;
	expr {
	 expr="1";
	};
       };
      };
      meth_sig="void DMem_ShareTrialData(DataTable* dt, int n_rows = 1)";
      meth_desc=" share trial data from given datatable across the trial-level dmem communicator (outer loop) -- each processor gets data from all other processors; if called every trial with n_rows = 1, data will be identical to non-dmem; if called at end of epoch with n_rows = -1 data will be grouped by processor but this is more efficient";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="Monitor_Data";
     full_url="https://grey.colorado.edu/emergent/index.php/Monitor_Data";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[8] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[0][8].doc$$: };
    };
    name="LeabraEpochMonitor";
    short_nm="EpcMon";
    tags="Leabra, Std, Monitor";
    desc="monitor epoch-level data from the network to a datatable (EpochOutputData typically) for use in graphing and viewing and further analysis";
    version {
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @[0] {
      name="epoch_netmon";
      items {
       name="items";
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @[0] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[1] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[2] {
	name="avg_sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="avg_sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[3] {
	name="cnt_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="cnt_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[4] {
	name="pct_cor";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="pct_cor";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[5] {
	name="pct_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="pct_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[6] {
	name="avg_norm_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="avg_norm_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[7] {
	name="avg_cos_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="avg_cos_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[8] {
	name="avg_ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="avg_ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[9] {
	name="avg_cycles";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="avg_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[10] {
	name="epoch_time_tot";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[11] {
	name="epoch_time_usr";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[12] {
	name="lay_avg_sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.avg_sse";
	var_label="lay_avg_sse";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[13] {
	name="lay_cnt_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.cnt_err";
	var_label="lay_cnt_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[14] {
	name="lay_pct_cor";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.pct_cor";
	var_label="lay_pct_cor";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[15] {
	name="lay_pct_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.pct_err";
	var_label="lay_pct_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[16] {
	name="lay_avg_norm_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.avg_norm_err";
	var_label="lay_avg_norm_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[17] {
	name="lay_avg_cos_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.avg_cos_err";
	var_label="lay_avg_cos_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[18] {
	name="net_avg_cos_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="avg_cos_diff";
	var_label="net_avg_cos_diff";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[19] {
	name="net_avg_trial_cos_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="avg_trial_cos_diff";
	var_label="net_avg_trial_cos_diff";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[20] {
	name="net_avg_avg_act_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="avg_avg_act_diff";
	var_label="net_avg_avg_act_diff";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[21] {
	name="avg_cos_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.avg_cos_diff";
	var_label="avg_cos_diff";
	name_style=AUTO_NAME;
	max_name_len=13;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[22] {
	name="avg_trial_cos_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.avg_trial_cos_diff";
	var_label="avg_trial_cos_diff";
	name_style=AUTO_NAME;
	max_name_len=13;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[23] {
	name="avg_avg_act_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.avg_avg_act_diff";
	var_label="avg_avg_act_diff";
	name_style=AUTO_NAME;
	max_name_len=13;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[24] {
	name="avg_net_sd";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.avg_net_sd";
	var_label="avg_net_sd";
	name_style=AUTO_NAME;
	max_name_len=13;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[25] {
	name="hog_pct";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.hog_pct";
	var_label="hog_pct";
	name_style=AUTO_NAME;
	max_name_len=13;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[26] {
	name="dead_pct";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.dead_pct";
	var_label="dead_pct";
	name_style=AUTO_NAME;
	max_name_len=13;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[27] {
	name="netmax";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.avg_netin.max";
	var_label="netmax";
	name_style=AUTO_NAME;
	max_name_len=13;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 2 0=0;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[28] {
	name="avg_act";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable=".layers.acts_p_avg";
	var_label="avg_act";
	name_style=AUTO_NAME;
	max_name_len=13;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 2 0=0;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[29] {
	name="netrel";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="prjns.avg_netin_rel";
	var_label="netrel";
	name_style=AUTO_NAME;
	max_name_len=13;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 2 0=0;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$.networks[0]$;
      data=$.data.gp[1][1]$;
      rmv_orphan_cols=1;
     };
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to get data from";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="epoch_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.data.gp[1][1]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="data table to write the epoch data to";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="epoch_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.programs.gp[0][8].objs[0]$$;
      object_scope=NULL;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="network monitor object that contains full specs for what to record and where to get it";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=$.networks[0].epoch_time$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="pointer to the network's epoch-level timer, to record how long it took to process an epoch";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     AssignExpr @[0] {
      name="AssignExpr_epochtimernetworkepochtime";
      desc="get the epoch timer from current network";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer = network.epoch_time";
      result_var=.programs.gp[0][8].vars[2]$$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[1] {
      name="MethodCall_epochnetmonSetDa_hmondatanetwork";
      desc="set data and network on NetMonitor object";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_netmon->SetDataNetwork(epoch_mon_data, network)";
      result_var=NULL;
      obj=.programs.gp[0][8].vars[1]$$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="epoch_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* dt, Network* net)";
      meth_desc=" set both the data table and network -- convenient for programs -- calls ResetDataTableCols too -- don't call if columns are manually added or this is adding additional rows to a table";
     };
     MethodCall @[2] {
      name="MethodCall_epochnetmonCheckConfigfalse";
      desc="check configuration and emit errors/warnings for problems";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_netmon->CheckConfig(false)";
      result_var=NULL;
      obj=$.programs.gp[0][8].vars[1]$;
      method=taBase::CheckConfig;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
     MethodCall @[3] {
      name="MethodCall_epochnetmonUpdateMonitorstrue";
      desc="update the monitor items and data schema based on current settings of NetMonitor";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_netmon->UpdateMonitors(true)";
      result_var=NULL;
      obj=$.programs.gp[0][8].vars[1]$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="true";
	};
       };
      };
      meth_sig="void UpdateMonitors(bool reset_first = false)";
      meth_desc=" old name for UpdateDataTable";
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      name="MethodCall_epochmondataAddBlankRow";
      desc="add a new blank row to the data";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_mon_data->AddBlankRow()";
      result_var=NULL;
      obj=.programs.gp[0][8].vars[0]$$;
      method=DataTable::AddBlankRow;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="int AddBlankRow()";
      meth_desc=" add a new row to the data table, sets read (source) and write (sink) index to this last row (as in ReadItem or WriteItem), so that subsequent data routines refer to this new row, and returns row ";
     };
     MethodCall @[1] {
      name="MethodCall_epochnetmonGetMonVals";
      desc="get the new monitor data and stor it into the data table -- this does the main job here";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_netmon->GetMonVals()";
      result_var=NULL;
      obj=$.programs.gp[0][8].vars[1]$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void GetMonVals()";
      meth_desc=" get all the values and store in current row of data table -- call in program to get new data";
     };
     AssignExpr @[2] {
      name="AssignExpr_epochtimernetworkepochtime";
      desc="get the epoch timer from current network";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer = network.epoch_time";
      result_var=$.programs.gp[0][8].vars[2]$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[3] {
      name="MethodCall_epochmondataSetV_csepochtimetot1";
      desc="set the total time to compute the epoch (epoch_time_tot -- wall clock time) to time used data from network timer";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_mon_data->SetValColName(epoch_timer.used.GetTotSecs(), \"epoch_time_tot\", -1, )";
      result_var=NULL;
      obj=$.programs.gp[0][8].vars[0]$;
      method=DataTable::SetValColName;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="Variant&";
	name="val";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="epoch_timer.used.GetTotSecs()";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="col_name";
	required=1;
	def_val="\"\"";
	prev_expr=;
	expr {
	 expr="\"epoch_time_tot\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="-1";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr=;
	};
       };
      };
      meth_sig="bool SetValColName(Variant& val, taString& col_name, int row, bool quiet = false)";
      meth_desc=" set data of scalar type, in Variant form (any data type, use for Programs), for given column name, row; returns 'true' if valid access and set is successful -- quiet = fail quietly";
     };
     MethodCall @[4] {
      name="MethodCall_epochmondataSetV_csepochtimeusr1";
      desc="set the user process time (cpu time for this process, epoch_time_usr) to time used data from network timer";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_mon_data->SetValColName(epoch_timer.used.GetUsrSecs(), \"epoch_time_usr\", -1, )";
      result_var=NULL;
      obj=$.programs.gp[0][8].vars[0]$;
      method=DataTable::SetValColName;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="Variant&";
	name="val";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="epoch_timer.used.GetUsrSecs()";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="col_name";
	required=1;
	def_val="\"\"";
	prev_expr=;
	expr {
	 expr="\"epoch_time_usr\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="-1";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr=;
	};
       };
      };
      meth_sig="bool SetValColName(Variant& val, taString& col_name, int row, bool quiet = false)";
      meth_desc=" set data of scalar type, in Variant form (any data type, use for Programs), for given column name, row; returns 'true' if valid access and set is successful -- quiet = fail quietly";
     };
     MethodCall @[5] {
      name="MethodCall_epochmondataWriteClose";
      desc="update after writing new data to monitor data table";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_mon_data->WriteClose()";
      result_var=NULL;
      obj=$.programs.gp[0][8].vars[0]$;
      method=DataTable::WriteClose;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void WriteClose()";
      meth_desc=" closes up a write operation -- call when done writing data -- performs any post-writing cleanup/closing of files, etc";
     };
     Comment @[6] {
      name="Comment_NOTEifdoingaTest_atablecorrectly";
      desc="NOTE: if doing a TestEpoch and wanting to include test results in this train epoch log, then see these instructions:
http://grey.colorado.edu/emergent/index.php/Test_Programs
quick summary here:
* Add computed, data_agg, op = LAST items to epoch_netmon to grab from the EpochTestOutputData table.
* duplicate this program, call the new one LeabraEpochMonitor_postest, remove all netmon items for training, leaving only test,
  turn off rmv_orphan_cols flag, and set arg for UpdateMonitors in init_code to false
* in original LeabraEpochMonitor, click OFF flag for WriteClose() line
* in LeabraEpoch add call to LeabraEpochTest, then _posttest after the first LeabraEpochMonitor call.
This will ensure that training data is monitored first, right after the training epoch, and then the test epoch is run,
and the testing data is updated.  The first epoch monitor should have all the items, so that it formats the data table correctly.
 
";
      flags=CAN_REVERT_TO_CODE;
      code_string="// NOTE: if doing a TestEpoch and wanting to include test results in this train epoch log, then see these instructions:
http://grey.colorado.edu/emergent/index.php/Test_Programs
quick summary here:
* Add computed, data_agg, op = LAST items to epoch_netmon to grab from the EpochTestOutputData table.
* duplicate this program, call the new one LeabraEpochMonitor_postest, remove all netmon items for training, leaving only test,
  turn off rmv_orphan_cols flag, and set arg for UpdateMonitors in init_code to false
* in original LeabraEpochMonitor, click OFF flag for WriteClose() line
* in LeabraEpoch add call to LeabraEpochTest, then _posttest after the first LeabraEpochMonitor call.
This will ensure that training data is monitored first, right after the training epoch, and then the test epoch is run,
and the testing data is updated.  The first epoch monitor should have all the items, so that it formats the data table correctly.
 
";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="Monitor_Data";
     full_url="https://grey.colorado.edu/emergent/index.php/Monitor_Data";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[9] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[0][9].doc$$: };
    };
    name="SaveWeights";
    short_nm="SavWts";
    tags="Network, Weights";
    desc="save network's current weight values to file using WriteWeights function, with file name based on project name + batch + epoch values";
    version {
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="tag";
      var_type=T_String;
      string_val="_gui";
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="user-provided tag (startup script will set this!)";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="wts_subdir";
      var_type=T_String;
      string_val=;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="user-provided subdirectory to save weights in";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="fname";
      var_type=T_String;
      string_val="/Users/oreilly/emergent/test/leabra_std.00_0010.wts.gz";
      object_scope=NULL;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="final generated file name -- do not edit!";
      init_from=NULL;
     };
     ProgVar @[3] {
      name="epoch_str";
      var_type=T_String;
      string_val="0010";
      object_scope=NULL;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="string rep of epoch with leading zeros";
      init_from=NULL;
     };
     ProgVar @[4] {
      name="batch_str";
      var_type=T_String;
      string_val="00";
      object_scope=NULL;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="string rep of batch with leading zeros";
      init_from=NULL;
     };
     ProgVar @[5] {
      name="final_tag";
      var_type=T_String;
      string_val=".00_0010";
      object_scope=NULL;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="batch + epoch";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     If @[0] {
      name="If_iftaMiscdmemproc0";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="if (taMisc::dmem_proc > 0)";
      cond {
       expr="taMisc::dmem_proc > 0";
      };
      true_code {
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       ReturnExpr @[0] {
	name="ReturnExpr_return";
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="return ";
	expr {
	 expr=;
	};
       };
      };
     };
     MiscCall @[1] {
      name="MiscCall_batchstrtaMiscLe_osnetworkbatch2";
      desc="get current batch counter for file name, with leading zeros to length 3";
      flags=CAN_REVERT_TO_CODE;
      code_string="batch_str = taMisc::LeadingZeros(network.batch, 2)";
      result_var=.programs.gp[0][9].vars[4]$$;
      object_type=taMisc;
      method=taMisc::LeadingZeros;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=int;
	type="int";
	name="num";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network.batch";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="len";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="2";
	};
       };
      };
     };
     MiscCall @[2] {
      name="MiscCall_epochstrtaMiscLe_osnetworkepoch4";
      desc="get current epoch counter with leading zeros to length 4";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_str = taMisc::LeadingZeros(network.epoch, 4)";
      result_var=.programs.gp[0][9].vars[3]$$;
      object_type=taMisc;
      method=taMisc::LeadingZeros;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=int;
	type="int";
	name="num";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network.epoch";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="len";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="4";
	};
       };
      };
     };
     AssignExpr @[3] {
      name="AssignExpr_finaltagtagbatchstrepochstr";
      desc="string 'tag' to identify the batch, epoch, and other user id info for the weights";
      flags=CAN_REVERT_TO_CODE;
      code_string="final_tag = tag + \".\" + batch_str + \"_\" + epoch_str";
      result_var=.programs.gp[0][9].vars[5]$$;
      expr {
       expr="tag + \".\" + batch_str + \"_\" + epoch_str";
      };
     };
     MethodCall @[4] {
      name="MethodCall_fnamenetworkGetF_gwtssubdirfalse";
      desc="get a file name based on the project's current file name, for saving the weights";
      flags=CAN_REVERT_TO_CODE;
      code_string="fname = network->GetFileNameFmProject(\".wts.gz\", final_tag, wts_subdir, false)";
      result_var=.programs.gp[0][9].vars[2]$$;
      obj=.programs.gp[0][9].args[0]$$;
      method=taBase::GetFileNameFmProject;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="taString&";
	name="ext";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="\".wts.gz\"";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="tag";
	required=0;
	def_val="\"\"";
	prev_expr=;
	expr {
	 expr="final_tag";
	};
       };
       ProgArg @[2] {
	arg_type=const_taString_ref;
	type="taString&";
	name="subdir";
	required=0;
	def_val="\"\"";
	prev_expr=;
	expr {
	 expr="wts_subdir";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="dmem_proc_no";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="false";
	};
       };
      };
      meth_sig="taString GetFileNameFmProject(taString& ext, taString& tag, taString& subdir, bool dmem_proc_no = false)";
      meth_desc=" get file name from project file name -- useful for saving files associated with the project; ext = extension; tag = additional tag; subdir = additional directory after any existing in project name; fname = proj->base_name (subdir) + tag + ext; if dmem_proc_no, add dmem proc no to file name. empty if project not found";
     };
     MethodCall @[5] {
      name="MethodCall_networkSaveWeigh_meNetworkNETFMT";
      desc="save the weights to that file name";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->SaveWeights(fname, Network::NET_FMT)";
      result_var=NULL;
      obj=$.programs.gp[0][9].args[0]$;
      method=Network::SaveWeights;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="taString&";
	name="fname";
	required=0;
	def_val="\"\"";
	prev_expr=;
	expr {
	 expr="fname";
	};
       };
       ProgArg @[1] {
	arg_type=Network::WtSaveFormat;
	type="Network::WtSaveFormat";
	name="fmt";
	required=0;
	def_val="Network::NET_FMT";
	prev_expr=;
	expr {
	 expr="Network::NET_FMT";
	};
       };
      };
      meth_sig="void SaveWeights(taString& fname, Network::WtSaveFormat fmt = NET_FMT)";
      meth_desc=" write weight values out in a simple ordered list of weights (optionally in binary fmt) (leave fname empty to pull up file chooser)";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="SaveWeights";
     full_url="https://grey.colorado.edu/emergent/index.php/SaveWeights";
     text_size=1;
     text=;
     html_text=;
    };
   };
  };
  Program_Group @.gp[1] {
   name="LeabraAll_Test";
   el_typ=Program;
   el_def=0;
   tags="Leabra, Std, All, Test";
   desc="The full set of programs for testing a standard Leabra network (starting with Epoch)";
   debug_mode=0;
   Program @[0] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[1][0].doc$$: };
    };
    name="LeabraEpochTest";
    short_nm="EpcTest";
    tags="Leabra, Std, Test";
    desc="sets testing flag, iterates over all of the items in a data table and calls LeabraTestTrial process on them";
    version {
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=0;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to operate on";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.data.gp[0][0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="table of patterns to present to the network, one row at a time";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="data_loop_order";
      var_type=T_HardEnum;
      int_val=0;
      object_scope=NULL;
      hard_enum_type=DataLoop::Order;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="controls the order in which events (rows of the input data datatable) are presented to the network
(SEQUENTIAL, PERMUTED, RANDOM)";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="trial";
      var_type=T_Int;
      int_val=0;
      object_scope=NULL;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current trial (event) within the epoch -- increments automatically";
      init_from=NULL;
     };
     ProgVar @[3] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.data.gp[1][2]$$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="trial-level output data -- we reset it every epoch by default, so it just contains last epoch of data";
      init_from=NULL;
     };
     ProgVar @[4] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=$.networks[0].epoch_time$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="timer to record time required to perform one epoch of processing (object is on network -- this is a pointer to it)";
      init_from=NULL;
     };
     ProgVar @[5] {
      name="data_loop_index";
      var_type=T_Int;
      int_val=6;
      object_scope=NULL;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="index counter for the looping over items in the input_data datatable (not always the same as trial counter, depending on distributed memory computation)";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      name="NetCounterInit_NetCounterInittrial";
      desc="initialize trial counter (local variable and in the network)";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: trial";
      network_var=.programs.gp[1][0].args[0]$$;
      local_ctr_var=.programs.gp[1][0].vars[2]$$;
      counter=Network::trial;
      update_after=0;
     };
     AssignExpr @[1] {
      name="AssignExpr_epochtimernetworkepochtime";
      desc="get pointer to epoch timer object on network";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer = network.epoch_time";
      result_var=.programs.gp[1][0].vars[4]$$;
      expr {
       expr="network.epoch_time";
      };
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      name="NetCounterInit_NetCounterInittrial";
      desc="initialize trial counter (local variable and in the network)";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: trial";
      network_var=$.programs.gp[1][0].args[0]$;
      local_ctr_var=$.programs.gp[1][0].vars[2]$;
      counter=Network::trial;
      update_after=0;
     };
     MemberAssign @[1] {
      name="MemberAssign_networktrainmodeNetworkTEST";
      desc="set to testing mode";
      flags=NEW_EL|CAN_REVERT_TO_CODE;
      code_string="network.train_mode = Network::TEST";
      obj=$.programs.gp[1][0].args[0]$;
      path="train_mode";
      expr {
       expr="Network::TEST";
      };
      update_after=0;
     };
     AssignExpr @[2] {
      name="AssignExpr_epochtimernetworkepochtime";
      desc="get pointer to epoch timer object on network";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer = network.epoch_time";
      result_var=$.programs.gp[1][0].vars[4]$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[3] {
      name="MethodCall_epochtimerStartTimertrue";
      desc="start the epoch timer to record computation time per epoch";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer->StartTimer(true)";
      result_var=NULL;
      obj=$.programs.gp[1][0].vars[4]$;
      method=TimeUsed::StartTimer;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	prev_expr=;
	expr {
	 expr="true";
	};
       };
      };
      meth_sig="void StartTimer(bool reset_used = true)";
      meth_desc=" record the current time as the starting time, and optionally reset the time used information";
     };
     MethodCall @[4] {
      name="MethodCall_trialmondataResetData";
      desc="reset trial-level monitor data every epoch, so it reflects only the most recent epoch's worth of data (turn flags OFF to accumulate trial data across entire training run)";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_mon_data->ResetData()";
      result_var=NULL;
      obj=.programs.gp[1][0].vars[3]$$;
      method=DataTable::ResetData;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void ResetData()";
      meth_desc=" deletes all the data (rows), but keeps the column structure -- this cannot be undone!";
     };
     NetDataLoop @[5] {
      name="NetDataLoop_NetDataLoopSEQUE_ardatalooporder";
      desc="iterates over the events/rows of input_data, according to data_loop_order variable";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Data Loop (SEQUENTIAL):  table=input_data  index=data_loop_index  order_var=data_loop_order ";
      loop_code {
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	name="ProgramCall_LeabraTrialTestnetworkinputdata";
	desc="run the trial program, passing network and input_data";
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraTrialTest(network, input_data)";
	prog_args {
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
	target=.programs.gp[1][1]$$;
	targ_ld_init="*LeabraTrial*";
       };
      };
      data_var=.programs.gp[1][0].vars[0]$$;
      index_var=.programs.gp[1][0].vars[5]$$;
      order_var=.programs.gp[1][0].vars[1]$$;
      order=SEQUENTIAL;
      update_after=0;
      dmem_nprocs=1;
      dmem_this_proc=0;
      grouped=0;
      group_col 9 0="Group";
      group_index_var=NULL;
      group_order_var=NULL;
      group_order=PERMUTED;
      group_idx_list{       };
     };
     If @[6] {
      name="If_ifnetworkwtupdateNetworkBATCH";
      desc="if full batch mode, update only at end of epoch";
      flags=CAN_REVERT_TO_CODE;
      code_string="if (network.wt_update == Network::BATCH)";
      cond {
       expr="network.wt_update == Network::BATCH";
      };
      true_code {
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	name="MethodCall_networkComputeWeights";
	desc="final update of weights based on accumulated changes";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Compute_Weights()";
	result_var=NULL;
	obj=$.programs.gp[1][0].args[0]$;
	method=Network::Compute_Weights;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Compute_Weights()";
	meth_desc=" update weights for whole net: calls DMem_SumDWts before doing update if in dmem mode";
       };
      };
     };
     MethodCall @[7] {
      name="MethodCall_networkComputeEpochStats";
      desc="network accumulates some core statistics over the epoch -- this finalizes that process and computes summary stats";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Compute_EpochStats()";
      result_var=NULL;
      obj=$.programs.gp[1][0].args[0]$;
      method=LeabraNetwork::Compute_EpochStats;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Compute_EpochStats()";
      meth_desc=" compute epoch-level statistics; calls DMem_ComputeAggs (if dmem) and EpochSSE -- specific algos may add more compute epoch-level statistics, including SSE, AvgExtRew and AvgCycles";
     };
     MethodCall @[8] {
      name="MethodCall_epochtimerEndTimer";
      desc="done with the computation in the epoch -- record time it took";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer->EndTimer()";
      result_var=NULL;
      obj=$.programs.gp[1][0].vars[4]$;
      method=TimeUsed::EndTimer;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void EndTimer()";
      meth_desc=" record the current time as the ending time, and compute difference as the time used";
     };
     ProgramCall @[9] {
      name="ProgramCall_LeabraEpochMonitorTestnetwork";
      desc="run program that records data from network and possibly other sources about the epoch";
      flags=CAN_REVERT_TO_CODE;
      code_string="LeabraEpochMonitorTest(network)";
      prog_args {
       name="prog_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      target=.programs.gp[1][6]$$;
      targ_ld_init="*LeabraEpochMonitor*";
     };
     MemberAssign @[10] {
      name="MemberAssign_networktrainmodeNetworkTRAIN";
      desc="set back to training mode";
      flags=NEW_EL|CAN_REVERT_TO_CODE;
      code_string="network.train_mode = Network::TRAIN";
      obj=$.programs.gp[1][0].args[0]$;
      path="train_mode";
      expr {
       expr="Network::TRAIN";
      };
      update_after=0;
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraEpoch";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraEpoch";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[1] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[1][1].doc$$: };
    };
    name="LeabraTrialTest";
    short_nm="TrlTst";
    tags="Leabra, Std";
    desc="Leabra processing of a single input/output event or external information, over a single alpha frequency cycle (100 msec / 10 Hz) -- iterates over gamma-frequency (25 msec / 40 Hz) quarter-trials";
    version {
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=0;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to operate on -- typically set by higher-level calling programs";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.data.gp[0][0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="datatable containing training input/output patterns";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=0;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="determines whether to update any network view displays after trial is completed";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      name="LocalVars_LocalVars1vars";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (1 vars)";
      local_vars {
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
       ProgVar @[0] {
	name="qtr";
	var_type=T_Int;
	int_val=0;
	object_scope=NULL;
	flags=LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
      };
     };
     If @[1] {
      name="If_ifnetworkCompute_stnetworktrial1";
      desc="test if it is time to update the weight values from delta weights (dWt) computed over trials";
      flags=CAN_REVERT_TO_CODE;
      code_string="if (network.Compute_Weights_Test(network.trial+1))";
      cond {
       expr="network.Compute_Weights_Test(network.trial+1)";
      };
      true_code {
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	name="MethodCall_networkComputeWeights";
	desc="update weights -- do this at start instead of end, so that dwt is valid";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Compute_Weights()";
	result_var=NULL;
	obj=.programs.gp[1][1].args[0]$$;
	method=Network::Compute_Weights;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Compute_Weights()";
	meth_desc=" update weights for whole net: calls DMem_SumDWts before doing update if in dmem mode";
       };
      };
     };
     MethodCall @[2] {
      name="MethodCall_networkTrialInit";
      desc="initializes various counters at start of trial";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Trial_Init()";
      result_var=NULL;
      obj=$.programs.gp[1][1].args[0]$;
      method=LeabraNetwork::Trial_Init;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Trial_Init()";
      meth_desc=" initialize at start of trial (init specs, Decay state)";
     };
     Comment @[3] {
      name="Comment_notecanapplyinpu_Quarterasneeded";
      desc="== note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
      flags=CAN_REVERT_TO_CODE;
      code_string="// == note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
     };
     MethodCall @[4] {
      name="MethodCall_networkInitInputData";
      desc="resets input data, before getting new external inputs data from apply inputs call";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Init_InputData()";
      result_var=NULL;
      obj=$.programs.gp[1][1].args[0]$;
      method=Network::Init_InputData;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Init_InputData()";
      meth_desc=" Initializes external and target inputs";
     };
     ProgramCall @[5] {
      name="ProgramCall_ApplyInputsTestnetworkinputdata";
      desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
      flags=CAN_REVERT_TO_CODE;
      code_string="ApplyInputsTest(network, input_data)";
      prog_args {
       name="prog_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr="network";
	expr {
	 expr="network";
	};
       };
       ProgArg @[1] {
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="input_data";
	};
       };
      };
      target=.programs.gp[1][4]$$;
      targ_ld_init="*ApplyInputs*";
     };
     ForLoop @[6] {
      name="ForLoop_forqtr0qtr4qtr";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="for (qtr = 0; qtr < 4; qtr++)";
      loop_code {
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	name="ProgramCall_LeabraQuarterTes_etworkinputdata";
	desc="run the quarter program (which iterates over cyles of network activation updating) for each quarter";
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraQuarterTest(network, input_data)";
	prog_args {
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
	target=.programs.gp[1][2]$$;
	targ_ld_init="*LeabraQuarter*";
       };
      };
      init {
       expr="qtr = 0";
      };
      test {
       expr="qtr < 4";
      };
      iter {
       expr="qtr++";
      };
     };
     MethodCall @[7] {
      name="MethodCall_networkTrialFinal";
      desc="after the trial is over, do final computations";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Trial_Final()";
      result_var=NULL;
      obj=$.programs.gp[1][1].args[0]$;
      method=LeabraNetwork::Trial_Final;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Trial_Final()";
      meth_desc=" do final processing after trial: Compute_AbsRelNetin";
     };
     ProgramCall @[8] {
      name="ProgramCall_LeabraTrialMonitorTestnetwork";
      desc="records data about the trial-level processing to a datatable for graphing/processing";
      flags=CAN_REVERT_TO_CODE;
      code_string="LeabraTrialMonitorTest(network)";
      prog_args {
       name="prog_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      target=.programs.gp[1][5]$$;
      targ_ld_init="*LeabraTrialMonitor*";
     };
     NetUpdateView @[9] {
      name="NetUpdateView_NetUpdateView";
      desc="update the network view(s) (only if update_net_view is true)";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Update View";
      network_var=$.programs.gp[1][1].args[0]$;
      update_var=.programs.gp[1][1].vars[0]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraTrial";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraTrial";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[2] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[1][2].doc$$: };
    };
    name="LeabraQuarterTest";
    short_nm="QrtTst";
    tags="Leabra, Std";
    desc="iterates over cycles of activation updating for a gamma-frequency (25 msec / 40 Hz) quarter of an alpha frequency (100 msec / 10 Hz) trial";
    version {
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=0;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.data.gp[0][0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="cycle";
      var_type=T_Int;
      int_val=0;
      object_scope=NULL;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current cycle of settling (local loop counter)";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="if true, will update network views at end of settling";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      name="NetCounterInit_NetCounterInitcycle";
      desc="initialize local cycle counter and corresponding counter on network";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: cycle";
      network_var=.programs.gp[1][2].args[0]$$;
      local_ctr_var=.programs.gp[1][2].vars[0]$$;
      counter=Network::cycle;
      update_after=0;
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      name="LocalVars_LocalVars2vars";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (2 vars)";
      local_vars {
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
       ProgVar @[0] {
	name="cycle_max";
	var_type=T_Int;
	int_val=0;
	object_scope=NULL;
	flags=LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
       ProgVar @[1] {
	name="cyc";
	var_type=T_Int;
	int_val=0;
	object_scope=NULL;
	flags=LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
      };
     };
     Comment @[1] {
      name="Comment_notecanapplyinpu_Quarterasneeded";
      desc="== note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
      flags=CAN_REVERT_TO_CODE;
      code_string="// == note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
     };
     MethodCall @[2] {
      name="MethodCall_networkInitInputData";
      desc="resets input data, before getting new external inputs data from apply inputs call";
      flags=OFF|CAN_REVERT_TO_CODE;
      code_string="network->Init_InputData()";
      result_var=NULL;
      obj=$.programs.gp[1][2].args[0]$;
      method=Network::Init_InputData;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Init_InputData()";
      meth_desc=" Initializes external and target inputs";
     };
     ProgramCall @[3] {
      name="ProgramCall_programname";
      desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
      flags=OFF|CAN_REVERT_TO_CODE;
      code_string="program_name()";
      prog_args {
       name="prog_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=LeabraNetwork;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr="network";
	expr {
	 expr="network";
	};
       };
       ProgArg @[1] {
	arg_type=bool;
	type="bool";
	name="grab_camera_img";
	required=1;
	def_val=;
	prev_expr="input_data";
	expr {
	 expr=;
	};
       };
      };
      target=NULL;
      targ_ld_init="*ApplyInputs*";
     };
     MethodCall @[4] {
      name="MethodCall_networkQuarterInit";
      desc="initializes various counters at start of settling";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Quarter_Init()";
      result_var=NULL;
      obj=$.programs.gp[1][2].args[0]$;
      method=LeabraNetwork::Quarter_Init;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Quarter_Init()";
      meth_desc=" initialize network for quarter-level processing (hard clamp, netscale)";
     };
     MethodCall @[5] {
      name="MethodCall_cyclemaxnetworkCycleRunMax";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="cycle_max = network->CycleRunMax()";
      result_var=.programs.gp[1][2].prog_code[0].local_vars[0]$$;
      obj=$.programs.gp[1][2].args[0]$;
      method=LeabraNetwork::CycleRunMax;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="int CycleRunMax()";
      meth_desc=" max loop counter for running cycles in a gamma quarter of processing, taking into account the fact that threading can run multiple cycles per Cycle_Run call if quarter flag is set";
     };
     ForLoop @[6] {
      name="ForLoop_forcyc0cyccyclemaxcyc";
      desc="// the main loop over cycles of updating";
      flags=CAN_REVERT_TO_CODE;
      code_string="for (cyc=0; cyc<cycle_max; cyc++)";
      loop_code {
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	name="ProgramCall_LeabraCycleTestnetwork";
	desc="run the cycle program -- can run multiple cycles at a time due to threading";
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraCycleTest(network)";
	prog_args {
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="network";
	  };
	 };
	};
	target=.programs.gp[1][3]$$;
	targ_ld_init="*LeabraCycle*";
       };
       AssignExpr @[1] {
	name="AssignExpr_cyclenetworkcycle";
	desc="grab the updated cycle count";
	flags=CAN_REVERT_TO_CODE;
	code_string="cycle = network.cycle";
	result_var=$.programs.gp[1][2].vars[0]$;
	expr {
	 expr="network.cycle";
	};
       };
      };
      init {
       expr="cyc=0";
      };
      test {
       expr="cyc<cycle_max";
      };
      iter {
       expr="cyc++";
      };
     };
     MethodCall @[7] {
      name="MethodCall_networkQuarterFinal";
      desc="perform final operations at end of settling (storing final activations, etc)";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Quarter_Final()";
      result_var=NULL;
      obj=$.programs.gp[1][2].args[0]$;
      method=LeabraNetwork::Quarter_Final;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Quarter_Final()";
      meth_desc=" do final processing after each quarter: ";
     };
     MethodCall @[8] {
      name="MethodCall_networkComputePhaseStats";
      desc="compute appropriate stats for each phase (MinusStats, PlusStats)";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Compute_PhaseStats()";
      result_var=NULL;
      obj=$.programs.gp[1][2].args[0]$;
      method=LeabraNetwork::Compute_PhaseStats;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Compute_PhaseStats()";
      meth_desc=" compute MinusStats at the end of the minus phase, and PlusStats at the end of the plus phase -- this is preferred over the previous implementation of calling TrialStats only at the end of the minus phase, which required targets to be present in the minus phase, which is not always the case";
     };
     NetUpdateView @[9] {
      name="NetUpdateView_NetUpdateView";
      desc="update network views, if update_net_view == true";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Update View";
      network_var=$.programs.gp[1][2].args[0]$;
      update_var=.programs.gp[1][2].vars[1]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraQuarter";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraQuarter";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[3] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[1][3].doc$$: };
    };
    name="LeabraCycleTest";
    short_nm="CycTest";
    tags="Leabra, Std";
    desc="runs one cycle of leabra processing (updating net inputs and activations)";
    version {
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=0;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=0;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="determines whether network views will be updated on a cycle-by-cycle basis (slow, but often quite useful for seeing how processing is proceeding)";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      name="MethodCall_networkCycleRun";
      desc="this does all the standard leabra processing for one cycle of activation updating";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Cycle_Run()";
      result_var=NULL;
      obj=.programs.gp[1][3].args[0]$$;
      method=LeabraNetwork::Cycle_Run;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Cycle_Run()";
      meth_desc=" compute cycle(s) of updating: netinput, inhibition, activations -- multiple cycles can be run depending on lthreads.n_cycles setting and whether multiple threads are actually being used -- see lthreads.n_threads_act";
     };
     NetUpdateView @[1] {
      name="NetUpdateView_NetUpdateView";
      desc="update network views if update_net_view == true";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Update View";
      network_var=$.programs.gp[1][3].args[0]$;
      update_var=.programs.gp[1][3].vars[0]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraCycle";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraCycle";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[4] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[1][4].doc$$: };
    };
    name="ApplyInputsTest";
    short_nm="InTest";
    tags="Network, InputData, Apply";
    desc="apply the current input data to the network as external input and target values";
    version {
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=LayerWriter;
     el_def=0;
     LayerWriter @[0] {
      name="LayerWriter_0";
      data=$.data.gp[0][0]$;
      network=$.networks[0]$;
      layer_data {
       name="layer_data";
       el_typ=LayerWriterEl;
       el_def=0;
       LayerWriterEl @[0] {
	col_name="Output";
	net_target=LAYER;
	layer_name="Output";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=TARG;
	noise {name="noise": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[1] {
	col_name="Name";
	net_target=TRIAL_NAME;
	layer_name="Name";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=0;
	noise {name="noise": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[2] {
	col_name="Input";
	net_target=LAYER;
	layer_name="Input";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=EXT;
	noise {name="noise": type=NONE: mean=0: var=0.5: par=1: };
       };
      };
     };
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to apply inputs to -- typically set by calling program";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.data.gp[0][0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="input datatable containing input/output patterns";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="LayerWriter_0";
      var_type=T_Object;
      object_type=LayerWriter;
      object_val=.programs.gp[1][4].objs[0]$$;
      object_scope=NULL;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="this is a pointer to the LayerWriter object in objs -- edit that object to determine how information is presented to the network";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      name="MethodCall_LayerWriter0SetD_nputdatanetwork";
      desc="sets the datatable and network for the layer writer, so it knows what to write to";
      flags=CAN_REVERT_TO_CODE;
      code_string="LayerWriter_0->SetDataNetwork(input_data, network)";
      result_var=NULL;
      obj=.programs.gp[1][4].vars[0]$$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="db";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* db, Network* net)";
      meth_desc=" set the data table and network pointers -- convenience function for programs ";
     };
     MethodCall @[1] {
      name="MethodCall_LayerWriter0AutoConfigtrue";
      desc="configure to fit the network and input data -- this may cause spurious warning messages and problems in some cases so just turn it OFF if necessary";
      flags=CAN_REVERT_TO_CODE;
      code_string="LayerWriter_0->AutoConfig(true)";
      result_var=NULL;
      obj=$.programs.gp[1][4].vars[0]$;
      method=LayerWriter::AutoConfig;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="remove_unused";
	required=0;
	def_val="true";
	prev_expr="true";
	expr {
	 expr="true";
	};
       };
      };
      meth_sig="void AutoConfig(bool remove_unused = true)";
      meth_desc=" do a 'best guess' configuration of items by matching up like-named data Channels and network Layers -- if remove_unused is true, then layer writer elements that existed previously but were not found in input data and network are removed";
     };
     MethodCall @[2] {
      name="MethodCall_LayerWriter0CheckConfigfalse";
      desc="check the configuration of the layer writer -- will emit warnings and errors for missing or misconfigured items";
      flags=CAN_REVERT_TO_CODE;
      code_string="LayerWriter_0->CheckConfig(false)";
      result_var=NULL;
      obj=$.programs.gp[1][4].vars[0]$;
      method=taList_impl::CheckConfig;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      name="MethodCall_LayerWriter0SetD_nputdatanetwork";
      desc="sets the datatable and network for the layer writer, so it knows what to write to";
      flags=CAN_REVERT_TO_CODE;
      code_string="LayerWriter_0->SetDataNetwork(input_data, network)";
      result_var=NULL;
      obj=$.programs.gp[1][4].vars[0]$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="db";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* db, Network* net)";
      meth_desc=" set the data table and network pointers -- convenience function for programs ";
     };
     MethodCall @[1] {
      name="MethodCall_LayerWriter0ApplyInputData";
      desc="apply inputs to the network!  layer writer has all the key specs";
      flags=CAN_REVERT_TO_CODE;
      code_string="LayerWriter_0->ApplyInputData()";
      result_var=NULL;
      obj=$.programs.gp[1][4].vars[0]$;
      method=LayerWriter::ApplyInputData;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="bool ApplyInputData()";
      meth_desc=" apply data to the layers, using the network's current context settings (TEST,TRAIN,etc) -- returns success";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="ApplyInputs";
     full_url="https://grey.colorado.edu/emergent/index.php/ApplyInputs";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[5] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[1][5].doc$$: };
    };
    name="LeabraTrialMonitorTest";
    short_nm="TrlMonTst";
    tags="Leabra, Std, Monitor";
    desc="monitor trial-level data from the network (and potentially other sources) -- stores results in datatable (TrialOutputData typically) that can be used for graph/grid views and further analysis ";
    version {
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @[0] {
      name="trial_netmon";
      items {
       name="items";
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @[0] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[1] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[2] {
	name="train_mode";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="train_mode";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[3] {
	name="group";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="group";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[4] {
	name="trial";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="trial";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[5] {
	name="tick";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="tick";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[6] {
	name="time";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="time";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[7] {
	name="trial_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="trial_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[8] {
	name="group_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="group_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[9] {
	name="output_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[10] {
	name="rt_cycles";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="rt_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[11] {
	name="sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[12] {
	name="norm_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="norm_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[13] {
	name="cos_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="cos_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[14] {
	name="ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[15] {
	name="lay_sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.sse";
	var_label="lay_sse";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[16] {
	name="lay_bin_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.bin_err";
	var_label="lay_bin_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[17] {
	name="lay_norm_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.norm_err";
	var_label="lay_norm_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[18] {
	name="lay_cos_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.cos_err";
	var_label="lay_cos_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[19] {
	name="lay_net_sd";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.net_sd";
	var_label="lay_net_sd";
	name_style=AUTO_NAME;
	max_name_len=13;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$.networks[0]$;
      data=$.data.gp[1][2]$;
      rmv_orphan_cols=1;
     };
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to record data from";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.data.gp[1][2]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="data table to record trial-level data to (this program writes new data to this table!)";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="trial_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.programs.gp[1][5].objs[0]$$;
      object_scope=NULL;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="pointer to the NetMonitor object in objs secton of this program that contains configuration for what to record and where to get it";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      name="MethodCall_trialnetmonSetDa_lmondatanetwork";
      desc="set the network and datatable for the NetMonitor";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->SetDataNetwork(trial_mon_data, network)";
      result_var=NULL;
      obj=.programs.gp[1][5].vars[1]$$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* dt, Network* net)";
      meth_desc=" set both the data table and network -- convenient for programs -- calls ResetDataTableCols too -- don't call if columns are manually added or this is adding additional rows to a table";
     };
     MethodCall @[1] {
      name="MethodCall_trialnetmonCheckConfigfalse";
      desc="check the configuration of the network monitor -- will emit warnings and errors for misconfigurations";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->CheckConfig(false)";
      result_var=NULL;
      obj=$.programs.gp[1][5].vars[1]$;
      method=taBase::CheckConfig;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
     MethodCall @[2] {
      name="MethodCall_trialnetmonUpdateMonitorstrue";
      desc="update the monitor items and data schema based on current settings of the NetMonitor object";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->UpdateMonitors(true)";
      result_var=NULL;
      obj=$.programs.gp[1][5].vars[1]$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="true";
	};
       };
      };
      meth_sig="void UpdateMonitors(bool reset_first = false)";
      meth_desc=" old name for UpdateDataTable";
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      name="MethodCall_trialmondataAddBlankRow";
      desc="add a new blank row to the data";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_mon_data->AddBlankRow()";
      result_var=NULL;
      obj=.programs.gp[1][5].vars[0]$$;
      method=DataTable::AddBlankRow;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="int AddBlankRow()";
      meth_desc=" add a new row to the data table, sets read (source) and write (sink) index to this last row (as in ReadItem or WriteItem), so that subsequent data routines refer to this new row, and returns row ";
     };
     MethodCall @[1] {
      name="MethodCall_trialnetmonGetMonVals";
      desc="get the new monitor data from the network and other sources -- this does the main work";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->GetMonVals()";
      result_var=NULL;
      obj=$.programs.gp[1][5].vars[1]$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void GetMonVals()";
      meth_desc=" get all the values and store in current row of data table -- call in program to get new data";
     };
     MethodCall @[2] {
      name="MethodCall_trialmondataWriteClose";
      desc="update views and other things after writing new data to monitor data table";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_mon_data->WriteClose()";
      result_var=NULL;
      obj=$.programs.gp[1][5].vars[0]$;
      method=DataTable::WriteClose;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void WriteClose()";
      meth_desc=" closes up a write operation -- call when done writing data -- performs any post-writing cleanup/closing of files, etc";
     };
     MethodCall @[3] {
      name="MethodCall_networkDMemShare_tatrialmondata1";
      desc="only functional for dmem projects: synchronizes trial data across processes so that all distributed memory processors have the same trial-level data, despite having run only a subset of them each";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->DMem_ShareTrialData(trial_mon_data, 1)";
      result_var=NULL;
      obj=.programs.gp[1][5].args[0]$$;
      method=Network::DMem_ShareTrialData;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="n_rows";
	required=0;
	def_val="1";
	prev_expr=;
	expr {
	 expr="1";
	};
       };
      };
      meth_sig="void DMem_ShareTrialData(DataTable* dt, int n_rows = 1)";
      meth_desc=" share trial data from given datatable across the trial-level dmem communicator (outer loop) -- each processor gets data from all other processors; if called every trial with n_rows = 1, data will be identical to non-dmem; if called at end of epoch with n_rows = -1 data will be grouped by processor but this is more efficient";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="Monitor_Data";
     full_url="https://grey.colorado.edu/emergent/index.php/Monitor_Data";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[6] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[1][6].doc$$: };
    };
    name="LeabraEpochMonitorTest";
    short_nm="EpcMonTst";
    tags="Leabra, Std, Monitor";
    desc="monitor epoch-level data from the network to a datatable (EpochOutputData typically) for use in graphing and viewing and further analysis";
    version {
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @[0] {
      name="epoch_netmon";
      items {
       name="items";
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @[0] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[1] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[2] {
	name="avg_sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="avg_sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[3] {
	name="cnt_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="cnt_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[4] {
	name="pct_cor";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="pct_cor";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[5] {
	name="pct_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="pct_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[6] {
	name="avg_norm_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="avg_norm_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[7] {
	name="avg_cos_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="avg_cos_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[8] {
	name="avg_ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="avg_ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[9] {
	name="avg_cycles";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="avg_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[10] {
	name="epoch_time_tot";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[11] {
	name="epoch_time_usr";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[12] {
	name="lay_avg_sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.avg_sse";
	var_label="lay_avg_sse";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[13] {
	name="lay_cnt_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.cnt_err";
	var_label="lay_cnt_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[14] {
	name="lay_pct_cor";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.pct_cor";
	var_label="lay_pct_cor";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[15] {
	name="lay_pct_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.pct_err";
	var_label="lay_pct_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[16] {
	name="lay_avg_norm_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.avg_norm_err";
	var_label="lay_avg_norm_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[17] {
	name="lay_avg_cos_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.avg_cos_err";
	var_label="lay_avg_cos_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[18] {
	name="avg_net_sd";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.avg_net_sd";
	var_label="avg_net_sd";
	name_style=AUTO_NAME;
	max_name_len=13;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$.networks[0]$;
      data=.data.gp[1][3]$$;
      rmv_orphan_cols=1;
     };
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to get data from";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="epoch_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.data.gp[1][3]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="data table to write the epoch data to";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="epoch_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.programs.gp[1][6].objs[0]$$;
      object_scope=NULL;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="network monitor object that contains full specs for what to record and where to get it";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=$.networks[0].epoch_time$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="pointer to the network's epoch-level timer, to record how long it took to process an epoch";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     AssignExpr @[0] {
      name="AssignExpr_epochtimernetworkepochtime";
      desc="get the epoch timer from current network";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer = network.epoch_time";
      result_var=.programs.gp[1][6].vars[2]$$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[1] {
      name="MethodCall_epochnetmonSetDa_hmondatanetwork";
      desc="set data and network on NetMonitor object";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_netmon->SetDataNetwork(epoch_mon_data, network)";
      result_var=NULL;
      obj=.programs.gp[1][6].vars[1]$$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="epoch_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* dt, Network* net)";
      meth_desc=" set both the data table and network -- convenient for programs -- calls ResetDataTableCols too -- don't call if columns are manually added or this is adding additional rows to a table";
     };
     MethodCall @[2] {
      name="MethodCall_epochnetmonCheckConfigfalse";
      desc="check configuration and emit errors/warnings for problems";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_netmon->CheckConfig(false)";
      result_var=NULL;
      obj=$.programs.gp[1][6].vars[1]$;
      method=taBase::CheckConfig;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
     MethodCall @[3] {
      name="MethodCall_epochnetmonUpdateMonitorstrue";
      desc="update the monitor items and data schema based on current settings of NetMonitor";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_netmon->UpdateMonitors(true)";
      result_var=NULL;
      obj=$.programs.gp[1][6].vars[1]$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="true";
	};
       };
      };
      meth_sig="void UpdateMonitors(bool reset_first = false)";
      meth_desc=" old name for UpdateDataTable";
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      name="MethodCall_epochmondataAddBlankRow";
      desc="add a new blank row to the data";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_mon_data->AddBlankRow()";
      result_var=NULL;
      obj=.programs.gp[1][6].vars[0]$$;
      method=DataTable::AddBlankRow;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="int AddBlankRow()";
      meth_desc=" add a new row to the data table, sets read (source) and write (sink) index to this last row (as in ReadItem or WriteItem), so that subsequent data routines refer to this new row, and returns row ";
     };
     MethodCall @[1] {
      name="MethodCall_epochnetmonGetMonVals";
      desc="get the new monitor data and stor it into the data table -- this does the main job here";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_netmon->GetMonVals()";
      result_var=NULL;
      obj=$.programs.gp[1][6].vars[1]$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void GetMonVals()";
      meth_desc=" get all the values and store in current row of data table -- call in program to get new data";
     };
     AssignExpr @[2] {
      name="AssignExpr_epochtimernetworkepochtime";
      desc="get the epoch timer from current network";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer = network.epoch_time";
      result_var=$.programs.gp[1][6].vars[2]$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[3] {
      name="MethodCall_epochmondataSetV_csepochtimetot1";
      desc="set the total time to compute the epoch (epoch_time_tot -- wall clock time) to time used data from network timer";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_mon_data->SetValColName(epoch_timer.used.GetTotSecs(), \"epoch_time_tot\", -1, )";
      result_var=NULL;
      obj=$.programs.gp[1][6].vars[0]$;
      method=DataTable::SetValColName;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="Variant&";
	name="val";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="epoch_timer.used.GetTotSecs()";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="col_name";
	required=1;
	def_val="\"\"";
	prev_expr=;
	expr {
	 expr="\"epoch_time_tot\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="-1";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr=;
	};
       };
      };
      meth_sig="bool SetValColName(Variant& val, taString& col_name, int row, bool quiet = false)";
      meth_desc=" set data of scalar type, in Variant form (any data type, use for Programs), for given column name, row; returns 'true' if valid access and set is successful -- quiet = fail quietly";
     };
     MethodCall @[4] {
      name="MethodCall_epochmondataSetV_csepochtimeusr1";
      desc="set the user process time (cpu time for this process, epoch_time_usr) to time used data from network timer";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_mon_data->SetValColName(epoch_timer.used.GetUsrSecs(), \"epoch_time_usr\", -1, )";
      result_var=NULL;
      obj=$.programs.gp[1][6].vars[0]$;
      method=DataTable::SetValColName;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="Variant&";
	name="val";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="epoch_timer.used.GetUsrSecs()";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="col_name";
	required=1;
	def_val="\"\"";
	prev_expr=;
	expr {
	 expr="\"epoch_time_usr\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="-1";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr=;
	};
       };
      };
      meth_sig="bool SetValColName(Variant& val, taString& col_name, int row, bool quiet = false)";
      meth_desc=" set data of scalar type, in Variant form (any data type, use for Programs), for given column name, row; returns 'true' if valid access and set is successful -- quiet = fail quietly";
     };
     MethodCall @[5] {
      name="MethodCall_epochmondataWriteClose";
      desc="update after writing new data to monitor data table";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_mon_data->WriteClose()";
      result_var=NULL;
      obj=$.programs.gp[1][6].vars[0]$;
      method=DataTable::WriteClose;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void WriteClose()";
      meth_desc=" closes up a write operation -- call when done writing data -- performs any post-writing cleanup/closing of files, etc";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="Monitor_Data";
     full_url="https://grey.colorado.edu/emergent/index.php/Monitor_Data";
     text_size=1;
     text=;
     html_text=;
    };
   };
  };
 };
 viewers {
  name="viewers";
  el_typ=MainWindowViewer;
  el_def=0;
  MainWindowViewer @[0] {
   UserDataItem_List @*(.user_data_) {
    name="UserDataItem_List_114";
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {name="view_win_lft": value=0: val_type_fixed=0: };
    UserDataItem @[1] {name="view_win_top": value=0.01954121: val_type_fixed=0: };
    UserDataItem @[2] {name="view_win_wd": value=1: val_type_fixed=0: };
    UserDataItem @[3] {name="view_win_ht": value=0.7994902: val_type_fixed=0: };
    UserDataItem @[4] {name="view_win_iconified": value=0: val_type_fixed=0: };
    UserDataItem @[5] {name="view_splitter_state": value=AAAA/wAAAAEAAAADAAABFwAAAfwAAAKMAf////8BAAAAAQA=: val_type_fixed=0: };
   };
   name="Browser2";
   m_data=.$$;
   cur_font_size=12;
   visible=1;
   win_name=".projects[\"pbwm_wizard_v810\"] - pbwm_wizard_v810.proj";
   m_is_root=0;
   m_is_viewer_xor_browser=0;
   m_is_proj_viewer=1;
   m_is_dialog=0;
   revert_to_tab_no=-1;
   toolbars {
    name="toolbars";
    el_typ=ToolBar;
    el_def=0;
    ToolBar @[0] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_115";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {name="view_win_visible": value=1: val_type_fixed=0: };
     };
     name="Application";
     m_data=NULL;
     cur_font_size=12;
     visible=1;
     lft=0;
     top=0;
     o=Horizontal;
    };
   };
   frames {
    name="frames";
    el_typ=BrowseViewerTaBase;
    el_def=0;
    BrowseViewerTaBase @[0] {
     name="Navigator";
     m_data=NULL;
     cur_font_size=12;
     visible=1;
     root_typ=LeabraProject;
     root_md=NULL;
     m_root=$.$;
    };
    PanelViewer @[1] {
     name="Editor";
     m_data=NULL;
     cur_font_size=12;
     visible=1;
    };
    T3PanelViewer @[2] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_116";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {name="view_panel_selected": value=1: val_type_fixed=0: };
     };
     name="Visualizer";
     m_data=NULL;
     cur_font_size=12;
     visible=1;
     panels {
      name="panels";
      el_typ=T3Panel;
      el_def=0;
      T3Panel @[0] {
       name="Network_0";
       m_data=NULL;
       cur_font_size=12;
       visible=1;
       root_view {
	name="root_view";
	m_data=NULL;
	cur_font_size=12;
	m_transform=NULL;
	children {
	 name="children";
	 el_typ=NetView;
	 el_def=0;
	 NetView @[0] {
	  name="Network_0_View";
	  m_data=$.networks[0]$;
	  cur_font_size=12;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  display=1;
	  lay_layout=THREE_D;
	  lay_mv=1;
	  net_text=1;
	  show_iconified=0;
	  net_text_xform {scale={x=0.7: y=0.7: z=0.7: }: rotate={x=1: y=0: z=0: rot=1.570796: }: translate={x=0: y=1: z=-1: }: };
	  net_text_rot=-90;
	  cur_unit_vals{ act;	  };
	  hot_vars{ targ;ext;act;net;bias_wt;bias_dwt;act_eq;act_m;act_p;act_dif;avg_m;avg_l;act_avg;r.wt;r.wt*act;s.wt;r.dwt;s.dwt;	  };
	  unit_src_path=".layers[2].units[24]";
	  con_type=ANY_CON;
	  hist_idx=0;
	  hist_save=1;
	  hist_max=100;
	  hist_ff=5;
	  unit_disp_mode=UDM_BLOCK;
	  unit_text_disp=UTD_NONE;
	  max_size {x=67: y=32: z=2.333333: };
	  max_size2d {x=67: y=56: z=1: };
	  eff_max_size {x=67: y=32: z=2.333333: };
	  font_sizes {net_name=0.05: net_vals=0.05: layer=0.04: layer_min=0.01: layer_vals=0.03: prjn=0.01: unit=0.02: un_nm_len=3: };
	  view_params {xy_square=0: unit_spacing=0.05: prjn_disp=L_R_B: prjn_name=0: prjn_width=0.002: prjn_trans=0.5: lay_trans=0.4: unit_trans=0.4: laygp_width=1: show_laygp=1: };
	  wt_line_disp=0;
	  wt_line_width=4;
	  wt_line_thr=0.8;
	  wt_line_swt=0;
	  wt_prjn_k_un=4;
	  wt_prjn_k_gp=1;
	  wt_prjn_lay=NULL;
	  snap_bord_disp=0;
	  snap_bord_width=4;
	  scale {
	   name="scale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=0;
	   last_max=0;
	   range=1;
	   zero=0;
	   spec=.colorspecs["C_ColdHot"]$$<ColorScaleSpec,C_ColdHot>;
	   auto_scale=0;
	  };
	  scale_ranges {
	   name="scale_ranges";
	   el_typ=ScaleRange;
	   el_def=0;
	   ScaleRange @[0] {
	    var_name="act";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[1] {
	    var_name="act_m";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[2] {
	    var_name="bias.wt";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[3] {
	    var_name="r.wt";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[4] {
	    var_name="act_p";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[5] {
	    var_name="r.pdw";
	    auto_scale=1;
	    min=-0;
	    max=0;
	   };
	   ScaleRange @[6] {
	    var_name="net";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[7] {
	    var_name="act_q0";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[8] {
	    var_name="act_q1";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[9] {
	    var_name="act_q2";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[10] {
	    var_name="act_q3";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[11] {
	    var_name="act_q4";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	  };
	  lay_disp_modes{ Input=-1;Hidden=-1;Output=-1;PosPV=-1;NegPV=-1;PosBodyState=-1;NegBodyState=-1;RewTarg=-1;ExtRew=-1;LatAmyg=-1;BAAcqPosD1=-1;BAExtPosD2=-1;CAPos=-1;BAAcqNegD2=-1;BAExtNegD1=-1;CANeg=-1;VSPatchPosD1=-1;VSPatchPosD2=-1;VSPatchNegD2=-1;VSPatchNegD1=-1;VSMatrixPosD1=-1;VSMatrixPosD2=-1;VSMatrixNegD2=-1;VSMatrixNegD1=-1;PPTg_p=-1;VTAp=-1;LHbRMTg=-1;PPTg_n=-1;VTAn=-1;DRN=-1;MatrixGo=-1;MatrixNoGo=-1;MatrixTAN=-1;PFCmnt_patch=-1;GPeNoGo=-1;GPi=-1;PFCmnt=-1;PFCmnt_deep=-1;PFCmnt_trc=-1;PFCout=-1;PFCout_deep=-1;	  };
	 };
	};
       };
       bg_color {r=1: g=1: b=1: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       headlight_intensity=1;
       ambient_light=0;
       camera_params {field_of_view=45: near_distance=0.1: focal=5: far_distance=1000: };
       stereo_view=STEREO_NONE;
       saved_views {
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @[0] {
	 name="Vw_0";
	 view_saved=1;
	 pos {x=0.5: y=0.9127705: z=2.325769: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=2.524852;
	};
	T3SavedView @[1] {
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[2] {
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[3] {
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[4] {
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[5] {
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[6] {
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[7] {
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[8] {
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[9] {
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3Panel @[1] {
       name="EpochOutputData";
       m_data=NULL;
       cur_font_size=12;
       visible=1;
       root_view {
	name="root_view";
	m_data=NULL;
	cur_font_size=12;
	m_transform=NULL;
	children {
	 name="children";
	 el_typ=GraphTableView;
	 el_def=0;
	 GraphTableView @[0] {
	  name="EpochOutputData_Graph";
	  m_data=$.data.gp[1][1]$;
	  cur_font_size=12;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name="children";
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @[0] {
	    name="batch";
	    m_data=.data.gp[1][1].data[0]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[1] {
	    name="epoch";
	    m_data=.data.gp[1][1].data[1]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[2] {
	    name="avg_sse";
	    m_data=.data.gp[1][1].data[2]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[3] {
	    name="cnt_err";
	    m_data=.data.gp[1][1].data[3]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[4] {
	    name="pct_cor";
	    m_data=.data.gp[1][1].data[4]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[5] {
	    name="pct_err";
	    m_data=.data.gp[1][1].data[5]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[6] {
	    name="avg_norm_err";
	    m_data=.data.gp[1][1].data[6]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[7] {
	    name="avg_cos_err";
	    m_data=.data.gp[1][1].data[7]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[8] {
	    name="avg_ext_rew";
	    m_data=.data.gp[1][1].data[8]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[9] {
	    name="avg_cycles";
	    m_data=.data.gp[1][1].data[9]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[10] {
	    name="epoch_time_tot";
	    m_data=.data.gp[1][1].data[10]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[11] {
	    name="epoch_time_usr";
	    m_data=.data.gp[1][1].data[11]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[12] {
	    name="Output_lay_avg_sse";
	    m_data=.data.gp[1][1].data[12]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[13] {
	    name="Output_lay_cnt_err";
	    m_data=.data.gp[1][1].data[13]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[14] {
	    name="Output_lay_pct_cor";
	    m_data=.data.gp[1][1].data[14]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[15] {
	    name="Output_lay_pct_err";
	    m_data=.data.gp[1][1].data[15]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[16] {
	    name="Output_lay_avg_norm_err";
	    m_data=.data.gp[1][1].data[16]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[17] {
	    name="Output_lay_avg_cos_err";
	    m_data=.data.gp[1][1].data[17]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[18] {
	    name="net_avg_cos_diff";
	    m_data=.data.gp[1][1].data[18]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[19] {
	    name="net_avg_trial_cos_diff";
	    m_data=.data.gp[1][1].data[19]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[20] {
	    name="net_avg_avg_act_diff";
	    m_data=.data.gp[1][1].data[20]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[21] {
	    name="Hidden_avg_cos_diff";
	    m_data=.data.gp[1][1].data[21]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0.921425: fix_max=0: max=0.998647: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[22] {
	    name="Output_avg_cos_diff";
	    m_data=.data.gp[1][1].data[22]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[23] {
	    name="PosPV_avg_cos_diff";
	    m_data=.data.gp[1][1].data[23]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[24] {
	    name="ExtRew_avg_cos_diff";
	    m_data=.data.gp[1][1].data[24]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[25] {
	    name="LatAmyg_avg_cos_diff";
	    m_data=.data.gp[1][1].data[25]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[26] {
	    name="BAAcqPosD1_avg_cos_diff";
	    m_data=.data.gp[1][1].data[26]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[27] {
	    name="BAExtPosD2_avg_cos_diff";
	    m_data=.data.gp[1][1].data[27]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[28] {
	    name="CAPos_avg_cos_diff";
	    m_data=.data.gp[1][1].data[28]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[29] {
	    name="BAAcqNegD2_avg_cos_diff";
	    m_data=.data.gp[1][1].data[29]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[30] {
	    name="BAExtNegD1_avg_cos_diff";
	    m_data=.data.gp[1][1].data[30]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[31] {
	    name="CANeg_avg_cos_diff";
	    m_data=.data.gp[1][1].data[31]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[32] {
	    name="VSPatchPosD1_avg_cos_diff";
	    m_data=.data.gp[1][1].data[32]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[33] {
	    name="VSPatchPosD2_avg_cos_diff";
	    m_data=.data.gp[1][1].data[33]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[34] {
	    name="VSPatchNegD2_avg_cos_diff";
	    m_data=.data.gp[1][1].data[34]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[35] {
	    name="VSPatchNegD1_avg_cos_diff";
	    m_data=.data.gp[1][1].data[35]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[36] {
	    name="VSMatrixPosD1_avg_cos_diff";
	    m_data=.data.gp[1][1].data[36]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[37] {
	    name="VSMatrixPosD2_avg_cos_diff";
	    m_data=.data.gp[1][1].data[37]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[38] {
	    name="VSMatrixNegD2_avg_cos_diff";
	    m_data=.data.gp[1][1].data[38]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[39] {
	    name="VSMatrixNegD1_avg_cos_diff";
	    m_data=.data.gp[1][1].data[39]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[40] {
	    name="PPTg_p_avg_cos_diff";
	    m_data=.data.gp[1][1].data[40]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[41] {
	    name="VTAp_avg_cos_diff";
	    m_data=.data.gp[1][1].data[41]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[42] {
	    name="LHbRMTg_avg_cos_diff";
	    m_data=.data.gp[1][1].data[42]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[43] {
	    name="PPTg_n_avg_cos_diff";
	    m_data=.data.gp[1][1].data[43]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[44] {
	    name="VTAn_avg_cos_diff";
	    m_data=.data.gp[1][1].data[44]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[45] {
	    name="DRN_avg_cos_diff";
	    m_data=.data.gp[1][1].data[45]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[46] {
	    name="MatrixGo_avg_cos_diff";
	    m_data=.data.gp[1][1].data[46]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[47] {
	    name="MatrixNoGo_avg_cos_diff";
	    m_data=.data.gp[1][1].data[47]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[48] {
	    name="MatrixTAN_avg_cos_diff";
	    m_data=.data.gp[1][1].data[48]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[49] {
	    name="PFCmnt_patch_avg_cos_diff";
	    m_data=.data.gp[1][1].data[49]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[50] {
	    name="GPeNoGo_avg_cos_diff";
	    m_data=.data.gp[1][1].data[50]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[51] {
	    name="GPi_avg_cos_diff";
	    m_data=.data.gp[1][1].data[51]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[52] {
	    name="PFCmnt_avg_cos_diff";
	    m_data=.data.gp[1][1].data[52]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[53] {
	    name="PFCmnt_deep_avg_cos_diff";
	    m_data=.data.gp[1][1].data[53]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[54] {
	    name="PFCmnt_trc_avg_cos_diff";
	    m_data=.data.gp[1][1].data[54]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[55] {
	    name="PFCout_avg_cos_diff";
	    m_data=.data.gp[1][1].data[55]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[56] {
	    name="PFCout_deep_avg_cos_diff";
	    m_data=.data.gp[1][1].data[56]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[57] {
	    name="Hidden_avg_trial_cos_diff";
	    m_data=.data.gp[1][1].data[57]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[58] {
	    name="Output_avg_trial_cos_diff";
	    m_data=.data.gp[1][1].data[58]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[59] {
	    name="PosPV_avg_trial_cos_diff";
	    m_data=.data.gp[1][1].data[59]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[60] {
	    name="ExtRew_avg_trial_cos_diff";
	    m_data=.data.gp[1][1].data[60]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[61] {
	    name="LatAmyg_avg_trial_cos_diff";
	    m_data=.data.gp[1][1].data[61]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[62] {
	    name="BAAcqPosD1_avg_trial_cos_diff";
	    m_data=.data.gp[1][1].data[62]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[63] {
	    name="BAExtPosD2_avg_trial_cos_diff";
	    m_data=.data.gp[1][1].data[63]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[64] {
	    name="CAPos_avg_trial_cos_diff";
	    m_data=.data.gp[1][1].data[64]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[65] {
	    name="BAAcqNegD2_avg_trial_cos_diff";
	    m_data=.data.gp[1][1].data[65]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[66] {
	    name="BAExtNegD1_avg_trial_cos_diff";
	    m_data=.data.gp[1][1].data[66]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[67] {
	    name="CANeg_avg_trial_cos_diff";
	    m_data=.data.gp[1][1].data[67]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[68] {
	    name="VSPatchPosD1_avg_trial_cos_diff";
	    m_data=.data.gp[1][1].data[68]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[69] {
	    name="VSPatchPosD2_avg_trial_cos_diff";
	    m_data=.data.gp[1][1].data[69]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[70] {
	    name="VSPatchNegD2_avg_trial_cos_diff";
	    m_data=.data.gp[1][1].data[70]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[71] {
	    name="VSPatchNegD1_avg_trial_cos_diff";
	    m_data=.data.gp[1][1].data[71]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[72] {
	    name="VSMatrixPosD1_avg_trial_cos_diff";
	    m_data=.data.gp[1][1].data[72]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[73] {
	    name="VSMatrixPosD2_avg_trial_cos_diff";
	    m_data=.data.gp[1][1].data[73]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[74] {
	    name="VSMatrixNegD2_avg_trial_cos_diff";
	    m_data=.data.gp[1][1].data[74]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[75] {
	    name="VSMatrixNegD1_avg_trial_cos_diff";
	    m_data=.data.gp[1][1].data[75]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[76] {
	    name="PPTg_p_avg_trial_cos_diff";
	    m_data=.data.gp[1][1].data[76]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[77] {
	    name="VTAp_avg_trial_cos_diff";
	    m_data=.data.gp[1][1].data[77]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[78] {
	    name="LHbRMTg_avg_trial_cos_diff";
	    m_data=.data.gp[1][1].data[78]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[79] {
	    name="PPTg_n_avg_trial_cos_diff";
	    m_data=.data.gp[1][1].data[79]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[80] {
	    name="VTAn_avg_trial_cos_diff";
	    m_data=.data.gp[1][1].data[80]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[81] {
	    name="DRN_avg_trial_cos_diff";
	    m_data=.data.gp[1][1].data[81]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[82] {
	    name="MatrixGo_avg_trial_cos_diff";
	    m_data=.data.gp[1][1].data[82]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[83] {
	    name="MatrixNoGo_avg_trial_cos_diff";
	    m_data=.data.gp[1][1].data[83]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[84] {
	    name="MatrixTAN_avg_trial_cos_diff";
	    m_data=.data.gp[1][1].data[84]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[85] {
	    name="PFCmnt_patch_avg_trial_cos_diff";
	    m_data=.data.gp[1][1].data[85]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[86] {
	    name="GPeNoGo_avg_trial_cos_diff";
	    m_data=.data.gp[1][1].data[86]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[87] {
	    name="GPi_avg_trial_cos_diff";
	    m_data=.data.gp[1][1].data[87]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[88] {
	    name="PFCmnt_avg_trial_cos_diff";
	    m_data=.data.gp[1][1].data[88]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[89] {
	    name="PFCmnt_deep_avg_trial_cos_diff";
	    m_data=.data.gp[1][1].data[89]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[90] {
	    name="PFCmnt_trc_avg_trial_cos_diff";
	    m_data=.data.gp[1][1].data[90]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[91] {
	    name="PFCout_avg_trial_cos_diff";
	    m_data=.data.gp[1][1].data[91]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[92] {
	    name="PFCout_deep_avg_trial_cos_diff";
	    m_data=.data.gp[1][1].data[92]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[93] {
	    name="Hidden_avg_avg_act_diff";
	    m_data=.data.gp[1][1].data[93]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[94] {
	    name="Output_avg_avg_act_diff";
	    m_data=.data.gp[1][1].data[94]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[95] {
	    name="PosPV_avg_avg_act_diff";
	    m_data=.data.gp[1][1].data[95]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[96] {
	    name="ExtRew_avg_avg_act_diff";
	    m_data=.data.gp[1][1].data[96]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[97] {
	    name="LatAmyg_avg_avg_act_diff";
	    m_data=.data.gp[1][1].data[97]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[98] {
	    name="BAAcqPosD1_avg_avg_act_diff";
	    m_data=.data.gp[1][1].data[98]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[99] {
	    name="BAExtPosD2_avg_avg_act_diff";
	    m_data=.data.gp[1][1].data[99]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[100] {
	    name="CAPos_avg_avg_act_diff";
	    m_data=.data.gp[1][1].data[100]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[101] {
	    name="BAAcqNegD2_avg_avg_act_diff";
	    m_data=.data.gp[1][1].data[101]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[102] {
	    name="BAExtNegD1_avg_avg_act_diff";
	    m_data=.data.gp[1][1].data[102]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[103] {
	    name="CANeg_avg_avg_act_diff";
	    m_data=.data.gp[1][1].data[103]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[104] {
	    name="VSPatchPosD1_avg_avg_act_diff";
	    m_data=.data.gp[1][1].data[104]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[105] {
	    name="VSPatchPosD2_avg_avg_act_diff";
	    m_data=.data.gp[1][1].data[105]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[106] {
	    name="VSPatchNegD2_avg_avg_act_diff";
	    m_data=.data.gp[1][1].data[106]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[107] {
	    name="VSPatchNegD1_avg_avg_act_diff";
	    m_data=.data.gp[1][1].data[107]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[108] {
	    name="VSMatrixPosD1_avg_avg_act_diff";
	    m_data=.data.gp[1][1].data[108]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[109] {
	    name="VSMatrixPosD2_avg_avg_act_diff";
	    m_data=.data.gp[1][1].data[109]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[110] {
	    name="VSMatrixNegD2_avg_avg_act_diff";
	    m_data=.data.gp[1][1].data[110]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[111] {
	    name="VSMatrixNegD1_avg_avg_act_diff";
	    m_data=.data.gp[1][1].data[111]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[112] {
	    name="PPTg_p_avg_avg_act_diff";
	    m_data=.data.gp[1][1].data[112]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[113] {
	    name="VTAp_avg_avg_act_diff";
	    m_data=.data.gp[1][1].data[113]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[114] {
	    name="LHbRMTg_avg_avg_act_diff";
	    m_data=.data.gp[1][1].data[114]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[115] {
	    name="PPTg_n_avg_avg_act_diff";
	    m_data=.data.gp[1][1].data[115]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[116] {
	    name="VTAn_avg_avg_act_diff";
	    m_data=.data.gp[1][1].data[116]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[117] {
	    name="DRN_avg_avg_act_diff";
	    m_data=.data.gp[1][1].data[117]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[118] {
	    name="MatrixGo_avg_avg_act_diff";
	    m_data=.data.gp[1][1].data[118]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[119] {
	    name="MatrixNoGo_avg_avg_act_diff";
	    m_data=.data.gp[1][1].data[119]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[120] {
	    name="MatrixTAN_avg_avg_act_diff";
	    m_data=.data.gp[1][1].data[120]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[121] {
	    name="PFCmnt_patch_avg_avg_act_diff";
	    m_data=.data.gp[1][1].data[121]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[122] {
	    name="GPeNoGo_avg_avg_act_diff";
	    m_data=.data.gp[1][1].data[122]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[123] {
	    name="GPi_avg_avg_act_diff";
	    m_data=.data.gp[1][1].data[123]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[124] {
	    name="PFCmnt_avg_avg_act_diff";
	    m_data=.data.gp[1][1].data[124]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[125] {
	    name="PFCmnt_deep_avg_avg_act_diff";
	    m_data=.data.gp[1][1].data[125]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[126] {
	    name="PFCmnt_trc_avg_avg_act_diff";
	    m_data=.data.gp[1][1].data[126]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[127] {
	    name="PFCout_avg_avg_act_diff";
	    m_data=.data.gp[1][1].data[127]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[128] {
	    name="PFCout_deep_avg_avg_act_diff";
	    m_data=.data.gp[1][1].data[128]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[129] {
	    name="Hidden_avg_net_sd";
	    m_data=.data.gp[1][1].data[129]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0.325586: fix_max=0: max=0.462465: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[130] {
	    name="Output_avg_net_sd";
	    m_data=.data.gp[1][1].data[130]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[131] {
	    name="PosPV_avg_net_sd";
	    m_data=.data.gp[1][1].data[131]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[132] {
	    name="ExtRew_avg_net_sd";
	    m_data=.data.gp[1][1].data[132]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[133] {
	    name="LatAmyg_avg_net_sd";
	    m_data=.data.gp[1][1].data[133]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[134] {
	    name="BAAcqPosD1_avg_net_sd";
	    m_data=.data.gp[1][1].data[134]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[135] {
	    name="BAExtPosD2_avg_net_sd";
	    m_data=.data.gp[1][1].data[135]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[136] {
	    name="CAPos_avg_net_sd";
	    m_data=.data.gp[1][1].data[136]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[137] {
	    name="BAAcqNegD2_avg_net_sd";
	    m_data=.data.gp[1][1].data[137]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[138] {
	    name="BAExtNegD1_avg_net_sd";
	    m_data=.data.gp[1][1].data[138]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[139] {
	    name="CANeg_avg_net_sd";
	    m_data=.data.gp[1][1].data[139]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[140] {
	    name="VSPatchPosD1_avg_net_sd";
	    m_data=.data.gp[1][1].data[140]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[141] {
	    name="VSPatchPosD2_avg_net_sd";
	    m_data=.data.gp[1][1].data[141]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[142] {
	    name="VSPatchNegD2_avg_net_sd";
	    m_data=.data.gp[1][1].data[142]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[143] {
	    name="VSPatchNegD1_avg_net_sd";
	    m_data=.data.gp[1][1].data[143]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[144] {
	    name="VSMatrixPosD1_avg_net_sd";
	    m_data=.data.gp[1][1].data[144]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[145] {
	    name="VSMatrixPosD2_avg_net_sd";
	    m_data=.data.gp[1][1].data[145]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[146] {
	    name="VSMatrixNegD2_avg_net_sd";
	    m_data=.data.gp[1][1].data[146]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[147] {
	    name="VSMatrixNegD1_avg_net_sd";
	    m_data=.data.gp[1][1].data[147]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[148] {
	    name="PPTg_p_avg_net_sd";
	    m_data=.data.gp[1][1].data[148]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[149] {
	    name="VTAp_avg_net_sd";
	    m_data=.data.gp[1][1].data[149]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[150] {
	    name="LHbRMTg_avg_net_sd";
	    m_data=.data.gp[1][1].data[150]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[151] {
	    name="PPTg_n_avg_net_sd";
	    m_data=.data.gp[1][1].data[151]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[152] {
	    name="VTAn_avg_net_sd";
	    m_data=.data.gp[1][1].data[152]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[153] {
	    name="DRN_avg_net_sd";
	    m_data=.data.gp[1][1].data[153]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[154] {
	    name="MatrixGo_avg_net_sd";
	    m_data=.data.gp[1][1].data[154]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[155] {
	    name="MatrixNoGo_avg_net_sd";
	    m_data=.data.gp[1][1].data[155]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[156] {
	    name="MatrixTAN_avg_net_sd";
	    m_data=.data.gp[1][1].data[156]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[157] {
	    name="PFCmnt_patch_avg_net_sd";
	    m_data=.data.gp[1][1].data[157]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[158] {
	    name="GPeNoGo_avg_net_sd";
	    m_data=.data.gp[1][1].data[158]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[159] {
	    name="GPi_avg_net_sd";
	    m_data=.data.gp[1][1].data[159]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[160] {
	    name="PFCmnt_avg_net_sd";
	    m_data=.data.gp[1][1].data[160]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[161] {
	    name="PFCmnt_deep_avg_net_sd";
	    m_data=.data.gp[1][1].data[161]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[162] {
	    name="PFCmnt_trc_avg_net_sd";
	    m_data=.data.gp[1][1].data[162]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[163] {
	    name="PFCout_avg_net_sd";
	    m_data=.data.gp[1][1].data[163]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[164] {
	    name="PFCout_deep_avg_net_sd";
	    m_data=.data.gp[1][1].data[164]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[165] {
	    name="Hidden_hog_pct";
	    m_data=.data.gp[1][1].data[165]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[166] {
	    name="Output_hog_pct";
	    m_data=.data.gp[1][1].data[166]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[167] {
	    name="PosPV_hog_pct";
	    m_data=.data.gp[1][1].data[167]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[168] {
	    name="ExtRew_hog_pct";
	    m_data=.data.gp[1][1].data[168]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[169] {
	    name="LatAmyg_hog_pct";
	    m_data=.data.gp[1][1].data[169]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[170] {
	    name="BAAcqPosD1_hog_pct";
	    m_data=.data.gp[1][1].data[170]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[171] {
	    name="BAExtPosD2_hog_pct";
	    m_data=.data.gp[1][1].data[171]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[172] {
	    name="CAPos_hog_pct";
	    m_data=.data.gp[1][1].data[172]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[173] {
	    name="BAAcqNegD2_hog_pct";
	    m_data=.data.gp[1][1].data[173]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[174] {
	    name="BAExtNegD1_hog_pct";
	    m_data=.data.gp[1][1].data[174]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[175] {
	    name="CANeg_hog_pct";
	    m_data=.data.gp[1][1].data[175]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[176] {
	    name="VSPatchPosD1_hog_pct";
	    m_data=.data.gp[1][1].data[176]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[177] {
	    name="VSPatchPosD2_hog_pct";
	    m_data=.data.gp[1][1].data[177]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[178] {
	    name="VSPatchNegD2_hog_pct";
	    m_data=.data.gp[1][1].data[178]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[179] {
	    name="VSPatchNegD1_hog_pct";
	    m_data=.data.gp[1][1].data[179]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[180] {
	    name="VSMatrixPosD1_hog_pct";
	    m_data=.data.gp[1][1].data[180]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[181] {
	    name="VSMatrixPosD2_hog_pct";
	    m_data=.data.gp[1][1].data[181]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[182] {
	    name="VSMatrixNegD2_hog_pct";
	    m_data=.data.gp[1][1].data[182]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[183] {
	    name="VSMatrixNegD1_hog_pct";
	    m_data=.data.gp[1][1].data[183]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[184] {
	    name="PPTg_p_hog_pct";
	    m_data=.data.gp[1][1].data[184]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[185] {
	    name="VTAp_hog_pct";
	    m_data=.data.gp[1][1].data[185]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[186] {
	    name="LHbRMTg_hog_pct";
	    m_data=.data.gp[1][1].data[186]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[187] {
	    name="PPTg_n_hog_pct";
	    m_data=.data.gp[1][1].data[187]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[188] {
	    name="VTAn_hog_pct";
	    m_data=.data.gp[1][1].data[188]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[189] {
	    name="DRN_hog_pct";
	    m_data=.data.gp[1][1].data[189]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[190] {
	    name="MatrixGo_hog_pct";
	    m_data=.data.gp[1][1].data[190]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[191] {
	    name="MatrixNoGo_hog_pct";
	    m_data=.data.gp[1][1].data[191]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[192] {
	    name="MatrixTAN_hog_pct";
	    m_data=.data.gp[1][1].data[192]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[193] {
	    name="PFCmnt_patch_hog_pct";
	    m_data=.data.gp[1][1].data[193]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[194] {
	    name="GPeNoGo_hog_pct";
	    m_data=.data.gp[1][1].data[194]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[195] {
	    name="GPi_hog_pct";
	    m_data=.data.gp[1][1].data[195]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[196] {
	    name="PFCmnt_hog_pct";
	    m_data=.data.gp[1][1].data[196]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[197] {
	    name="PFCmnt_deep_hog_pct";
	    m_data=.data.gp[1][1].data[197]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[198] {
	    name="PFCmnt_trc_hog_pct";
	    m_data=.data.gp[1][1].data[198]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[199] {
	    name="PFCout_hog_pct";
	    m_data=.data.gp[1][1].data[199]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[200] {
	    name="PFCout_deep_hog_pct";
	    m_data=.data.gp[1][1].data[200]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[201] {
	    name="Hidden_dead_pct";
	    m_data=.data.gp[1][1].data[201]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[202] {
	    name="Output_dead_pct";
	    m_data=.data.gp[1][1].data[202]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[203] {
	    name="PosPV_dead_pct";
	    m_data=.data.gp[1][1].data[203]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[204] {
	    name="ExtRew_dead_pct";
	    m_data=.data.gp[1][1].data[204]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[205] {
	    name="LatAmyg_dead_pct";
	    m_data=.data.gp[1][1].data[205]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[206] {
	    name="BAAcqPosD1_dead_pct";
	    m_data=.data.gp[1][1].data[206]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[207] {
	    name="BAExtPosD2_dead_pct";
	    m_data=.data.gp[1][1].data[207]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[208] {
	    name="CAPos_dead_pct";
	    m_data=.data.gp[1][1].data[208]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[209] {
	    name="BAAcqNegD2_dead_pct";
	    m_data=.data.gp[1][1].data[209]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[210] {
	    name="BAExtNegD1_dead_pct";
	    m_data=.data.gp[1][1].data[210]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[211] {
	    name="CANeg_dead_pct";
	    m_data=.data.gp[1][1].data[211]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[212] {
	    name="VSPatchPosD1_dead_pct";
	    m_data=.data.gp[1][1].data[212]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[213] {
	    name="VSPatchPosD2_dead_pct";
	    m_data=.data.gp[1][1].data[213]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[214] {
	    name="VSPatchNegD2_dead_pct";
	    m_data=.data.gp[1][1].data[214]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[215] {
	    name="VSPatchNegD1_dead_pct";
	    m_data=.data.gp[1][1].data[215]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[216] {
	    name="VSMatrixPosD1_dead_pct";
	    m_data=.data.gp[1][1].data[216]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[217] {
	    name="VSMatrixPosD2_dead_pct";
	    m_data=.data.gp[1][1].data[217]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[218] {
	    name="VSMatrixNegD2_dead_pct";
	    m_data=.data.gp[1][1].data[218]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[219] {
	    name="VSMatrixNegD1_dead_pct";
	    m_data=.data.gp[1][1].data[219]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[220] {
	    name="PPTg_p_dead_pct";
	    m_data=.data.gp[1][1].data[220]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[221] {
	    name="VTAp_dead_pct";
	    m_data=.data.gp[1][1].data[221]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[222] {
	    name="LHbRMTg_dead_pct";
	    m_data=.data.gp[1][1].data[222]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[223] {
	    name="PPTg_n_dead_pct";
	    m_data=.data.gp[1][1].data[223]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[224] {
	    name="VTAn_dead_pct";
	    m_data=.data.gp[1][1].data[224]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[225] {
	    name="DRN_dead_pct";
	    m_data=.data.gp[1][1].data[225]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[226] {
	    name="MatrixGo_dead_pct";
	    m_data=.data.gp[1][1].data[226]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[227] {
	    name="MatrixNoGo_dead_pct";
	    m_data=.data.gp[1][1].data[227]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[228] {
	    name="MatrixTAN_dead_pct";
	    m_data=.data.gp[1][1].data[228]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[229] {
	    name="PFCmnt_patch_dead_pct";
	    m_data=.data.gp[1][1].data[229]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[230] {
	    name="GPeNoGo_dead_pct";
	    m_data=.data.gp[1][1].data[230]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[231] {
	    name="GPi_dead_pct";
	    m_data=.data.gp[1][1].data[231]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[232] {
	    name="PFCmnt_dead_pct";
	    m_data=.data.gp[1][1].data[232]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[233] {
	    name="PFCmnt_deep_dead_pct";
	    m_data=.data.gp[1][1].data[233]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[234] {
	    name="PFCmnt_trc_dead_pct";
	    m_data=.data.gp[1][1].data[234]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[235] {
	    name="PFCout_dead_pct";
	    m_data=.data.gp[1][1].data[235]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[236] {
	    name="PFCout_deep_dead_pct";
	    m_data=.data.gp[1][1].data[236]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[237] {
	    name="Hidden_netmax";
	    m_data=.data.gp[1][1].data[237]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[238] {
	    name="Output_netmax";
	    m_data=.data.gp[1][1].data[238]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[239] {
	    name="PosPV_netmax";
	    m_data=.data.gp[1][1].data[239]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[240] {
	    name="ExtRew_netmax";
	    m_data=.data.gp[1][1].data[240]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[241] {
	    name="LatAmyg_netmax";
	    m_data=.data.gp[1][1].data[241]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[242] {
	    name="BAAcqPosD1_netmax";
	    m_data=.data.gp[1][1].data[242]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[243] {
	    name="BAExtPosD2_netmax";
	    m_data=.data.gp[1][1].data[243]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[244] {
	    name="CAPos_netmax";
	    m_data=.data.gp[1][1].data[244]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[245] {
	    name="BAAcqNegD2_netmax";
	    m_data=.data.gp[1][1].data[245]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[246] {
	    name="BAExtNegD1_netmax";
	    m_data=.data.gp[1][1].data[246]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[247] {
	    name="CANeg_netmax";
	    m_data=.data.gp[1][1].data[247]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[248] {
	    name="VSPatchPosD1_netmax";
	    m_data=.data.gp[1][1].data[248]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[249] {
	    name="VSPatchPosD2_netmax";
	    m_data=.data.gp[1][1].data[249]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[250] {
	    name="VSPatchNegD2_netmax";
	    m_data=.data.gp[1][1].data[250]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[251] {
	    name="VSPatchNegD1_netmax";
	    m_data=.data.gp[1][1].data[251]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[252] {
	    name="VSMatrixPosD1_netmax";
	    m_data=.data.gp[1][1].data[252]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[253] {
	    name="VSMatrixPosD2_netmax";
	    m_data=.data.gp[1][1].data[253]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[254] {
	    name="VSMatrixNegD2_netmax";
	    m_data=.data.gp[1][1].data[254]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[255] {
	    name="VSMatrixNegD1_netmax";
	    m_data=.data.gp[1][1].data[255]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[256] {
	    name="PPTg_p_netmax";
	    m_data=.data.gp[1][1].data[256]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[257] {
	    name="VTAp_netmax";
	    m_data=.data.gp[1][1].data[257]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[258] {
	    name="LHbRMTg_netmax";
	    m_data=.data.gp[1][1].data[258]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[259] {
	    name="PPTg_n_netmax";
	    m_data=.data.gp[1][1].data[259]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[260] {
	    name="VTAn_netmax";
	    m_data=.data.gp[1][1].data[260]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[261] {
	    name="DRN_netmax";
	    m_data=.data.gp[1][1].data[261]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[262] {
	    name="MatrixGo_netmax";
	    m_data=.data.gp[1][1].data[262]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[263] {
	    name="MatrixNoGo_netmax";
	    m_data=.data.gp[1][1].data[263]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[264] {
	    name="MatrixTAN_netmax";
	    m_data=.data.gp[1][1].data[264]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[265] {
	    name="PFCmnt_patch_netmax";
	    m_data=.data.gp[1][1].data[265]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[266] {
	    name="GPeNoGo_netmax";
	    m_data=.data.gp[1][1].data[266]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[267] {
	    name="GPi_netmax";
	    m_data=.data.gp[1][1].data[267]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[268] {
	    name="PFCmnt_netmax";
	    m_data=.data.gp[1][1].data[268]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[269] {
	    name="PFCmnt_deep_netmax";
	    m_data=.data.gp[1][1].data[269]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[270] {
	    name="PFCmnt_trc_netmax";
	    m_data=.data.gp[1][1].data[270]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[271] {
	    name="PFCout_netmax";
	    m_data=.data.gp[1][1].data[271]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[272] {
	    name="PFCout_deep_netmax";
	    m_data=.data.gp[1][1].data[272]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[273] {
	    name="Hidden_avg_act";
	    m_data=.data.gp[1][1].data[273]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[274] {
	    name="Output_avg_act";
	    m_data=.data.gp[1][1].data[274]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[275] {
	    name="PosPV_avg_act";
	    m_data=.data.gp[1][1].data[275]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[276] {
	    name="ExtRew_avg_act";
	    m_data=.data.gp[1][1].data[276]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[277] {
	    name="LatAmyg_avg_act";
	    m_data=.data.gp[1][1].data[277]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[278] {
	    name="BAAcqPosD1_avg_act";
	    m_data=.data.gp[1][1].data[278]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[279] {
	    name="BAExtPosD2_avg_act";
	    m_data=.data.gp[1][1].data[279]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[280] {
	    name="CAPos_avg_act";
	    m_data=.data.gp[1][1].data[280]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[281] {
	    name="BAAcqNegD2_avg_act";
	    m_data=.data.gp[1][1].data[281]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[282] {
	    name="BAExtNegD1_avg_act";
	    m_data=.data.gp[1][1].data[282]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[283] {
	    name="CANeg_avg_act";
	    m_data=.data.gp[1][1].data[283]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[284] {
	    name="VSPatchPosD1_avg_act";
	    m_data=.data.gp[1][1].data[284]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[285] {
	    name="VSPatchPosD2_avg_act";
	    m_data=.data.gp[1][1].data[285]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[286] {
	    name="VSPatchNegD2_avg_act";
	    m_data=.data.gp[1][1].data[286]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[287] {
	    name="VSPatchNegD1_avg_act";
	    m_data=.data.gp[1][1].data[287]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[288] {
	    name="VSMatrixPosD1_avg_act";
	    m_data=.data.gp[1][1].data[288]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[289] {
	    name="VSMatrixPosD2_avg_act";
	    m_data=.data.gp[1][1].data[289]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[290] {
	    name="VSMatrixNegD2_avg_act";
	    m_data=.data.gp[1][1].data[290]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[291] {
	    name="VSMatrixNegD1_avg_act";
	    m_data=.data.gp[1][1].data[291]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[292] {
	    name="PPTg_p_avg_act";
	    m_data=.data.gp[1][1].data[292]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[293] {
	    name="VTAp_avg_act";
	    m_data=.data.gp[1][1].data[293]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[294] {
	    name="LHbRMTg_avg_act";
	    m_data=.data.gp[1][1].data[294]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[295] {
	    name="PPTg_n_avg_act";
	    m_data=.data.gp[1][1].data[295]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[296] {
	    name="VTAn_avg_act";
	    m_data=.data.gp[1][1].data[296]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[297] {
	    name="DRN_avg_act";
	    m_data=.data.gp[1][1].data[297]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[298] {
	    name="MatrixGo_avg_act";
	    m_data=.data.gp[1][1].data[298]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[299] {
	    name="MatrixNoGo_avg_act";
	    m_data=.data.gp[1][1].data[299]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[300] {
	    name="MatrixTAN_avg_act";
	    m_data=.data.gp[1][1].data[300]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[301] {
	    name="PFCmnt_patch_avg_act";
	    m_data=.data.gp[1][1].data[301]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[302] {
	    name="GPeNoGo_avg_act";
	    m_data=.data.gp[1][1].data[302]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[303] {
	    name="GPi_avg_act";
	    m_data=.data.gp[1][1].data[303]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[304] {
	    name="PFCmnt_avg_act";
	    m_data=.data.gp[1][1].data[304]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[305] {
	    name="PFCmnt_deep_avg_act";
	    m_data=.data.gp[1][1].data[305]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[306] {
	    name="PFCmnt_trc_avg_act";
	    m_data=.data.gp[1][1].data[306]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[307] {
	    name="PFCout_avg_act";
	    m_data=.data.gp[1][1].data[307]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[308] {
	    name="PFCout_deep_avg_act";
	    m_data=.data.gp[1][1].data[308]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[309] {
	    name="Hidden_Fm_Input_netrel";
	    m_data=.data.gp[1][1].data[309]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[310] {
	    name="Hidden_Fm_Output_netrel";
	    m_data=.data.gp[1][1].data[310]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[311] {
	    name="Hidden_Fm_PFCout_deep_netrel";
	    m_data=.data.gp[1][1].data[311]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[312] {
	    name="Output_Fm_Hidden_netrel";
	    m_data=.data.gp[1][1].data[312]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[313] {
	    name="Output_Fm_PFCout_deep_netrel";
	    m_data=.data.gp[1][1].data[313]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[314] {
	    name="PosPV_Fm_ExtRew_netrel";
	    m_data=.data.gp[1][1].data[314]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[315] {
	    name="ExtRew_Marker_Fm_RewTarg_netrel";
	    m_data=.data.gp[1][1].data[315]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[316] {
	    name="ExtRew_Marker_Fm_Output_netrel";
	    m_data=.data.gp[1][1].data[316]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[317] {
	    name="LatAmyg_Marker_Fm_VTAp_netrel";
	    m_data=.data.gp[1][1].data[317]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[318] {
	    name="LatAmyg_Marker_Fm_VTAn_netrel";
	    m_data=.data.gp[1][1].data[318]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[319] {
	    name="LatAmyg_Fm_Input_netrel";
	    m_data=.data.gp[1][1].data[319]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[320] {
	    name="LatAmyg_Fm_PFCmnt_deep_netrel";
	    m_data=.data.gp[1][1].data[320]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[321] {
	    name="BAAcqPosD1_Deep_Raw_Fm_PosPV_netrel";
	    m_data=.data.gp[1][1].data[321]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[322] {
	    name="BAAcqPosD1_Marker_Fm_VTAp_netrel";
	    m_data=.data.gp[1][1].data[322]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[323] {
	    name="BAAcqPosD1_Fm_LatAmyg_netrel";
	    m_data=.data.gp[1][1].data[323]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[324] {
	    name="BAAcqPosD1_Inhib_Fm_BAExtPosD2_netrel";
	    m_data=.data.gp[1][1].data[324]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[325] {
	    name="BAExtPosD2_Deep_Mod_Fm_BAAcqPosD1_netrel";
	    m_data=.data.gp[1][1].data[325]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[326] {
	    name="BAExtPosD2_Marker_Fm_VTAp_netrel";
	    m_data=.data.gp[1][1].data[326]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[327] {
	    name="BAExtPosD2_Fm_LatAmyg_netrel";
	    m_data=.data.gp[1][1].data[327]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[328] {
	    name="BAExtPosD2_Fm_Input_netrel";
	    m_data=.data.gp[1][1].data[328]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[329] {
	    name="CAPos_Fm_PosPV_netrel";
	    m_data=.data.gp[1][1].data[329]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[330] {
	    name="CAPos_Fm_BAAcqPosD1_netrel";
	    m_data=.data.gp[1][1].data[330]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[331] {
	    name="BAAcqNegD2_Deep_Raw_Fm_NegPV_netrel";
	    m_data=.data.gp[1][1].data[331]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[332] {
	    name="BAAcqNegD2_Marker_Fm_VTAp_netrel";
	    m_data=.data.gp[1][1].data[332]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[333] {
	    name="BAAcqNegD2_Fm_LatAmyg_netrel";
	    m_data=.data.gp[1][1].data[333]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[334] {
	    name="BAAcqNegD2_Inhib_Fm_BAExtNegD1_netrel";
	    m_data=.data.gp[1][1].data[334]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[335] {
	    name="BAExtNegD1_Deep_Mod_Fm_BAAcqNegD2_netrel";
	    m_data=.data.gp[1][1].data[335]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[336] {
	    name="BAExtNegD1_Deep_Raw_Fm_NegPV_netrel";
	    m_data=.data.gp[1][1].data[336]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[337] {
	    name="BAExtNegD1_Marker_Fm_VTAp_netrel";
	    m_data=.data.gp[1][1].data[337]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[338] {
	    name="BAExtNegD1_Fm_LatAmyg_netrel";
	    m_data=.data.gp[1][1].data[338]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[339] {
	    name="BAExtNegD1_Fm_Input_netrel";
	    m_data=.data.gp[1][1].data[339]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[340] {
	    name="CANeg_Fm_NegPV_netrel";
	    m_data=.data.gp[1][1].data[340]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[341] {
	    name="CANeg_Fm_BAAcqNegD2_netrel";
	    m_data=.data.gp[1][1].data[341]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[342] {
	    name="VSPatchPosD1_Marker_Fm_VTAp_netrel";
	    m_data=.data.gp[1][1].data[342]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[343] {
	    name="VSPatchPosD1_Deep_Mod_Fm_BAAcqPosD1_netrel";
	    m_data=.data.gp[1][1].data[343]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[344] {
	    name="VSPatchPosD1_Fm_Input_netrel";
	    m_data=.data.gp[1][1].data[344]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[345] {
	    name="VSPatchPosD2_Marker_Fm_VTAp_netrel";
	    m_data=.data.gp[1][1].data[345]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[346] {
	    name="VSPatchPosD2_Deep_Mod_Fm_BAAcqPosD1_netrel";
	    m_data=.data.gp[1][1].data[346]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[347] {
	    name="VSPatchPosD2_Fm_Input_netrel";
	    m_data=.data.gp[1][1].data[347]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[348] {
	    name="VSPatchNegD2_Marker_Fm_VTAp_netrel";
	    m_data=.data.gp[1][1].data[348]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[349] {
	    name="VSPatchNegD2_Deep_Mod_Fm_BAAcqNegD2_netrel";
	    m_data=.data.gp[1][1].data[349]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[350] {
	    name="VSPatchNegD2_Fm_Input_netrel";
	    m_data=.data.gp[1][1].data[350]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[351] {
	    name="VSPatchNegD1_Marker_Fm_VTAp_netrel";
	    m_data=.data.gp[1][1].data[351]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[352] {
	    name="VSPatchNegD1_Deep_Mod_Fm_BAAcqNegD2_netrel";
	    m_data=.data.gp[1][1].data[352]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[353] {
	    name="VSPatchNegD1_Fm_Input_netrel";
	    m_data=.data.gp[1][1].data[353]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[354] {
	    name="VSMatrixPosD1_Marker_Fm_VTAp_netrel";
	    m_data=.data.gp[1][1].data[354]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[355] {
	    name="VSMatrixPosD1_Deep_Mod_Fm_BAAcqPosD1_netrel";
	    m_data=.data.gp[1][1].data[355]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[356] {
	    name="VSMatrixPosD1_Fm_Input_netrel";
	    m_data=.data.gp[1][1].data[356]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[357] {
	    name="VSMatrixPosD2_Marker_Fm_VTAp_netrel";
	    m_data=.data.gp[1][1].data[357]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[358] {
	    name="VSMatrixPosD2_Deep_Mod_Fm_VSMatrixPosD1_netrel";
	    m_data=.data.gp[1][1].data[358]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[359] {
	    name="VSMatrixPosD2_Fm_Input_netrel";
	    m_data=.data.gp[1][1].data[359]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[360] {
	    name="VSMatrixNegD2_Marker_Fm_VTAp_netrel";
	    m_data=.data.gp[1][1].data[360]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[361] {
	    name="VSMatrixNegD2_Deep_Mod_Fm_BAAcqNegD2_netrel";
	    m_data=.data.gp[1][1].data[361]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[362] {
	    name="VSMatrixNegD2_Fm_Input_netrel";
	    m_data=.data.gp[1][1].data[362]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[363] {
	    name="VSMatrixNegD1_Marker_Fm_VTAp_netrel";
	    m_data=.data.gp[1][1].data[363]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[364] {
	    name="VSMatrixNegD1_Deep_Mod_Fm_VSMatrixNegD2_netrel";
	    m_data=.data.gp[1][1].data[364]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[365] {
	    name="VSMatrixNegD1_Fm_Input_netrel";
	    m_data=.data.gp[1][1].data[365]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[366] {
	    name="PPTg_p_Fm_CAPos_netrel";
	    m_data=.data.gp[1][1].data[366]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[367] {
	    name="VTAp_Marker_Fm_PPTg_p_netrel";
	    m_data=.data.gp[1][1].data[367]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[368] {
	    name="VTAp_Marker_Fm_LHbRMTg_netrel";
	    m_data=.data.gp[1][1].data[368]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[369] {
	    name="VTAp_Marker_Fm_PosPV_netrel";
	    m_data=.data.gp[1][1].data[369]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[370] {
	    name="VTAp_Marker_Fm_VSPatchPosD1_netrel";
	    m_data=.data.gp[1][1].data[370]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[371] {
	    name="VTAp_Marker_Fm_VSPatchPosD2_netrel";
	    m_data=.data.gp[1][1].data[371]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[372] {
	    name="LHbRMTg_Marker_Fm_PosPV_netrel";
	    m_data=.data.gp[1][1].data[372]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[373] {
	    name="LHbRMTg_Marker_Fm_NegPV_netrel";
	    m_data=.data.gp[1][1].data[373]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[374] {
	    name="LHbRMTg_Marker_Fm_VSPatchPosD1_netrel";
	    m_data=.data.gp[1][1].data[374]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[375] {
	    name="LHbRMTg_Marker_Fm_VSPatchPosD2_netrel";
	    m_data=.data.gp[1][1].data[375]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[376] {
	    name="LHbRMTg_Marker_Fm_VSPatchNegD2_netrel";
	    m_data=.data.gp[1][1].data[376]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[377] {
	    name="LHbRMTg_Marker_Fm_VSPatchNegD1_netrel";
	    m_data=.data.gp[1][1].data[377]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[378] {
	    name="LHbRMTg_Marker_Fm_VSMatrixPosD1_netrel";
	    m_data=.data.gp[1][1].data[378]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[379] {
	    name="LHbRMTg_Marker_Fm_VSMatrixPosD2_netrel";
	    m_data=.data.gp[1][1].data[379]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[380] {
	    name="LHbRMTg_Marker_Fm_VSMatrixNegD2_netrel";
	    m_data=.data.gp[1][1].data[380]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[381] {
	    name="LHbRMTg_Marker_Fm_VSMatrixNegD1_netrel";
	    m_data=.data.gp[1][1].data[381]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[382] {
	    name="PPTg_n_Fm_CANeg_netrel";
	    m_data=.data.gp[1][1].data[382]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[383] {
	    name="VTAn_Marker_Fm_PPTg_n_netrel";
	    m_data=.data.gp[1][1].data[383]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[384] {
	    name="VTAn_Marker_Fm_LHbRMTg_netrel";
	    m_data=.data.gp[1][1].data[384]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[385] {
	    name="VTAn_Marker_Fm_NegPV_netrel";
	    m_data=.data.gp[1][1].data[385]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[386] {
	    name="VTAn_Marker_Fm_VSPatchNegD2_netrel";
	    m_data=.data.gp[1][1].data[386]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[387] {
	    name="VTAn_Marker_Fm_VSPatchNegD1_netrel";
	    m_data=.data.gp[1][1].data[387]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[388] {
	    name="DRN_Marker_Fm_NegPV_netrel";
	    m_data=.data.gp[1][1].data[388]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[389] {
	    name="DRN_Marker_Fm_PosPV_netrel";
	    m_data=.data.gp[1][1].data[389]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[390] {
	    name="MatrixGo_Marker_Fm_GPi_netrel";
	    m_data=.data.gp[1][1].data[390]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[391] {
	    name="MatrixGo_Marker_Fm_VTAp_netrel";
	    m_data=.data.gp[1][1].data[391]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[392] {
	    name="MatrixGo_Marker_Fm_MatrixTAN_netrel";
	    m_data=.data.gp[1][1].data[392]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[393] {
	    name="MatrixGo_Marker_Fm_PFCmnt_patch_netrel";
	    m_data=.data.gp[1][1].data[393]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[394] {
	    name="MatrixGo_Deep_Raw_Fm_GPeNoGo_netrel";
	    m_data=.data.gp[1][1].data[394]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[395] {
	    name="MatrixGo_Fm_PFCmnt_deep_netrel";
	    m_data=.data.gp[1][1].data[395]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[396] {
	    name="MatrixGo_Fm_PFCmnt_netrel";
	    m_data=.data.gp[1][1].data[396]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[397] {
	    name="MatrixGo_Fm_Input_netrel";
	    m_data=.data.gp[1][1].data[397]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[398] {
	    name="MatrixNoGo_Marker_Fm_GPi_netrel";
	    m_data=.data.gp[1][1].data[398]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[399] {
	    name="MatrixNoGo_Marker_Fm_VTAp_netrel";
	    m_data=.data.gp[1][1].data[399]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[400] {
	    name="MatrixNoGo_Marker_Fm_MatrixTAN_netrel";
	    m_data=.data.gp[1][1].data[400]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[401] {
	    name="MatrixNoGo_Marker_Fm_PFCmnt_patch_netrel";
	    m_data=.data.gp[1][1].data[401]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[402] {
	    name="MatrixNoGo_Deep_Raw_Fm_GPeNoGo_netrel";
	    m_data=.data.gp[1][1].data[402]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[403] {
	    name="MatrixNoGo_Fm_PFCmnt_deep_netrel";
	    m_data=.data.gp[1][1].data[403]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[404] {
	    name="MatrixNoGo_Fm_PFCmnt_netrel";
	    m_data=.data.gp[1][1].data[404]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[405] {
	    name="MatrixNoGo_Fm_Input_netrel";
	    m_data=.data.gp[1][1].data[405]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[406] {
	    name="MatrixTAN_Marker_Fm_RewTarg_netrel";
	    m_data=.data.gp[1][1].data[406]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[407] {
	    name="MatrixTAN_Fm_Input_netrel";
	    m_data=.data.gp[1][1].data[407]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[408] {
	    name="PFCmnt_patch_Fm_PFCmnt_deep_netrel";
	    m_data=.data.gp[1][1].data[408]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[409] {
	    name="GPeNoGo_Fm_MatrixNoGo_netrel";
	    m_data=.data.gp[1][1].data[409]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[410] {
	    name="GPi_Fm_MatrixGo_netrel";
	    m_data=.data.gp[1][1].data[410]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[411] {
	    name="GPi_Fm_GPeNoGo_netrel";
	    m_data=.data.gp[1][1].data[411]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[412] {
	    name="PFCmnt_Marker_Fm_GPi_netrel";
	    m_data=.data.gp[1][1].data[412]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[413] {
	    name="PFCmnt_Deep_Mod_Fm_PFCmnt_deep_netrel";
	    m_data=.data.gp[1][1].data[413]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[414] {
	    name="PFCmnt_Marker_Fm_PFCout_netrel";
	    m_data=.data.gp[1][1].data[414]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[415] {
	    name="PFCmnt_Fm_PFCmnt_trc_netrel";
	    m_data=.data.gp[1][1].data[415]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[416] {
	    name="PFCmnt_Fm_Input_netrel";
	    m_data=.data.gp[1][1].data[416]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[417] {
	    name="PFCmnt_deep_Ctxt_Fm_PFCmnt_netrel";
	    m_data=.data.gp[1][1].data[417]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[418] {
	    name="PFCmnt_trc_Marker_Fm_GPi_netrel";
	    m_data=.data.gp[1][1].data[418]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[419] {
	    name="PFCmnt_trc_Fm_PFCmnt_netrel";
	    m_data=.data.gp[1][1].data[419]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[420] {
	    name="PFCmnt_trc_Deep_Raw_Fm_Input_netrel";
	    m_data=.data.gp[1][1].data[420]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[421] {
	    name="PFCout_Marker_Fm_GPi_netrel";
	    m_data=.data.gp[1][1].data[421]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[422] {
	    name="PFCout_Deep_Mod_Fm_PFCout_deep_netrel";
	    m_data=.data.gp[1][1].data[422]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[423] {
	    name="PFCout_Fm_PFCmnt_deep_netrel";
	    m_data=.data.gp[1][1].data[423]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[424] {
	    name="PFCout_deep_Ctxt_Fm_PFCout_netrel";
	    m_data=.data.gp[1][1].data[424]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  view_rows=10000;
	  view_range {min=0: max=-1: };
	  page_rows=412;
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=LINE;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=1;
	  point_size=0.01;
	  point_spacing=1;
	  solid_lines=0;
	  bar_space=0.2;
	  bar_depth=0.01;
	  label_spacing=-1;
	  width=1;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis_label_rot=0;
	  x_axis {
	   name="x_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="epoch";
	   col_name_good="epoch";
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	  };
	  z_axis {
	   name="z_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name="batch";
	   col_name_good="batch";
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	  };
	  tot_plots=16;
	  plots {
	   name="plots";
	   el_typ=GraphPlotView;
	   el_def=0;
	   GraphPlotView @[0] {
	    name="EpochOutputData_Graph_plot_1";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="avg_sse";
	    col_name_good="avg_sse";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @[1] {
	    name="EpochOutputData_Graph_plot_2";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="cnt_err";
	    col_name_good="cnt_err";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="red": r=1: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=SQUARE;
	    alt_y=0;
	   };
	   GraphPlotView @[2] {
	    name="EpochOutputData_Graph_plot_3";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="avg_cycles";
	    col_name_good="avg_cycles";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=DIAMOND;
	    alt_y=0;
	   };
	   GraphPlotView @[3] {
	    name="EpochOutputData_Graph_plot_4";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="Hidden_avg_net_sd";
	    col_name_good="Hidden_avg_net_sd";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0.325586: fix_max=0: max=0.462465: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=1;
	   };
	   GraphPlotView @[4] {
	    name="EpochOutputData_Graph_plot_5";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="Hidden_avg_cos_diff";
	    col_name_good="Hidden_avg_cos_diff";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0.921425: fix_max=0: max=0.998647: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=PLUS;
	    alt_y=0;
	   };
	   GraphPlotView @[5] {
	    name="EpochOutputData_Graph_plot_6";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CROSS;
	    alt_y=0;
	   };
	   GraphPlotView @[6] {
	    name="EpochOutputData_Graph_plot_7";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=STAR;
	    alt_y=0;
	   };
	   GraphPlotView @[7] {
	    name="EpochOutputData_Graph_plot_8";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @[8] {
	    name="EpochOutputData_Graph_plot_9";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @[9] {
	    name="EpochOutputData_Graph_plot_10";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="red": r=1: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=SQUARE;
	    alt_y=0;
	   };
	   GraphPlotView @[10] {
	    name="EpochOutputData_Graph_plot_11";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=DIAMOND;
	    alt_y=0;
	   };
	   GraphPlotView @[11] {
	    name="EpochOutputData_Graph_plot_12";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @[12] {
	    name="EpochOutputData_Graph_plot_13";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=PLUS;
	    alt_y=0;
	   };
	   GraphPlotView @[13] {
	    name="EpochOutputData_Graph_plot_14";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=CROSS;
	    alt_y=0;
	   };
	   GraphPlotView @[14] {
	    name="EpochOutputData_Graph_plot_15";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=1;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=STAR;
	    alt_y=0;
	   };
	   GraphPlotView @[15] {
	    name="EpochOutputData_Graph_plot_16";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	  };
	  errbars {
	   name="errbars";
	   el_typ=GraphPlotView;
	   el_def=0;
	   GraphPlotView @[0] {
	    name="EpochOutputData_Graph_err_1";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @[1] {
	    name="EpochOutputData_Graph_err_2";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @[2] {
	    name="EpochOutputData_Graph_err_3";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @[3] {
	    name="EpochOutputData_Graph_err_4";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @[4] {
	    name="EpochOutputData_Graph_err_5";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @[5] {
	    name="EpochOutputData_Graph_err_6";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @[6] {
	    name="EpochOutputData_Graph_err_7";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @[7] {
	    name="EpochOutputData_Graph_err_8";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @[8] {
	    name="EpochOutputData_Graph_err_9";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @[9] {
	    name="EpochOutputData_Graph_err_10";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @[10] {
	    name="EpochOutputData_Graph_err_11";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @[11] {
	    name="EpochOutputData_Graph_err_12";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @[12] {
	    name="EpochOutputData_Graph_err_13";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @[13] {
	    name="EpochOutputData_Graph_err_14";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @[14] {
	    name="EpochOutputData_Graph_err_15";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @[15] {
	    name="EpochOutputData_Graph_err_16";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	  };
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=FIXED;
	  color_axis {
	   name="color_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   col_name_good=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	  };
	  colorscale {
	   name="colorscale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=0;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  raster_axis {
	   name="raster_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   col_name_good=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	};
       };
       bg_color {r=1: g=1: b=1: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       headlight_intensity=1;
       ambient_light=0;
       camera_params {field_of_view=45: near_distance=0.1: focal=5: far_distance=1000: };
       stereo_view=STEREO_NONE;
       saved_views {
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @[0] {
	 name="Vw_0";
	 view_saved=1;
	 pos {x=1.465: y=0.5129999: z=1.637373: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=2.147373;
	};
	T3SavedView @[1] {
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[2] {
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[3] {
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[4] {
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[5] {
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[6] {
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[7] {
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[8] {
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[9] {
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3Panel @[2] {
       name="TestTrialOutputData";
       m_data=NULL;
       cur_font_size=12;
       visible=1;
       root_view {
	name="root_view";
	m_data=NULL;
	cur_font_size=12;
	m_transform=NULL;
	children {
	 name="children";
	 el_typ=T3DataViewMain;
	 el_def=0;
	 GridTableView @[0] {
	  name="TestTrialOutputData_Grid";
	  m_data=$.data.gp[1][2]$;
	  cur_font_size=12;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name="children";
	   el_typ=GridColView;
	   el_def=0;
	   GridColView @[0] {
	    name="batch";
	    m_data=.data.gp[1][2].data[0]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    scale_min=2.236922e+8;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[1] {
	    name="epoch";
	    m_data=.data.gp[1][2].data[1]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    scale_min=2.236922e+8;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[2] {
	    name="train_mode";
	    m_data=.data.gp[1][2].data[2]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=0;
	    text_width=16;
	    scale_on=1;
	    scale_min=2.236922e+8;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[3] {
	    name="group";
	    m_data=.data.gp[1][2].data[3]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=0;
	    text_width=8;
	    scale_on=1;
	    scale_min=2.236922e+8;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[4] {
	    name="trial";
	    m_data=.data.gp[1][2].data[4]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    scale_min=2.236922e+8;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[5] {
	    name="tick";
	    m_data=.data.gp[1][2].data[5]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=0;
	    text_width=8;
	    scale_on=1;
	    scale_min=2.236922e+8;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[6] {
	    name="time";
	    m_data=.data.gp[1][2].data[6]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=0;
	    text_width=8;
	    scale_on=1;
	    scale_min=2.236922e+8;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[7] {
	    name="trial_name";
	    m_data=.data.gp[1][2].data[7]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=16;
	    scale_on=1;
	    scale_min=2.236922e+8;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[8] {
	    name="group_name";
	    m_data=.data.gp[1][2].data[8]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=0;
	    text_width=16;
	    scale_on=1;
	    scale_min=2.236922e+8;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[9] {
	    name="output_name";
	    m_data=.data.gp[1][2].data[9]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=16;
	    scale_on=1;
	    scale_min=2.236922e+8;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[10] {
	    name="rt_cycles";
	    m_data=.data.gp[1][2].data[10]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    scale_min=2.236922e+8;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[11] {
	    name="sse";
	    m_data=.data.gp[1][2].data[11]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    scale_min=2.236922e+8;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[12] {
	    name="norm_err";
	    m_data=.data.gp[1][2].data[12]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    scale_min=2.236922e+8;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[13] {
	    name="cos_err";
	    m_data=.data.gp[1][2].data[13]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    scale_min=2.236922e+8;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[14] {
	    name="ext_rew";
	    m_data=.data.gp[1][2].data[14]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    scale_min=2.236922e+8;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[15] {
	    name="Output_lay_sse";
	    m_data=.data.gp[1][2].data[15]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    scale_min=2.236922e+8;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[16] {
	    name="Output_lay_bin_err";
	    m_data=.data.gp[1][2].data[16]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    scale_min=0;
	    scale_max=-1.843882e-35;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[17] {
	    name="Output_lay_norm_err";
	    m_data=.data.gp[1][2].data[17]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    scale_min=0;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[18] {
	    name="Output_lay_cos_err";
	    m_data=.data.gp[1][2].data[18]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    scale_min=0;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[19] {
	    name="Hidden_lay_net_sd";
	    m_data=.data.gp[1][2].data[19]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    scale_min=1.161396e-41;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[20] {
	    name="Output_lay_net_sd";
	    m_data=.data.gp[1][2].data[20]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    scale_min=0;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[21] {
	    name="PosPV_lay_net_sd";
	    m_data=.data.gp[1][2].data[21]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    scale_min=2.236922e+8;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[22] {
	    name="ExtRew_lay_net_sd";
	    m_data=.data.gp[1][2].data[22]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    scale_min=0;
	    scale_max=-0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[23] {
	    name="LatAmyg_lay_net_sd";
	    m_data=.data.gp[1][2].data[23]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    scale_min=2.236922e+8;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[24] {
	    name="BAAcqPosD1_lay_net_sd";
	    m_data=.data.gp[1][2].data[24]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    scale_min=2.236922e+8;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[25] {
	    name="BAExtPosD2_lay_net_sd";
	    m_data=.data.gp[1][2].data[25]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    scale_min=2.236922e+8;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[26] {
	    name="CAPos_lay_net_sd";
	    m_data=.data.gp[1][2].data[26]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    scale_min=-0.8571429;
	    scale_max=-0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[27] {
	    name="BAAcqNegD2_lay_net_sd";
	    m_data=.data.gp[1][2].data[27]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    scale_min=2.236922e+8;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[28] {
	    name="BAExtNegD1_lay_net_sd";
	    m_data=.data.gp[1][2].data[28]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    scale_min=2.236922e+8;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[29] {
	    name="CANeg_lay_net_sd";
	    m_data=.data.gp[1][2].data[29]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    scale_min=0;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[30] {
	    name="VSPatchPosD1_lay_net_sd";
	    m_data=.data.gp[1][2].data[30]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    scale_min=2.236922e+8;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[31] {
	    name="VSPatchPosD2_lay_net_sd";
	    m_data=.data.gp[1][2].data[31]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    scale_min=2.236922e+8;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[32] {
	    name="VSPatchNegD2_lay_net_sd";
	    m_data=.data.gp[1][2].data[32]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    scale_min=2.236922e+8;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[33] {
	    name="VSPatchNegD1_lay_net_sd";
	    m_data=.data.gp[1][2].data[33]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    scale_min=2.236922e+8;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[34] {
	    name="VSMatrixPosD1_lay_net_sd";
	    m_data=.data.gp[1][2].data[34]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    scale_min=2.236922e+8;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[35] {
	    name="VSMatrixPosD2_lay_net_sd";
	    m_data=.data.gp[1][2].data[35]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    scale_min=2.236922e+8;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[36] {
	    name="VSMatrixNegD2_lay_net_sd";
	    m_data=.data.gp[1][2].data[36]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    scale_min=2.236922e+8;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[37] {
	    name="VSMatrixNegD1_lay_net_sd";
	    m_data=.data.gp[1][2].data[37]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    scale_min=2.236922e+8;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[38] {
	    name="PPTg_p_lay_net_sd";
	    m_data=.data.gp[1][2].data[38]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    scale_min=0;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[39] {
	    name="VTAp_lay_net_sd";
	    m_data=.data.gp[1][2].data[39]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    scale_min=0;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[40] {
	    name="LHbRMTg_lay_net_sd";
	    m_data=.data.gp[1][2].data[40]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    scale_min=0;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[41] {
	    name="PPTg_n_lay_net_sd";
	    m_data=.data.gp[1][2].data[41]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    scale_min=0;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[42] {
	    name="VTAn_lay_net_sd";
	    m_data=.data.gp[1][2].data[42]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    scale_min=0;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[43] {
	    name="DRN_lay_net_sd";
	    m_data=.data.gp[1][2].data[43]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    scale_min=-2.295239;
	    scale_max=1.428571;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[44] {
	    name="MatrixGo_lay_net_sd";
	    m_data=.data.gp[1][2].data[44]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    scale_min=2.236922e+8;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[45] {
	    name="MatrixNoGo_lay_net_sd";
	    m_data=.data.gp[1][2].data[45]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    scale_min=2.236922e+8;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[46] {
	    name="MatrixTAN_lay_net_sd";
	    m_data=.data.gp[1][2].data[46]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    scale_min=2.236922e+8;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[47] {
	    name="PFCmnt_patch_lay_net_sd";
	    m_data=.data.gp[1][2].data[47]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    scale_min=2.236922e+8;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[48] {
	    name="GPeNoGo_lay_net_sd";
	    m_data=.data.gp[1][2].data[48]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    scale_min=2.236922e+8;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[49] {
	    name="GPi_lay_net_sd";
	    m_data=.data.gp[1][2].data[49]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    scale_min=2.236922e+8;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[50] {
	    name="PFCmnt_lay_net_sd";
	    m_data=.data.gp[1][2].data[50]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    scale_min=2.236922e+8;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[51] {
	    name="PFCmnt_deep_lay_net_sd";
	    m_data=.data.gp[1][2].data[51]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    scale_min=2.236922e+8;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[52] {
	    name="PFCmnt_trc_lay_net_sd";
	    m_data=.data.gp[1][2].data[52]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    scale_min=2.236922e+8;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[53] {
	    name="PFCout_lay_net_sd";
	    m_data=.data.gp[1][2].data[53]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    scale_min=2.236922e+8;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[54] {
	    name="PFCout_deep_lay_net_sd";
	    m_data=.data.gp[1][2].data[54]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    scale_min=4.360458e+27;
	    scale_max=1.415311e-43;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  view_rows=10;
	  view_range {min=0: max=-1: };
	  page_rows=10;
	  display_on=1;
	  manip_ctrl_on=1;
	  view_cols=5;
	  page_cols=5;
	  col_range {min=0: max=4: };
	  need_scale_update=1;
	  width=1;
	  grid_on=1;
	  header_on=1;
	  row_num_on=0;
	  two_d_font=0;
	  two_d_font_scale=350;
	  mat_val_text=0;
	  colorscale {
	   name="colorscale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=1;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  scale_per_column=0;
	  grid_margin=0.01;
	  grid_line_size=0.002;
	  row_num_width=4;
	  mat_block_spc=0.1;
	  mat_block_height=0;
	  mat_rot=0;
	  mat_trans=0.4;
	  mat_size_range {min=4: max=16: };
	  text_size_range {min=0.02: max=0.05: };
	  click_vals=0;
	  lmb_val=1;
	  mmb_val=0;
	  use_custom_paging=0;
	 };
	};
       };
       bg_color {r=1: g=1: b=1: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       headlight_intensity=1;
       ambient_light=0;
       camera_params {field_of_view=45: near_distance=0.1: focal=5: far_distance=1000: };
       stereo_view=STEREO_NONE;
       saved_views {
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @[0] {
	 name="Vw_0";
	 view_saved=1;
	 pos {x=1.5: y=0.44875: z=1.270144: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=1.276394;
	};
	T3SavedView @[1] {
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[2] {
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[3] {
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[4] {
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[5] {
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[6] {
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[7] {
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[8] {
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[9] {
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
     };
    };
   };
   docks {
    name="docks";
    el_typ=ToolBoxDockViewer;
    el_def=0;
    ToolBoxDockViewer @[0] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_117";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {name="view_win_lft": value=0: val_type_fixed=0: };
      UserDataItem @[1] {name="view_win_top": value=0.008496176: val_type_fixed=0: };
      UserDataItem @[2] {name="view_win_wd": value=0.04357067: val_type_fixed=0: };
      UserDataItem @[3] {name="view_win_ht": value=0.7357689: val_type_fixed=0: };
      UserDataItem @[4] {name="view_win_iconified": value=0: val_type_fixed=0: };
      UserDataItem @[5] {name="view_visible": value=1: val_type_fixed=0: };
     };
     name="Tools";
     m_data=NULL;
     cur_font_size=12;
     visible=1;
     win_name=;
     dock_flags=DV_MOVABLE|DV_FLOATABLE;
     dock_area=1;
    };
   };
  };
 };
 save_view=1;
 save_as_only=0;
 auto_name=1;
 last_change_desc=;
 tree_state{ .;.patches;.docs;.wizards;.ctrl_panels;.active_params;.data;.data.gp[0];.data.gp[1];.data.gp[2];.programs;.programs.gp[0];.programs.gp[1];.networks;.networks[0];.networks[0].specs;.networks[0].layers; };
 networks {
  name="networks";
  el_typ=LeabraNetwork;
  el_def=0;
  LeabraNetwork @[0] {
   UserDataItem_List @*(.user_data_) {
    name="UserDataItem_List_7";
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {name="cos_err": value=1: val_type_fixed=1: };
    UserDataItem @[1] {name="norm_err": value=1: val_type_fixed=1: };
    UserDataItem @[2] {name="ext_rew": value=1: val_type_fixed=1: };
    UserDataItem @[3] {name="minus_output_name": value=1: val_type_fixed=1: };
    UserDataItem @[4] {name="rt_cycles": value=1: val_type_fixed=1: };
    UserDataItem @[5] {name="tot_cycle": value=1: val_type_fixed=1: };
    UserDataItem @[6] {name="phase": value=1: val_type_fixed=1: };
    UserDataItem @[7] {name="quarter": value=1: val_type_fixed=1: };
    UserDataItem @[8] {name="sse": value=1: val_type_fixed=1: };
    UserDataItem @[9] {name="output_name": value=1: val_type_fixed=1: };
    UserDataItem @[10] {name="trial_name": value=1: val_type_fixed=1: };
    UserDataItem @[11] {name="group_name": value=1: val_type_fixed=1: };
    UserDataItem @[12] {name="total_trials": value=1: val_type_fixed=1: };
    UserDataItem @[13] {name="time": value=1: val_type_fixed=1: };
    UserDataItem @[14] {name="cycle": value=1: val_type_fixed=1: };
    UserDataItem @[15] {name="tick": value=1: val_type_fixed=1: };
    UserDataItem @[16] {name="trial": value=1: val_type_fixed=1: };
    UserDataItem @[17] {name="group": value=1: val_type_fixed=1: };
    UserDataItem @[18] {name="epoch": value=1: val_type_fixed=1: };
    UserDataItem @[19] {name="batch": value=1: val_type_fixed=1: };
    UserDataItem @[20] {name="trial_cos_diff": value=1: val_type_fixed=1: };
    UserDataItem @[21] {name="avg_act_diff": value=1: val_type_fixed=1: };
    UserDataItem @[22] {name="cos_diff": value=1: val_type_fixed=1: };
    UserDataItem @[23] {name="minus_cycles": value=1: val_type_fixed=1: };
    UserDataItem @[24] {name="ct_cycle": value=1: val_type_fixed=1: };
    UserDataItem @[25] {name="phase_no": value=1: val_type_fixed=1: };
    UserDataItem @[26] {name="maxda": value=1: val_type_fixed=1: };
   };
   name="Network_0";
   desc=;
   specs {
    name="specs";
    el_typ=LeabraLayerSpec;
    el_def=0;
    LeabraLayerSpec @[0] {
     name="HiddenLayer";
     is_used=1;
     used_status=USED;
     desc=;
     unique{      };
     children {
      name="children";
      el_typ=LeabraLayerSpec;
      el_def=0;
      LeabraLayerSpec @[0] {
       name="Input_Output";
       is_used=1;
       used_status=USED;
       desc=;
       unique{ kwta;lay_inhib;       };
       children {
	name="children";
	el_typ=LeabraLayerSpec;
	el_def=0;
       };
       lay_inhib {on=1: gi=2: ff=1: fb=0.5: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
       unit_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
       multi_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
       multi_gp_geom {size={x=3: y=3: }: st_off={x=-1: y=-1: }: sub_size={x=1: y=1: }: wrap=1: };
       lay_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
       avg_act {targ_init=0.2: fixed=0: use_ext_act=0: tau=100: adjust=1: dt=0.01: };
       inhib_adapt {on=0: tol_pct=0.25: trial_interval=100: tau=200: dt=0.005: };
       inhib_misc {net_thr=0: thr_rel=1: self_fb=0: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
       clamp {hard=1: gain=0.2: avg=0: avg_gain=0.2: };
       decay {trial=1: };
       del_inhib {on=0: prv_trl=0: prv_q=0: };
       margin {pct_marg=0.3: avg_tau=100: adapt_tau=500: tol_pct=0.25: avg_act=0.8: low_thr=0.501: med_thr=0.506: hi_thr=0.508: avg_dt=0.01: adapt_dt=0.002: };
       lay_lrate=1;
       cos_diff {avg_tau=100: lrate_mod=0: lrmod_fm_trc=0: lrmod_z_thr=-1.5: set_net_unlrn=0: avg_dt=0.01: avg_dt_c=0.99: };
       lstats {hog_thr=0.3: dead_thr=0.01: };
      };
     };
     lay_inhib {on=1: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
     unit_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
     multi_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
     multi_gp_geom {size={x=3: y=3: }: st_off={x=-1: y=-1: }: sub_size={x=1: y=1: }: wrap=1: };
     lay_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
     avg_act {targ_init=0.2: fixed=0: use_ext_act=0: tau=100: adjust=1: dt=0.01: };
     inhib_adapt {on=0: tol_pct=0.25: trial_interval=100: tau=200: dt=0.005: };
     inhib_misc {net_thr=0: thr_rel=1: self_fb=0: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
     clamp {hard=1: gain=0.2: avg=0: avg_gain=0.2: };
     decay {trial=1: };
     del_inhib {on=0: prv_trl=0: prv_q=0: };
     margin {pct_marg=0.3: avg_tau=100: adapt_tau=500: tol_pct=0.25: avg_act=0.8: low_thr=0.501: med_thr=0.506: hi_thr=0.508: avg_dt=0.01: adapt_dt=0.002: };
     lay_lrate=1;
     cos_diff {avg_tau=100: lrate_mod=0: lrmod_fm_trc=0: lrmod_z_thr=-1.5: set_net_unlrn=0: avg_dt=0.01: avg_dt_c=0.99: };
     lstats {hog_thr=0.3: dead_thr=0.01: };
    };
    LeabraUnitSpec @[1] {
     name="LeabraUnitSpec_0";
     is_used=1;
     used_status=USED;
     desc=;
     unique{      };
     children {
      name="children";
      el_typ=LeabraUnitSpec;
      el_def=0;
     };
     act_range {min=0: max=1: range=1: scale=1: };
     bias_spec {type=LeabraBiasSpec: spec=.networks[0].specs[2].children[0]$$: };
     sse_tol=0.5;
     act_fun=NOISY_XX1;
     act {thr=0.5: gain=100: nvar=0.005: };
     act_misc {rec_nd=1: avg_nd=1: dif_avg=0: net_gain=1: act_max_hz=100: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
     spike {rise=0: decay=5: g_gain=9: window=3: eq_gain=8: eq_tau=50: eq_dt=0.02: };
     spike_misc {ex=0: exp_slope=0.02: spk_thr=1.2: vm_r=0.3: t_r=3: clamp_max_p=0.12: clamp_type=REGULAR: eff_spk_thr=0.5: };
     opt_thresh {send=0.1: delta=0.005: xcal_lrn=0.01: };
     clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
     vm_range {min=0: max=2: range=2: scale=0.5: };
     init {v_m=0.4: act=0: netin=0: };
     dt {integ=1: vm_tau=3.3: net_tau=1.4: fast_cyc=0: vm_dt=0.3030303: net_dt=0.7142857: };
     act_avg {ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: ss_dt=0.5: s_dt=0.5: m_dt=0.1: s_in_s=0.9: };
     avg_l {init=0.4: gain=2.5: min=0.2: tau=10: lrn_max=0.5: lrn_min=0.0001: dt=0.1: lrn_fact=0.2173478: };
     avg_l_2 {err_mod=1: err_min=0.01: lay_act_thr=0.01: };
     g_bar {e=1: l=0.1: i=1: };
     e_rev {e=1: l=0.3: i=0.25: };
     adapt {on=0: tau=144: vm_gain=0.04: spike_gain=0.00805: Ei_dyn=1: Ei_gain=0.001: Ei_tau=50: dt=0.006944444: Ei_dt=0.02: };
     stp {on=0: f_r_ratio=0.02: rec_tau=200: p0=0.2: p0_norm=0.2: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=5: };
     syn_delay {on=0: delay=4: };
     deep_raw_qtr=Q4;
     deep {on=0: role=SUPER: raw_thr_rel=0.1: raw_thr_abs=0.1: mod_min=0.8: mod_thr=0.1: trc_p_only_m=0: trc_thal_gate=0: trc_avg_clamp=0: trc_deep_gain=0.2: mod_range=0.2: trc_std_gain=0.8: };
     da_mod {on=0: minus=0: plus=0.1: };
     noise_type=NO_NOISE;
     noise {name="noise": type=GAUSSIAN: mean=0: var=0.001: par=1: };
     noise_adapt {trial_fixed=1: mode=FIXED_NOISE: };
     noise_sched {
      name="noise_sched";
      el_typ=SchedItem;
      el_def=0;
      default_val=1;
      interpolate=1;
     };
    };
    LeabraConSpec @[2] {
     name="LeabraConSpec_0";
     is_used=1;
     used_status=USED;
     desc=;
     unique{      };
     children {
      name="children";
      el_typ=LeabraConSpec;
      el_def=0;
      LeabraBiasSpec @[0] {
       name="LeabraBiasSpec_0";
       is_used=1;
       used_status=USED;
       desc=;
       unique{ rnd;wt_limits;wt_scale;wt_scale_init;learn;       };
       children {
	name="children";
	el_typ=LeabraBiasSpec;
	el_def=0;
       };
       rnd {name="rnd": type=UNIFORM: mean=0: var=0: par=1: };
       wt_limits {type=NONE: min=-1: max=5: sym=0: sym_fm_top=0: };
       inhib=0;
       wt_scale {abs=1: rel=1: no_plus_net=0: };
       learn=0;
       learn_qtr=Q4;
       lrate=0.04;
       use_lrate_sched=1;
       cur_lrate=0.08;
       lrs_mult=1;
       lrate_sched {
	name="lrate_sched";
	el_typ=SchedItem;
	el_def=0;
	default_val=1;
	interpolate=0;
       };
       use_unlearnable=1;
       xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
       wt_sig {gain=6: off=1: soft_bound=1: };
       dynlr {dwt_norm=NO_NORM: norm_tau=100: norm_min=0.001: moment=NO_MOMENT: m_tau=10: s_tau=50: l_tau=2: xx1=1: gain=2: lrate_comp=3: norm_dt=0.01: norm_dt_c=0.99: m_dt=0.1: m_dt_c=0.9: s_dt=0.02: l_dt=0.5: };
       wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
       adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
       slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
       deep {on=0: bg_lrate=1: fg_lrate=0: };
       margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.001: };
       dwt_thresh=0.1;
      };
      LeabraConSpec @[1] {
       name="TopDownCons";
       is_used=1;
       used_status=USED;
       desc="top-down connections from output layers down to hidden etc typically need to be weaker than bottom-up";
       unique{ wt_scale;       };
       children {
	name="children";
	el_typ=LeabraConSpec;
	el_def=0;
       };
       rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
       wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
       inhib=0;
       wt_scale {abs=1: rel=0.2: no_plus_net=0: };
       learn=1;
       learn_qtr=Q4;
       lrate=0.04;
       use_lrate_sched=1;
       cur_lrate=0.04;
       lrs_mult=1;
       lrate_sched {
	name="lrate_sched";
	el_typ=SchedItem;
	el_def=0;
	default_val=1;
	interpolate=0;
       };
       use_unlearnable=1;
       xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
       wt_sig {gain=6: off=1: soft_bound=1: };
       dynlr {dwt_norm=NO_NORM: norm_tau=100: norm_min=0.001: moment=NO_MOMENT: m_tau=10: s_tau=50: l_tau=2: xx1=1: gain=2: lrate_comp=3: norm_dt=0.01: norm_dt_c=0.99: m_dt=0.1: m_dt_c=0.9: s_dt=0.02: l_dt=0.5: };
       wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
       adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
       slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
       deep {on=0: bg_lrate=1: fg_lrate=0: };
       margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.001: };
      };
     };
     rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
     wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
     inhib=0;
     wt_scale {abs=1: rel=1: no_plus_net=0: };
     learn=1;
     learn_qtr=Q4;
     lrate=0.04;
     use_lrate_sched=1;
     cur_lrate=0.04;
     lrs_mult=1;
     lrate_sched {
      name="lrate_sched";
      el_typ=SchedItem;
      el_def=0;
      default_val=1;
      interpolate=0;
     };
     use_unlearnable=1;
     xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
     wt_sig {gain=6: off=1: soft_bound=1: };
     dynlr {dwt_norm=NO_NORM: norm_tau=100: norm_min=0.001: moment=NO_MOMENT: m_tau=10: s_tau=50: l_tau=2: xx1=1: gain=2: lrate_comp=3: norm_dt=0.01: norm_dt_c=0.99: m_dt=0.1: m_dt_c=0.9: s_dt=0.02: l_dt=0.5: };
     wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
     adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
     slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
     deep {on=0: bg_lrate=1: fg_lrate=0: };
     margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.001: };
    };
    FullPrjnSpec @[3] {
     name="FullPrjnSpec_0";
     is_used=1;
     used_status=USED;
     desc=;
     unique{      };
     children {
      name="children";
      el_typ=FullPrjnSpec;
      el_def=0;
     };
     self_con=0;
     init_wts=0;
     set_scale=0;
     init_wt_val=1;
     add_rnd_var=0;
     renorm_wts {on=0: mult_norm=1: avg_wt=0.5: };
    };
    BaseSpec_Group @.gp[0] {
     name="PVLV";
     el_typ=LeabraUnitSpec;
     el_def=0;
     LeabraUnitSpec @[0] {
      name="PVLVUnits";
      is_used=1;
      used_status=USED;
      desc=;
      unique{       };
      children {
       name="BaseSpec_Group_1";
       el_typ=LeabraUnitSpec;
       el_def=0;
       LeabraUnitSpec @[0] {
	name="PVUnits";
	is_used=1;
	used_status=USED;
	desc=;
	unique{ deep;	};
	children {
	 name="BaseSpec_Group_1";
	 el_typ=LeabraUnitSpec;
	 el_def=0;
	};
	act_range {min=0: max=1: range=1: scale=1: };
	bias_spec {type=LeabraBiasSpec: spec=.networks[0].specs.gp[0][2].children[0]$$: };
	sse_tol=0.5;
	act_fun=NOISY_XX1;
	act {thr=0.5: gain=100: nvar=0.005: };
	act_misc {rec_nd=1: avg_nd=1: dif_avg=0: net_gain=1: act_max_hz=100: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
	spike {rise=0: decay=5: g_gain=9: window=3: eq_gain=8: eq_tau=50: eq_dt=0.02: };
	spike_misc {ex=0: exp_slope=0.02: spk_thr=1.2: vm_r=0.3: t_r=3: clamp_max_p=0.12: clamp_type=REGULAR: eff_spk_thr=0.5: };
	opt_thresh {send=0.1: delta=0.005: xcal_lrn=0.01: };
	clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
	vm_range {min=0: max=2: range=2: scale=0.5: };
	init {v_m=0.4: act=0: netin=0: };
	dt {integ=1: vm_tau=3.3: net_tau=1.4: fast_cyc=0: vm_dt=0.3030303: net_dt=0.7142857: };
	act_avg {ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: ss_dt=0.5: s_dt=0.5: m_dt=0.1: s_in_s=0.9: };
	avg_l {init=0.4: gain=2.5: min=0.2: tau=10: lrn_max=0.5: lrn_min=0.0001: dt=0.1: lrn_fact=0.2173478: };
	avg_l_2 {err_mod=1: err_min=0.01: lay_act_thr=0.01: };
	g_bar {e=1: l=0.2: i=1: };
	e_rev {e=1: l=0.3: i=0.25: };
	adapt {on=0: tau=144: vm_gain=0.04: spike_gain=0.00805: Ei_dyn=1: Ei_gain=0.001: Ei_tau=50: dt=0.006944444: Ei_dt=0.02: };
	stp {on=0: f_r_ratio=0.02: rec_tau=200: p0=0.2: p0_norm=0.2: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=5: };
	syn_delay {on=0: delay=4: };
	deep_raw_qtr=Q4;
	deep {on=1: role=SUPER: raw_thr_rel=0.1: raw_thr_abs=0.1: mod_min=1: mod_thr=0.1: trc_p_only_m=0: trc_thal_gate=0: trc_avg_clamp=0: trc_deep_gain=0.2: mod_range=0: trc_std_gain=0.8: };
	da_mod {on=0: minus=0: plus=0.01: };
	noise_type=NO_NOISE;
	noise {name="noise": type=GAUSSIAN: mean=0: var=0.001000000047497451: par=1: };
	noise_adapt {trial_fixed=1: mode=FIXED_NOISE: };
	noise_sched {
	 name="noise_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=1;
	};
       };
       LHbRMTgUnitSpec @[1] {
	name="LHbRMTgUnits";
	is_used=1;
	used_status=USED;
	desc=;
	unique{ deep_raw_qtr;act_range;clamp_range;	};
	children {
	 name="BaseSpec_Group_1";
	 el_typ=LHbRMTgUnitSpec;
	 el_def=0;
	};
	act_range {min=-2: max=2: range=4: scale=0.25: };
	bias_spec {type=LeabraBiasSpec: spec=$.networks[0].specs.gp[0][2].children[0]$: };
	sse_tol=0.5;
	act_fun=NOISY_XX1;
	act {thr=0.5: gain=100: nvar=0.005: };
	act_misc {rec_nd=1: avg_nd=1: dif_avg=0: net_gain=1: act_max_hz=100: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
	spike {rise=0: decay=5: g_gain=9: window=3: eq_gain=8: eq_tau=50: eq_dt=0.02: };
	spike_misc {ex=0: exp_slope=0.02: spk_thr=1.2: vm_r=0.3: t_r=3: clamp_max_p=0.12: clamp_type=REGULAR: eff_spk_thr=0.5: };
	opt_thresh {send=0.1: delta=0.005: xcal_lrn=0.01: };
	clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
	vm_range {min=0: max=2: range=2: scale=0.5: };
	init {v_m=0.4: act=0: netin=0: };
	dt {integ=1: vm_tau=3.3: net_tau=1.4: fast_cyc=0: vm_dt=0.3030303: net_dt=0.7142857: };
	act_avg {ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: ss_dt=0.5: s_dt=0.5: m_dt=0.1: s_in_s=0.9: };
	avg_l {init=0.4: gain=2.5: min=0.2: tau=10: lrn_max=0.5: lrn_min=0.0001: dt=0.1: lrn_fact=0.2173478: };
	avg_l_2 {err_mod=1: err_min=0.01: lay_act_thr=0.01: };
	g_bar {e=1: l=0.2: i=1: };
	e_rev {e=1: l=0.3: i=0.25: };
	adapt {on=0: tau=144: vm_gain=0.04: spike_gain=0.00805: Ei_dyn=1: Ei_gain=0.001: Ei_tau=50: dt=0.006944444: Ei_dt=0.02: };
	stp {on=0: f_r_ratio=0.02: rec_tau=200: p0=0.2: p0_norm=0.2: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=5: };
	syn_delay {on=0: delay=4: };
	deep_raw_qtr=Q4;
	deep {on=0: role=SUPER: raw_thr_rel=0.1: raw_thr_abs=0.1: mod_min=0.8: mod_thr=0.1: trc_p_only_m=0: trc_thal_gate=0: trc_avg_clamp=0: trc_deep_gain=0.2: mod_range=0.2: trc_std_gain=0.8: };
	da_mod {on=0: minus=0: plus=0.01: };
	noise_type=NO_NOISE;
	noise {name="noise": type=GAUSSIAN: mean=0: var=0.001000000047497451: par=1: };
	noise_adapt {trial_fixed=1: mode=FIXED_NOISE: };
	noise_sched {
	 name="noise_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=1;
	};
	lhb {patch_cur=1: matrix_td=0: pvneg_discount=0.8: rec_data=0: };
	gains {all=1: vspatch_pos_D1=1: vspatch_pos_D2=1: vspatch_pos_disinhib_gain=0.2: vsmatrix_pos_D1=1: vsmatrix_pos_D2=1: vspatch_neg_D1=1: vspatch_neg_D2=1: vsmatrix_neg_D1=1: vsmatrix_neg_D2=1: };
       };
       PPTgUnitSpec @[2] {
	name="PPTgUnits";
	is_used=1;
	used_status=USED;
	desc=;
	unique{ 	};
	children {
	 name="BaseSpec_Group_1";
	 el_typ=PPTgUnitSpec;
	 el_def=0;
	};
	act_range {min=0: max=1: range=1: scale=1: };
	bias_spec {type=LeabraBiasSpec: spec=$.networks[0].specs.gp[0][2].children[0]$: };
	sse_tol=0.5;
	act_fun=NOISY_XX1;
	act {thr=0.5: gain=100: nvar=0.005: };
	act_misc {rec_nd=1: avg_nd=1: dif_avg=0: net_gain=1: act_max_hz=100: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
	spike {rise=0: decay=5: g_gain=9: window=3: eq_gain=8: eq_tau=50: eq_dt=0.02: };
	spike_misc {ex=0: exp_slope=0.02: spk_thr=1.2: vm_r=0.3: t_r=3: clamp_max_p=0.12: clamp_type=REGULAR: eff_spk_thr=0.5: };
	opt_thresh {send=0.1: delta=0.005: xcal_lrn=0.01: };
	clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
	vm_range {min=0: max=2: range=2: scale=0.5: };
	init {v_m=0.4: act=0: netin=0: };
	dt {integ=1: vm_tau=3.3: net_tau=1.4: fast_cyc=0: vm_dt=0.3030303: net_dt=0.7142857: };
	act_avg {ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: ss_dt=0.5: s_dt=0.5: m_dt=0.1: s_in_s=0.9: };
	avg_l {init=0.4: gain=2.5: min=0.2: tau=10: lrn_max=0.5: lrn_min=0.0001: dt=0.1: lrn_fact=0.2173478: };
	avg_l_2 {err_mod=1: err_min=0.01: lay_act_thr=0.01: };
	g_bar {e=1: l=0.2: i=1: };
	e_rev {e=1: l=0.3: i=0.25: };
	adapt {on=0: tau=144: vm_gain=0.04: spike_gain=0.00805: Ei_dyn=1: Ei_gain=0.001: Ei_tau=50: dt=0.006944444: Ei_dt=0.02: };
	stp {on=0: f_r_ratio=0.02: rec_tau=200: p0=0.2: p0_norm=0.2: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=5: };
	syn_delay {on=0: delay=4: };
	deep_raw_qtr=Q4;
	deep {on=0: role=SUPER: raw_thr_rel=0.1: raw_thr_abs=0.1: mod_min=0.8: mod_thr=0.1: trc_p_only_m=0: trc_thal_gate=0: trc_avg_clamp=0: trc_deep_gain=0.2: mod_range=0.2: trc_std_gain=0.8: };
	da_mod {on=0: minus=0: plus=0.01: };
	noise_type=NO_NOISE;
	noise {name="noise": type=GAUSSIAN: mean=0: var=0.001000000047497451: par=1: };
	noise_adapt {trial_fixed=1: mode=FIXED_NOISE: };
	noise_sched {
	 name="noise_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=1;
	};
	d_net_gain=1;
	clamp_act=1;
	act_thr=0;
       };
       VTAUnitSpec @[3] {
	name="VTAUnits_p";
	is_used=1;
	used_status=USED;
	desc=;
	unique{ deep_raw_qtr;act_range;clamp_range;da_val;	};
	children {
	 name="BaseSpec_Group_1";
	 el_typ=VTAUnitSpec;
	 el_def=0;
	 VTAUnitSpec @[0] {
	  name="VTAUnits_n";
	  is_used=1;
	  used_status=USED;
	  desc=;
	  unique{ deep_raw_qtr;act_range;clamp_range;da_val;gains;	  };
	  children {
	   name="BaseSpec_Group_1";
	   el_typ=VTAUnitSpec;
	   el_def=0;
	  };
	  act_range {min=-2: max=2: range=4: scale=0.25: };
	  bias_spec {type=LeabraBiasSpec: spec=$.networks[0].specs.gp[0][2].children[0]$: };
	  sse_tol=0.5;
	  act_fun=NOISY_XX1;
	  act {thr=0.5: gain=100: nvar=0.005: };
	  act_misc {rec_nd=1: avg_nd=1: dif_avg=0: net_gain=1: act_max_hz=100: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
	  spike {rise=0: decay=5: g_gain=9: window=3: eq_gain=8: eq_tau=50: eq_dt=0.02: };
	  spike_misc {ex=0: exp_slope=0.02: spk_thr=1.2: vm_r=0.3: t_r=3: clamp_max_p=0.12: clamp_type=REGULAR: eff_spk_thr=0.5: };
	  opt_thresh {send=0.1: delta=0.005: xcal_lrn=0.01: };
	  clamp_range {min=-2: max=2: range=4: scale=0.25: };
	  vm_range {min=0: max=2: range=2: scale=0.5: };
	  init {v_m=0.4: act=0: netin=0: };
	  dt {integ=1: vm_tau=3.3: net_tau=1.4: fast_cyc=0: vm_dt=0.3030303: net_dt=0.7142857: };
	  act_avg {ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: ss_dt=0.5: s_dt=0.5: m_dt=0.1: s_in_s=0.9: };
	  avg_l {init=0.4: gain=2.5: min=0.2: tau=10: lrn_max=0.5: lrn_min=0.0001: dt=0.1: lrn_fact=0.2173478: };
	  avg_l_2 {err_mod=1: err_min=0.01: lay_act_thr=0.01: };
	  g_bar {e=1: l=0.2: i=1: };
	  e_rev {e=1: l=0.3: i=0.25: };
	  adapt {on=0: tau=144: vm_gain=0.04: spike_gain=0.00805: Ei_dyn=1: Ei_gain=0.001: Ei_tau=50: dt=0.006944444: Ei_dt=0.02: };
	  stp {on=0: f_r_ratio=0.02: rec_tau=200: p0=0.2: p0_norm=0.2: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=5: };
	  syn_delay {on=0: delay=4: };
	  deep_raw_qtr=Q4;
	  deep {on=0: role=SUPER: raw_thr_rel=0.1: raw_thr_abs=0.1: mod_min=0.8: mod_thr=0.1: trc_p_only_m=0: trc_thal_gate=0: trc_avg_clamp=0: trc_deep_gain=0.2: mod_range=0.2: trc_std_gain=0.8: };
	  da_mod {on=0: minus=0: plus=0.01: };
	  noise_type=NO_NOISE;
	  noise {name="noise": type=GAUSSIAN: mean=0: var=0.001000000047497451: par=1: };
	  noise_adapt {trial_fixed=1: mode=FIXED_NOISE: };
	  noise_sched {
	   name="noise_sched";
	   el_typ=SchedItem;
	   el_def=0;
	   default_val=1;
	   interpolate=1;
	  };
	  da_val=DA_N;
	  da {tonic_da=0: patch_cur=1: se_gain=0.1: rec_data=0: };
	  gains {da_gain=1: pptg_gain=1: lhb_gain=1: pv_gain=1: pvi_burst_shunt_gain=0.9: pvi_anti_burst_shunt_gain=1: pvi_dip_shunt_gain=0: pvi_anti_dip_shunt_gain=0: };
	  lv_block {pos_pv=1: lhb_dip=2: };
	 };
	};
	act_range {min=-2: max=2: range=4: scale=0.25: };
	bias_spec {type=LeabraBiasSpec: spec=$.networks[0].specs.gp[0][2].children[0]$: };
	sse_tol=0.5;
	act_fun=NOISY_XX1;
	act {thr=0.5: gain=100: nvar=0.005: };
	act_misc {rec_nd=1: avg_nd=1: dif_avg=0: net_gain=1: act_max_hz=100: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
	spike {rise=0: decay=5: g_gain=9: window=3: eq_gain=8: eq_tau=50: eq_dt=0.02: };
	spike_misc {ex=0: exp_slope=0.02: spk_thr=1.2: vm_r=0.3: t_r=3: clamp_max_p=0.12: clamp_type=REGULAR: eff_spk_thr=0.5: };
	opt_thresh {send=0.1: delta=0.005: xcal_lrn=0.01: };
	clamp_range {min=-2: max=2: range=4: scale=0.25: };
	vm_range {min=0: max=2: range=2: scale=0.5: };
	init {v_m=0.4: act=0: netin=0: };
	dt {integ=1: vm_tau=3.3: net_tau=1.4: fast_cyc=0: vm_dt=0.3030303: net_dt=0.7142857: };
	act_avg {ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: ss_dt=0.5: s_dt=0.5: m_dt=0.1: s_in_s=0.9: };
	avg_l {init=0.4: gain=2.5: min=0.2: tau=10: lrn_max=0.5: lrn_min=0.0001: dt=0.1: lrn_fact=0.2173478: };
	avg_l_2 {err_mod=1: err_min=0.01: lay_act_thr=0.01: };
	g_bar {e=1: l=0.2: i=1: };
	e_rev {e=1: l=0.3: i=0.25: };
	adapt {on=0: tau=144: vm_gain=0.04: spike_gain=0.00805: Ei_dyn=1: Ei_gain=0.001: Ei_tau=50: dt=0.006944444: Ei_dt=0.02: };
	stp {on=0: f_r_ratio=0.02: rec_tau=200: p0=0.2: p0_norm=0.2: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=5: };
	syn_delay {on=0: delay=4: };
	deep_raw_qtr=Q4;
	deep {on=0: role=SUPER: raw_thr_rel=0.1: raw_thr_abs=0.1: mod_min=0.8: mod_thr=0.1: trc_p_only_m=0: trc_thal_gate=0: trc_avg_clamp=0: trc_deep_gain=0.2: mod_range=0.2: trc_std_gain=0.8: };
	da_mod {on=0: minus=0: plus=0.01: };
	noise_type=NO_NOISE;
	noise {name="noise": type=GAUSSIAN: mean=0: var=0.001000000047497451: par=1: };
	noise_adapt {trial_fixed=1: mode=FIXED_NOISE: };
	noise_sched {
	 name="noise_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=1;
	};
	da_val=DA_P;
	da {tonic_da=0: patch_cur=1: se_gain=0.1: rec_data=0: };
	gains {da_gain=1: pptg_gain=1: lhb_gain=1: pv_gain=1: pvi_burst_shunt_gain=1.05: pvi_anti_burst_shunt_gain=1: pvi_dip_shunt_gain=0: pvi_anti_dip_shunt_gain=0: };
	lv_block {pos_pv=1: lhb_dip=2: };
       };
       DRNUnitSpec @[4] {
	name="DRNUnits";
	is_used=1;
	used_status=USED;
	desc=;
	unique{ 	};
	children {
	 name="BaseSpec_Group_1";
	 el_typ=DRNUnitSpec;
	 el_def=0;
	};
	act_range {min=0: max=1: range=1: scale=1: };
	bias_spec {type=LeabraBiasSpec: spec=$.networks[0].specs.gp[0][2].children[0]$: };
	sse_tol=0.5;
	act_fun=NOISY_XX1;
	act {thr=0.5: gain=100: nvar=0.005: };
	act_misc {rec_nd=1: avg_nd=1: dif_avg=0: net_gain=1: act_max_hz=100: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
	spike {rise=0: decay=5: g_gain=9: window=3: eq_gain=8: eq_tau=50: eq_dt=0.02: };
	spike_misc {ex=0: exp_slope=0.02: spk_thr=1.2: vm_r=0.3: t_r=3: clamp_max_p=0.12: clamp_type=REGULAR: eff_spk_thr=0.5: };
	opt_thresh {send=0.1: delta=0.005: xcal_lrn=0.01: };
	clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
	vm_range {min=0: max=2: range=2: scale=0.5: };
	init {v_m=0.4: act=0: netin=0: };
	dt {integ=1: vm_tau=3.3: net_tau=1.4: fast_cyc=0: vm_dt=0.3030303: net_dt=0.7142857: };
	act_avg {ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: ss_dt=0.5: s_dt=0.5: m_dt=0.1: s_in_s=0.9: };
	avg_l {init=0.4: gain=2.5: min=0.2: tau=10: lrn_max=0.5: lrn_min=0.0001: dt=0.1: lrn_fact=0.2173478: };
	avg_l_2 {err_mod=1: err_min=0.01: lay_act_thr=0.01: };
	g_bar {e=1: l=0.2: i=1: };
	e_rev {e=1: l=0.3: i=0.25: };
	adapt {on=0: tau=144: vm_gain=0.04: spike_gain=0.00805: Ei_dyn=1: Ei_gain=0.001: Ei_tau=50: dt=0.006944444: Ei_dt=0.02: };
	stp {on=0: f_r_ratio=0.02: rec_tau=200: p0=0.2: p0_norm=0.2: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=5: };
	syn_delay {on=0: delay=4: };
	deep_raw_qtr=Q4;
	deep {on=0: role=SUPER: raw_thr_rel=0.1: raw_thr_abs=0.1: mod_min=0.8: mod_thr=0.1: trc_p_only_m=0: trc_thal_gate=0: trc_avg_clamp=0: trc_deep_gain=0.2: mod_range=0.2: trc_std_gain=0.8: };
	da_mod {on=0: minus=0: plus=0.01: };
	noise_type=NO_NOISE;
	noise {name="noise": type=GAUSSIAN: mean=0: var=0.001000000047497451: par=1: };
	noise_adapt {trial_fixed=1: mode=FIXED_NOISE: };
	noise_sched {
	 name="noise_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=1;
	};
	se {se_out_gain=1: se_base=0: se_inc_tau=50: da_pos_tau=10: da_neg_tau=10: se_pv_tau=20: se_state_tau=200: sub_pos=1: se_inc_dt=0.02: da_pos_dt=0.09999999: da_neg_dt=0.09999999: se_pv_dt=0.05: se_state_dt=0.005: };
       };
       TANUnitSpec @[5] {
	name="TANUnits";
	is_used=1;
	used_status=USED;
	desc=;
	unique{ deep_raw_qtr;	};
	children {
	 name="BaseSpec_Group_1";
	 el_typ=TANUnitSpec;
	 el_def=0;
	};
	act_range {min=0: max=1: range=1: scale=1: };
	bias_spec {type=LeabraBiasSpec: spec=$.networks[0].specs.gp[0][2].children[0]$: };
	sse_tol=0.5;
	act_fun=NOISY_XX1;
	act {thr=0.5: gain=100: nvar=0.005: };
	act_misc {rec_nd=1: avg_nd=1: dif_avg=0: net_gain=1: act_max_hz=100: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
	spike {rise=0: decay=5: g_gain=9: window=3: eq_gain=8: eq_tau=50: eq_dt=0.02: };
	spike_misc {ex=0: exp_slope=0.02: spk_thr=1.2: vm_r=0.3: t_r=3: clamp_max_p=0.12: clamp_type=REGULAR: eff_spk_thr=0.5: };
	opt_thresh {send=0.1: delta=0.005: xcal_lrn=0.01: };
	clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
	vm_range {min=0: max=2: range=2: scale=0.5: };
	init {v_m=0.4: act=0: netin=0: };
	dt {integ=1: vm_tau=3.3: net_tau=1.4: fast_cyc=0: vm_dt=0.3030303: net_dt=0.7142857: };
	act_avg {ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: ss_dt=0.5: s_dt=0.5: m_dt=0.1: s_in_s=0.9: };
	avg_l {init=0.4: gain=2.5: min=0.2: tau=10: lrn_max=0.5: lrn_min=0.0001: dt=0.1: lrn_fact=0.2173478: };
	avg_l_2 {err_mod=1: err_min=0.01: lay_act_thr=0.01: };
	g_bar {e=1: l=0.2: i=1: };
	e_rev {e=1: l=0.3: i=0.25: };
	adapt {on=0: tau=144: vm_gain=0.04: spike_gain=0.00805: Ei_dyn=1: Ei_gain=0.001: Ei_tau=50: dt=0.006944444: Ei_dt=0.02: };
	stp {on=0: f_r_ratio=0.02: rec_tau=200: p0=0.2: p0_norm=0.2: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=5: };
	syn_delay {on=0: delay=4: };
	deep_raw_qtr=Q1|Q2|Q3|Q4;
	deep {on=0: role=SUPER: raw_thr_rel=0.1: raw_thr_abs=0.1: mod_min=0.8: mod_thr=0.1: trc_p_only_m=0: trc_thal_gate=0: trc_avg_clamp=0: trc_deep_gain=0.2: mod_range=0.2: trc_std_gain=0.8: };
	da_mod {on=0: minus=0: plus=0.01: };
	noise_type=NO_NOISE;
	noise {name="noise": type=GAUSSIAN: mean=0: var=0.001000000047497451: par=1: };
	noise_adapt {trial_fixed=1: mode=FIXED_NOISE: };
	noise_sched {
	 name="noise_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=1;
	};
	tan {plus_fm_pv_vs=1: send_plus=1: };
       };
       LeabraUnitSpec @[6] {
	name="CeMUnits";
	is_used=1;
	used_status=USED;
	desc=;
	unique{ act;	};
	children {
	 name="BaseSpec_Group_1";
	 el_typ=LeabraUnitSpec;
	 el_def=0;
	};
	act_range {min=0: max=1: range=1: scale=1: };
	bias_spec {type=LeabraBiasSpec: spec=$.networks[0].specs.gp[0][2].children[0]$: };
	sse_tol=0.5;
	act_fun=NOISY_XX1;
	act {thr=0.5: gain=100: nvar=0.005: };
	act_misc {rec_nd=1: avg_nd=1: dif_avg=0: net_gain=1: act_max_hz=100: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
	spike {rise=0: decay=5: g_gain=9: window=3: eq_gain=8: eq_tau=50: eq_dt=0.02: };
	spike_misc {ex=0: exp_slope=0.02: spk_thr=1.2: vm_r=0.3: t_r=3: clamp_max_p=0.12: clamp_type=REGULAR: eff_spk_thr=0.5: };
	opt_thresh {send=0.1: delta=0.005: xcal_lrn=0.01: };
	clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
	vm_range {min=0: max=2: range=2: scale=0.5: };
	init {v_m=0.4: act=0: netin=0: };
	dt {integ=1: vm_tau=3.3: net_tau=1.4: fast_cyc=0: vm_dt=0.3030303: net_dt=0.7142857: };
	act_avg {ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: ss_dt=0.5: s_dt=0.5: m_dt=0.1: s_in_s=0.9: };
	avg_l {init=0.4: gain=2.5: min=0.2: tau=10: lrn_max=0.5: lrn_min=0.0001: dt=0.1: lrn_fact=0.2173478: };
	avg_l_2 {err_mod=1: err_min=0.01: lay_act_thr=0.01: };
	g_bar {e=1: l=0.2: i=1: };
	e_rev {e=1: l=0.3: i=0.25: };
	adapt {on=0: tau=144: vm_gain=0.04: spike_gain=0.00805: Ei_dyn=1: Ei_gain=0.001: Ei_tau=50: dt=0.006944444: Ei_dt=0.02: };
	stp {on=0: f_r_ratio=0.02: rec_tau=200: p0=0.2: p0_norm=0.2: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=5: };
	syn_delay {on=0: delay=4: };
	deep_raw_qtr=Q4;
	deep {on=0: role=SUPER: raw_thr_rel=0.1: raw_thr_abs=0.1: mod_min=0.8: mod_thr=0.1: trc_p_only_m=0: trc_thal_gate=0: trc_avg_clamp=0: trc_deep_gain=0.2: mod_range=0.2: trc_std_gain=0.8: };
	da_mod {on=0: minus=0: plus=0.01: };
	noise_type=NO_NOISE;
	noise {name="noise": type=GAUSSIAN: mean=0: var=0.001000000047497451: par=1: };
	noise_adapt {trial_fixed=1: mode=FIXED_NOISE: };
	noise_sched {
	 name="noise_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=1;
	};
       };
       LeabraUnitSpec @[7] {
	name="LatAmygUnits";
	is_used=1;
	used_status=USED;
	desc=;
	unique{ 	};
	children {
	 name="BaseSpec_Group_1";
	 el_typ=LeabraUnitSpec;
	 el_def=0;
	};
	act_range {min=0: max=1: range=1: scale=1: };
	bias_spec {type=LeabraBiasSpec: spec=$.networks[0].specs.gp[0][2].children[0]$: };
	sse_tol=0.5;
	act_fun=NOISY_XX1;
	act {thr=0.5: gain=100: nvar=0.005: };
	act_misc {rec_nd=1: avg_nd=1: dif_avg=0: net_gain=1: act_max_hz=100: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
	spike {rise=0: decay=5: g_gain=9: window=3: eq_gain=8: eq_tau=50: eq_dt=0.02: };
	spike_misc {ex=0: exp_slope=0.02: spk_thr=1.2: vm_r=0.3: t_r=3: clamp_max_p=0.12: clamp_type=REGULAR: eff_spk_thr=0.5: };
	opt_thresh {send=0.1: delta=0.005: xcal_lrn=0.01: };
	clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
	vm_range {min=0: max=2: range=2: scale=0.5: };
	init {v_m=0.4: act=0: netin=0: };
	dt {integ=1: vm_tau=3.3: net_tau=1.4: fast_cyc=0: vm_dt=0.3030303: net_dt=0.7142857: };
	act_avg {ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: ss_dt=0.5: s_dt=0.5: m_dt=0.1: s_in_s=0.9: };
	avg_l {init=0.4: gain=2.5: min=0.2: tau=10: lrn_max=0.5: lrn_min=0.0001: dt=0.1: lrn_fact=0.2173478: };
	avg_l_2 {err_mod=1: err_min=0.01: lay_act_thr=0.01: };
	g_bar {e=1: l=0.2: i=1: };
	e_rev {e=1: l=0.3: i=0.25: };
	adapt {on=0: tau=144: vm_gain=0.04: spike_gain=0.00805: Ei_dyn=1: Ei_gain=0.001: Ei_tau=50: dt=0.006944444: Ei_dt=0.02: };
	stp {on=0: f_r_ratio=0.02: rec_tau=200: p0=0.2: p0_norm=0.2: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=5: };
	syn_delay {on=0: delay=4: };
	deep_raw_qtr=Q4;
	deep {on=0: role=SUPER: raw_thr_rel=0.1: raw_thr_abs=0.1: mod_min=0.8: mod_thr=0.1: trc_p_only_m=0: trc_thal_gate=0: trc_avg_clamp=0: trc_deep_gain=0.2: mod_range=0.2: trc_std_gain=0.8: };
	da_mod {on=0: minus=0: plus=0.01: };
	noise_type=NO_NOISE;
	noise {name="noise": type=GAUSSIAN: mean=0: var=0.001000000047497451: par=1: };
	noise_adapt {trial_fixed=1: mode=FIXED_NOISE: };
	noise_sched {
	 name="noise_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=1;
	};
       };
       BasAmygUnitSpec @[8] {
	name="BAAcqPosD1Units";
	is_used=1;
	used_status=USED;
	desc=;
	unique{ deep;acq_ext;valence;	};
	children {
	 name="BaseSpec_Group_1";
	 el_typ=BasAmygUnitSpec;
	 el_def=0;
	 BasAmygUnitSpec @[0] {
	  name="BAExtPosD2Units";
	  is_used=1;
	  used_status=USED;
	  desc=;
	  unique{ deep;acq_ext;valence;g_bar;	  };
	  children {
	   name="BaseSpec_Group_1";
	   el_typ=BasAmygUnitSpec;
	   el_def=0;
	  };
	  act_range {min=0: max=1: range=1: scale=1: };
	  bias_spec {type=LeabraBiasSpec: spec=$.networks[0].specs.gp[0][2].children[0]$: };
	  sse_tol=0.5;
	  act_fun=NOISY_XX1;
	  act {thr=0.5: gain=100: nvar=0.005: };
	  act_misc {rec_nd=1: avg_nd=1: dif_avg=0: net_gain=1: act_max_hz=100: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
	  spike {rise=0: decay=5: g_gain=9: window=3: eq_gain=8: eq_tau=50: eq_dt=0.02: };
	  spike_misc {ex=0: exp_slope=0.02: spk_thr=1.2: vm_r=0.3: t_r=3: clamp_max_p=0.12: clamp_type=REGULAR: eff_spk_thr=0.5: };
	  opt_thresh {send=0.1: delta=0.005: xcal_lrn=0.01: };
	  clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
	  vm_range {min=0: max=2: range=2: scale=0.5: };
	  init {v_m=0.4: act=0: netin=0: };
	  dt {integ=1: vm_tau=3.3: net_tau=1.4: fast_cyc=0: vm_dt=0.3030303: net_dt=0.7142857: };
	  act_avg {ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: ss_dt=0.5: s_dt=0.5: m_dt=0.1: s_in_s=0.9: };
	  avg_l {init=0.4: gain=2.5: min=0.2: tau=10: lrn_max=0.5: lrn_min=0.0001: dt=0.1: lrn_fact=0.2173478: };
	  avg_l_2 {err_mod=1: err_min=0.01: lay_act_thr=0.01: };
	  g_bar {e=1: l=0.3: i=1: };
	  e_rev {e=1: l=0.3: i=0.25: };
	  adapt {on=0: tau=144: vm_gain=0.04: spike_gain=0.00805: Ei_dyn=1: Ei_gain=0.001: Ei_tau=50: dt=0.006944444: Ei_dt=0.02: };
	  stp {on=0: f_r_ratio=0.02: rec_tau=200: p0=0.2: p0_norm=0.2: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=5: };
	  syn_delay {on=0: delay=4: };
	  deep_raw_qtr=Q4;
	  deep {on=1: role=SUPER: raw_thr_rel=0.1: raw_thr_abs=0.1: mod_min=0: mod_thr=0.01: trc_p_only_m=0: trc_thal_gate=0: trc_avg_clamp=0: trc_deep_gain=0.2: mod_range=1: trc_std_gain=0.8: };
	  da_mod {on=0: minus=0: plus=0.01: };
	  noise_type=NO_NOISE;
	  noise {name="noise": type=GAUSSIAN: mean=0: var=0.001000000047497451: par=1: };
	  noise_adapt {trial_fixed=1: mode=FIXED_NOISE: };
	  noise_sched {
	   name="noise_sched";
	   el_typ=SchedItem;
	   el_def=0;
	   default_val=1;
	   interpolate=1;
	  };
	  acq_ext=EXT;
	  valence=APPETITIVE;
	  dar=D2R;
	 };
	 BasAmygUnitSpec @[1] {
	  name="BAAcqNegD2Units";
	  is_used=1;
	  used_status=USED;
	  desc=;
	  unique{ deep;acq_ext;valence;	  };
	  children {
	   name="BaseSpec_Group_1";
	   el_typ=BasAmygUnitSpec;
	   el_def=0;
	  };
	  act_range {min=0: max=1: range=1: scale=1: };
	  bias_spec {type=LeabraBiasSpec: spec=$.networks[0].specs.gp[0][2].children[0]$: };
	  sse_tol=0.5;
	  act_fun=NOISY_XX1;
	  act {thr=0.5: gain=100: nvar=0.005: };
	  act_misc {rec_nd=1: avg_nd=1: dif_avg=0: net_gain=1: act_max_hz=100: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
	  spike {rise=0: decay=5: g_gain=9: window=3: eq_gain=8: eq_tau=50: eq_dt=0.02: };
	  spike_misc {ex=0: exp_slope=0.02: spk_thr=1.2: vm_r=0.3: t_r=3: clamp_max_p=0.12: clamp_type=REGULAR: eff_spk_thr=0.5: };
	  opt_thresh {send=0.1: delta=0.005: xcal_lrn=0.01: };
	  clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
	  vm_range {min=0: max=2: range=2: scale=0.5: };
	  init {v_m=0.4: act=0: netin=0: };
	  dt {integ=1: vm_tau=3.3: net_tau=1.4: fast_cyc=0: vm_dt=0.3030303: net_dt=0.7142857: };
	  act_avg {ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: ss_dt=0.5: s_dt=0.5: m_dt=0.1: s_in_s=0.9: };
	  avg_l {init=0.4: gain=2.5: min=0.2: tau=10: lrn_max=0.5: lrn_min=0.0001: dt=0.1: lrn_fact=0.2173478: };
	  avg_l_2 {err_mod=1: err_min=0.01: lay_act_thr=0.01: };
	  g_bar {e=1: l=0.2: i=1: };
	  e_rev {e=1: l=0.3: i=0.25: };
	  adapt {on=0: tau=144: vm_gain=0.04: spike_gain=0.00805: Ei_dyn=1: Ei_gain=0.001: Ei_tau=50: dt=0.006944444: Ei_dt=0.02: };
	  stp {on=0: f_r_ratio=0.02: rec_tau=200: p0=0.2: p0_norm=0.2: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=5: };
	  syn_delay {on=0: delay=4: };
	  deep_raw_qtr=Q4;
	  deep {on=1: role=DEEP: raw_thr_rel=0.1: raw_thr_abs=0.1: mod_min=0.8: mod_thr=0.01: trc_p_only_m=0: trc_thal_gate=0: trc_avg_clamp=0: trc_deep_gain=0.2: mod_range=0.2: trc_std_gain=0.8: };
	  da_mod {on=0: minus=0: plus=0.01: };
	  noise_type=NO_NOISE;
	  noise {name="noise": type=GAUSSIAN: mean=0: var=0.001000000047497451: par=1: };
	  noise_adapt {trial_fixed=1: mode=FIXED_NOISE: };
	  noise_sched {
	   name="noise_sched";
	   el_typ=SchedItem;
	   el_def=0;
	   default_val=1;
	   interpolate=1;
	  };
	  acq_ext=ACQ;
	  valence=AVERSIVE;
	  dar=D2R;
	 };
	 BasAmygUnitSpec @[2] {
	  name="BAExtNegD1Units";
	  is_used=1;
	  used_status=USED;
	  desc=;
	  unique{ deep;acq_ext;valence;g_bar;	  };
	  children {
	   name="BaseSpec_Group_1";
	   el_typ=BasAmygUnitSpec;
	   el_def=0;
	  };
	  act_range {min=0: max=1: range=1: scale=1: };
	  bias_spec {type=LeabraBiasSpec: spec=$.networks[0].specs.gp[0][2].children[0]$: };
	  sse_tol=0.5;
	  act_fun=NOISY_XX1;
	  act {thr=0.5: gain=100: nvar=0.005: };
	  act_misc {rec_nd=1: avg_nd=1: dif_avg=0: net_gain=1: act_max_hz=100: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
	  spike {rise=0: decay=5: g_gain=9: window=3: eq_gain=8: eq_tau=50: eq_dt=0.02: };
	  spike_misc {ex=0: exp_slope=0.02: spk_thr=1.2: vm_r=0.3: t_r=3: clamp_max_p=0.12: clamp_type=REGULAR: eff_spk_thr=0.5: };
	  opt_thresh {send=0.1: delta=0.005: xcal_lrn=0.01: };
	  clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
	  vm_range {min=0: max=2: range=2: scale=0.5: };
	  init {v_m=0.4: act=0: netin=0: };
	  dt {integ=1: vm_tau=3.3: net_tau=1.4: fast_cyc=0: vm_dt=0.3030303: net_dt=0.7142857: };
	  act_avg {ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: ss_dt=0.5: s_dt=0.5: m_dt=0.1: s_in_s=0.9: };
	  avg_l {init=0.4: gain=2.5: min=0.2: tau=10: lrn_max=0.5: lrn_min=0.0001: dt=0.1: lrn_fact=0.2173478: };
	  avg_l_2 {err_mod=1: err_min=0.01: lay_act_thr=0.01: };
	  g_bar {e=1: l=0.3: i=1: };
	  e_rev {e=1: l=0.3: i=0.25: };
	  adapt {on=0: tau=144: vm_gain=0.04: spike_gain=0.00805: Ei_dyn=1: Ei_gain=0.001: Ei_tau=50: dt=0.006944444: Ei_dt=0.02: };
	  stp {on=0: f_r_ratio=0.02: rec_tau=200: p0=0.2: p0_norm=0.2: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=5: };
	  syn_delay {on=0: delay=4: };
	  deep_raw_qtr=Q4;
	  deep {on=1: role=SUPER: raw_thr_rel=0.1: raw_thr_abs=0.1: mod_min=0: mod_thr=0.01: trc_p_only_m=0: trc_thal_gate=0: trc_avg_clamp=0: trc_deep_gain=0.2: mod_range=1: trc_std_gain=0.8: };
	  da_mod {on=0: minus=0: plus=0.01: };
	  noise_type=NO_NOISE;
	  noise {name="noise": type=GAUSSIAN: mean=0: var=0.001000000047497451: par=1: };
	  noise_adapt {trial_fixed=1: mode=FIXED_NOISE: };
	  noise_sched {
	   name="noise_sched";
	   el_typ=SchedItem;
	   el_def=0;
	   default_val=1;
	   interpolate=1;
	  };
	  acq_ext=EXT;
	  valence=AVERSIVE;
	  dar=D1R;
	 };
	};
	act_range {min=0: max=1: range=1: scale=1: };
	bias_spec {type=LeabraBiasSpec: spec=$.networks[0].specs.gp[0][2].children[0]$: };
	sse_tol=0.5;
	act_fun=NOISY_XX1;
	act {thr=0.5: gain=100: nvar=0.005: };
	act_misc {rec_nd=1: avg_nd=1: dif_avg=0: net_gain=1: act_max_hz=100: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
	spike {rise=0: decay=5: g_gain=9: window=3: eq_gain=8: eq_tau=50: eq_dt=0.02: };
	spike_misc {ex=0: exp_slope=0.02: spk_thr=1.2: vm_r=0.3: t_r=3: clamp_max_p=0.12: clamp_type=REGULAR: eff_spk_thr=0.5: };
	opt_thresh {send=0.1: delta=0.005: xcal_lrn=0.01: };
	clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
	vm_range {min=0: max=2: range=2: scale=0.5: };
	init {v_m=0.4: act=0: netin=0: };
	dt {integ=1: vm_tau=3.3: net_tau=1.4: fast_cyc=0: vm_dt=0.3030303: net_dt=0.7142857: };
	act_avg {ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: ss_dt=0.5: s_dt=0.5: m_dt=0.1: s_in_s=0.9: };
	avg_l {init=0.4: gain=2.5: min=0.2: tau=10: lrn_max=0.5: lrn_min=0.0001: dt=0.1: lrn_fact=0.2173478: };
	avg_l_2 {err_mod=1: err_min=0.01: lay_act_thr=0.01: };
	g_bar {e=1: l=0.2: i=1: };
	e_rev {e=1: l=0.3: i=0.25: };
	adapt {on=0: tau=144: vm_gain=0.04: spike_gain=0.00805: Ei_dyn=1: Ei_gain=0.001: Ei_tau=50: dt=0.006944444: Ei_dt=0.02: };
	stp {on=0: f_r_ratio=0.02: rec_tau=200: p0=0.2: p0_norm=0.2: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=5: };
	syn_delay {on=0: delay=4: };
	deep_raw_qtr=Q4;
	deep {on=1: role=DEEP: raw_thr_rel=0.1: raw_thr_abs=0.1: mod_min=0.8: mod_thr=0.01: trc_p_only_m=0: trc_thal_gate=0: trc_avg_clamp=0: trc_deep_gain=0.2: mod_range=0.2: trc_std_gain=0.8: };
	da_mod {on=0: minus=0: plus=0.01: };
	noise_type=NO_NOISE;
	noise {name="noise": type=GAUSSIAN: mean=0: var=0.001000000047497451: par=1: };
	noise_adapt {trial_fixed=1: mode=FIXED_NOISE: };
	noise_sched {
	 name="noise_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=1;
	};
	acq_ext=ACQ;
	valence=APPETITIVE;
	dar=D1R;
       };
       MSNUnitSpec @[9] {
	name="VSPatchPosD1Units";
	is_used=1;
	used_status=USED;
	desc=;
	unique{ deep;dar;matrix_patch;dorsal_ventral;valence;	};
	children {
	 name="BaseSpec_Group_1";
	 el_typ=MSNUnitSpec;
	 el_def=0;
	 MSNUnitSpec @[0] {
	  name="VSPatchPosD2Units";
	  is_used=1;
	  used_status=USED;
	  desc=;
	  unique{ dar;matrix_patch;dorsal_ventral;valence;	  };
	  children {
	   name="BaseSpec_Group_1";
	   el_typ=MSNUnitSpec;
	   el_def=0;
	  };
	  act_range {min=0: max=1: range=1: scale=1: };
	  bias_spec {type=LeabraBiasSpec: spec=$.networks[0].specs.gp[0][2].children[0]$: };
	  sse_tol=0.5;
	  act_fun=NOISY_XX1;
	  act {thr=0.5: gain=100: nvar=0.005: };
	  act_misc {rec_nd=1: avg_nd=1: dif_avg=0: net_gain=1: act_max_hz=100: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
	  spike {rise=0: decay=5: g_gain=9: window=3: eq_gain=8: eq_tau=50: eq_dt=0.02: };
	  spike_misc {ex=0: exp_slope=0.02: spk_thr=1.2: vm_r=0.3: t_r=3: clamp_max_p=0.12: clamp_type=REGULAR: eff_spk_thr=0.5: };
	  opt_thresh {send=0.1: delta=0.005: xcal_lrn=0.01: };
	  clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
	  vm_range {min=0: max=2: range=2: scale=0.5: };
	  init {v_m=0.4: act=0: netin=0: };
	  dt {integ=1: vm_tau=3.3: net_tau=1.4: fast_cyc=0: vm_dt=0.3030303: net_dt=0.7142857: };
	  act_avg {ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: ss_dt=0.5: s_dt=0.5: m_dt=0.1: s_in_s=0.9: };
	  avg_l {init=0.4: gain=2.5: min=0.2: tau=10: lrn_max=0.5: lrn_min=0.0001: dt=0.1: lrn_fact=0.2173478: };
	  avg_l_2 {err_mod=1: err_min=0.01: lay_act_thr=0.01: };
	  g_bar {e=1: l=0.2: i=1: };
	  e_rev {e=1: l=0.3: i=0.25: };
	  adapt {on=0: tau=144: vm_gain=0.04: spike_gain=0.00805: Ei_dyn=1: Ei_gain=0.001: Ei_tau=50: dt=0.006944444: Ei_dt=0.02: };
	  stp {on=0: f_r_ratio=0.02: rec_tau=200: p0=0.2: p0_norm=0.2: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=5: };
	  syn_delay {on=0: delay=4: };
	  deep_raw_qtr=Q4;
	  deep {on=1: role=SUPER: raw_thr_rel=0.1: raw_thr_abs=0.1: mod_min=0: mod_thr=0.1: trc_p_only_m=0: trc_thal_gate=0: trc_avg_clamp=0: trc_deep_gain=0.2: mod_range=1: trc_std_gain=0.8: };
	  da_mod {on=0: minus=0: plus=0.01: };
	  noise_type=NO_NOISE;
	  noise {name="noise": type=GAUSSIAN: mean=0: var=0.001000000047497451: par=1: };
	  noise_adapt {trial_fixed=1: mode=FIXED_NOISE: };
	  noise_sched {
	   name="noise_sched";
	   el_typ=SchedItem;
	   el_def=0;
	   default_val=1;
	   interpolate=1;
	  };
	  dar=D2R;
	  matrix_patch=PATCH;
	  dorsal_ventral=VENTRAL;
	  valence=APPETITIVE;
	  matrix {out_ach_inhib=0.3: n_mnt_x=-1: };
	  deep_mod_zero=1;
	 };
	 MSNUnitSpec @[1] {
	  name="VSPatchNegD2Units";
	  is_used=1;
	  used_status=USED;
	  desc=;
	  unique{ dar;matrix_patch;dorsal_ventral;valence;	  };
	  children {
	   name="BaseSpec_Group_1";
	   el_typ=MSNUnitSpec;
	   el_def=0;
	  };
	  act_range {min=0: max=1: range=1: scale=1: };
	  bias_spec {type=LeabraBiasSpec: spec=$.networks[0].specs.gp[0][2].children[0]$: };
	  sse_tol=0.5;
	  act_fun=NOISY_XX1;
	  act {thr=0.5: gain=100: nvar=0.005: };
	  act_misc {rec_nd=1: avg_nd=1: dif_avg=0: net_gain=1: act_max_hz=100: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
	  spike {rise=0: decay=5: g_gain=9: window=3: eq_gain=8: eq_tau=50: eq_dt=0.02: };
	  spike_misc {ex=0: exp_slope=0.02: spk_thr=1.2: vm_r=0.3: t_r=3: clamp_max_p=0.12: clamp_type=REGULAR: eff_spk_thr=0.5: };
	  opt_thresh {send=0.1: delta=0.005: xcal_lrn=0.01: };
	  clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
	  vm_range {min=0: max=2: range=2: scale=0.5: };
	  init {v_m=0.4: act=0: netin=0: };
	  dt {integ=1: vm_tau=3.3: net_tau=1.4: fast_cyc=0: vm_dt=0.3030303: net_dt=0.7142857: };
	  act_avg {ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: ss_dt=0.5: s_dt=0.5: m_dt=0.1: s_in_s=0.9: };
	  avg_l {init=0.4: gain=2.5: min=0.2: tau=10: lrn_max=0.5: lrn_min=0.0001: dt=0.1: lrn_fact=0.2173478: };
	  avg_l_2 {err_mod=1: err_min=0.01: lay_act_thr=0.01: };
	  g_bar {e=1: l=0.2: i=1: };
	  e_rev {e=1: l=0.3: i=0.25: };
	  adapt {on=0: tau=144: vm_gain=0.04: spike_gain=0.00805: Ei_dyn=1: Ei_gain=0.001: Ei_tau=50: dt=0.006944444: Ei_dt=0.02: };
	  stp {on=0: f_r_ratio=0.02: rec_tau=200: p0=0.2: p0_norm=0.2: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=5: };
	  syn_delay {on=0: delay=4: };
	  deep_raw_qtr=Q4;
	  deep {on=1: role=SUPER: raw_thr_rel=0.1: raw_thr_abs=0.1: mod_min=0: mod_thr=0.1: trc_p_only_m=0: trc_thal_gate=0: trc_avg_clamp=0: trc_deep_gain=0.2: mod_range=1: trc_std_gain=0.8: };
	  da_mod {on=0: minus=0: plus=0.01: };
	  noise_type=NO_NOISE;
	  noise {name="noise": type=GAUSSIAN: mean=0: var=0.001000000047497451: par=1: };
	  noise_adapt {trial_fixed=1: mode=FIXED_NOISE: };
	  noise_sched {
	   name="noise_sched";
	   el_typ=SchedItem;
	   el_def=0;
	   default_val=1;
	   interpolate=1;
	  };
	  dar=D2R;
	  matrix_patch=PATCH;
	  dorsal_ventral=VENTRAL;
	  valence=AVERSIVE;
	  matrix {out_ach_inhib=0.3: n_mnt_x=-1: };
	  deep_mod_zero=1;
	 };
	 MSNUnitSpec @[2] {
	  name="VSPatchNegD1Units";
	  is_used=1;
	  used_status=USED;
	  desc=;
	  unique{ dar;matrix_patch;dorsal_ventral;valence;	  };
	  children {
	   name="BaseSpec_Group_1";
	   el_typ=MSNUnitSpec;
	   el_def=0;
	  };
	  act_range {min=0: max=1: range=1: scale=1: };
	  bias_spec {type=LeabraBiasSpec: spec=$.networks[0].specs.gp[0][2].children[0]$: };
	  sse_tol=0.5;
	  act_fun=NOISY_XX1;
	  act {thr=0.5: gain=100: nvar=0.005: };
	  act_misc {rec_nd=1: avg_nd=1: dif_avg=0: net_gain=1: act_max_hz=100: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
	  spike {rise=0: decay=5: g_gain=9: window=3: eq_gain=8: eq_tau=50: eq_dt=0.02: };
	  spike_misc {ex=0: exp_slope=0.02: spk_thr=1.2: vm_r=0.3: t_r=3: clamp_max_p=0.12: clamp_type=REGULAR: eff_spk_thr=0.5: };
	  opt_thresh {send=0.1: delta=0.005: xcal_lrn=0.01: };
	  clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
	  vm_range {min=0: max=2: range=2: scale=0.5: };
	  init {v_m=0.4: act=0: netin=0: };
	  dt {integ=1: vm_tau=3.3: net_tau=1.4: fast_cyc=0: vm_dt=0.3030303: net_dt=0.7142857: };
	  act_avg {ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: ss_dt=0.5: s_dt=0.5: m_dt=0.1: s_in_s=0.9: };
	  avg_l {init=0.4: gain=2.5: min=0.2: tau=10: lrn_max=0.5: lrn_min=0.0001: dt=0.1: lrn_fact=0.2173478: };
	  avg_l_2 {err_mod=1: err_min=0.01: lay_act_thr=0.01: };
	  g_bar {e=1: l=0.2: i=1: };
	  e_rev {e=1: l=0.3: i=0.25: };
	  adapt {on=0: tau=144: vm_gain=0.04: spike_gain=0.00805: Ei_dyn=1: Ei_gain=0.001: Ei_tau=50: dt=0.006944444: Ei_dt=0.02: };
	  stp {on=0: f_r_ratio=0.02: rec_tau=200: p0=0.2: p0_norm=0.2: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=5: };
	  syn_delay {on=0: delay=4: };
	  deep_raw_qtr=Q4;
	  deep {on=1: role=SUPER: raw_thr_rel=0.1: raw_thr_abs=0.1: mod_min=0: mod_thr=0.1: trc_p_only_m=0: trc_thal_gate=0: trc_avg_clamp=0: trc_deep_gain=0.2: mod_range=1: trc_std_gain=0.8: };
	  da_mod {on=0: minus=0: plus=0.01: };
	  noise_type=NO_NOISE;
	  noise {name="noise": type=GAUSSIAN: mean=0: var=0.001000000047497451: par=1: };
	  noise_adapt {trial_fixed=1: mode=FIXED_NOISE: };
	  noise_sched {
	   name="noise_sched";
	   el_typ=SchedItem;
	   el_def=0;
	   default_val=1;
	   interpolate=1;
	  };
	  dar=D1R;
	  matrix_patch=PATCH;
	  dorsal_ventral=VENTRAL;
	  valence=AVERSIVE;
	  matrix {out_ach_inhib=0.3: n_mnt_x=-1: };
	  deep_mod_zero=1;
	 };
	};
	act_range {min=0: max=1: range=1: scale=1: };
	bias_spec {type=LeabraBiasSpec: spec=$.networks[0].specs.gp[0][2].children[0]$: };
	sse_tol=0.5;
	act_fun=NOISY_XX1;
	act {thr=0.5: gain=100: nvar=0.005: };
	act_misc {rec_nd=1: avg_nd=1: dif_avg=0: net_gain=1: act_max_hz=100: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
	spike {rise=0: decay=5: g_gain=9: window=3: eq_gain=8: eq_tau=50: eq_dt=0.02: };
	spike_misc {ex=0: exp_slope=0.02: spk_thr=1.2: vm_r=0.3: t_r=3: clamp_max_p=0.12: clamp_type=REGULAR: eff_spk_thr=0.5: };
	opt_thresh {send=0.1: delta=0.005: xcal_lrn=0.01: };
	clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
	vm_range {min=0: max=2: range=2: scale=0.5: };
	init {v_m=0.4: act=0: netin=0: };
	dt {integ=1: vm_tau=3.3: net_tau=1.4: fast_cyc=0: vm_dt=0.3030303: net_dt=0.7142857: };
	act_avg {ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: ss_dt=0.5: s_dt=0.5: m_dt=0.1: s_in_s=0.9: };
	avg_l {init=0.4: gain=2.5: min=0.2: tau=10: lrn_max=0.5: lrn_min=0.0001: dt=0.1: lrn_fact=0.2173478: };
	avg_l_2 {err_mod=1: err_min=0.01: lay_act_thr=0.01: };
	g_bar {e=1: l=0.2: i=1: };
	e_rev {e=1: l=0.3: i=0.25: };
	adapt {on=0: tau=144: vm_gain=0.04: spike_gain=0.00805: Ei_dyn=1: Ei_gain=0.001: Ei_tau=50: dt=0.006944444: Ei_dt=0.02: };
	stp {on=0: f_r_ratio=0.02: rec_tau=200: p0=0.2: p0_norm=0.2: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=5: };
	syn_delay {on=0: delay=4: };
	deep_raw_qtr=Q4;
	deep {on=1: role=SUPER: raw_thr_rel=0.1: raw_thr_abs=0.1: mod_min=0: mod_thr=0.1: trc_p_only_m=0: trc_thal_gate=0: trc_avg_clamp=0: trc_deep_gain=0.2: mod_range=1: trc_std_gain=0.8: };
	da_mod {on=0: minus=0: plus=0.01: };
	noise_type=NO_NOISE;
	noise {name="noise": type=GAUSSIAN: mean=0: var=0.001000000047497451: par=1: };
	noise_adapt {trial_fixed=1: mode=FIXED_NOISE: };
	noise_sched {
	 name="noise_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=1;
	};
	dar=D1R;
	matrix_patch=PATCH;
	dorsal_ventral=VENTRAL;
	valence=APPETITIVE;
	matrix {out_ach_inhib=0.3: n_mnt_x=-1: };
	deep_mod_zero=1;
       };
       MSNUnitSpec @[10] {
	name="VSMatrixPosD1Units";
	is_used=1;
	used_status=USED;
	desc=;
	unique{ deep;dar;matrix_patch;dorsal_ventral;valence;	};
	children {
	 name="BaseSpec_Group_1";
	 el_typ=MSNUnitSpec;
	 el_def=0;
	 MSNUnitSpec @[0] {
	  name="VSMatrixPosD2Units";
	  is_used=1;
	  used_status=USED;
	  desc=;
	  unique{ dar;matrix_patch;dorsal_ventral;valence;	  };
	  children {
	   name="BaseSpec_Group_1";
	   el_typ=MSNUnitSpec;
	   el_def=0;
	  };
	  act_range {min=0: max=1: range=1: scale=1: };
	  bias_spec {type=LeabraBiasSpec: spec=$.networks[0].specs.gp[0][2].children[0]$: };
	  sse_tol=0.5;
	  act_fun=NOISY_XX1;
	  act {thr=0.5: gain=100: nvar=0.005: };
	  act_misc {rec_nd=1: avg_nd=1: dif_avg=0: net_gain=1: act_max_hz=100: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
	  spike {rise=0: decay=5: g_gain=9: window=3: eq_gain=8: eq_tau=50: eq_dt=0.02: };
	  spike_misc {ex=0: exp_slope=0.02: spk_thr=1.2: vm_r=0.3: t_r=3: clamp_max_p=0.12: clamp_type=REGULAR: eff_spk_thr=0.5: };
	  opt_thresh {send=0.1: delta=0.005: xcal_lrn=0.01: };
	  clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
	  vm_range {min=0: max=2: range=2: scale=0.5: };
	  init {v_m=0.4: act=0: netin=0: };
	  dt {integ=1: vm_tau=3.3: net_tau=1.4: fast_cyc=0: vm_dt=0.3030303: net_dt=0.7142857: };
	  act_avg {ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: ss_dt=0.5: s_dt=0.5: m_dt=0.1: s_in_s=0.9: };
	  avg_l {init=0.4: gain=2.5: min=0.2: tau=10: lrn_max=0.5: lrn_min=0.0001: dt=0.1: lrn_fact=0.2173478: };
	  avg_l_2 {err_mod=1: err_min=0.01: lay_act_thr=0.01: };
	  g_bar {e=1: l=0.2: i=1: };
	  e_rev {e=1: l=0.3: i=0.25: };
	  adapt {on=0: tau=144: vm_gain=0.04: spike_gain=0.00805: Ei_dyn=1: Ei_gain=0.001: Ei_tau=50: dt=0.006944444: Ei_dt=0.02: };
	  stp {on=0: f_r_ratio=0.02: rec_tau=200: p0=0.2: p0_norm=0.2: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=5: };
	  syn_delay {on=0: delay=4: };
	  deep_raw_qtr=Q4;
	  deep {on=1: role=SUPER: raw_thr_rel=0.1: raw_thr_abs=0.1: mod_min=0: mod_thr=0.1: trc_p_only_m=0: trc_thal_gate=0: trc_avg_clamp=0: trc_deep_gain=0.2: mod_range=1: trc_std_gain=0.8: };
	  da_mod {on=0: minus=0: plus=0.01: };
	  noise_type=NO_NOISE;
	  noise {name="noise": type=GAUSSIAN: mean=0: var=0.001000000047497451: par=1: };
	  noise_adapt {trial_fixed=1: mode=FIXED_NOISE: };
	  noise_sched {
	   name="noise_sched";
	   el_typ=SchedItem;
	   el_def=0;
	   default_val=1;
	   interpolate=1;
	  };
	  dar=D2R;
	  matrix_patch=MATRIX;
	  dorsal_ventral=VENTRAL;
	  valence=APPETITIVE;
	  matrix {out_ach_inhib=0.3: n_mnt_x=-1: };
	  deep_mod_zero=1;
	 };
	 MSNUnitSpec @[1] {
	  name="VSMatrixNegD2Units";
	  is_used=1;
	  used_status=USED;
	  desc=;
	  unique{ dar;matrix_patch;dorsal_ventral;valence;	  };
	  children {
	   name="BaseSpec_Group_1";
	   el_typ=MSNUnitSpec;
	   el_def=0;
	  };
	  act_range {min=0: max=1: range=1: scale=1: };
	  bias_spec {type=LeabraBiasSpec: spec=$.networks[0].specs.gp[0][2].children[0]$: };
	  sse_tol=0.5;
	  act_fun=NOISY_XX1;
	  act {thr=0.5: gain=100: nvar=0.005: };
	  act_misc {rec_nd=1: avg_nd=1: dif_avg=0: net_gain=1: act_max_hz=100: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
	  spike {rise=0: decay=5: g_gain=9: window=3: eq_gain=8: eq_tau=50: eq_dt=0.02: };
	  spike_misc {ex=0: exp_slope=0.02: spk_thr=1.2: vm_r=0.3: t_r=3: clamp_max_p=0.12: clamp_type=REGULAR: eff_spk_thr=0.5: };
	  opt_thresh {send=0.1: delta=0.005: xcal_lrn=0.01: };
	  clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
	  vm_range {min=0: max=2: range=2: scale=0.5: };
	  init {v_m=0.4: act=0: netin=0: };
	  dt {integ=1: vm_tau=3.3: net_tau=1.4: fast_cyc=0: vm_dt=0.3030303: net_dt=0.7142857: };
	  act_avg {ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: ss_dt=0.5: s_dt=0.5: m_dt=0.1: s_in_s=0.9: };
	  avg_l {init=0.4: gain=2.5: min=0.2: tau=10: lrn_max=0.5: lrn_min=0.0001: dt=0.1: lrn_fact=0.2173478: };
	  avg_l_2 {err_mod=1: err_min=0.01: lay_act_thr=0.01: };
	  g_bar {e=1: l=0.2: i=1: };
	  e_rev {e=1: l=0.3: i=0.25: };
	  adapt {on=0: tau=144: vm_gain=0.04: spike_gain=0.00805: Ei_dyn=1: Ei_gain=0.001: Ei_tau=50: dt=0.006944444: Ei_dt=0.02: };
	  stp {on=0: f_r_ratio=0.02: rec_tau=200: p0=0.2: p0_norm=0.2: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=5: };
	  syn_delay {on=0: delay=4: };
	  deep_raw_qtr=Q4;
	  deep {on=1: role=SUPER: raw_thr_rel=0.1: raw_thr_abs=0.1: mod_min=0: mod_thr=0.1: trc_p_only_m=0: trc_thal_gate=0: trc_avg_clamp=0: trc_deep_gain=0.2: mod_range=1: trc_std_gain=0.8: };
	  da_mod {on=0: minus=0: plus=0.01: };
	  noise_type=NO_NOISE;
	  noise {name="noise": type=GAUSSIAN: mean=0: var=0.001000000047497451: par=1: };
	  noise_adapt {trial_fixed=1: mode=FIXED_NOISE: };
	  noise_sched {
	   name="noise_sched";
	   el_typ=SchedItem;
	   el_def=0;
	   default_val=1;
	   interpolate=1;
	  };
	  dar=D2R;
	  matrix_patch=MATRIX;
	  dorsal_ventral=VENTRAL;
	  valence=AVERSIVE;
	  matrix {out_ach_inhib=0.3: n_mnt_x=-1: };
	  deep_mod_zero=1;
	 };
	 MSNUnitSpec @[2] {
	  name="VSMatrixNegD1Units";
	  is_used=1;
	  used_status=USED;
	  desc=;
	  unique{ dar;matrix_patch;dorsal_ventral;valence;	  };
	  children {
	   name="BaseSpec_Group_1";
	   el_typ=MSNUnitSpec;
	   el_def=0;
	  };
	  act_range {min=0: max=1: range=1: scale=1: };
	  bias_spec {type=LeabraBiasSpec: spec=$.networks[0].specs.gp[0][2].children[0]$: };
	  sse_tol=0.5;
	  act_fun=NOISY_XX1;
	  act {thr=0.5: gain=100: nvar=0.005: };
	  act_misc {rec_nd=1: avg_nd=1: dif_avg=0: net_gain=1: act_max_hz=100: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
	  spike {rise=0: decay=5: g_gain=9: window=3: eq_gain=8: eq_tau=50: eq_dt=0.02: };
	  spike_misc {ex=0: exp_slope=0.02: spk_thr=1.2: vm_r=0.3: t_r=3: clamp_max_p=0.12: clamp_type=REGULAR: eff_spk_thr=0.5: };
	  opt_thresh {send=0.1: delta=0.005: xcal_lrn=0.01: };
	  clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
	  vm_range {min=0: max=2: range=2: scale=0.5: };
	  init {v_m=0.4: act=0: netin=0: };
	  dt {integ=1: vm_tau=3.3: net_tau=1.4: fast_cyc=0: vm_dt=0.3030303: net_dt=0.7142857: };
	  act_avg {ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: ss_dt=0.5: s_dt=0.5: m_dt=0.1: s_in_s=0.9: };
	  avg_l {init=0.4: gain=2.5: min=0.2: tau=10: lrn_max=0.5: lrn_min=0.0001: dt=0.1: lrn_fact=0.2173478: };
	  avg_l_2 {err_mod=1: err_min=0.01: lay_act_thr=0.01: };
	  g_bar {e=1: l=0.2: i=1: };
	  e_rev {e=1: l=0.3: i=0.25: };
	  adapt {on=0: tau=144: vm_gain=0.04: spike_gain=0.00805: Ei_dyn=1: Ei_gain=0.001: Ei_tau=50: dt=0.006944444: Ei_dt=0.02: };
	  stp {on=0: f_r_ratio=0.02: rec_tau=200: p0=0.2: p0_norm=0.2: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=5: };
	  syn_delay {on=0: delay=4: };
	  deep_raw_qtr=Q4;
	  deep {on=1: role=SUPER: raw_thr_rel=0.1: raw_thr_abs=0.1: mod_min=0: mod_thr=0.1: trc_p_only_m=0: trc_thal_gate=0: trc_avg_clamp=0: trc_deep_gain=0.2: mod_range=1: trc_std_gain=0.8: };
	  da_mod {on=0: minus=0: plus=0.01: };
	  noise_type=NO_NOISE;
	  noise {name="noise": type=GAUSSIAN: mean=0: var=0.001000000047497451: par=1: };
	  noise_adapt {trial_fixed=1: mode=FIXED_NOISE: };
	  noise_sched {
	   name="noise_sched";
	   el_typ=SchedItem;
	   el_def=0;
	   default_val=1;
	   interpolate=1;
	  };
	  dar=D1R;
	  matrix_patch=MATRIX;
	  dorsal_ventral=VENTRAL;
	  valence=AVERSIVE;
	  matrix {out_ach_inhib=0.3: n_mnt_x=-1: };
	  deep_mod_zero=1;
	 };
	};
	act_range {min=0: max=1: range=1: scale=1: };
	bias_spec {type=LeabraBiasSpec: spec=$.networks[0].specs.gp[0][2].children[0]$: };
	sse_tol=0.5;
	act_fun=NOISY_XX1;
	act {thr=0.5: gain=100: nvar=0.005: };
	act_misc {rec_nd=1: avg_nd=1: dif_avg=0: net_gain=1: act_max_hz=100: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
	spike {rise=0: decay=5: g_gain=9: window=3: eq_gain=8: eq_tau=50: eq_dt=0.02: };
	spike_misc {ex=0: exp_slope=0.02: spk_thr=1.2: vm_r=0.3: t_r=3: clamp_max_p=0.12: clamp_type=REGULAR: eff_spk_thr=0.5: };
	opt_thresh {send=0.1: delta=0.005: xcal_lrn=0.01: };
	clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
	vm_range {min=0: max=2: range=2: scale=0.5: };
	init {v_m=0.4: act=0: netin=0: };
	dt {integ=1: vm_tau=3.3: net_tau=1.4: fast_cyc=0: vm_dt=0.3030303: net_dt=0.7142857: };
	act_avg {ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: ss_dt=0.5: s_dt=0.5: m_dt=0.1: s_in_s=0.9: };
	avg_l {init=0.4: gain=2.5: min=0.2: tau=10: lrn_max=0.5: lrn_min=0.0001: dt=0.1: lrn_fact=0.2173478: };
	avg_l_2 {err_mod=1: err_min=0.01: lay_act_thr=0.01: };
	g_bar {e=1: l=0.2: i=1: };
	e_rev {e=1: l=0.3: i=0.25: };
	adapt {on=0: tau=144: vm_gain=0.04: spike_gain=0.00805: Ei_dyn=1: Ei_gain=0.001: Ei_tau=50: dt=0.006944444: Ei_dt=0.02: };
	stp {on=0: f_r_ratio=0.02: rec_tau=200: p0=0.2: p0_norm=0.2: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=5: };
	syn_delay {on=0: delay=4: };
	deep_raw_qtr=Q4;
	deep {on=1: role=SUPER: raw_thr_rel=0.1: raw_thr_abs=0.1: mod_min=0: mod_thr=0.1: trc_p_only_m=0: trc_thal_gate=0: trc_avg_clamp=0: trc_deep_gain=0.2: mod_range=1: trc_std_gain=0.8: };
	da_mod {on=0: minus=0: plus=0.01: };
	noise_type=NO_NOISE;
	noise {name="noise": type=GAUSSIAN: mean=0: var=0.001000000047497451: par=1: };
	noise_adapt {trial_fixed=1: mode=FIXED_NOISE: };
	noise_sched {
	 name="noise_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=1;
	};
	dar=D1R;
	matrix_patch=MATRIX;
	dorsal_ventral=VENTRAL;
	valence=APPETITIVE;
	matrix {out_ach_inhib=0.3: n_mnt_x=-1: };
	deep_mod_zero=1;
       };
      };
      act_range {min=0: max=1: range=1: scale=1: };
      bias_spec {type=LeabraBiasSpec: spec=$.networks[0].specs.gp[0][2].children[0]$: };
      sse_tol=0.5;
      act_fun=NOISY_XX1;
      act {thr=0.5: gain=100: nvar=0.005: };
      act_misc {rec_nd=1: avg_nd=1: dif_avg=0: net_gain=1: act_max_hz=100: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
      spike {rise=0: decay=5: g_gain=9: window=3: eq_gain=8: eq_tau=50: eq_dt=0.02: };
      spike_misc {ex=0: exp_slope=0.02: spk_thr=1.2: vm_r=0.3: t_r=3: clamp_max_p=0.12: clamp_type=REGULAR: eff_spk_thr=0.5: };
      opt_thresh {send=0.1: delta=0.005: xcal_lrn=0.01: };
      clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
      vm_range {min=0: max=2: range=2: scale=0.5: };
      init {v_m=0.4: act=0: netin=0: };
      dt {integ=1: vm_tau=3.3: net_tau=1.4: fast_cyc=0: vm_dt=0.3030303: net_dt=0.7142857: };
      act_avg {ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: ss_dt=0.5: s_dt=0.5: m_dt=0.1: s_in_s=0.9: };
      avg_l {init=0.4: gain=2.5: min=0.2: tau=10: lrn_max=0.5: lrn_min=0.0001: dt=0.1: lrn_fact=0.2173478: };
      avg_l_2 {err_mod=1: err_min=0.01: lay_act_thr=0.01: };
      g_bar {e=1: l=0.2: i=1: };
      e_rev {e=1: l=0.3: i=0.25: };
      adapt {on=0: tau=144: vm_gain=0.04: spike_gain=0.00805: Ei_dyn=1: Ei_gain=0.001: Ei_tau=50: dt=0.006944444: Ei_dt=0.02: };
      stp {on=0: f_r_ratio=0.02: rec_tau=200: p0=0.2: p0_norm=0.2: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=5: };
      syn_delay {on=0: delay=4: };
      deep_raw_qtr=Q4;
      deep {on=0: role=SUPER: raw_thr_rel=0.1: raw_thr_abs=0.1: mod_min=0.8: mod_thr=0.1: trc_p_only_m=0: trc_thal_gate=0: trc_avg_clamp=0: trc_deep_gain=0.2: mod_range=0.2: trc_std_gain=0.8: };
      da_mod {on=0: minus=0: plus=0.01: };
      noise_type=NO_NOISE;
      noise {name="noise": type=GAUSSIAN: mean=0: var=0.001000000047497451: par=1: };
      noise_adapt {trial_fixed=1: mode=FIXED_NOISE: };
      noise_sched {
       name="noise_sched";
       el_typ=SchedItem;
       el_def=0;
       default_val=1;
       interpolate=1;
      };
     };
     LeabraConSpec @[1] {
      name="PVLVLrnCons";
      is_used=0;
      used_status=UNUSED;
      desc=;
      unique{       };
      children {
       name="BaseSpec_Group_1";
       el_typ=LatAmygConSpec;
       el_def=0;
       LatAmygConSpec @[0] {
	name="LatAmygCons";
	is_used=1;
	used_status=USED;
	desc=;
	unique{ lrate;	};
	children {
	 name="BaseSpec_Group_1";
	 el_typ=LatAmygConSpec;
	 el_def=0;
	};
	rnd {name="RandomSpec_1": type=UNIFORM: mean=0.009999999776482582: var=0: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=0: sym_fm_top=0: };
	inhib=0;
	wt_scale {abs=1: rel=1: no_plus_net=0: };
	learn=1;
	learn_qtr=Q4;
	lrate=0.2;
	use_lrate_sched=1;
	cur_lrate=0.02;
	lrs_mult=1;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	use_unlearnable=1;
	xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	wt_sig {gain=6: off=1: soft_bound=1: };
	dynlr {dwt_norm=NO_NORM: norm_tau=100: norm_min=0.001: moment=NO_MOMENT: m_tau=10: s_tau=50: l_tau=2: xx1=1: gain=2: lrate_comp=3: norm_dt=0.01: norm_dt_c=0.99: m_dt=0.1: m_dt_c=0.9: s_dt=0.02: l_dt=0.5: };
	wt_bal {on=0: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	deep {on=0: bg_lrate=1: fg_lrate=0: };
	margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
	lat_amyg {dar=D1D2R: neg_lrate=0.001: burst_da_gain=1: dip_da_gain=1: wt_decay_rate=0.001: wt_decay_floor=0.5: };
       };
       BasAmygConSpec @[1] {
	name="BasAmygCons_acq_pos";
	is_used=1;
	used_status=USED;
	desc=;
	unique{ wt_sig;lrate;wt_scale;ba_learn;	};
	children {
	 name="BaseSpec_Group_1";
	 el_typ=BasAmygConSpec;
	 el_def=0;
	 BasAmygConSpec @[0] {
	  name="BasAmygCons_acq_neg";
	  is_used=1;
	  used_status=USED;
	  desc=;
	  unique{ wt_sig;lrate;wt_scale;ba_learn;	  };
	  children {
	   name="BaseSpec_Group_1";
	   el_typ=BasAmygConSpec;
	   el_def=0;
	  };
	  rnd {name="RandomSpec_1": type=UNIFORM: mean=0.009999999776482582: var=0: par=1: };
	  wt_limits {type=MIN_MAX: min=0: max=1: sym=0: sym_fm_top=0: };
	  inhib=0;
	  wt_scale {abs=0.95: rel=1: no_plus_net=0: };
	  learn=1;
	  learn_qtr=Q4;
	  lrate=0.2;
	  use_lrate_sched=1;
	  cur_lrate=0.02;
	  lrs_mult=1;
	  lrate_sched {
	   name="lrate_sched";
	   el_typ=SchedItem;
	   el_def=0;
	   default_val=1;
	   interpolate=0;
	  };
	  use_unlearnable=1;
	  xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	  wt_sig {gain=1: off=1: soft_bound=1: };
	  dynlr {dwt_norm=NO_NORM: norm_tau=100: norm_min=0.001: moment=NO_MOMENT: m_tau=10: s_tau=50: l_tau=2: xx1=1: gain=2: lrate_comp=3: norm_dt=0.01: norm_dt_c=0.99: m_dt=0.1: m_dt_c=0.9: s_dt=0.02: l_dt=0.5: };
	  wt_bal {on=0: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	  adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	  slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	  deep {on=0: bg_lrate=1: fg_lrate=0: };
	  margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
	  ba_learn {learn_rule=US_DELTA: delta_neg_lrate=0.1: delta_da_gain=0.5: delta_da_base=0.5: delta_da=1: burst_da_gain=0.05: dip_da_gain=1: };
	 };
	 BasAmygConSpec @[1] {
	  name="BasAmygCons_ext_pos";
	  is_used=1;
	  used_status=USED;
	  desc=;
	  unique{ rnd;lrate;wt_scale;deep;ba_learn;	  };
	  children {
	   name="BaseSpec_Group_1";
	   el_typ=BasAmygConSpec;
	   el_def=0;
	  };
	  rnd {name="RandomSpec_1": type=UNIFORM: mean=0.1000000014901161: var=0: par=1: };
	  wt_limits {type=MIN_MAX: min=0: max=1: sym=0: sym_fm_top=0: };
	  inhib=0;
	  wt_scale {abs=0.8: rel=1: no_plus_net=0: };
	  learn=1;
	  learn_qtr=Q4;
	  lrate=0.025;
	  use_lrate_sched=1;
	  cur_lrate=0.02;
	  lrs_mult=1;
	  lrate_sched {
	   name="lrate_sched";
	   el_typ=SchedItem;
	   el_def=0;
	   default_val=1;
	   interpolate=0;
	  };
	  use_unlearnable=1;
	  xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	  wt_sig {gain=1: off=1: soft_bound=1: };
	  dynlr {dwt_norm=NO_NORM: norm_tau=100: norm_min=0.001: moment=NO_MOMENT: m_tau=10: s_tau=50: l_tau=2: xx1=1: gain=2: lrate_comp=3: norm_dt=0.01: norm_dt_c=0.99: m_dt=0.1: m_dt_c=0.9: s_dt=0.02: l_dt=0.5: };
	  wt_bal {on=0: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	  adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	  slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	  deep {on=1: bg_lrate=0: fg_lrate=1: };
	  margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
	  ba_learn {learn_rule=US_DELTA: delta_neg_lrate=0.1: delta_da_gain=0.5: delta_da_base=0.5: delta_da=1: burst_da_gain=1: dip_da_gain=1: };
	 };
	 BasAmygConSpec @[2] {
	  name="BasAmygCons_ext_neg";
	  is_used=1;
	  used_status=USED;
	  desc=;
	  unique{ rnd;lrate;wt_scale;deep;ba_learn;	  };
	  children {
	   name="BaseSpec_Group_1";
	   el_typ=BasAmygConSpec;
	   el_def=0;
	  };
	  rnd {name="RandomSpec_1": type=UNIFORM: mean=0.1000000014901161: var=0: par=1: };
	  wt_limits {type=MIN_MAX: min=0: max=1: sym=0: sym_fm_top=0: };
	  inhib=0;
	  wt_scale {abs=0.8: rel=1: no_plus_net=0: };
	  learn=1;
	  learn_qtr=Q4;
	  lrate=0.025;
	  use_lrate_sched=1;
	  cur_lrate=0.02;
	  lrs_mult=1;
	  lrate_sched {
	   name="lrate_sched";
	   el_typ=SchedItem;
	   el_def=0;
	   default_val=1;
	   interpolate=0;
	  };
	  use_unlearnable=1;
	  xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	  wt_sig {gain=1: off=1: soft_bound=1: };
	  dynlr {dwt_norm=NO_NORM: norm_tau=100: norm_min=0.001: moment=NO_MOMENT: m_tau=10: s_tau=50: l_tau=2: xx1=1: gain=2: lrate_comp=3: norm_dt=0.01: norm_dt_c=0.99: m_dt=0.1: m_dt_c=0.9: s_dt=0.02: l_dt=0.5: };
	  wt_bal {on=0: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	  adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	  slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	  deep {on=1: bg_lrate=0: fg_lrate=1: };
	  margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
	  ba_learn {learn_rule=US_DELTA: delta_neg_lrate=0.1: delta_da_gain=0.5: delta_da_base=0.5: delta_da=1: burst_da_gain=1: dip_da_gain=1: };
	 };
	};
	rnd {name="RandomSpec_1": type=UNIFORM: mean=0.009999999776482582: var=0: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=0: sym_fm_top=0: };
	inhib=0;
	wt_scale {abs=0.95: rel=1: no_plus_net=0: };
	learn=1;
	learn_qtr=Q4;
	lrate=0.2;
	use_lrate_sched=1;
	cur_lrate=0.02;
	lrs_mult=1;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	use_unlearnable=1;
	xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	wt_sig {gain=1: off=1: soft_bound=1: };
	dynlr {dwt_norm=NO_NORM: norm_tau=100: norm_min=0.001: moment=NO_MOMENT: m_tau=10: s_tau=50: l_tau=2: xx1=1: gain=2: lrate_comp=3: norm_dt=0.01: norm_dt_c=0.99: m_dt=0.1: m_dt_c=0.9: s_dt=0.02: l_dt=0.5: };
	wt_bal {on=0: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	deep {on=0: bg_lrate=1: fg_lrate=0: };
	margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
	ba_learn {learn_rule=US_DELTA: delta_neg_lrate=0.1: delta_da_gain=0.5: delta_da_base=0.5: delta_da=1: burst_da_gain=1: dip_da_gain=0.05: };
       };
       MSNConSpec @[2] {
	name="VSPatchCons_ToPosD1";
	is_used=1;
	used_status=USED;
	desc=;
	unique{ wt_limits;rnd;wt_scale;lrate;wt_sig;deep;su_act_var;ru_act_var;learn_rule;burst_da_gain;dip_da_gain;	};
	children {
	 name="BaseSpec_Group_1";
	 el_typ=MSNConSpec;
	 el_def=0;
	 MSNConSpec @[0] {
	  name="VSPatchCons_ToPosD2";
	  is_used=1;
	  used_status=USED;
	  desc=;
	  unique{ wt_limits;burst_da_gain;dip_da_gain;	  };
	  children {
	   name="BaseSpec_Group_1";
	   el_typ=MSNConSpec;
	   el_def=0;
	  };
	  rnd {name="RandomSpec_1": type=UNIFORM: mean=0.009999999776482582: var=0: par=1: };
	  wt_limits {type=MIN_MAX: min=0: max=1: sym=0: sym_fm_top=0: };
	  inhib=0;
	  wt_scale {abs=1: rel=1: no_plus_net=0: };
	  learn=1;
	  learn_qtr=Q4;
	  lrate=0.1;
	  use_lrate_sched=1;
	  cur_lrate=0.02;
	  lrs_mult=1;
	  lrate_sched {
	   name="lrate_sched";
	   el_typ=SchedItem;
	   el_def=0;
	   default_val=1;
	   interpolate=0;
	  };
	  use_unlearnable=1;
	  xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	  wt_sig {gain=1: off=1: soft_bound=1: };
	  dynlr {dwt_norm=NO_NORM: norm_tau=100: norm_min=0.001: moment=NO_MOMENT: m_tau=10: s_tau=50: l_tau=2: xx1=1: gain=2: lrate_comp=3: norm_dt=0.01: norm_dt_c=0.99: m_dt=0.1: m_dt_c=0.9: s_dt=0.02: l_dt=0.5: };
	  wt_bal {on=0: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	  adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	  slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	  deep {on=1: bg_lrate=0: fg_lrate=1: };
	  margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
	  su_act_var=ACT_P;
	  ru_act_var=ACT_P;
	  learn_rule=DA_HEBB_VS;
	  trace {ach_reset_thr=0.5: msn_deriv=1: max_vs_deep_mod=0.5: };
	  tr_thal {full_params=0: not_gated=0.7: gate_go_pos=1: gate_go_neg=1: gate_nogo_pos=0.1: gate_nogo_neg=1: not_go_pos=0.7: not_go_neg=0.7: not_nogo_pos=0.7: not_nogo_neg=0.7: };
	  burst_da_gain=1;
	  dip_da_gain=1;
	 };
	 MSNConSpec @[1] {
	  name="VSPatchCons_ToNegD1";
	  is_used=1;
	  used_status=USED;
	  desc=;
	  unique{ wt_limits;burst_da_gain;dip_da_gain;	  };
	  children {
	   name="BaseSpec_Group_1";
	   el_typ=MSNConSpec;
	   el_def=0;
	  };
	  rnd {name="RandomSpec_1": type=UNIFORM: mean=0.009999999776482582: var=0: par=1: };
	  wt_limits {type=MIN_MAX: min=0: max=1: sym=0: sym_fm_top=0: };
	  inhib=0;
	  wt_scale {abs=1: rel=1: no_plus_net=0: };
	  learn=1;
	  learn_qtr=Q4;
	  lrate=0.1;
	  use_lrate_sched=1;
	  cur_lrate=0.02;
	  lrs_mult=1;
	  lrate_sched {
	   name="lrate_sched";
	   el_typ=SchedItem;
	   el_def=0;
	   default_val=1;
	   interpolate=0;
	  };
	  use_unlearnable=1;
	  xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	  wt_sig {gain=1: off=1: soft_bound=1: };
	  dynlr {dwt_norm=NO_NORM: norm_tau=100: norm_min=0.001: moment=NO_MOMENT: m_tau=10: s_tau=50: l_tau=2: xx1=1: gain=2: lrate_comp=3: norm_dt=0.01: norm_dt_c=0.99: m_dt=0.1: m_dt_c=0.9: s_dt=0.02: l_dt=0.5: };
	  wt_bal {on=0: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	  adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	  slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	  deep {on=1: bg_lrate=0: fg_lrate=1: };
	  margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
	  su_act_var=ACT_P;
	  ru_act_var=ACT_P;
	  learn_rule=DA_HEBB_VS;
	  trace {ach_reset_thr=0.5: msn_deriv=1: max_vs_deep_mod=0.5: };
	  tr_thal {full_params=0: not_gated=0.7: gate_go_pos=1: gate_go_neg=1: gate_nogo_pos=0.1: gate_nogo_neg=1: not_go_pos=0.7: not_go_neg=0.7: not_nogo_pos=0.7: not_nogo_neg=0.7: };
	  burst_da_gain=1;
	  dip_da_gain=1;
	 };
	 MSNConSpec @[2] {
	  name="VSPatchCons_ToNegD2";
	  is_used=1;
	  used_status=USED;
	  desc=;
	  unique{ wt_limits;burst_da_gain;dip_da_gain;	  };
	  children {
	   name="BaseSpec_Group_1";
	   el_typ=MSNConSpec;
	   el_def=0;
	  };
	  rnd {name="RandomSpec_1": type=UNIFORM: mean=0.009999999776482582: var=0: par=1: };
	  wt_limits {type=MIN_MAX: min=0: max=1: sym=0: sym_fm_top=0: };
	  inhib=0;
	  wt_scale {abs=1: rel=1: no_plus_net=0: };
	  learn=1;
	  learn_qtr=Q4;
	  lrate=0.1;
	  use_lrate_sched=1;
	  cur_lrate=0.02;
	  lrs_mult=1;
	  lrate_sched {
	   name="lrate_sched";
	   el_typ=SchedItem;
	   el_def=0;
	   default_val=1;
	   interpolate=0;
	  };
	  use_unlearnable=1;
	  xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	  wt_sig {gain=1: off=1: soft_bound=1: };
	  dynlr {dwt_norm=NO_NORM: norm_tau=100: norm_min=0.001: moment=NO_MOMENT: m_tau=10: s_tau=50: l_tau=2: xx1=1: gain=2: lrate_comp=3: norm_dt=0.01: norm_dt_c=0.99: m_dt=0.1: m_dt_c=0.9: s_dt=0.02: l_dt=0.5: };
	  wt_bal {on=0: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	  adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	  slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	  deep {on=1: bg_lrate=0: fg_lrate=1: };
	  margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
	  su_act_var=ACT_P;
	  ru_act_var=ACT_P;
	  learn_rule=DA_HEBB_VS;
	  trace {ach_reset_thr=0.5: msn_deriv=1: max_vs_deep_mod=0.5: };
	  tr_thal {full_params=0: not_gated=0.7: gate_go_pos=1: gate_go_neg=1: gate_nogo_pos=0.1: gate_nogo_neg=1: not_go_pos=0.7: not_go_neg=0.7: not_nogo_pos=0.7: not_nogo_neg=0.7: };
	  burst_da_gain=0.2;
	  dip_da_gain=1;
	 };
	};
	rnd {name="RandomSpec_1": type=UNIFORM: mean=0.009999999776482582: var=0: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=0: sym_fm_top=0: };
	inhib=0;
	wt_scale {abs=1: rel=1: no_plus_net=0: };
	learn=1;
	learn_qtr=Q4;
	lrate=0.1;
	use_lrate_sched=1;
	cur_lrate=0.02;
	lrs_mult=1;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	use_unlearnable=1;
	xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	wt_sig {gain=1: off=1: soft_bound=1: };
	dynlr {dwt_norm=NO_NORM: norm_tau=100: norm_min=0.001: moment=NO_MOMENT: m_tau=10: s_tau=50: l_tau=2: xx1=1: gain=2: lrate_comp=3: norm_dt=0.01: norm_dt_c=0.99: m_dt=0.1: m_dt_c=0.9: s_dt=0.02: l_dt=0.5: };
	wt_bal {on=0: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	deep {on=1: bg_lrate=0: fg_lrate=1: };
	margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
	su_act_var=ACT_P;
	ru_act_var=ACT_P;
	learn_rule=DA_HEBB_VS;
	trace {ach_reset_thr=0.5: msn_deriv=1: max_vs_deep_mod=0.5: };
	tr_thal {full_params=0: not_gated=0.7: gate_go_pos=1: gate_go_neg=1: gate_nogo_pos=0.1: gate_nogo_neg=1: not_go_pos=0.7: not_go_neg=0.7: not_nogo_pos=0.7: not_nogo_neg=0.7: };
	burst_da_gain=1;
	dip_da_gain=0.2;
       };
       MSNConSpec @[3] {
	name="VSMatrixCons_ToPosD1";
	is_used=1;
	used_status=USED;
	desc=;
	unique{ wt_limits;rnd;wt_scale;lrate;wt_sig;deep;su_act_var;ru_act_var;learn_rule;burst_da_gain;dip_da_gain;trace;	};
	children {
	 name="BaseSpec_Group_1";
	 el_typ=MSNConSpec;
	 el_def=0;
	 MSNConSpec @[0] {
	  name="VSMatrixCons_ToNegD2";
	  is_used=1;
	  used_status=USED;
	  desc=;
	  unique{ wt_limits;lrate;burst_da_gain;dip_da_gain;	  };
	  children {
	   name="BaseSpec_Group_1";
	   el_typ=MSNConSpec;
	   el_def=0;
	  };
	  rnd {name="RandomSpec_1": type=UNIFORM: mean=0.009999999776482582: var=0: par=1: };
	  wt_limits {type=MIN_MAX: min=0: max=1: sym=0: sym_fm_top=0: };
	  inhib=0;
	  wt_scale {abs=0.5: rel=1: no_plus_net=0: };
	  learn=1;
	  learn_qtr=Q4;
	  lrate=0.06;
	  use_lrate_sched=1;
	  cur_lrate=0.02;
	  lrs_mult=1;
	  lrate_sched {
	   name="lrate_sched";
	   el_typ=SchedItem;
	   el_def=0;
	   default_val=1;
	   interpolate=0;
	  };
	  use_unlearnable=1;
	  xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	  wt_sig {gain=1: off=1: soft_bound=1: };
	  dynlr {dwt_norm=NO_NORM: norm_tau=100: norm_min=0.001: moment=NO_MOMENT: m_tau=10: s_tau=50: l_tau=2: xx1=1: gain=2: lrate_comp=3: norm_dt=0.01: norm_dt_c=0.99: m_dt=0.1: m_dt_c=0.9: s_dt=0.02: l_dt=0.5: };
	  wt_bal {on=0: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	  adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	  slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	  deep {on=1: bg_lrate=0: fg_lrate=1: };
	  margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
	  su_act_var=ACT_P;
	  ru_act_var=ACT_P;
	  learn_rule=TRACE_NO_THAL_VS;
	  trace {ach_reset_thr=0.5: msn_deriv=0: max_vs_deep_mod=0.5: };
	  tr_thal {full_params=0: not_gated=0.7: gate_go_pos=1: gate_go_neg=1: gate_nogo_pos=0.1: gate_nogo_neg=1: not_go_pos=0.7: not_go_neg=0.7: not_nogo_pos=0.7: not_nogo_neg=0.7: };
	  burst_da_gain=0.2;
	  dip_da_gain=1;
	 };
	 MSNConSpec @[1] {
	  name="VSMatrixCons_ToPosD2";
	  is_used=1;
	  used_status=USED;
	  desc=;
	  unique{ wt_limits;lrate;burst_da_gain;dip_da_gain;	  };
	  children {
	   name="BaseSpec_Group_1";
	   el_typ=MSNConSpec;
	   el_def=0;
	  };
	  rnd {name="RandomSpec_1": type=UNIFORM: mean=0.009999999776482582: var=0: par=1: };
	  wt_limits {type=MIN_MAX: min=0: max=1: sym=0: sym_fm_top=0: };
	  inhib=0;
	  wt_scale {abs=0.5: rel=1: no_plus_net=0: };
	  learn=1;
	  learn_qtr=Q4;
	  lrate=0.06;
	  use_lrate_sched=1;
	  cur_lrate=0.02;
	  lrs_mult=1;
	  lrate_sched {
	   name="lrate_sched";
	   el_typ=SchedItem;
	   el_def=0;
	   default_val=1;
	   interpolate=0;
	  };
	  use_unlearnable=1;
	  xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	  wt_sig {gain=1: off=1: soft_bound=1: };
	  dynlr {dwt_norm=NO_NORM: norm_tau=100: norm_min=0.001: moment=NO_MOMENT: m_tau=10: s_tau=50: l_tau=2: xx1=1: gain=2: lrate_comp=3: norm_dt=0.01: norm_dt_c=0.99: m_dt=0.1: m_dt_c=0.9: s_dt=0.02: l_dt=0.5: };
	  wt_bal {on=0: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	  adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	  slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	  deep {on=1: bg_lrate=0: fg_lrate=1: };
	  margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
	  su_act_var=ACT_P;
	  ru_act_var=ACT_P;
	  learn_rule=TRACE_NO_THAL_VS;
	  trace {ach_reset_thr=0.5: msn_deriv=0: max_vs_deep_mod=0.5: };
	  tr_thal {full_params=0: not_gated=0.7: gate_go_pos=1: gate_go_neg=1: gate_nogo_pos=0.1: gate_nogo_neg=1: not_go_pos=0.7: not_go_neg=0.7: not_nogo_pos=0.7: not_nogo_neg=0.7: };
	  burst_da_gain=1;
	  dip_da_gain=1;
	 };
	 MSNConSpec @[2] {
	  name="VSMatrixCons_ToNegD1";
	  is_used=1;
	  used_status=USED;
	  desc=;
	  unique{ wt_limits;lrate;burst_da_gain;dip_da_gain;	  };
	  children {
	   name="BaseSpec_Group_1";
	   el_typ=MSNConSpec;
	   el_def=0;
	  };
	  rnd {name="RandomSpec_1": type=UNIFORM: mean=0.009999999776482582: var=0: par=1: };
	  wt_limits {type=MIN_MAX: min=0: max=1: sym=0: sym_fm_top=0: };
	  inhib=0;
	  wt_scale {abs=0.5: rel=1: no_plus_net=0: };
	  learn=1;
	  learn_qtr=Q4;
	  lrate=0.06;
	  use_lrate_sched=1;
	  cur_lrate=0.02;
	  lrs_mult=1;
	  lrate_sched {
	   name="lrate_sched";
	   el_typ=SchedItem;
	   el_def=0;
	   default_val=1;
	   interpolate=0;
	  };
	  use_unlearnable=1;
	  xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	  wt_sig {gain=1: off=1: soft_bound=1: };
	  dynlr {dwt_norm=NO_NORM: norm_tau=100: norm_min=0.001: moment=NO_MOMENT: m_tau=10: s_tau=50: l_tau=2: xx1=1: gain=2: lrate_comp=3: norm_dt=0.01: norm_dt_c=0.99: m_dt=0.1: m_dt_c=0.9: s_dt=0.02: l_dt=0.5: };
	  wt_bal {on=0: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	  adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	  slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	  deep {on=1: bg_lrate=0: fg_lrate=1: };
	  margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
	  su_act_var=ACT_P;
	  ru_act_var=ACT_P;
	  learn_rule=TRACE_NO_THAL_VS;
	  trace {ach_reset_thr=0.5: msn_deriv=0: max_vs_deep_mod=0.5: };
	  tr_thal {full_params=0: not_gated=0.7: gate_go_pos=1: gate_go_neg=1: gate_nogo_pos=0.1: gate_nogo_neg=1: not_go_pos=0.7: not_go_neg=0.7: not_nogo_pos=0.7: not_nogo_neg=0.7: };
	  burst_da_gain=1;
	  dip_da_gain=1;
	 };
	};
	rnd {name="RandomSpec_1": type=UNIFORM: mean=0.009999999776482582: var=0: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=0: sym_fm_top=0: };
	inhib=0;
	wt_scale {abs=0.5: rel=1: no_plus_net=0: };
	learn=1;
	learn_qtr=Q4;
	lrate=0.06;
	use_lrate_sched=1;
	cur_lrate=0.02;
	lrs_mult=1;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	use_unlearnable=1;
	xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	wt_sig {gain=1: off=1: soft_bound=1: };
	dynlr {dwt_norm=NO_NORM: norm_tau=100: norm_min=0.001: moment=NO_MOMENT: m_tau=10: s_tau=50: l_tau=2: xx1=1: gain=2: lrate_comp=3: norm_dt=0.01: norm_dt_c=0.99: m_dt=0.1: m_dt_c=0.9: s_dt=0.02: l_dt=0.5: };
	wt_bal {on=0: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	deep {on=1: bg_lrate=0: fg_lrate=1: };
	margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
	su_act_var=ACT_P;
	ru_act_var=ACT_P;
	learn_rule=TRACE_NO_THAL_VS;
	trace {ach_reset_thr=0.5: msn_deriv=0: max_vs_deep_mod=0.5: };
	tr_thal {full_params=0: not_gated=0.7: gate_go_pos=1: gate_go_neg=1: gate_nogo_pos=0.1: gate_nogo_neg=1: not_go_pos=0.7: not_go_neg=0.7: not_nogo_pos=0.7: not_nogo_neg=0.7: };
	burst_da_gain=1;
	dip_da_gain=0.2;
       };
      };
      rnd {name="RandomSpec_1": type=UNIFORM: mean=0.009999999776482582: var=0: par=1: };
      wt_limits {type=MIN_MAX: min=0: max=1: sym=0: sym_fm_top=0: };
      inhib=0;
      wt_scale {abs=1: rel=1: no_plus_net=0: };
      learn=1;
      learn_qtr=Q4;
      lrate=0.02;
      use_lrate_sched=1;
      cur_lrate=0.02;
      lrs_mult=1;
      lrate_sched {
       name="lrate_sched";
       el_typ=SchedItem;
       el_def=0;
       default_val=1;
       interpolate=0;
      };
      use_unlearnable=1;
      xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
      wt_sig {gain=6: off=1: soft_bound=1: };
      dynlr {dwt_norm=NO_NORM: norm_tau=100: norm_min=0.001: moment=NO_MOMENT: m_tau=10: s_tau=50: l_tau=2: xx1=1: gain=2: lrate_comp=3: norm_dt=0.01: norm_dt_c=0.99: m_dt=0.1: m_dt_c=0.9: s_dt=0.02: l_dt=0.5: };
      wt_bal {on=0: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
      adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
      slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
      deep {on=0: bg_lrate=1: fg_lrate=0: };
      margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
     };
     LeabraConSpec @[2] {
      name="PVLVFixedCons";
      is_used=1;
      used_status=USED;
      desc=;
      unique{       };
      children {
       name="BaseSpec_Group_1";
       el_typ=LeabraBiasSpec;
       el_def=0;
       LeabraBiasSpec @[0] {
	name="PVLVFixedBias";
	is_used=1;
	used_status=USED;
	desc=;
	unique{ rnd;wt_limits;wt_scale;learn;	};
	children {
	 name="BaseSpec_Group_1";
	 el_typ=LeabraBiasSpec;
	 el_def=0;
	};
	rnd {name="RandomSpec_1": type=UNIFORM: mean=0: var=0: par=1: };
	wt_limits {type=NONE: min=-1: max=5: sym=0: sym_fm_top=0: };
	inhib=0;
	wt_scale {abs=1: rel=1: no_plus_net=0: };
	learn=0;
	learn_qtr=Q4;
	lrate=0;
	use_lrate_sched=1;
	cur_lrate=0.02;
	lrs_mult=1;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	use_unlearnable=1;
	xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	wt_sig {gain=6: off=1: soft_bound=1: };
	dynlr {dwt_norm=NO_NORM: norm_tau=100: norm_min=0.001: moment=NO_MOMENT: m_tau=10: s_tau=50: l_tau=2: xx1=1: gain=2: lrate_comp=3: norm_dt=0.01: norm_dt_c=0.99: m_dt=0.1: m_dt_c=0.9: s_dt=0.02: l_dt=0.5: };
	wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	deep {on=0: bg_lrate=1: fg_lrate=0: };
	margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
	dwt_thresh=0.1;
       };
       LeabraConSpec @[1] {
	name="BAExtToBAAcq_Inhib";
	is_used=1;
	used_status=USED;
	desc=;
	unique{ wt_scale;inhib;	};
	children {
	 name="BaseSpec_Group_1";
	 el_typ=LeabraConSpec;
	 el_def=0;
	};
	rnd {name="RandomSpec_1": type=UNIFORM: mean=0.8999999761581421: var=0: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=0: sym_fm_top=0: };
	inhib=1;
	wt_scale {abs=0.8: rel=1: no_plus_net=0: };
	learn=0;
	learn_qtr=Q4;
	lrate=0;
	use_lrate_sched=1;
	cur_lrate=0.02;
	lrs_mult=1;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	use_unlearnable=1;
	xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	wt_sig {gain=6: off=1: soft_bound=1: };
	dynlr {dwt_norm=NO_NORM: norm_tau=100: norm_min=0.001: moment=NO_MOMENT: m_tau=10: s_tau=50: l_tau=2: xx1=1: gain=2: lrate_comp=3: norm_dt=0.01: norm_dt_c=0.99: m_dt=0.1: m_dt_c=0.9: s_dt=0.02: l_dt=0.5: };
	wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	deep {on=0: bg_lrate=1: fg_lrate=0: };
	margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
       };
       SendDeepModConSpec @[2] {
	name="BAAcqToBAExt_DeepMod";
	is_used=1;
	used_status=USED;
	desc=;
	unique{ learn;wt_limits;wt_scale;	};
	children {
	 name="BaseSpec_Group_1";
	 el_typ=SendDeepModConSpec;
	 el_def=0;
	 SendDeepModConSpec @[0] {
	  name="BAAcqToVS_DeepMod";
	  is_used=1;
	  used_status=USED;
	  desc=;
	  unique{ learn;wt_limits;wt_scale;	  };
	  children {
	   name="BaseSpec_Group_1";
	   el_typ=SendDeepModConSpec;
	   el_def=0;
	  };
	  rnd {name="RandomSpec_1": type=UNIFORM: mean=0.8999999761581421: var=0: par=1: };
	  wt_limits {type=MIN_MAX: min=0: max=1: sym=0: sym_fm_top=0: };
	  inhib=0;
	  wt_scale {abs=1: rel=1: no_plus_net=0: };
	  learn=0;
	  learn_qtr=Q4;
	  lrate=0;
	  use_lrate_sched=1;
	  cur_lrate=0.02;
	  lrs_mult=1;
	  lrate_sched {
	   name="lrate_sched";
	   el_typ=SchedItem;
	   el_def=0;
	   default_val=1;
	   interpolate=0;
	  };
	  use_unlearnable=1;
	  xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	  wt_sig {gain=6: off=1: soft_bound=1: };
	  dynlr {dwt_norm=NO_NORM: norm_tau=100: norm_min=0.001: moment=NO_MOMENT: m_tau=10: s_tau=50: l_tau=2: xx1=1: gain=2: lrate_comp=3: norm_dt=0.01: norm_dt_c=0.99: m_dt=0.1: m_dt_c=0.9: s_dt=0.02: l_dt=0.5: };
	  wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	  adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	  slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	  deep {on=0: bg_lrate=1: fg_lrate=0: };
	  margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
	 };
	};
	rnd {name="RandomSpec_1": type=UNIFORM: mean=0.8999999761581421: var=0: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=0: sym_fm_top=0: };
	inhib=0;
	wt_scale {abs=0.1: rel=1: no_plus_net=0: };
	learn=0;
	learn_qtr=Q4;
	lrate=0;
	use_lrate_sched=1;
	cur_lrate=0.02;
	lrs_mult=1;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	use_unlearnable=1;
	xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	wt_sig {gain=6: off=1: soft_bound=1: };
	dynlr {dwt_norm=NO_NORM: norm_tau=100: norm_min=0.001: moment=NO_MOMENT: m_tau=10: s_tau=50: l_tau=2: xx1=1: gain=2: lrate_comp=3: norm_dt=0.01: norm_dt_c=0.99: m_dt=0.1: m_dt_c=0.9: s_dt=0.02: l_dt=0.5: };
	wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	deep {on=0: bg_lrate=1: fg_lrate=0: };
	margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
       };
       SendDeepModConSpec @[3] {
	name="VSMatrixToVSMatrix_DeepMod";
	is_used=1;
	used_status=USED;
	desc=;
	unique{ learn;wt_limits;wt_scale;	};
	children {
	 name="BaseSpec_Group_1";
	 el_typ=SendDeepModConSpec;
	 el_def=0;
	};
	rnd {name="RandomSpec_1": type=UNIFORM: mean=0.8999999761581421: var=0: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=0: sym_fm_top=0: };
	inhib=0;
	wt_scale {abs=1: rel=1: no_plus_net=0: };
	learn=0;
	learn_qtr=Q4;
	lrate=0;
	use_lrate_sched=1;
	cur_lrate=0.02;
	lrs_mult=1;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	use_unlearnable=1;
	xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	wt_sig {gain=6: off=1: soft_bound=1: };
	dynlr {dwt_norm=NO_NORM: norm_tau=100: norm_min=0.001: moment=NO_MOMENT: m_tau=10: s_tau=50: l_tau=2: xx1=1: gain=2: lrate_comp=3: norm_dt=0.01: norm_dt_c=0.99: m_dt=0.1: m_dt_c=0.9: s_dt=0.02: l_dt=0.5: };
	wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	deep {on=0: bg_lrate=1: fg_lrate=0: };
	margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
       };
       SendDeepRawConSpec @[4] {
	name="PVtoBA_DeepRaw";
	is_used=1;
	used_status=USED;
	desc=;
	unique{ learn;rnd;	};
	children {
	 name="BaseSpec_Group_1";
	 el_typ=SendDeepRawConSpec;
	 el_def=0;
	};
	rnd {name="RandomSpec_1": type=UNIFORM: mean=1: var=0: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=0: sym_fm_top=0: };
	inhib=0;
	wt_scale {abs=1: rel=1: no_plus_net=0: };
	learn=0;
	learn_qtr=Q4;
	lrate=0;
	use_lrate_sched=1;
	cur_lrate=0.02;
	lrs_mult=1;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	use_unlearnable=1;
	xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	wt_sig {gain=6: off=1: soft_bound=1: };
	dynlr {dwt_norm=NO_NORM: norm_tau=100: norm_min=0.001: moment=NO_MOMENT: m_tau=10: s_tau=50: l_tau=2: xx1=1: gain=2: lrate_comp=3: norm_dt=0.01: norm_dt_c=0.99: m_dt=0.1: m_dt_c=0.9: s_dt=0.02: l_dt=0.5: };
	wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	deep {on=0: bg_lrate=1: fg_lrate=0: };
	margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
       };
       LeabraConSpec @[5] {
	name="BAtoCA_Fixed";
	is_used=1;
	used_status=USED;
	desc=;
	unique{ wt_scale;	};
	children {
	 name="BaseSpec_Group_1";
	 el_typ=LeabraConSpec;
	 el_def=0;
	};
	rnd {name="RandomSpec_1": type=UNIFORM: mean=0.8999999761581421: var=0: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=0: sym_fm_top=0: };
	inhib=0;
	wt_scale {abs=0.8: rel=1: no_plus_net=0: };
	learn=0;
	learn_qtr=Q4;
	lrate=0;
	use_lrate_sched=1;
	cur_lrate=0.02;
	lrs_mult=1;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	use_unlearnable=1;
	xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	wt_sig {gain=6: off=1: soft_bound=1: };
	dynlr {dwt_norm=NO_NORM: norm_tau=100: norm_min=0.001: moment=NO_MOMENT: m_tau=10: s_tau=50: l_tau=2: xx1=1: gain=2: lrate_comp=3: norm_dt=0.01: norm_dt_c=0.99: m_dt=0.1: m_dt_c=0.9: s_dt=0.02: l_dt=0.5: };
	wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	deep {on=0: bg_lrate=1: fg_lrate=0: };
	margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
       };
       LeabraConSpec @[6] {
	name="FmPV_Fixed";
	is_used=1;
	used_status=USED;
	desc=;
	unique{ wt_scale;	};
	children {
	 name="BaseSpec_Group_1";
	 el_typ=LeabraConSpec;
	 el_def=0;
	};
	rnd {name="RandomSpec_1": type=UNIFORM: mean=0.8999999761581421: var=0: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=0: sym_fm_top=0: };
	inhib=0;
	wt_scale {abs=0.5: rel=1: no_plus_net=0: };
	learn=0;
	learn_qtr=Q4;
	lrate=0;
	use_lrate_sched=1;
	cur_lrate=0.02;
	lrs_mult=1;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	use_unlearnable=1;
	xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	wt_sig {gain=6: off=1: soft_bound=1: };
	dynlr {dwt_norm=NO_NORM: norm_tau=100: norm_min=0.001: moment=NO_MOMENT: m_tau=10: s_tau=50: l_tau=2: xx1=1: gain=2: lrate_comp=3: norm_dt=0.01: norm_dt_c=0.99: m_dt=0.1: m_dt_c=0.9: s_dt=0.02: l_dt=0.5: };
	wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	deep {on=0: bg_lrate=1: fg_lrate=0: };
	margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
       };
      };
      rnd {name="RandomSpec_1": type=UNIFORM: mean=0.8999999761581421: var=0: par=1: };
      wt_limits {type=MIN_MAX: min=0: max=1: sym=0: sym_fm_top=0: };
      inhib=0;
      wt_scale {abs=1: rel=1: no_plus_net=0: };
      learn=0;
      learn_qtr=Q4;
      lrate=0;
      use_lrate_sched=1;
      cur_lrate=0.02;
      lrs_mult=1;
      lrate_sched {
       name="lrate_sched";
       el_typ=SchedItem;
       el_def=0;
       default_val=1;
       interpolate=0;
      };
      use_unlearnable=1;
      xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
      wt_sig {gain=6: off=1: soft_bound=1: };
      dynlr {dwt_norm=NO_NORM: norm_tau=100: norm_min=0.001: moment=NO_MOMENT: m_tau=10: s_tau=50: l_tau=2: xx1=1: gain=2: lrate_comp=3: norm_dt=0.01: norm_dt_c=0.99: m_dt=0.1: m_dt_c=0.9: s_dt=0.02: l_dt=0.5: };
      wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
      adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
      slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
      deep {on=0: bg_lrate=1: fg_lrate=0: };
      margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
     };
     MarkerConSpec @[3] {
      name="PVLVMarkerCons";
      is_used=1;
      used_status=USED;
      desc=;
      unique{ rnd;wt_limits;wt_scale;lrate;learn;      };
      children {
       name="BaseSpec_Group_1";
       el_typ=MarkerConSpec;
       el_def=0;
      };
      rnd {name="RandomSpec_1": type=UNIFORM: mean=0: var=0: par=1: };
      wt_limits {type=MIN_MAX: min=0: max=1: sym=0: sym_fm_top=0: };
      inhib=0;
      wt_scale {abs=1: rel=0: no_plus_net=0: };
      learn=0;
      learn_qtr=Q4;
      lrate=0;
      use_lrate_sched=1;
      cur_lrate=0;
      lrs_mult=1;
      lrate_sched {
       name="lrate_sched";
       el_typ=SchedItem;
       el_def=0;
       default_val=1;
       interpolate=0;
      };
      use_unlearnable=1;
      xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
      wt_sig {gain=6: off=1: soft_bound=1: };
      dynlr {dwt_norm=NO_NORM: norm_tau=100: norm_min=0.001: moment=NO_MOMENT: m_tau=10: s_tau=50: l_tau=2: xx1=1: gain=2: lrate_comp=3: norm_dt=0.01: norm_dt_c=0.99: m_dt=0.1: m_dt_c=0.9: s_dt=0.02: l_dt=0.5: };
      wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
      adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
      slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
      deep {on=0: bg_lrate=1: fg_lrate=0: };
      margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
     };
     LeabraLayerSpec @[4] {
      name="PVLVLayers";
      is_used=0;
      used_status=CHILD_USED;
      desc=;
      unique{       };
      children {
       name="BaseSpec_Group_1";
       el_typ=LeabraLayerSpec;
       el_def=0;
       LeabraLayerSpec @[0] {
	name="PVLayers";
	is_used=1;
	used_status=USED;
	desc=;
	unique{ 	};
	children {
	 name="BaseSpec_Group_1";
	 el_typ=LeabraLayerSpec;
	 el_def=0;
	};
	lay_inhib {on=1: gi=1: ff=1: fb=0: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	unit_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	multi_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	multi_gp_geom {size={x=3: y=3: }: st_off={x=-1: y=-1: }: sub_size={x=1: y=1: }: wrap=1: };
	lay_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	avg_act {targ_init=0.25: fixed=1: use_ext_act=0: tau=100: adjust=1: dt=0.01: };
	inhib_adapt {on=0: tol_pct=0.25: trial_interval=100: tau=200: dt=0.005: };
	inhib_misc {net_thr=0: thr_rel=1: self_fb=0.3: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
	clamp {hard=1: gain=0.2: avg=0: avg_gain=0.2: };
	decay {trial=1: };
	del_inhib {on=0: prv_trl=0: prv_q=0: };
	margin {pct_marg=0.3: avg_tau=100: adapt_tau=500: tol_pct=0.25: avg_act=0.8: low_thr=0.501: med_thr=0.506: hi_thr=0.508: avg_dt=0.01: adapt_dt=0.002: };
	lay_lrate=1;
	cos_diff {avg_tau=100: lrate_mod=0: lrmod_fm_trc=0: lrmod_z_thr=-1.5: set_net_unlrn=0: avg_dt=0.01: avg_dt_c=0.99: };
	lstats {hog_thr=0.3: dead_thr=0.01: };
       };
       LeabraLayerSpec @[1] {
	name="DALayers";
	is_used=1;
	used_status=USED;
	desc=;
	unique{ inhib_misc;	};
	children {
	 name="BaseSpec_Group_1";
	 el_typ=LeabraLayerSpec;
	 el_def=0;
	};
	lay_inhib {on=1: gi=1: ff=1: fb=0: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	unit_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	multi_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	multi_gp_geom {size={x=3: y=3: }: st_off={x=-1: y=-1: }: sub_size={x=1: y=1: }: wrap=1: };
	lay_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	avg_act {targ_init=0.25: fixed=1: use_ext_act=0: tau=100: adjust=1: dt=0.01: };
	inhib_adapt {on=0: tol_pct=0.25: trial_interval=100: tau=200: dt=0.005: };
	inhib_misc {net_thr=0: thr_rel=1: self_fb=0.8: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
	clamp {hard=1: gain=0.2: avg=0: avg_gain=0.2: };
	decay {trial=1: };
	del_inhib {on=0: prv_trl=0: prv_q=0: };
	margin {pct_marg=0.3: avg_tau=100: adapt_tau=500: tol_pct=0.25: avg_act=0.8: low_thr=0.501: med_thr=0.506: hi_thr=0.508: avg_dt=0.01: adapt_dt=0.002: };
	lay_lrate=1;
	cos_diff {avg_tau=100: lrate_mod=0: lrmod_fm_trc=0: lrmod_z_thr=-1.5: set_net_unlrn=0: avg_dt=0.01: avg_dt_c=0.99: };
	lstats {hog_thr=0.3: dead_thr=0.01: };
       };
       LeabraLayerSpec @[2] {
	name="AmygLayer";
	is_used=1;
	used_status=USED;
	desc=;
	unique{ inhib_misc;	};
	children {
	 name="BaseSpec_Group_1";
	 el_typ=LeabraLayerSpec;
	 el_def=0;
	 LeabraLayerSpec @[0] {
	  name="AmygExtLayer";
	  is_used=1;
	  used_status=USED;
	  desc=;
	  unique{ 	  };
	  children {
	   name="BaseSpec_Group_1";
	   el_typ=LeabraLayerSpec;
	   el_def=0;
	  };
	  lay_inhib {on=1: gi=1: ff=1: fb=0: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	  unit_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	  multi_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	  multi_gp_geom {size={x=3: y=3: }: st_off={x=-1: y=-1: }: sub_size={x=1: y=1: }: wrap=1: };
	  lay_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	  avg_act {targ_init=0.25: fixed=1: use_ext_act=0: tau=100: adjust=1: dt=0.01: };
	  inhib_adapt {on=0: tol_pct=0.25: trial_interval=100: tau=200: dt=0.005: };
	  inhib_misc {net_thr=0: thr_rel=1: self_fb=0.5: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
	  clamp {hard=1: gain=0.2: avg=0: avg_gain=0.2: };
	  decay {trial=1: };
	  del_inhib {on=0: prv_trl=0: prv_q=0: };
	  margin {pct_marg=0.3: avg_tau=100: adapt_tau=500: tol_pct=0.25: avg_act=0.8: low_thr=0.501: med_thr=0.506: hi_thr=0.508: avg_dt=0.01: adapt_dt=0.002: };
	  lay_lrate=1;
	  cos_diff {avg_tau=100: lrate_mod=0: lrmod_fm_trc=0: lrmod_z_thr=-1.5: set_net_unlrn=0: avg_dt=0.01: avg_dt_c=0.99: };
	  lstats {hog_thr=0.3: dead_thr=0.01: };
	 };
	};
	lay_inhib {on=1: gi=1: ff=1: fb=0: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	unit_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	multi_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	multi_gp_geom {size={x=3: y=3: }: st_off={x=-1: y=-1: }: sub_size={x=1: y=1: }: wrap=1: };
	lay_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	avg_act {targ_init=0.25: fixed=1: use_ext_act=0: tau=100: adjust=1: dt=0.01: };
	inhib_adapt {on=0: tol_pct=0.25: trial_interval=100: tau=200: dt=0.005: };
	inhib_misc {net_thr=0: thr_rel=1: self_fb=0.5: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
	clamp {hard=1: gain=0.2: avg=0: avg_gain=0.2: };
	decay {trial=1: };
	del_inhib {on=0: prv_trl=0: prv_q=0: };
	margin {pct_marg=0.3: avg_tau=100: adapt_tau=500: tol_pct=0.25: avg_act=0.8: low_thr=0.501: med_thr=0.506: hi_thr=0.508: avg_dt=0.01: adapt_dt=0.002: };
	lay_lrate=1;
	cos_diff {avg_tau=100: lrate_mod=0: lrmod_fm_trc=0: lrmod_z_thr=-1.5: set_net_unlrn=0: avg_dt=0.01: avg_dt_c=0.99: };
	lstats {hog_thr=0.3: dead_thr=0.01: };
       };
       LeabraLayerSpec @[3] {
	name="VSPatchLayer";
	is_used=1;
	used_status=USED;
	desc=;
	unique{ inhib_misc;	};
	children {
	 name="BaseSpec_Group_1";
	 el_typ=LeabraLayerSpec;
	 el_def=0;
	};
	lay_inhib {on=1: gi=1: ff=1: fb=0: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	unit_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	multi_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	multi_gp_geom {size={x=3: y=3: }: st_off={x=-1: y=-1: }: sub_size={x=1: y=1: }: wrap=1: };
	lay_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	avg_act {targ_init=0.25: fixed=1: use_ext_act=0: tau=100: adjust=1: dt=0.01: };
	inhib_adapt {on=0: tol_pct=0.25: trial_interval=100: tau=200: dt=0.005: };
	inhib_misc {net_thr=0: thr_rel=1: self_fb=0.5: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
	clamp {hard=1: gain=0.2: avg=0: avg_gain=0.2: };
	decay {trial=1: };
	del_inhib {on=0: prv_trl=0: prv_q=0: };
	margin {pct_marg=0.3: avg_tau=100: adapt_tau=500: tol_pct=0.25: avg_act=0.8: low_thr=0.501: med_thr=0.506: hi_thr=0.508: avg_dt=0.01: adapt_dt=0.002: };
	lay_lrate=1;
	cos_diff {avg_tau=100: lrate_mod=0: lrmod_fm_trc=0: lrmod_z_thr=-1.5: set_net_unlrn=0: avg_dt=0.01: avg_dt_c=0.99: };
	lstats {hog_thr=0.3: dead_thr=0.01: };
       };
       LeabraLayerSpec @[4] {
	name="VSMatrixLayer";
	is_used=1;
	used_status=USED;
	desc=;
	unique{ del_inhib;	};
	children {
	 name="BaseSpec_Group_1";
	 el_typ=LeabraLayerSpec;
	 el_def=0;
	};
	lay_inhib {on=1: gi=1: ff=1: fb=0: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	unit_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	multi_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	multi_gp_geom {size={x=3: y=3: }: st_off={x=-1: y=-1: }: sub_size={x=1: y=1: }: wrap=1: };
	lay_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	avg_act {targ_init=0.25: fixed=1: use_ext_act=0: tau=100: adjust=1: dt=0.01: };
	inhib_adapt {on=0: tol_pct=0.25: trial_interval=100: tau=200: dt=0.005: };
	inhib_misc {net_thr=0: thr_rel=1: self_fb=0.3: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
	clamp {hard=1: gain=0.2: avg=0: avg_gain=0.2: };
	decay {trial=1: };
	del_inhib {on=1: prv_trl=6: prv_q=0: };
	margin {pct_marg=0.3: avg_tau=100: adapt_tau=500: tol_pct=0.25: avg_act=0.8: low_thr=0.501: med_thr=0.506: hi_thr=0.508: avg_dt=0.01: adapt_dt=0.002: };
	lay_lrate=1;
	cos_diff {avg_tau=100: lrate_mod=0: lrmod_fm_trc=0: lrmod_z_thr=-1.5: set_net_unlrn=0: avg_dt=0.01: avg_dt_c=0.99: };
	lstats {hog_thr=0.3: dead_thr=0.01: };
       };
       ExtRewLayerSpec @[5] {
	name="ExtRewLayer";
	is_used=1;
	used_status=USED;
	desc=;
	unique{ lay_inhib;avg_act;inhib_misc;scalar;unit_range;	};
	children {
	 name="BaseSpec_Group_1";
	 el_typ=ExtRewLayerSpec;
	 el_def=0;
	};
	lay_inhib {on=1: gi=1: ff=1: fb=0: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	unit_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	multi_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	multi_gp_geom {size={x=3: y=3: }: st_off={x=-1: y=-1: }: sub_size={x=1: y=1: }: wrap=1: };
	lay_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	avg_act {targ_init=0.25: fixed=1: use_ext_act=0: tau=100: adjust=1: dt=0.01: };
	inhib_adapt {on=0: tol_pct=0.25: trial_interval=100: tau=200: dt=0.005: };
	inhib_misc {net_thr=0: thr_rel=1: self_fb=0.3: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
	clamp {hard=1: gain=0.2: avg=0: avg_gain=0.2: };
	decay {trial=1: };
	del_inhib {on=0: prv_trl=0: prv_q=0: };
	margin {pct_marg=0.3: avg_tau=100: adapt_tau=500: tol_pct=0.25: avg_act=0.8: low_thr=0.501: med_thr=0.506: hi_thr=0.508: avg_dt=0.01: adapt_dt=0.002: };
	lay_lrate=1;
	cos_diff {avg_tau=100: lrate_mod=0: lrmod_fm_trc=0: lrmod_z_thr=-1.5: set_net_unlrn=0: avg_dt=0.01: avg_dt_c=0.99: };
	lstats {hog_thr=0.3: dead_thr=0.01: };
	scalar {rep=LOCALIST: un_width=0.3: norm_width=0: clamp_pat=0: min_sum_act=0.2: clip_val=1: send_thr=0: init_nms=1: };
	unit_range {min=0: max=1: range=1: scale=1: };
	bias_val {un=NO_UN: un_shp=VAL: un_gain=1: wt=NO_WT: wt_gain=1: val=0: };
	avg_act_range {min=0.1: max=0.9: range=0.8: scale=1.25: };
	val_range {min=0: max=1: range=1: scale=1: };
	rew_type=OUT_ERR_REW;
	out_err {err_tol=0.5: graded=0: no_off_err=0: scalar_val_max=1: };
	rew {err_val=0: norew_val=0.5: rew_val=1: };
       };
      };
      lay_inhib {on=1: gi=1: ff=1: fb=0: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
      unit_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
      multi_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
      multi_gp_geom {size={x=3: y=3: }: st_off={x=-1: y=-1: }: sub_size={x=1: y=1: }: wrap=1: };
      lay_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
      avg_act {targ_init=0.25: fixed=1: use_ext_act=0: tau=100: adjust=1: dt=0.01: };
      inhib_adapt {on=0: tol_pct=0.25: trial_interval=100: tau=200: dt=0.005: };
      inhib_misc {net_thr=0: thr_rel=1: self_fb=0.3: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
      clamp {hard=1: gain=0.2: avg=0: avg_gain=0.2: };
      decay {trial=1: };
      del_inhib {on=0: prv_trl=0: prv_q=0: };
      margin {pct_marg=0.3: avg_tau=100: adapt_tau=500: tol_pct=0.25: avg_act=0.8: low_thr=0.501: med_thr=0.506: hi_thr=0.508: avg_dt=0.01: adapt_dt=0.002: };
      lay_lrate=1;
      cos_diff {avg_tau=100: lrate_mod=0: lrmod_fm_trc=0: lrmod_z_thr=-1.5: set_net_unlrn=0: avg_dt=0.01: avg_dt_c=0.99: };
      lstats {hog_thr=0.3: dead_thr=0.01: };
     };
     FullPrjnSpec @[5] {
      name="PVLVFullPrjn";
      is_used=1;
      used_status=USED;
      desc=;
      unique{       };
      children {
       name="BaseSpec_Group_1";
       el_typ=FullPrjnSpec;
       el_def=0;
      };
      self_con=0;
      init_wts=0;
      set_scale=0;
      init_wt_val=1;
      add_rnd_var=0;
      renorm_wts {on=0: mult_norm=1: avg_wt=0.5: };
     };
     OneToOnePrjnSpec @[6] {
      name="PVLVOneToOne";
      is_used=1;
      used_status=USED;
      desc=;
      unique{ self_con;      };
      children {
       name="BaseSpec_Group_1";
       el_typ=OneToOnePrjnSpec;
       el_def=0;
      };
      self_con=1;
      init_wts=0;
      set_scale=0;
      init_wt_val=1;
      add_rnd_var=0;
      renorm_wts {on=0: mult_norm=1: avg_wt=0.5: };
      n_conns=-1;
      recv_start=0;
      send_start=0;
      use_gp=0;
     };
     GpOneToOnePrjnSpec @[7] {
      name="PVLVGpOneToOne";
      is_used=1;
      used_status=USED;
      desc=;
      unique{ self_con;      };
      children {
       name="BaseSpec_Group_1";
       el_typ=GpOneToOnePrjnSpec;
       el_def=0;
      };
      self_con=1;
      init_wts=0;
      set_scale=0;
      init_wt_val=1;
      add_rnd_var=0;
      renorm_wts {on=0: mult_norm=1: avg_wt=0.5: };
      n_conns=-1;
      recv_start=0;
      send_start=0;
      use_gp=0;
     };
     TesselPrjnSpec @[8] {
      name="PVFmExtRew";
      is_used=1;
      used_status=USED;
      desc=;
      unique{       };
      children {
       name="BaseSpec_Group_1";
       el_typ=TesselPrjnSpec;
       el_def=0;
      };
      self_con=0;
      init_wts=0;
      set_scale=0;
      init_wt_val=1;
      add_rnd_var=0;
      renorm_wts {on=0: mult_norm=1: avg_wt=0.5: };
      recv_off {x=0: y=0: };
      recv_n {x=-1: y=-1: };
      recv_skip {x=1: y=1: };
      recv_group {x=1: y=1: };
      wrap=0;
      send_scale {x=1: y=1: };
      send_off {x=2: y=0: };
      send_offs {
       name="send_offs";
       el_typ=TessEl;
       el_def=0;
       TessEl @[0] {
	send_off {x=0: y=0: };
	wt_val=1;
       };
      };
      last_make_cmd="MakeRectangle(width=1, height=1, left=0, bottom=0)";
      last_weights_cmd=;
     };
    };
    BaseSpec_Group @.gp[1] {
     name="PBWM";
     el_typ=LeabraUnitSpec;
     el_def=0;
     LeabraUnitSpec @[0] {
      name="PBWMUnits";
      is_used=0;
      used_status=CHILD_USED;
      desc=;
      unique{       };
      children {
       name="BaseSpec_Group_1";
       el_typ=MSNUnitSpec;
       el_def=0;
       MSNUnitSpec @[0] {
	name="MatrixGoUnits";
	is_used=1;
	used_status=USED;
	desc=;
	unique{ act_misc;noise_type;noise;noise_adapt;dar;matrix_patch;dorsal_ventral;deep;	};
	children {
	 name="BaseSpec_Group_1";
	 el_typ=MSNUnitSpec;
	 el_def=0;
	 MSNUnitSpec @[0] {
	  name="MatrixNoGoUnits";
	  is_used=1;
	  used_status=USED;
	  desc=;
	  unique{ dar;matrix_patch;dorsal_ventral;matrix;	  };
	  children {
	   name="BaseSpec_Group_1";
	   el_typ=MSNUnitSpec;
	   el_def=0;
	  };
	  act_range {min=0: max=1: range=1: scale=1: };
	  bias_spec {type=LeabraBiasSpec: spec=.networks[0].specs.gp[1][3].children[0]$$: };
	  sse_tol=0.5;
	  act_fun=NOISY_XX1;
	  act {thr=0.5: gain=100: nvar=0.005: };
	  act_misc {rec_nd=1: avg_nd=1: dif_avg=0: net_gain=0.5: act_max_hz=100: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
	  spike {rise=0: decay=5: g_gain=9: window=3: eq_gain=8: eq_tau=50: eq_dt=0.02: };
	  spike_misc {ex=0: exp_slope=0.02: spk_thr=1.2: vm_r=0.3: t_r=3: clamp_max_p=0.12: clamp_type=REGULAR: eff_spk_thr=0.5: };
	  opt_thresh {send=0.1: delta=0.005: xcal_lrn=0.01: };
	  clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
	  vm_range {min=0: max=2: range=2: scale=0.5: };
	  init {v_m=0.4: act=0: netin=0: };
	  dt {integ=1: vm_tau=3.3: net_tau=1.4: fast_cyc=0: vm_dt=0.3030303: net_dt=0.7142857: };
	  act_avg {ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: ss_dt=0.5: s_dt=0.5: m_dt=0.1: s_in_s=0.9: };
	  avg_l {init=0.4: gain=2.5: min=0.2: tau=10: lrn_max=0.5: lrn_min=0.0001: dt=0.1: lrn_fact=0.2173478: };
	  avg_l_2 {err_mod=1: err_min=0.01: lay_act_thr=0.01: };
	  g_bar {e=1: l=0.1: i=1: };
	  e_rev {e=1: l=0.3: i=0.25: };
	  adapt {on=0: tau=144: vm_gain=0.04: spike_gain=0.00805: Ei_dyn=1: Ei_gain=0.001: Ei_tau=50: dt=0.006944444: Ei_dt=0.02: };
	  stp {on=0: f_r_ratio=0.02: rec_tau=200: p0=0.2: p0_norm=0.2: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=5: };
	  syn_delay {on=0: delay=4: };
	  deep_raw_qtr=Q2|Q4;
	  deep {on=1: role=SUPER: raw_thr_rel=0.1: raw_thr_abs=0.1: mod_min=0.2: mod_thr=0.1: trc_p_only_m=0: trc_thal_gate=0: trc_avg_clamp=0: trc_deep_gain=0.2: mod_range=0.8: trc_std_gain=0.8: };
	  da_mod {on=0: minus=0: plus=0.01: };
	  noise_type=NETIN_NOISE;
	  noise {name="noise": type=GAUSSIAN: mean=0: var=0.001000000047497451: par=1: };
	  noise_adapt {trial_fixed=1: mode=FIXED_NOISE: };
	  noise_sched {
	   name="noise_sched";
	   el_typ=SchedItem;
	   el_def=0;
	   default_val=1;
	   interpolate=1;
	  };
	  dar=D2R;
	  matrix_patch=MATRIX;
	  dorsal_ventral=DORSAL;
	  valence=APPETITIVE;
	  matrix {out_ach_inhib=0: n_mnt_x=-1: };
	  deep_mod_zero=1;
	 };
	};
	act_range {min=0: max=1: range=1: scale=1: };
	bias_spec {type=LeabraBiasSpec: spec=$.networks[0].specs.gp[1][3].children[0]$: };
	sse_tol=0.5;
	act_fun=NOISY_XX1;
	act {thr=0.5: gain=100: nvar=0.005: };
	act_misc {rec_nd=1: avg_nd=1: dif_avg=0: net_gain=0.5: act_max_hz=100: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
	spike {rise=0: decay=5: g_gain=9: window=3: eq_gain=8: eq_tau=50: eq_dt=0.02: };
	spike_misc {ex=0: exp_slope=0.02: spk_thr=1.2: vm_r=0.3: t_r=3: clamp_max_p=0.12: clamp_type=REGULAR: eff_spk_thr=0.5: };
	opt_thresh {send=0.1: delta=0.005: xcal_lrn=0.01: };
	clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
	vm_range {min=0: max=2: range=2: scale=0.5: };
	init {v_m=0.4: act=0: netin=0: };
	dt {integ=1: vm_tau=3.3: net_tau=1.4: fast_cyc=0: vm_dt=0.3030303: net_dt=0.7142857: };
	act_avg {ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: ss_dt=0.5: s_dt=0.5: m_dt=0.1: s_in_s=0.9: };
	avg_l {init=0.4: gain=2.5: min=0.2: tau=10: lrn_max=0.5: lrn_min=0.0001: dt=0.1: lrn_fact=0.2173478: };
	avg_l_2 {err_mod=1: err_min=0.01: lay_act_thr=0.01: };
	g_bar {e=1: l=0.1: i=1: };
	e_rev {e=1: l=0.3: i=0.25: };
	adapt {on=0: tau=144: vm_gain=0.04: spike_gain=0.00805: Ei_dyn=1: Ei_gain=0.001: Ei_tau=50: dt=0.006944444: Ei_dt=0.02: };
	stp {on=0: f_r_ratio=0.02: rec_tau=200: p0=0.2: p0_norm=0.2: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=5: };
	syn_delay {on=0: delay=4: };
	deep_raw_qtr=Q2|Q4;
	deep {on=1: role=SUPER: raw_thr_rel=0.1: raw_thr_abs=0.1: mod_min=0.2: mod_thr=0.1: trc_p_only_m=0: trc_thal_gate=0: trc_avg_clamp=0: trc_deep_gain=0.2: mod_range=0.8: trc_std_gain=0.8: };
	da_mod {on=0: minus=0: plus=0.01: };
	noise_type=NETIN_NOISE;
	noise {name="noise": type=GAUSSIAN: mean=0: var=0.001000000047497451: par=1: };
	noise_adapt {trial_fixed=1: mode=FIXED_NOISE: };
	noise_sched {
	 name="noise_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=1;
	};
	dar=D1R;
	matrix_patch=MATRIX;
	dorsal_ventral=DORSAL;
	valence=APPETITIVE;
	matrix {out_ach_inhib=0.2: n_mnt_x=-1: };
	deep_mod_zero=1;
       };
       GPiInvUnitSpec @[1] {
	name="GPiUnits";
	is_used=1;
	used_status=USED;
	desc=;
	unique{ 	};
	children {
	 name="BaseSpec_Group_1";
	 el_typ=GPiInvUnitSpec;
	 el_def=0;
	};
	act_range {min=0: max=1: range=1: scale=1: };
	bias_spec {type=LeabraBiasSpec: spec=$.networks[0].specs.gp[1][3].children[0]$: };
	sse_tol=0.5;
	act_fun=NOISY_XX1;
	act {thr=0.5: gain=100: nvar=0.005: };
	act_misc {rec_nd=1: avg_nd=1: dif_avg=0: net_gain=1: act_max_hz=100: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
	spike {rise=0: decay=5: g_gain=9: window=3: eq_gain=8: eq_tau=50: eq_dt=0.02: };
	spike_misc {ex=0: exp_slope=0.02: spk_thr=1.2: vm_r=0.3: t_r=3: clamp_max_p=0.12: clamp_type=REGULAR: eff_spk_thr=0.5: };
	opt_thresh {send=0.1: delta=0.005: xcal_lrn=0.01: };
	clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
	vm_range {min=0: max=2: range=2: scale=0.5: };
	init {v_m=0.4: act=0: netin=0: };
	dt {integ=1: vm_tau=3.3: net_tau=1.4: fast_cyc=0: vm_dt=0.3030303: net_dt=0.7142857: };
	act_avg {ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: ss_dt=0.5: s_dt=0.5: m_dt=0.1: s_in_s=0.9: };
	avg_l {init=0.4: gain=2.5: min=0.2: tau=10: lrn_max=0.5: lrn_min=0.0001: dt=0.1: lrn_fact=0.2173478: };
	avg_l_2 {err_mod=1: err_min=0.01: lay_act_thr=0.01: };
	g_bar {e=1: l=0.1: i=1: };
	e_rev {e=1: l=0.3: i=0.25: };
	adapt {on=0: tau=144: vm_gain=0.04: spike_gain=0.00805: Ei_dyn=1: Ei_gain=0.001: Ei_tau=50: dt=0.006944444: Ei_dt=0.02: };
	stp {on=0: f_r_ratio=0.02: rec_tau=200: p0=0.2: p0_norm=0.2: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=5: };
	syn_delay {on=0: delay=4: };
	deep_raw_qtr=Q2|Q4;
	deep {on=0: role=SUPER: raw_thr_rel=0.1: raw_thr_abs=0.1: mod_min=0.8: mod_thr=0.1: trc_p_only_m=0: trc_thal_gate=0: trc_avg_clamp=0: trc_deep_gain=0.2: mod_range=0.2: trc_std_gain=0.8: };
	da_mod {on=0: minus=0: plus=0.01: };
	noise_type=NO_NOISE;
	noise {name="noise": type=GAUSSIAN: mean=0: var=0.001000000047497451: par=1: };
	noise_adapt {trial_fixed=1: mode=FIXED_NOISE: };
	noise_sched {
	 name="noise_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=1;
	};
	gpi {net_gain=3: nogo=1: gate_thr=0.2: thr_act=1: min_thal=0.2: tot_gain=4: thal_rescale=1: };
       };
       LeabraUnitSpec @[2] {
	name="GPeNoGoUnits";
	is_used=1;
	used_status=USED;
	desc=;
	unique{ deep;	};
	children {
	 name="BaseSpec_Group_1";
	 el_typ=LeabraUnitSpec;
	 el_def=0;
	};
	act_range {min=0: max=1: range=1: scale=1: };
	bias_spec {type=LeabraBiasSpec: spec=$.networks[0].specs.gp[1][3].children[0]$: };
	sse_tol=0.5;
	act_fun=NOISY_XX1;
	act {thr=0.5: gain=100: nvar=0.005: };
	act_misc {rec_nd=1: avg_nd=1: dif_avg=0: net_gain=1: act_max_hz=100: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
	spike {rise=0: decay=5: g_gain=9: window=3: eq_gain=8: eq_tau=50: eq_dt=0.02: };
	spike_misc {ex=0: exp_slope=0.02: spk_thr=1.2: vm_r=0.3: t_r=3: clamp_max_p=0.12: clamp_type=REGULAR: eff_spk_thr=0.5: };
	opt_thresh {send=0.1: delta=0.005: xcal_lrn=0.01: };
	clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
	vm_range {min=0: max=2: range=2: scale=0.5: };
	init {v_m=0.4: act=0: netin=0: };
	dt {integ=1: vm_tau=3.3: net_tau=1.4: fast_cyc=0: vm_dt=0.3030303: net_dt=0.7142857: };
	act_avg {ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: ss_dt=0.5: s_dt=0.5: m_dt=0.1: s_in_s=0.9: };
	avg_l {init=0.4: gain=2.5: min=0.2: tau=10: lrn_max=0.5: lrn_min=0.0001: dt=0.1: lrn_fact=0.2173478: };
	avg_l_2 {err_mod=1: err_min=0.01: lay_act_thr=0.01: };
	g_bar {e=1: l=0.1: i=1: };
	e_rev {e=1: l=0.3: i=0.25: };
	adapt {on=0: tau=144: vm_gain=0.04: spike_gain=0.00805: Ei_dyn=1: Ei_gain=0.001: Ei_tau=50: dt=0.006944444: Ei_dt=0.02: };
	stp {on=0: f_r_ratio=0.02: rec_tau=200: p0=0.2: p0_norm=0.2: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=5: };
	syn_delay {on=0: delay=4: };
	deep_raw_qtr=Q2|Q4;
	deep {on=1: role=SUPER: raw_thr_rel=0.1: raw_thr_abs=0.1: mod_min=0.8: mod_thr=0.1: trc_p_only_m=0: trc_thal_gate=0: trc_avg_clamp=0: trc_deep_gain=0.2: mod_range=0.2: trc_std_gain=0.8: };
	da_mod {on=0: minus=0: plus=0.01: };
	noise_type=NO_NOISE;
	noise {name="noise": type=GAUSSIAN: mean=0: var=0.001000000047497451: par=1: };
	noise_adapt {trial_fixed=1: mode=FIXED_NOISE: };
	noise_sched {
	 name="noise_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=1;
	};
       };
       PatchUnitSpec @[3] {
	name="PatchUnits";
	is_used=1;
	used_status=USED;
	desc=;
	unique{ 	};
	children {
	 name="BaseSpec_Group_1";
	 el_typ=PatchUnitSpec;
	 el_def=0;
	};
	act_range {min=0: max=1: range=1: scale=1: };
	bias_spec {type=LeabraBiasSpec: spec=$.networks[0].specs.gp[1][3].children[0]$: };
	sse_tol=0.5;
	act_fun=NOISY_XX1;
	act {thr=0.5: gain=100: nvar=0.005: };
	act_misc {rec_nd=1: avg_nd=1: dif_avg=0: net_gain=1: act_max_hz=100: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
	spike {rise=0: decay=5: g_gain=9: window=3: eq_gain=8: eq_tau=50: eq_dt=0.02: };
	spike_misc {ex=0: exp_slope=0.02: spk_thr=1.2: vm_r=0.3: t_r=3: clamp_max_p=0.12: clamp_type=REGULAR: eff_spk_thr=0.5: };
	opt_thresh {send=0.1: delta=0.005: xcal_lrn=0.01: };
	clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
	vm_range {min=0: max=2: range=2: scale=0.5: };
	init {v_m=0.4: act=0: netin=0: };
	dt {integ=1: vm_tau=3.3: net_tau=1.4: fast_cyc=0: vm_dt=0.3030303: net_dt=0.7142857: };
	act_avg {ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: ss_dt=0.5: s_dt=0.5: m_dt=0.1: s_in_s=0.9: };
	avg_l {init=0.4: gain=2.5: min=0.2: tau=10: lrn_max=0.5: lrn_min=0.0001: dt=0.1: lrn_fact=0.2173478: };
	avg_l_2 {err_mod=1: err_min=0.01: lay_act_thr=0.01: };
	g_bar {e=1: l=0.1: i=1: };
	e_rev {e=1: l=0.3: i=0.25: };
	adapt {on=0: tau=144: vm_gain=0.04: spike_gain=0.00805: Ei_dyn=1: Ei_gain=0.001: Ei_tau=50: dt=0.006944444: Ei_dt=0.02: };
	stp {on=0: f_r_ratio=0.02: rec_tau=200: p0=0.2: p0_norm=0.2: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=5: };
	syn_delay {on=0: delay=4: };
	deep_raw_qtr=Q2|Q4;
	deep {on=0: role=SUPER: raw_thr_rel=0.1: raw_thr_abs=0.1: mod_min=0.8: mod_thr=0.1: trc_p_only_m=0: trc_thal_gate=0: trc_avg_clamp=0: trc_deep_gain=0.2: mod_range=0.2: trc_std_gain=0.8: };
	da_mod {on=0: minus=0: plus=0.01: };
	noise_type=NO_NOISE;
	noise {name="noise": type=GAUSSIAN: mean=0: var=0.001000000047497451: par=1: };
	noise_adapt {trial_fixed=1: mode=FIXED_NOISE: };
	noise_sched {
	 name="noise_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=1;
	};
	shunt_factor=0.2;
	shunt_ach=1;
       };
       PFCUnitSpec @[4] {
	name="PFCmntUnits";
	is_used=1;
	used_status=USED;
	desc=;
	unique{ deep;	};
	children {
	 name="BaseSpec_Group_1";
	 el_typ=PFCUnitSpec;
	 el_def=0;
	 PFCUnitSpec @[0] {
	  name="PFCmntdUnits";
	  is_used=1;
	  used_status=USED;
	  desc=;
	  unique{ deep;	  };
	  children {
	   name="BaseSpec_Group_1";
	   el_typ=PFCUnitSpec;
	   el_def=0;
	  };
	  act_range {min=0: max=1: range=1: scale=1: };
	  bias_spec {type=LeabraBiasSpec: spec=$.networks[0].specs.gp[1][3].children[0]$: };
	  sse_tol=0.5;
	  act_fun=NOISY_XX1;
	  act {thr=0.5: gain=100: nvar=0.005: };
	  act_misc {rec_nd=1: avg_nd=1: dif_avg=0: net_gain=1: act_max_hz=100: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
	  spike {rise=0: decay=5: g_gain=9: window=3: eq_gain=8: eq_tau=50: eq_dt=0.02: };
	  spike_misc {ex=0: exp_slope=0.02: spk_thr=1.2: vm_r=0.3: t_r=3: clamp_max_p=0.12: clamp_type=REGULAR: eff_spk_thr=0.5: };
	  opt_thresh {send=0.1: delta=0.005: xcal_lrn=0.01: };
	  clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
	  vm_range {min=0: max=2: range=2: scale=0.5: };
	  init {v_m=0.4: act=0: netin=0: };
	  dt {integ=1: vm_tau=3.3: net_tau=1.4: fast_cyc=0: vm_dt=0.3030303: net_dt=0.7142857: };
	  act_avg {ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: ss_dt=0.5: s_dt=0.5: m_dt=0.1: s_in_s=0.9: };
	  avg_l {init=0.4: gain=2.5: min=0.2: tau=10: lrn_max=0.5: lrn_min=0.0001: dt=0.1: lrn_fact=0.2173478: };
	  avg_l_2 {err_mod=1: err_min=0.01: lay_act_thr=0.01: };
	  g_bar {e=1: l=0.1: i=1: };
	  e_rev {e=1: l=0.3: i=0.25: };
	  adapt {on=0: tau=144: vm_gain=0.04: spike_gain=0.00805: Ei_dyn=1: Ei_gain=0.001: Ei_tau=50: dt=0.006944444: Ei_dt=0.02: };
	  stp {on=0: f_r_ratio=0.02: rec_tau=200: p0=0.2: p0_norm=0.2: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=5: };
	  syn_delay {on=0: delay=4: };
	  deep_raw_qtr=Q2|Q4;
	  deep {on=1: role=DEEP: raw_thr_rel=0.1: raw_thr_abs=0.1: mod_min=1: mod_thr=0.1: trc_p_only_m=0: trc_thal_gate=0: trc_avg_clamp=0: trc_deep_gain=0.2: mod_range=0: trc_std_gain=0.8: };
	  da_mod {on=0: minus=0: plus=0.01: };
	  noise_type=NO_NOISE;
	  noise {name="noise": type=GAUSSIAN: mean=0: var=0.001000000047497451: par=1: };
	  noise_adapt {trial_fixed=1: mode=FIXED_NOISE: };
	  noise_sched {
	   name="noise_sched";
	   el_typ=SchedItem;
	   el_def=0;
	   default_val=1;
	   interpolate=1;
	  };
	  gate {out_gate=0: mnt_thal=1: gate_thr=0.2: prv_qtr=1: };
	  maint {s_mnt_min=0.3: s_mnt_max=0.5: mnt_net_max=0.5: clear=0.5: use_dyn=1: max_mnt=100: };
	  n_dyns=1;
	  dyn_table {
	   name="dyn_table";
	   desc=;
	   data {
	    name="data";
	    el_typ=String_Data;
	    el_def=0;
	    String_Data @[0] {
	     name="name";
	     desc="name for this dynamic profile";
	     col_flags=SAVE_DATA|AUTO_WIDTH;
	     is_matrix=0;
	     cell_geom{ 	     };
	     calc_expr {
	      expr=;
	     };
	     dim_names {
	      name="dim_names";
	     [0] 	     };
	     width=0;
	     matrix_col_width=10;
	     ar {
	      name="ar";
	     [1] "maint_flat";	     };
	    };
	    String_Data @[1] {
	     name="desc";
	     desc="description of this dynamic profile";
	     col_flags=SAVE_DATA|AUTO_WIDTH;
	     is_matrix=0;
	     cell_geom{ 	     };
	     calc_expr {
	      expr=;
	     };
	     dim_names {
	      name="dim_names";
	     [0] 	     };
	     width=0;
	     matrix_col_width=10;
	     ar {
	      name="ar";
	     [1] "maintained, flat stable sustained activation";	     };
	    };
	    float_Data @[2] {
	     name="init";
	     desc="initial value at point when gating starts";
	     col_flags=SAVE_DATA|AUTO_WIDTH;
	     is_matrix=0;
	     cell_geom{ 	     };
	     calc_expr {
	      expr=;
	     };
	     dim_names {
	      name="dim_names";
	     [0] 	     };
	     width=0;
	     matrix_col_width=10;
	     ar {
	      name="ar";
	     [1] 1;	     };
	    };
	    float_Data @[3] {
	     name="rise_tau";
	     desc="time constant for linear rise in maintenance activation (per quarter when deep is updated) -- use integers -- if both rise and decay then rise comes first";
	     col_flags=SAVE_DATA|AUTO_WIDTH;
	     is_matrix=0;
	     cell_geom{ 	     };
	     calc_expr {
	      expr=;
	     };
	     dim_names {
	      name="dim_names";
	     [0] 	     };
	     width=0;
	     matrix_col_width=10;
	     ar {
	      name="ar";
	     [1] 0;	     };
	    };
	    float_Data @[4] {
	     name="decay_tau";
	     desc="time constant for linear decay in maintenance activation (per quarter when deep is updated) -- use integers -- if both rise and decay then rise comes first";
	     col_flags=SAVE_DATA|AUTO_WIDTH;
	     is_matrix=0;
	     cell_geom{ 	     };
	     calc_expr {
	      expr=;
	     };
	     dim_names {
	      name="dim_names";
	     [0] 	     };
	     width=0;
	     matrix_col_width=10;
	     ar {
	      name="ar";
	     [1] 0;	     };
	    };
	   };
	   data_flags=SAVE_ROWS|AUTO_CALC;
	   auto_load=NO_AUTO_LOAD;
	   auto_load_file=;
	   row_height=1;
	   max_col_width=50;
	   keygen 4 0=0;
	   row_indexes {
	    name=;
	   [1] 0;	   };
	   last_sort_spec {
	    name="DataSortSpec_49";
	    ops {
	     name="ops";
	     el_typ=DataSortEl;
	     el_def=0;
	    };
	   };
	   row_with_hilite=-1;
	  };
	 };
	};
	act_range {min=0: max=1: range=1: scale=1: };
	bias_spec {type=LeabraBiasSpec: spec=$.networks[0].specs.gp[1][3].children[0]$: };
	sse_tol=0.5;
	act_fun=NOISY_XX1;
	act {thr=0.5: gain=100: nvar=0.005: };
	act_misc {rec_nd=1: avg_nd=1: dif_avg=0: net_gain=1: act_max_hz=100: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
	spike {rise=0: decay=5: g_gain=9: window=3: eq_gain=8: eq_tau=50: eq_dt=0.02: };
	spike_misc {ex=0: exp_slope=0.02: spk_thr=1.2: vm_r=0.3: t_r=3: clamp_max_p=0.12: clamp_type=REGULAR: eff_spk_thr=0.5: };
	opt_thresh {send=0.1: delta=0.005: xcal_lrn=0.01: };
	clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
	vm_range {min=0: max=2: range=2: scale=0.5: };
	init {v_m=0.4: act=0: netin=0: };
	dt {integ=1: vm_tau=3.3: net_tau=1.4: fast_cyc=0: vm_dt=0.3030303: net_dt=0.7142857: };
	act_avg {ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: ss_dt=0.5: s_dt=0.5: m_dt=0.1: s_in_s=0.9: };
	avg_l {init=0.4: gain=2.5: min=0.2: tau=10: lrn_max=0.5: lrn_min=0.0001: dt=0.1: lrn_fact=0.2173478: };
	avg_l_2 {err_mod=1: err_min=0.01: lay_act_thr=0.01: };
	g_bar {e=1: l=0.1: i=1: };
	e_rev {e=1: l=0.3: i=0.25: };
	adapt {on=0: tau=144: vm_gain=0.04: spike_gain=0.00805: Ei_dyn=1: Ei_gain=0.001: Ei_tau=50: dt=0.006944444: Ei_dt=0.02: };
	stp {on=0: f_r_ratio=0.02: rec_tau=200: p0=0.2: p0_norm=0.2: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=5: };
	syn_delay {on=0: delay=4: };
	deep_raw_qtr=Q2|Q4;
	deep {on=1: role=SUPER: raw_thr_rel=0.1: raw_thr_abs=0.1: mod_min=1: mod_thr=0.1: trc_p_only_m=0: trc_thal_gate=0: trc_avg_clamp=0: trc_deep_gain=0.2: mod_range=0: trc_std_gain=0.8: };
	da_mod {on=0: minus=0: plus=0.01: };
	noise_type=NO_NOISE;
	noise {name="noise": type=GAUSSIAN: mean=0: var=0.001000000047497451: par=1: };
	noise_adapt {trial_fixed=1: mode=FIXED_NOISE: };
	noise_sched {
	 name="noise_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=1;
	};
	gate {out_gate=0: mnt_thal=1: gate_thr=0.2: prv_qtr=1: };
	maint {s_mnt_min=0.3: s_mnt_max=0.5: mnt_net_max=0.5: clear=0.5: use_dyn=1: max_mnt=100: };
	n_dyns=1;
	dyn_table {
	 name="dyn_table";
	 desc=;
	 data {
	  name="data";
	  el_typ=String_Data;
	  el_def=0;
	  String_Data @[0] {
	   name="name";
	   desc="name for this dynamic profile";
	   col_flags=SAVE_DATA|AUTO_WIDTH;
	   is_matrix=0;
	   cell_geom{ 	   };
	   calc_expr {
	    expr=;
	   };
	   dim_names {
	    name="dim_names";
	   [0] 	   };
	   width=0;
	   matrix_col_width=10;
	   ar {
	    name="ar";
	   [1] "maint_flat";	   };
	  };
	  String_Data @[1] {
	   name="desc";
	   desc="description of this dynamic profile";
	   col_flags=SAVE_DATA|AUTO_WIDTH;
	   is_matrix=0;
	   cell_geom{ 	   };
	   calc_expr {
	    expr=;
	   };
	   dim_names {
	    name="dim_names";
	   [0] 	   };
	   width=0;
	   matrix_col_width=10;
	   ar {
	    name="ar";
	   [1] "maintained, flat stable sustained activation";	   };
	  };
	  float_Data @[2] {
	   name="init";
	   desc="initial value at point when gating starts";
	   col_flags=SAVE_DATA|AUTO_WIDTH;
	   is_matrix=0;
	   cell_geom{ 	   };
	   calc_expr {
	    expr=;
	   };
	   dim_names {
	    name="dim_names";
	   [0] 	   };
	   width=0;
	   matrix_col_width=10;
	   ar {
	    name="ar";
	   [1] 1;	   };
	  };
	  float_Data @[3] {
	   name="rise_tau";
	   desc="time constant for linear rise in maintenance activation (per quarter when deep is updated) -- use integers -- if both rise and decay then rise comes first";
	   col_flags=SAVE_DATA|AUTO_WIDTH;
	   is_matrix=0;
	   cell_geom{ 	   };
	   calc_expr {
	    expr=;
	   };
	   dim_names {
	    name="dim_names";
	   [0] 	   };
	   width=0;
	   matrix_col_width=10;
	   ar {
	    name="ar";
	   [1] 0;	   };
	  };
	  float_Data @[4] {
	   name="decay_tau";
	   desc="time constant for linear decay in maintenance activation (per quarter when deep is updated) -- use integers -- if both rise and decay then rise comes first";
	   col_flags=SAVE_DATA|AUTO_WIDTH;
	   is_matrix=0;
	   cell_geom{ 	   };
	   calc_expr {
	    expr=;
	   };
	   dim_names {
	    name="dim_names";
	   [0] 	   };
	   width=0;
	   matrix_col_width=10;
	   ar {
	    name="ar";
	   [1] 0;	   };
	  };
	 };
	 data_flags=SAVE_ROWS|AUTO_CALC;
	 auto_load=NO_AUTO_LOAD;
	 auto_load_file=;
	 row_height=1;
	 max_col_width=50;
	 keygen 4 0=0;
	 row_indexes {
	  name=;
	 [1] 0;	 };
	 last_sort_spec {
	  name="DataSortSpec_48";
	  ops {
	   name="ops";
	   el_typ=DataSortEl;
	   el_def=0;
	  };
	 };
	 row_with_hilite=-1;
	};
       };
       PFCUnitSpec @[5] {
	name="PFCoutUnits";
	is_used=1;
	used_status=USED;
	desc=;
	unique{ deep;deep_raw_qtr;gate;maint;	};
	children {
	 name="BaseSpec_Group_1";
	 el_typ=PFCUnitSpec;
	 el_def=0;
	 PFCUnitSpec @[0] {
	  name="PFCoutdUnits";
	  is_used=1;
	  used_status=USED;
	  desc=;
	  unique{ deep;	  };
	  children {
	   name="BaseSpec_Group_1";
	   el_typ=PFCUnitSpec;
	   el_def=0;
	  };
	  act_range {min=0: max=1: range=1: scale=1: };
	  bias_spec {type=LeabraBiasSpec: spec=$.networks[0].specs.gp[1][3].children[0]$: };
	  sse_tol=0.5;
	  act_fun=NOISY_XX1;
	  act {thr=0.5: gain=100: nvar=0.005: };
	  act_misc {rec_nd=1: avg_nd=1: dif_avg=0: net_gain=1: act_max_hz=100: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
	  spike {rise=0: decay=5: g_gain=9: window=3: eq_gain=8: eq_tau=50: eq_dt=0.02: };
	  spike_misc {ex=0: exp_slope=0.02: spk_thr=1.2: vm_r=0.3: t_r=3: clamp_max_p=0.12: clamp_type=REGULAR: eff_spk_thr=0.5: };
	  opt_thresh {send=0.1: delta=0.005: xcal_lrn=0.01: };
	  clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
	  vm_range {min=0: max=2: range=2: scale=0.5: };
	  init {v_m=0.4: act=0: netin=0: };
	  dt {integ=1: vm_tau=3.3: net_tau=1.4: fast_cyc=0: vm_dt=0.3030303: net_dt=0.7142857: };
	  act_avg {ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: ss_dt=0.5: s_dt=0.5: m_dt=0.1: s_in_s=0.9: };
	  avg_l {init=0.4: gain=2.5: min=0.2: tau=10: lrn_max=0.5: lrn_min=0.0001: dt=0.1: lrn_fact=0.2173478: };
	  avg_l_2 {err_mod=1: err_min=0.01: lay_act_thr=0.01: };
	  g_bar {e=1: l=0.1: i=1: };
	  e_rev {e=1: l=0.3: i=0.25: };
	  adapt {on=0: tau=144: vm_gain=0.04: spike_gain=0.00805: Ei_dyn=1: Ei_gain=0.001: Ei_tau=50: dt=0.006944444: Ei_dt=0.02: };
	  stp {on=0: f_r_ratio=0.02: rec_tau=200: p0=0.2: p0_norm=0.2: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=5: };
	  syn_delay {on=0: delay=4: };
	  deep_raw_qtr=Q1;
	  deep {on=1: role=DEEP: raw_thr_rel=0.1: raw_thr_abs=0.1: mod_min=1: mod_thr=0.1: trc_p_only_m=0: trc_thal_gate=0: trc_avg_clamp=0: trc_deep_gain=0.2: mod_range=0: trc_std_gain=0.8: };
	  da_mod {on=0: minus=0: plus=0.01: };
	  noise_type=NO_NOISE;
	  noise {name="noise": type=GAUSSIAN: mean=0: var=0.001000000047497451: par=1: };
	  noise_adapt {trial_fixed=1: mode=FIXED_NOISE: };
	  noise_sched {
	   name="noise_sched";
	   el_typ=SchedItem;
	   el_def=0;
	   default_val=1;
	   interpolate=1;
	  };
	  gate {out_gate=1: mnt_thal=1: gate_thr=0.2: prv_qtr=0: };
	  maint {s_mnt_min=0.3: s_mnt_max=0.5: mnt_net_max=0.5: clear=0.5: use_dyn=1: max_mnt=1: };
	  n_dyns=1;
	  dyn_table {
	   name="dyn_table";
	   desc=;
	   data {
	    name="data";
	    el_typ=String_Data;
	    el_def=0;
	    String_Data @[0] {
	     name="name";
	     desc="name for this dynamic profile";
	     col_flags=SAVE_DATA|AUTO_WIDTH;
	     is_matrix=0;
	     cell_geom{ 	     };
	     calc_expr {
	      expr=;
	     };
	     dim_names {
	      name="dim_names";
	     [0] 	     };
	     width=0;
	     matrix_col_width=10;
	     ar {
	      name="ar";
	     [1] "maint_flat";	     };
	    };
	    String_Data @[1] {
	     name="desc";
	     desc="description of this dynamic profile";
	     col_flags=SAVE_DATA|AUTO_WIDTH;
	     is_matrix=0;
	     cell_geom{ 	     };
	     calc_expr {
	      expr=;
	     };
	     dim_names {
	      name="dim_names";
	     [0] 	     };
	     width=0;
	     matrix_col_width=10;
	     ar {
	      name="ar";
	     [1] "maintained, flat stable sustained activation";	     };
	    };
	    float_Data @[2] {
	     name="init";
	     desc="initial value at point when gating starts";
	     col_flags=SAVE_DATA|AUTO_WIDTH;
	     is_matrix=0;
	     cell_geom{ 	     };
	     calc_expr {
	      expr=;
	     };
	     dim_names {
	      name="dim_names";
	     [0] 	     };
	     width=0;
	     matrix_col_width=10;
	     ar {
	      name="ar";
	     [1] 1;	     };
	    };
	    float_Data @[3] {
	     name="rise_tau";
	     desc="time constant for linear rise in maintenance activation (per quarter when deep is updated) -- use integers -- if both rise and decay then rise comes first";
	     col_flags=SAVE_DATA|AUTO_WIDTH;
	     is_matrix=0;
	     cell_geom{ 	     };
	     calc_expr {
	      expr=;
	     };
	     dim_names {
	      name="dim_names";
	     [0] 	     };
	     width=0;
	     matrix_col_width=10;
	     ar {
	      name="ar";
	     [1] 0;	     };
	    };
	    float_Data @[4] {
	     name="decay_tau";
	     desc="time constant for linear decay in maintenance activation (per quarter when deep is updated) -- use integers -- if both rise and decay then rise comes first";
	     col_flags=SAVE_DATA|AUTO_WIDTH;
	     is_matrix=0;
	     cell_geom{ 	     };
	     calc_expr {
	      expr=;
	     };
	     dim_names {
	      name="dim_names";
	     [0] 	     };
	     width=0;
	     matrix_col_width=10;
	     ar {
	      name="ar";
	     [1] 0;	     };
	    };
	   };
	   data_flags=SAVE_ROWS|AUTO_CALC;
	   auto_load=NO_AUTO_LOAD;
	   auto_load_file=;
	   row_height=1;
	   max_col_width=50;
	   keygen 4 0=0;
	   row_indexes {
	    name=;
	   [1] 0;	   };
	   last_sort_spec {
	    name="DataSortSpec_51";
	    ops {
	     name="ops";
	     el_typ=DataSortEl;
	     el_def=0;
	    };
	   };
	   row_with_hilite=-1;
	  };
	 };
	};
	act_range {min=0: max=1: range=1: scale=1: };
	bias_spec {type=LeabraBiasSpec: spec=$.networks[0].specs.gp[1][3].children[0]$: };
	sse_tol=0.5;
	act_fun=NOISY_XX1;
	act {thr=0.5: gain=100: nvar=0.005: };
	act_misc {rec_nd=1: avg_nd=1: dif_avg=0: net_gain=1: act_max_hz=100: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
	spike {rise=0: decay=5: g_gain=9: window=3: eq_gain=8: eq_tau=50: eq_dt=0.02: };
	spike_misc {ex=0: exp_slope=0.02: spk_thr=1.2: vm_r=0.3: t_r=3: clamp_max_p=0.12: clamp_type=REGULAR: eff_spk_thr=0.5: };
	opt_thresh {send=0.1: delta=0.005: xcal_lrn=0.01: };
	clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
	vm_range {min=0: max=2: range=2: scale=0.5: };
	init {v_m=0.4: act=0: netin=0: };
	dt {integ=1: vm_tau=3.3: net_tau=1.4: fast_cyc=0: vm_dt=0.3030303: net_dt=0.7142857: };
	act_avg {ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: ss_dt=0.5: s_dt=0.5: m_dt=0.1: s_in_s=0.9: };
	avg_l {init=0.4: gain=2.5: min=0.2: tau=10: lrn_max=0.5: lrn_min=0.0001: dt=0.1: lrn_fact=0.2173478: };
	avg_l_2 {err_mod=1: err_min=0.01: lay_act_thr=0.01: };
	g_bar {e=1: l=0.1: i=1: };
	e_rev {e=1: l=0.3: i=0.25: };
	adapt {on=0: tau=144: vm_gain=0.04: spike_gain=0.00805: Ei_dyn=1: Ei_gain=0.001: Ei_tau=50: dt=0.006944444: Ei_dt=0.02: };
	stp {on=0: f_r_ratio=0.02: rec_tau=200: p0=0.2: p0_norm=0.2: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=5: };
	syn_delay {on=0: delay=4: };
	deep_raw_qtr=Q1;
	deep {on=1: role=SUPER: raw_thr_rel=0.1: raw_thr_abs=0.1: mod_min=1: mod_thr=0.1: trc_p_only_m=0: trc_thal_gate=0: trc_avg_clamp=0: trc_deep_gain=0.2: mod_range=0: trc_std_gain=0.8: };
	da_mod {on=0: minus=0: plus=0.01: };
	noise_type=NO_NOISE;
	noise {name="noise": type=GAUSSIAN: mean=0: var=0.001000000047497451: par=1: };
	noise_adapt {trial_fixed=1: mode=FIXED_NOISE: };
	noise_sched {
	 name="noise_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=1;
	};
	gate {out_gate=1: mnt_thal=1: gate_thr=0.2: prv_qtr=0: };
	maint {s_mnt_min=0.3: s_mnt_max=0.5: mnt_net_max=0.5: clear=0.5: use_dyn=1: max_mnt=1: };
	n_dyns=1;
	dyn_table {
	 name="dyn_table";
	 desc=;
	 data {
	  name="data";
	  el_typ=String_Data;
	  el_def=0;
	  String_Data @[0] {
	   name="name";
	   desc="name for this dynamic profile";
	   col_flags=SAVE_DATA|AUTO_WIDTH;
	   is_matrix=0;
	   cell_geom{ 	   };
	   calc_expr {
	    expr=;
	   };
	   dim_names {
	    name="dim_names";
	   [0] 	   };
	   width=0;
	   matrix_col_width=10;
	   ar {
	    name="ar";
	   [1] "maint_flat";	   };
	  };
	  String_Data @[1] {
	   name="desc";
	   desc="description of this dynamic profile";
	   col_flags=SAVE_DATA|AUTO_WIDTH;
	   is_matrix=0;
	   cell_geom{ 	   };
	   calc_expr {
	    expr=;
	   };
	   dim_names {
	    name="dim_names";
	   [0] 	   };
	   width=0;
	   matrix_col_width=10;
	   ar {
	    name="ar";
	   [1] "maintained, flat stable sustained activation";	   };
	  };
	  float_Data @[2] {
	   name="init";
	   desc="initial value at point when gating starts";
	   col_flags=SAVE_DATA|AUTO_WIDTH;
	   is_matrix=0;
	   cell_geom{ 	   };
	   calc_expr {
	    expr=;
	   };
	   dim_names {
	    name="dim_names";
	   [0] 	   };
	   width=0;
	   matrix_col_width=10;
	   ar {
	    name="ar";
	   [1] 1;	   };
	  };
	  float_Data @[3] {
	   name="rise_tau";
	   desc="time constant for linear rise in maintenance activation (per quarter when deep is updated) -- use integers -- if both rise and decay then rise comes first";
	   col_flags=SAVE_DATA|AUTO_WIDTH;
	   is_matrix=0;
	   cell_geom{ 	   };
	   calc_expr {
	    expr=;
	   };
	   dim_names {
	    name="dim_names";
	   [0] 	   };
	   width=0;
	   matrix_col_width=10;
	   ar {
	    name="ar";
	   [1] 0;	   };
	  };
	  float_Data @[4] {
	   name="decay_tau";
	   desc="time constant for linear decay in maintenance activation (per quarter when deep is updated) -- use integers -- if both rise and decay then rise comes first";
	   col_flags=SAVE_DATA|AUTO_WIDTH;
	   is_matrix=0;
	   cell_geom{ 	   };
	   calc_expr {
	    expr=;
	   };
	   dim_names {
	    name="dim_names";
	   [0] 	   };
	   width=0;
	   matrix_col_width=10;
	   ar {
	    name="ar";
	   [1] 0;	   };
	  };
	 };
	 data_flags=SAVE_ROWS|AUTO_CALC;
	 auto_load=NO_AUTO_LOAD;
	 auto_load_file=;
	 row_height=1;
	 max_col_width=50;
	 keygen 4 0=0;
	 row_indexes {
	  name=;
	 [1] 0;	 };
	 last_sort_spec {
	  name="DataSortSpec_50";
	  ops {
	   name="ops";
	   el_typ=DataSortEl;
	   el_def=0;
	  };
	 };
	 row_with_hilite=-1;
	};
       };
       LeabraUnitSpec @[6] {
	name="PFCtrcUnits";
	is_used=1;
	used_status=USED;
	desc=;
	unique{ deep;	};
	children {
	 name="BaseSpec_Group_1";
	 el_typ=LeabraUnitSpec;
	 el_def=0;
	};
	act_range {min=0: max=1: range=1: scale=1: };
	bias_spec {type=LeabraBiasSpec: spec=$.networks[0].specs.gp[1][3].children[0]$: };
	sse_tol=0.5;
	act_fun=NOISY_XX1;
	act {thr=0.5: gain=100: nvar=0.005: };
	act_misc {rec_nd=1: avg_nd=1: dif_avg=0: net_gain=1: act_max_hz=100: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
	spike {rise=0: decay=5: g_gain=9: window=3: eq_gain=8: eq_tau=50: eq_dt=0.02: };
	spike_misc {ex=0: exp_slope=0.02: spk_thr=1.2: vm_r=0.3: t_r=3: clamp_max_p=0.12: clamp_type=REGULAR: eff_spk_thr=0.5: };
	opt_thresh {send=0.1: delta=0.005: xcal_lrn=0.01: };
	clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
	vm_range {min=0: max=2: range=2: scale=0.5: };
	init {v_m=0.4: act=0: netin=0: };
	dt {integ=1: vm_tau=3.3: net_tau=1.4: fast_cyc=0: vm_dt=0.3030303: net_dt=0.7142857: };
	act_avg {ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: ss_dt=0.5: s_dt=0.5: m_dt=0.1: s_in_s=0.9: };
	avg_l {init=0.4: gain=2.5: min=0.2: tau=10: lrn_max=0.5: lrn_min=0.0001: dt=0.1: lrn_fact=0.2173478: };
	avg_l_2 {err_mod=1: err_min=0.01: lay_act_thr=0.01: };
	g_bar {e=1: l=0.1: i=1: };
	e_rev {e=1: l=0.3: i=0.25: };
	adapt {on=0: tau=144: vm_gain=0.04: spike_gain=0.00805: Ei_dyn=1: Ei_gain=0.001: Ei_tau=50: dt=0.006944444: Ei_dt=0.02: };
	stp {on=0: f_r_ratio=0.02: rec_tau=200: p0=0.2: p0_norm=0.2: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=5: };
	syn_delay {on=0: delay=4: };
	deep_raw_qtr=Q2|Q4;
	deep {on=1: role=TRC: raw_thr_rel=0.1: raw_thr_abs=0.1: mod_min=0.8: mod_thr=0.1: trc_p_only_m=1: trc_thal_gate=1: trc_avg_clamp=0: trc_deep_gain=0.2: mod_range=0.2: trc_std_gain=0.8: };
	da_mod {on=0: minus=0: plus=0.01: };
	noise_type=NO_NOISE;
	noise {name="noise": type=GAUSSIAN: mean=0: var=0.001000000047497451: par=1: };
	noise_adapt {trial_fixed=1: mode=FIXED_NOISE: };
	noise_sched {
	 name="noise_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=1;
	};
       };
       LeabraUnitSpec @[7] {
	name="PFCInputUnits";
	is_used=1;
	used_status=USED;
	desc=;
	unique{ deep;	};
	children {
	 name="BaseSpec_Group_1";
	 el_typ=LeabraUnitSpec;
	 el_def=0;
	};
	act_range {min=0: max=1: range=1: scale=1: };
	bias_spec {type=LeabraBiasSpec: spec=$.networks[0].specs.gp[1][3].children[0]$: };
	sse_tol=0.5;
	act_fun=NOISY_XX1;
	act {thr=0.5: gain=100: nvar=0.005: };
	act_misc {rec_nd=1: avg_nd=1: dif_avg=0: net_gain=1: act_max_hz=100: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
	spike {rise=0: decay=5: g_gain=9: window=3: eq_gain=8: eq_tau=50: eq_dt=0.02: };
	spike_misc {ex=0: exp_slope=0.02: spk_thr=1.2: vm_r=0.3: t_r=3: clamp_max_p=0.12: clamp_type=REGULAR: eff_spk_thr=0.5: };
	opt_thresh {send=0.1: delta=0.005: xcal_lrn=0.01: };
	clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
	vm_range {min=0: max=2: range=2: scale=0.5: };
	init {v_m=0.4: act=0: netin=0: };
	dt {integ=1: vm_tau=3.3: net_tau=1.4: fast_cyc=0: vm_dt=0.3030303: net_dt=0.7142857: };
	act_avg {ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: ss_dt=0.5: s_dt=0.5: m_dt=0.1: s_in_s=0.9: };
	avg_l {init=0.4: gain=2.5: min=0.2: tau=10: lrn_max=0.5: lrn_min=0.0001: dt=0.1: lrn_fact=0.2173478: };
	avg_l_2 {err_mod=1: err_min=0.01: lay_act_thr=0.01: };
	g_bar {e=1: l=0.1: i=1: };
	e_rev {e=1: l=0.3: i=0.25: };
	adapt {on=0: tau=144: vm_gain=0.04: spike_gain=0.00805: Ei_dyn=1: Ei_gain=0.001: Ei_tau=50: dt=0.006944444: Ei_dt=0.02: };
	stp {on=0: f_r_ratio=0.02: rec_tau=200: p0=0.2: p0_norm=0.2: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=5: };
	syn_delay {on=0: delay=4: };
	deep_raw_qtr=Q2|Q4;
	deep {on=1: role=SUPER: raw_thr_rel=0.1: raw_thr_abs=0.1: mod_min=0.8: mod_thr=0.1: trc_p_only_m=0: trc_thal_gate=0: trc_avg_clamp=0: trc_deep_gain=0.2: mod_range=0.2: trc_std_gain=0.8: };
	da_mod {on=0: minus=0: plus=0.01: };
	noise_type=NO_NOISE;
	noise {name="noise": type=GAUSSIAN: mean=0: var=0.001000000047497451: par=1: };
	noise_adapt {trial_fixed=1: mode=FIXED_NOISE: };
	noise_sched {
	 name="noise_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=1;
	};
       };
      };
      act_range {min=0: max=1: range=1: scale=1: };
      bias_spec {type=LeabraBiasSpec: spec=$.networks[0].specs.gp[1][3].children[0]$: };
      sse_tol=0.5;
      act_fun=NOISY_XX1;
      act {thr=0.5: gain=100: nvar=0.005: };
      act_misc {rec_nd=1: avg_nd=1: dif_avg=0: net_gain=1: act_max_hz=100: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
      spike {rise=0: decay=5: g_gain=9: window=3: eq_gain=8: eq_tau=50: eq_dt=0.02: };
      spike_misc {ex=0: exp_slope=0.02: spk_thr=1.2: vm_r=0.3: t_r=3: clamp_max_p=0.12: clamp_type=REGULAR: eff_spk_thr=0.5: };
      opt_thresh {send=0.1: delta=0.005: xcal_lrn=0.01: };
      clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
      vm_range {min=0: max=2: range=2: scale=0.5: };
      init {v_m=0.4: act=0: netin=0: };
      dt {integ=1: vm_tau=3.3: net_tau=1.4: fast_cyc=0: vm_dt=0.3030303: net_dt=0.7142857: };
      act_avg {ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: ss_dt=0.5: s_dt=0.5: m_dt=0.1: s_in_s=0.9: };
      avg_l {init=0.4: gain=2.5: min=0.2: tau=10: lrn_max=0.5: lrn_min=0.0001: dt=0.1: lrn_fact=0.2173478: };
      avg_l_2 {err_mod=1: err_min=0.01: lay_act_thr=0.01: };
      g_bar {e=1: l=0.1: i=1: };
      e_rev {e=1: l=0.3: i=0.25: };
      adapt {on=0: tau=144: vm_gain=0.04: spike_gain=0.00805: Ei_dyn=1: Ei_gain=0.001: Ei_tau=50: dt=0.006944444: Ei_dt=0.02: };
      stp {on=0: f_r_ratio=0.02: rec_tau=200: p0=0.2: p0_norm=0.2: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=5: };
      syn_delay {on=0: delay=4: };
      deep_raw_qtr=Q2|Q4;
      deep {on=0: role=SUPER: raw_thr_rel=0.1: raw_thr_abs=0.1: mod_min=0.8: mod_thr=0.1: trc_p_only_m=0: trc_thal_gate=0: trc_avg_clamp=0: trc_deep_gain=0.2: mod_range=0.2: trc_std_gain=0.8: };
      da_mod {on=0: minus=0: plus=0.01: };
      noise_type=NO_NOISE;
      noise {name="noise": type=GAUSSIAN: mean=0: var=0.001000000047497451: par=1: };
      noise_adapt {trial_fixed=1: mode=FIXED_NOISE: };
      noise_sched {
       name="noise_sched";
       el_typ=SchedItem;
       el_def=0;
       default_val=1;
       interpolate=1;
      };
     };
     LeabraConSpec @[1] {
      name="BgLrnCons";
      is_used=0;
      used_status=CHILD_USED;
      desc=;
      unique{ lrate;learn_qtr;wt_limits;wt_bal;      };
      children {
       name="BaseSpec_Group_1";
       el_typ=MSNConSpec;
       el_def=0;
       MSNConSpec @[0] {
	name="MatrixConsGo";
	is_used=1;
	used_status=USED;
	desc=;
	unique{ rnd;lrate;wt_sig;su_act_var;ru_act_var;learn_rule;slow_wts;	};
	children {
	 name="BaseSpec_Group_1";
	 el_typ=MSNConSpec;
	 el_def=0;
	 MSNConSpec @[0] {
	  name="MatrixConsNoGo";
	  is_used=1;
	  used_status=USED;
	  desc=;
	  unique{ 	  };
	  children {
	   name="BaseSpec_Group_1";
	   el_typ=MSNConSpec;
	   el_def=0;
	  };
	  rnd {name="RandomSpec_1": type=UNIFORM: mean=0.5: var=0.1000000014901161: par=1: };
	  wt_limits {type=MIN_MAX: min=0: max=1: sym=0: sym_fm_top=0: };
	  inhib=0;
	  wt_scale {abs=1: rel=1: no_plus_net=0: };
	  learn=1;
	  learn_qtr=Q2|Q4;
	  lrate=0.04;
	  use_lrate_sched=1;
	  cur_lrate=0.02;
	  lrs_mult=1;
	  lrate_sched {
	   name="lrate_sched";
	   el_typ=SchedItem;
	   el_def=0;
	   default_val=1;
	   interpolate=0;
	  };
	  use_unlearnable=1;
	  xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	  wt_sig {gain=1: off=1: soft_bound=1: };
	  dynlr {dwt_norm=NO_NORM: norm_tau=100: norm_min=0.001: moment=NO_MOMENT: m_tau=10: s_tau=50: l_tau=2: xx1=1: gain=2: lrate_comp=3: norm_dt=0.01: norm_dt_c=0.99: m_dt=0.1: m_dt_c=0.9: s_dt=0.02: l_dt=0.5: };
	  wt_bal {on=0: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	  adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	  slow_wts {on=1: swt_pct=0.95: slow_tau=100: wt_tau=1: fwt_pct=0.05000001: slow_dt=0.01: wt_dt=1: };
	  deep {on=0: bg_lrate=1: fg_lrate=0: };
	  margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
	  su_act_var=ACT_EQ;
	  ru_act_var=ACT_EQ;
	  learn_rule=TRACE_THAL;
	  trace {ach_reset_thr=0.5: msn_deriv=1: max_vs_deep_mod=0.5: };
	  tr_thal {full_params=0: not_gated=0.7: gate_go_pos=1: gate_go_neg=1: gate_nogo_pos=0.1: gate_nogo_neg=1: not_go_pos=0.7: not_go_neg=0.7: not_nogo_pos=0.7: not_nogo_neg=0.7: };
	  burst_da_gain=1;
	  dip_da_gain=1;
	 };
	 MSNConSpec @[1] {
	  name="MatrixConsFmPFC";
	  is_used=1;
	  used_status=USED;
	  desc=;
	  unique{ wt_scale;	  };
	  children {
	   name="BaseSpec_Group_1";
	   el_typ=MSNConSpec;
	   el_def=0;
	  };
	  rnd {name="RandomSpec_1": type=UNIFORM: mean=0.5: var=0.1000000014901161: par=1: };
	  wt_limits {type=MIN_MAX: min=0: max=1: sym=0: sym_fm_top=0: };
	  inhib=0;
	  wt_scale {abs=1: rel=0.1: no_plus_net=0: };
	  learn=1;
	  learn_qtr=Q2|Q4;
	  lrate=0.04;
	  use_lrate_sched=1;
	  cur_lrate=0.02;
	  lrs_mult=1;
	  lrate_sched {
	   name="lrate_sched";
	   el_typ=SchedItem;
	   el_def=0;
	   default_val=1;
	   interpolate=0;
	  };
	  use_unlearnable=1;
	  xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	  wt_sig {gain=1: off=1: soft_bound=1: };
	  dynlr {dwt_norm=NO_NORM: norm_tau=100: norm_min=0.001: moment=NO_MOMENT: m_tau=10: s_tau=50: l_tau=2: xx1=1: gain=2: lrate_comp=3: norm_dt=0.01: norm_dt_c=0.99: m_dt=0.1: m_dt_c=0.9: s_dt=0.02: l_dt=0.5: };
	  wt_bal {on=0: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	  adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	  slow_wts {on=1: swt_pct=0.95: slow_tau=100: wt_tau=1: fwt_pct=0.05000001: slow_dt=0.01: wt_dt=1: };
	  deep {on=0: bg_lrate=1: fg_lrate=0: };
	  margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
	  su_act_var=ACT_EQ;
	  ru_act_var=ACT_EQ;
	  learn_rule=TRACE_THAL;
	  trace {ach_reset_thr=0.5: msn_deriv=1: max_vs_deep_mod=0.5: };
	  tr_thal {full_params=0: not_gated=0.7: gate_go_pos=1: gate_go_neg=1: gate_nogo_pos=0.1: gate_nogo_neg=1: not_go_pos=0.7: not_go_neg=0.7: not_nogo_pos=0.7: not_nogo_neg=0.7: };
	  burst_da_gain=1;
	  dip_da_gain=1;
	 };
	};
	rnd {name="RandomSpec_1": type=UNIFORM: mean=0.5: var=0.1000000014901161: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=0: sym_fm_top=0: };
	inhib=0;
	wt_scale {abs=1: rel=1: no_plus_net=0: };
	learn=1;
	learn_qtr=Q2|Q4;
	lrate=0.04;
	use_lrate_sched=1;
	cur_lrate=0.02;
	lrs_mult=1;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	use_unlearnable=1;
	xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	wt_sig {gain=1: off=1: soft_bound=1: };
	dynlr {dwt_norm=NO_NORM: norm_tau=100: norm_min=0.001: moment=NO_MOMENT: m_tau=10: s_tau=50: l_tau=2: xx1=1: gain=2: lrate_comp=3: norm_dt=0.01: norm_dt_c=0.99: m_dt=0.1: m_dt_c=0.9: s_dt=0.02: l_dt=0.5: };
	wt_bal {on=0: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	slow_wts {on=1: swt_pct=0.95: slow_tau=100: wt_tau=1: fwt_pct=0.05000001: slow_dt=0.01: wt_dt=1: };
	deep {on=0: bg_lrate=1: fg_lrate=0: };
	margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
	su_act_var=ACT_EQ;
	ru_act_var=ACT_EQ;
	learn_rule=TRACE_THAL;
	trace {ach_reset_thr=0.5: msn_deriv=1: max_vs_deep_mod=0.5: };
	tr_thal {full_params=0: not_gated=0.7: gate_go_pos=1: gate_go_neg=1: gate_nogo_pos=0.1: gate_nogo_neg=1: not_go_pos=0.7: not_go_neg=0.7: not_nogo_pos=0.7: not_nogo_neg=0.7: };
	burst_da_gain=1;
	dip_da_gain=1;
       };
       LeabraDeltaConSpec @[1] {
	name="ToTANs";
	is_used=1;
	used_status=USED;
	desc=;
	unique{ learn_qtr;lrate;	};
	children {
	 name="BaseSpec_Group_1";
	 el_typ=LeabraDeltaConSpec;
	 el_def=0;
	};
	rnd {name="RandomSpec_1": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=0: sym_fm_top=0: };
	inhib=0;
	wt_scale {abs=1: rel=1: no_plus_net=0: };
	learn=1;
	learn_qtr=Q4;
	lrate=0.1;
	use_lrate_sched=1;
	cur_lrate=0.02;
	lrs_mult=1;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	use_unlearnable=1;
	xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	wt_sig {gain=6: off=1: soft_bound=1: };
	dynlr {dwt_norm=NO_NORM: norm_tau=100: norm_min=0.001: moment=NO_MOMENT: m_tau=10: s_tau=50: l_tau=2: xx1=1: gain=2: lrate_comp=3: norm_dt=0.01: norm_dt_c=0.99: m_dt=0.1: m_dt_c=0.9: s_dt=0.02: l_dt=0.5: };
	wt_bal {on=0: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	deep {on=0: bg_lrate=1: fg_lrate=0: };
	margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
       };
      };
      rnd {name="RandomSpec_1": type=UNIFORM: mean=0.5: var=0.25: par=1: };
      wt_limits {type=MIN_MAX: min=0: max=1: sym=0: sym_fm_top=0: };
      inhib=0;
      wt_scale {abs=1: rel=1: no_plus_net=0: };
      learn=1;
      learn_qtr=Q2|Q4;
      lrate=0.01;
      use_lrate_sched=1;
      cur_lrate=0.02;
      lrs_mult=1;
      lrate_sched {
       name="lrate_sched";
       el_typ=SchedItem;
       el_def=0;
       default_val=1;
       interpolate=0;
      };
      use_unlearnable=1;
      xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
      wt_sig {gain=6: off=1: soft_bound=1: };
      dynlr {dwt_norm=NO_NORM: norm_tau=100: norm_min=0.001: moment=NO_MOMENT: m_tau=10: s_tau=50: l_tau=2: xx1=1: gain=2: lrate_comp=3: norm_dt=0.01: norm_dt_c=0.99: m_dt=0.1: m_dt_c=0.9: s_dt=0.02: l_dt=0.5: };
      wt_bal {on=0: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
      adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
      slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
      deep {on=0: bg_lrate=1: fg_lrate=0: };
      margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
     };
     LeabraConSpec @[2] {
      name="PfcLrnCons";
      is_used=0;
      used_status=CHILD_USED;
      desc=;
      unique{ lrate;      };
      children {
       name="BaseSpec_Group_1";
       el_typ=DeepCtxtConSpec;
       el_def=0;
       DeepCtxtConSpec @[0] {
	name="PFCDeepCtxt";
	is_used=1;
	used_status=USED;
	desc=;
	unique{ wt_scale;	};
	children {
	 name="BaseSpec_Group_1";
	 el_typ=DeepCtxtConSpec;
	 el_def=0;
	};
	rnd {name="RandomSpec_1": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
	inhib=0;
	wt_scale {abs=1: rel=1: no_plus_net=0: };
	learn=1;
	learn_qtr=Q2|Q4;
	lrate=0.01;
	use_lrate_sched=1;
	cur_lrate=0.02;
	lrs_mult=1;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	use_unlearnable=1;
	xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	wt_sig {gain=6: off=1: soft_bound=1: };
	dynlr {dwt_norm=NO_NORM: norm_tau=100: norm_min=0.001: moment=NO_MOMENT: m_tau=10: s_tau=50: l_tau=2: xx1=1: gain=2: lrate_comp=3: norm_dt=0.01: norm_dt_c=0.99: m_dt=0.1: m_dt_c=0.9: s_dt=0.02: l_dt=0.5: };
	wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	deep {on=0: bg_lrate=1: fg_lrate=0: };
	margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
	delta_dwt=0;
       };
       LeabraConSpec @[1] {
	name="ToPFC";
	is_used=1;
	used_status=USED;
	desc=;
	unique{ wt_scale;	};
	children {
	 name="BaseSpec_Group_1";
	 el_typ=LeabraConSpec;
	 el_def=0;
	};
	rnd {name="RandomSpec_1": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
	inhib=0;
	wt_scale {abs=1: rel=1: no_plus_net=0: };
	learn=1;
	learn_qtr=Q2|Q4;
	lrate=0.01;
	use_lrate_sched=1;
	cur_lrate=0.02;
	lrs_mult=1;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	use_unlearnable=1;
	xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	wt_sig {gain=6: off=1: soft_bound=1: };
	dynlr {dwt_norm=NO_NORM: norm_tau=100: norm_min=0.001: moment=NO_MOMENT: m_tau=10: s_tau=50: l_tau=2: xx1=1: gain=2: lrate_comp=3: norm_dt=0.01: norm_dt_c=0.99: m_dt=0.1: m_dt_c=0.9: s_dt=0.02: l_dt=0.5: };
	wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	deep {on=0: bg_lrate=1: fg_lrate=0: };
	margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
       };
       LeabraConSpec @[2] {
	name="PFCfmTRC";
	is_used=1;
	used_status=USED;
	desc=;
	unique{ wt_scale;	};
	children {
	 name="BaseSpec_Group_1";
	 el_typ=LeabraConSpec;
	 el_def=0;
	};
	rnd {name="RandomSpec_1": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
	inhib=0;
	wt_scale {abs=1: rel=0.1: no_plus_net=0: };
	learn=1;
	learn_qtr=Q2|Q4;
	lrate=0.01;
	use_lrate_sched=1;
	cur_lrate=0.02;
	lrs_mult=1;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	use_unlearnable=1;
	xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	wt_sig {gain=6: off=1: soft_bound=1: };
	dynlr {dwt_norm=NO_NORM: norm_tau=100: norm_min=0.001: moment=NO_MOMENT: m_tau=10: s_tau=50: l_tau=2: xx1=1: gain=2: lrate_comp=3: norm_dt=0.01: norm_dt_c=0.99: m_dt=0.1: m_dt_c=0.9: s_dt=0.02: l_dt=0.5: };
	wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	deep {on=0: bg_lrate=1: fg_lrate=0: };
	margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
       };
       LeabraConSpec @[3] {
	name="PFCtoTRC";
	is_used=1;
	used_status=USED;
	desc=;
	unique{ 	};
	children {
	 name="BaseSpec_Group_1";
	 el_typ=LeabraConSpec;
	 el_def=0;
	};
	rnd {name="RandomSpec_1": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
	inhib=0;
	wt_scale {abs=1: rel=1: no_plus_net=0: };
	learn=1;
	learn_qtr=Q2|Q4;
	lrate=0.01;
	use_lrate_sched=1;
	cur_lrate=0.02;
	lrs_mult=1;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	use_unlearnable=1;
	xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	wt_sig {gain=6: off=1: soft_bound=1: };
	dynlr {dwt_norm=NO_NORM: norm_tau=100: norm_min=0.001: moment=NO_MOMENT: m_tau=10: s_tau=50: l_tau=2: xx1=1: gain=2: lrate_comp=3: norm_dt=0.01: norm_dt_c=0.99: m_dt=0.1: m_dt_c=0.9: s_dt=0.02: l_dt=0.5: };
	wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	deep {on=0: bg_lrate=1: fg_lrate=0: };
	margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
       };
       LeabraConSpec @[4] {
	name="PFCtoOutput";
	is_used=1;
	used_status=USED;
	desc=;
	unique{ lrate;learn_qtr;wt_scale;	};
	children {
	 name="BaseSpec_Group_1";
	 el_typ=LeabraConSpec;
	 el_def=0;
	};
	rnd {name="RandomSpec_1": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
	inhib=0;
	wt_scale {abs=4: rel=1: no_plus_net=0: };
	learn=1;
	learn_qtr=Q4;
	lrate=0.04;
	use_lrate_sched=1;
	cur_lrate=0.02;
	lrs_mult=1;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	use_unlearnable=1;
	xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	wt_sig {gain=6: off=1: soft_bound=1: };
	dynlr {dwt_norm=NO_NORM: norm_tau=100: norm_min=0.001: moment=NO_MOMENT: m_tau=10: s_tau=50: l_tau=2: xx1=1: gain=2: lrate_comp=3: norm_dt=0.01: norm_dt_c=0.99: m_dt=0.1: m_dt_c=0.9: s_dt=0.02: l_dt=0.5: };
	wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	deep {on=0: bg_lrate=1: fg_lrate=0: };
	margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
       };
      };
      rnd {name="RandomSpec_1": type=UNIFORM: mean=0.5: var=0.25: par=1: };
      wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
      inhib=0;
      wt_scale {abs=1: rel=1: no_plus_net=0: };
      learn=1;
      learn_qtr=Q2|Q4;
      lrate=0.01;
      use_lrate_sched=1;
      cur_lrate=0.02;
      lrs_mult=1;
      lrate_sched {
       name="lrate_sched";
       el_typ=SchedItem;
       el_def=0;
       default_val=1;
       interpolate=0;
      };
      use_unlearnable=1;
      xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
      wt_sig {gain=6: off=1: soft_bound=1: };
      dynlr {dwt_norm=NO_NORM: norm_tau=100: norm_min=0.001: moment=NO_MOMENT: m_tau=10: s_tau=50: l_tau=2: xx1=1: gain=2: lrate_comp=3: norm_dt=0.01: norm_dt_c=0.99: m_dt=0.1: m_dt_c=0.9: s_dt=0.02: l_dt=0.5: };
      wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
      adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
      slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
      deep {on=0: bg_lrate=1: fg_lrate=0: };
      margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
     };
     LeabraConSpec @[3] {
      name="PBWMFixedCons";
      is_used=1;
      used_status=USED;
      desc=;
      unique{ rnd;wt_limits;lrate;learn;      };
      children {
       name="BaseSpec_Group_1";
       el_typ=LeabraBiasSpec;
       el_def=0;
       LeabraBiasSpec @[0] {
	name="PBWMFixedBias";
	is_used=1;
	used_status=USED;
	desc=;
	unique{ rnd;wt_limits;wt_scale;learn;	};
	children {
	 name="BaseSpec_Group_1";
	 el_typ=LeabraBiasSpec;
	 el_def=0;
	};
	rnd {name="RandomSpec_1": type=UNIFORM: mean=0: var=0: par=1: };
	wt_limits {type=NONE: min=-1: max=5: sym=0: sym_fm_top=0: };
	inhib=0;
	wt_scale {abs=1: rel=1: no_plus_net=0: };
	learn=0;
	learn_qtr=Q4;
	lrate=0;
	use_lrate_sched=1;
	cur_lrate=0.02;
	lrs_mult=1;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	use_unlearnable=1;
	xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	wt_sig {gain=6: off=1: soft_bound=1: };
	dynlr {dwt_norm=NO_NORM: norm_tau=100: norm_min=0.001: moment=NO_MOMENT: m_tau=10: s_tau=50: l_tau=2: xx1=1: gain=2: lrate_comp=3: norm_dt=0.01: norm_dt_c=0.99: m_dt=0.1: m_dt_c=0.9: s_dt=0.02: l_dt=0.5: };
	wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	deep {on=0: bg_lrate=1: fg_lrate=0: };
	margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
	dwt_thresh=0.1;
       };
       MarkerConSpec @[1] {
	name="PBWMMarkerCons";
	is_used=1;
	used_status=USED;
	desc=;
	unique{ rnd;wt_limits;wt_scale;lrate;learn;	};
	children {
	 name="BaseSpec_Group_1";
	 el_typ=MarkerConSpec;
	 el_def=0;
	};
	rnd {name="RandomSpec_1": type=UNIFORM: mean=0: var=0: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=0: sym_fm_top=0: };
	inhib=0;
	wt_scale {abs=1: rel=0: no_plus_net=0: };
	learn=0;
	learn_qtr=Q4;
	lrate=0;
	use_lrate_sched=1;
	cur_lrate=0;
	lrs_mult=1;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	use_unlearnable=1;
	xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	wt_sig {gain=6: off=1: soft_bound=1: };
	dynlr {dwt_norm=NO_NORM: norm_tau=100: norm_min=0.001: moment=NO_MOMENT: m_tau=10: s_tau=50: l_tau=2: xx1=1: gain=2: lrate_comp=3: norm_dt=0.01: norm_dt_c=0.99: m_dt=0.1: m_dt_c=0.9: s_dt=0.02: l_dt=0.5: };
	wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	deep {on=0: bg_lrate=1: fg_lrate=0: };
	margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
       };
       SendDeepModConSpec @[2] {
	name="PFCSendDeepMod";
	is_used=1;
	used_status=USED;
	desc=;
	unique{ learn;rnd;wt_limits;	};
	children {
	 name="BaseSpec_Group_1";
	 el_typ=SendDeepModConSpec;
	 el_def=0;
	};
	rnd {name="RandomSpec_1": type=UNIFORM: mean=0.800000011920929: var=0: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=0: sym_fm_top=0: };
	inhib=0;
	wt_scale {abs=1: rel=1: no_plus_net=0: };
	learn=0;
	learn_qtr=Q4;
	lrate=0;
	use_lrate_sched=1;
	cur_lrate=0.02;
	lrs_mult=1;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	use_unlearnable=1;
	xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	wt_sig {gain=6: off=1: soft_bound=1: };
	dynlr {dwt_norm=NO_NORM: norm_tau=100: norm_min=0.001: moment=NO_MOMENT: m_tau=10: s_tau=50: l_tau=2: xx1=1: gain=2: lrate_comp=3: norm_dt=0.01: norm_dt_c=0.99: m_dt=0.1: m_dt_c=0.9: s_dt=0.02: l_dt=0.5: };
	wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	deep {on=0: bg_lrate=1: fg_lrate=0: };
	margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
       };
       LeabraConSpec @[3] {
	name="PFCdMntToOut";
	is_used=1;
	used_status=USED;
	desc=;
	unique{ 	};
	children {
	 name="BaseSpec_Group_1";
	 el_typ=LeabraConSpec;
	 el_def=0;
	};
	rnd {name="RandomSpec_1": type=UNIFORM: mean=0.800000011920929: var=0: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=0: sym_fm_top=0: };
	inhib=0;
	wt_scale {abs=1: rel=1: no_plus_net=0: };
	learn=0;
	learn_qtr=Q4;
	lrate=0;
	use_lrate_sched=1;
	cur_lrate=0.02;
	lrs_mult=1;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	use_unlearnable=1;
	xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	wt_sig {gain=6: off=1: soft_bound=1: };
	dynlr {dwt_norm=NO_NORM: norm_tau=100: norm_min=0.001: moment=NO_MOMENT: m_tau=10: s_tau=50: l_tau=2: xx1=1: gain=2: lrate_comp=3: norm_dt=0.01: norm_dt_c=0.99: m_dt=0.1: m_dt_c=0.9: s_dt=0.02: l_dt=0.5: };
	wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	deep {on=0: bg_lrate=1: fg_lrate=0: };
	margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
       };
       SendDeepRawConSpec @[4] {
	name="PBWMDeepRawPlus";
	is_used=1;
	used_status=USED;
	desc=;
	unique{ learn;	};
	children {
	 name="BaseSpec_Group_1";
	 el_typ=SendDeepRawConSpec;
	 el_def=0;
	};
	rnd {name="RandomSpec_1": type=UNIFORM: mean=0.800000011920929: var=0: par=1: };
	wt_limits {type=MIN_MAX: min=0: max=1: sym=0: sym_fm_top=0: };
	inhib=0;
	wt_scale {abs=1: rel=1: no_plus_net=0: };
	learn=0;
	learn_qtr=Q4;
	lrate=0;
	use_lrate_sched=1;
	cur_lrate=0.02;
	lrs_mult=1;
	lrate_sched {
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	use_unlearnable=1;
	xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	wt_sig {gain=6: off=1: soft_bound=1: };
	dynlr {dwt_norm=NO_NORM: norm_tau=100: norm_min=0.001: moment=NO_MOMENT: m_tau=10: s_tau=50: l_tau=2: xx1=1: gain=2: lrate_comp=3: norm_dt=0.01: norm_dt_c=0.99: m_dt=0.1: m_dt_c=0.9: s_dt=0.02: l_dt=0.5: };
	wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
	adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	deep {on=0: bg_lrate=1: fg_lrate=0: };
	margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
       };
      };
      rnd {name="RandomSpec_1": type=UNIFORM: mean=0.800000011920929: var=0: par=1: };
      wt_limits {type=MIN_MAX: min=0: max=1: sym=0: sym_fm_top=0: };
      inhib=0;
      wt_scale {abs=1: rel=1: no_plus_net=0: };
      learn=0;
      learn_qtr=Q4;
      lrate=0;
      use_lrate_sched=1;
      cur_lrate=0.02;
      lrs_mult=1;
      lrate_sched {
       name="lrate_sched";
       el_typ=SchedItem;
       el_def=0;
       default_val=1;
       interpolate=0;
      };
      use_unlearnable=1;
      xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
      wt_sig {gain=6: off=1: soft_bound=1: };
      dynlr {dwt_norm=NO_NORM: norm_tau=100: norm_min=0.001: moment=NO_MOMENT: m_tau=10: s_tau=50: l_tau=2: xx1=1: gain=2: lrate_comp=3: norm_dt=0.01: norm_dt_c=0.99: m_dt=0.1: m_dt_c=0.9: s_dt=0.02: l_dt=0.5: };
      wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
      adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
      slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
      deep {on=0: bg_lrate=1: fg_lrate=0: };
      margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
     };
     LeabraLayerSpec @[4] {
      name="PBWMLayers";
      is_used=0;
      used_status=UNUSED;
      desc=;
      unique{       };
      children {
       name="BaseSpec_Group_1";
       el_typ=LeabraLayerSpec;
       el_def=0;
       LeabraLayerSpec @[0] {
	name="MatrixLayer";
	is_used=1;
	used_status=USED;
	desc=;
	unique{ lay_inhib;unit_gp_inhib;avg_act;inhib_misc;del_inhib;	};
	children {
	 name="BaseSpec_Group_1";
	 el_typ=LeabraLayerSpec;
	 el_def=0;
	};
	lay_inhib {on=1: gi=1.9: ff=1: fb=0.5: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	unit_gp_inhib {on=1: gi=1.9: ff=1: fb=0: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	multi_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	multi_gp_geom {size={x=3: y=3: }: st_off={x=-1: y=-1: }: sub_size={x=1: y=1: }: wrap=1: };
	lay_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	avg_act {targ_init=0.05: fixed=1: use_ext_act=0: tau=100: adjust=1: dt=0.01: };
	inhib_adapt {on=0: tol_pct=0.25: trial_interval=100: tau=200: dt=0.005: };
	inhib_misc {net_thr=0: thr_rel=1: self_fb=0.3: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
	clamp {hard=1: gain=0.2: avg=0: avg_gain=0.2: };
	decay {trial=1: };
	del_inhib {on=1: prv_trl=0: prv_q=0.03: };
	margin {pct_marg=0.3: avg_tau=100: adapt_tau=500: tol_pct=0.25: avg_act=0.8: low_thr=0.501: med_thr=0.506: hi_thr=0.508: avg_dt=0.01: adapt_dt=0.002: };
	lay_lrate=1;
	cos_diff {avg_tau=100: lrate_mod=0: lrmod_fm_trc=0: lrmod_z_thr=-1.5: set_net_unlrn=0: avg_dt=0.01: avg_dt_c=0.99: };
	lstats {hog_thr=0.3: dead_thr=0.01: };
       };
       LeabraLayerSpec @[1] {
	name="PatchLayer";
	is_used=1;
	used_status=USED;
	desc=;
	unique{ lay_inhib;unit_gp_inhib;avg_act;inhib_misc;	};
	children {
	 name="BaseSpec_Group_1";
	 el_typ=LeabraLayerSpec;
	 el_def=0;
	};
	lay_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	unit_gp_inhib {on=1: gi=1: ff=1: fb=0: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	multi_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	multi_gp_geom {size={x=3: y=3: }: st_off={x=-1: y=-1: }: sub_size={x=1: y=1: }: wrap=1: };
	lay_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	avg_act {targ_init=0.2: fixed=1: use_ext_act=0: tau=100: adjust=1: dt=0.01: };
	inhib_adapt {on=0: tol_pct=0.25: trial_interval=100: tau=200: dt=0.005: };
	inhib_misc {net_thr=0: thr_rel=1: self_fb=0.4: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
	clamp {hard=1: gain=0.2: avg=0: avg_gain=0.2: };
	decay {trial=1: };
	del_inhib {on=0: prv_trl=0: prv_q=0: };
	margin {pct_marg=0.3: avg_tau=100: adapt_tau=500: tol_pct=0.25: avg_act=0.8: low_thr=0.501: med_thr=0.506: hi_thr=0.508: avg_dt=0.01: adapt_dt=0.002: };
	lay_lrate=1;
	cos_diff {avg_tau=100: lrate_mod=0: lrmod_fm_trc=0: lrmod_z_thr=-1.5: set_net_unlrn=0: avg_dt=0.01: avg_dt_c=0.99: };
	lstats {hog_thr=0.3: dead_thr=0.01: };
       };
       LeabraLayerSpec @[2] {
	name="GPiLayer";
	is_used=1;
	used_status=USED;
	desc=;
	unique{ lay_inhib;unit_gp_inhib;avg_act;	};
	children {
	 name="BaseSpec_Group_1";
	 el_typ=LeabraLayerSpec;
	 el_def=0;
	 LeabraLayerSpec @[0] {
	  name="GPeNoGoLayer";
	  is_used=1;
	  used_status=USED;
	  desc=;
	  unique{ lay_inhib;	  };
	  children {
	   name="BaseSpec_Group_1";
	   el_typ=LeabraLayerSpec;
	   el_def=0;
	  };
	  lay_inhib {on=1: gi=2.2: ff=1: fb=0.5: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	  unit_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	  multi_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	  multi_gp_geom {size={x=3: y=3: }: st_off={x=-1: y=-1: }: sub_size={x=1: y=1: }: wrap=1: };
	  lay_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	  avg_act {targ_init=0.2: fixed=1: use_ext_act=0: tau=100: adjust=1: dt=0.01: };
	  inhib_adapt {on=0: tol_pct=0.25: trial_interval=100: tau=200: dt=0.005: };
	  inhib_misc {net_thr=0: thr_rel=1: self_fb=0: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
	  clamp {hard=1: gain=0.2: avg=0: avg_gain=0.2: };
	  decay {trial=1: };
	  del_inhib {on=0: prv_trl=0: prv_q=0: };
	  margin {pct_marg=0.3: avg_tau=100: adapt_tau=500: tol_pct=0.25: avg_act=0.8: low_thr=0.501: med_thr=0.506: hi_thr=0.508: avg_dt=0.01: adapt_dt=0.002: };
	  lay_lrate=1;
	  cos_diff {avg_tau=100: lrate_mod=0: lrmod_fm_trc=0: lrmod_z_thr=-1.5: set_net_unlrn=0: avg_dt=0.01: avg_dt_c=0.99: };
	  lstats {hog_thr=0.3: dead_thr=0.01: };
	 };
	};
	lay_inhib {on=1: gi=1.8: ff=1: fb=0.5: fb_tau=1.4: max_vs_avg=1: ff0=0.1: fb_dt=0.7142857: };
	unit_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	multi_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	multi_gp_geom {size={x=3: y=3: }: st_off={x=-1: y=-1: }: sub_size={x=1: y=1: }: wrap=1: };
	lay_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	avg_act {targ_init=0.2: fixed=1: use_ext_act=0: tau=100: adjust=1: dt=0.01: };
	inhib_adapt {on=0: tol_pct=0.25: trial_interval=100: tau=200: dt=0.005: };
	inhib_misc {net_thr=0: thr_rel=1: self_fb=0: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
	clamp {hard=1: gain=0.2: avg=0: avg_gain=0.2: };
	decay {trial=1: };
	del_inhib {on=0: prv_trl=0: prv_q=0: };
	margin {pct_marg=0.3: avg_tau=100: adapt_tau=500: tol_pct=0.25: avg_act=0.8: low_thr=0.501: med_thr=0.506: hi_thr=0.508: avg_dt=0.01: adapt_dt=0.002: };
	lay_lrate=1;
	cos_diff {avg_tau=100: lrate_mod=0: lrmod_fm_trc=0: lrmod_z_thr=-1.5: set_net_unlrn=0: avg_dt=0.01: avg_dt_c=0.99: };
	lstats {hog_thr=0.3: dead_thr=0.01: };
       };
       LeabraLayerSpec @[3] {
	name="PFCLayer";
	is_used=1;
	used_status=USED;
	desc=;
	unique{ lay_inhib;unit_gp_inhib;avg_act;decay;	};
	children {
	 name="BaseSpec_Group_1";
	 el_typ=LeabraLayerSpec;
	 el_def=0;
	 LeabraLayerSpec @[0] {
	  name="PFCtrcLayer";
	  is_used=1;
	  used_status=USED;
	  desc=;
	  unique{ 	  };
	  children {
	   name="BaseSpec_Group_1";
	   el_typ=LeabraLayerSpec;
	   el_def=0;
	  };
	  lay_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	  unit_gp_inhib {on=1: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	  multi_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	  multi_gp_geom {size={x=3: y=3: }: st_off={x=-1: y=-1: }: sub_size={x=1: y=1: }: wrap=1: };
	  lay_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	  avg_act {targ_init=0.2: fixed=1: use_ext_act=0: tau=100: adjust=1: dt=0.01: };
	  inhib_adapt {on=0: tol_pct=0.25: trial_interval=100: tau=200: dt=0.005: };
	  inhib_misc {net_thr=0: thr_rel=1: self_fb=0: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
	  clamp {hard=1: gain=0.2: avg=0: avg_gain=0.2: };
	  decay {trial=0: };
	  del_inhib {on=0: prv_trl=0: prv_q=0: };
	  margin {pct_marg=0.3: avg_tau=100: adapt_tau=500: tol_pct=0.25: avg_act=0.8: low_thr=0.501: med_thr=0.506: hi_thr=0.508: avg_dt=0.01: adapt_dt=0.002: };
	  lay_lrate=1;
	  cos_diff {avg_tau=100: lrate_mod=0: lrmod_fm_trc=0: lrmod_z_thr=-1.5: set_net_unlrn=0: avg_dt=0.01: avg_dt_c=0.99: };
	  lstats {hog_thr=0.3: dead_thr=0.01: };
	 };
	};
	lay_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	unit_gp_inhib {on=1: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	multi_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	multi_gp_geom {size={x=3: y=3: }: st_off={x=-1: y=-1: }: sub_size={x=1: y=1: }: wrap=1: };
	lay_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	avg_act {targ_init=0.2: fixed=1: use_ext_act=0: tau=100: adjust=1: dt=0.01: };
	inhib_adapt {on=0: tol_pct=0.25: trial_interval=100: tau=200: dt=0.005: };
	inhib_misc {net_thr=0: thr_rel=1: self_fb=0: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
	clamp {hard=1: gain=0.2: avg=0: avg_gain=0.2: };
	decay {trial=0: };
	del_inhib {on=0: prv_trl=0: prv_q=0: };
	margin {pct_marg=0.3: avg_tau=100: adapt_tau=500: tol_pct=0.25: avg_act=0.8: low_thr=0.501: med_thr=0.506: hi_thr=0.508: avg_dt=0.01: adapt_dt=0.002: };
	lay_lrate=1;
	cos_diff {avg_tau=100: lrate_mod=0: lrmod_fm_trc=0: lrmod_z_thr=-1.5: set_net_unlrn=0: avg_dt=0.01: avg_dt_c=0.99: };
	lstats {hog_thr=0.3: dead_thr=0.01: };
       };
      };
      lay_inhib {on=1: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
      unit_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
      multi_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
      multi_gp_geom {size={x=3: y=3: }: st_off={x=-1: y=-1: }: sub_size={x=1: y=1: }: wrap=1: };
      lay_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
      avg_act {targ_init=0.15: fixed=0: use_ext_act=0: tau=100: adjust=1: dt=0.01: };
      inhib_adapt {on=0: tol_pct=0.25: trial_interval=100: tau=200: dt=0.005: };
      inhib_misc {net_thr=0: thr_rel=1: self_fb=0: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
      clamp {hard=1: gain=0.2: avg=0: avg_gain=0.2: };
      decay {trial=1: };
      del_inhib {on=0: prv_trl=0: prv_q=0: };
      margin {pct_marg=0.3: avg_tau=100: adapt_tau=500: tol_pct=0.25: avg_act=0.8: low_thr=0.501: med_thr=0.506: hi_thr=0.508: avg_dt=0.01: adapt_dt=0.002: };
      lay_lrate=1;
      cos_diff {avg_tau=100: lrate_mod=0: lrmod_fm_trc=0: lrmod_z_thr=-1.5: set_net_unlrn=0: avg_dt=0.01: avg_dt_c=0.99: };
      lstats {hog_thr=0.3: dead_thr=0.01: };
     };
     FullPrjnSpec @[5] {
      name="PBWMFullPrjn";
      is_used=1;
      used_status=USED;
      desc=;
      unique{       };
      children {
       name="BaseSpec_Group_1";
       el_typ=FullPrjnSpec;
       el_def=0;
      };
      self_con=0;
      init_wts=0;
      set_scale=0;
      init_wt_val=1;
      add_rnd_var=0;
      renorm_wts {on=0: mult_norm=1: avg_wt=0.5: };
     };
     OneToOnePrjnSpec @[6] {
      name="PBWMOneToOne";
      is_used=1;
      used_status=USED;
      desc=;
      unique{ self_con;      };
      children {
       name="BaseSpec_Group_1";
       el_typ=OneToOnePrjnSpec;
       el_def=0;
      };
      self_con=1;
      init_wts=0;
      set_scale=0;
      init_wt_val=1;
      add_rnd_var=0;
      renorm_wts {on=0: mult_norm=1: avg_wt=0.5: };
      n_conns=-1;
      recv_start=0;
      send_start=0;
      use_gp=0;
     };
     GpOneToOnePrjnSpec @[7] {
      name="PBWMGpOneToOne";
      is_used=1;
      used_status=USED;
      desc=;
      unique{ self_con;      };
      children {
       name="BaseSpec_Group_1";
       el_typ=GpOneToOnePrjnSpec;
       el_def=0;
      };
      self_con=1;
      init_wts=0;
      set_scale=0;
      init_wt_val=1;
      add_rnd_var=0;
      renorm_wts {on=0: mult_norm=1: avg_wt=0.5: };
      n_conns=-1;
      recv_start=0;
      send_start=0;
      use_gp=0;
     };
     BgPfcPrjnSpec @[8] {
      name="BgPfcPrjn";
      is_used=1;
      used_status=PARENT_USED;
      desc=;
      unique{       };
      children {
       name="BaseSpec_Group_1";
       el_typ=BgPfcPrjnSpec;
       el_def=0;
       BgPfcPrjnSpec @[0] {
	name="BgPfcPrjnToOut";
	is_used=0;
	used_status=UNUSED;
	desc=;
	unique{ cross_connect;connect_as;	};
	children {
	 name="BaseSpec_Group_1";
	 el_typ=BgPfcPrjnSpec;
	 el_def=0;
	};
	self_con=0;
	init_wts=0;
	set_scale=0;
	init_wt_val=1;
	add_rnd_var=0;
	renorm_wts {on=0: mult_norm=1: avg_wt=0.5: };
	n_pfcs=2;
	bg_table {
	 name="bg_table";
	 desc=;
	 data {
	  name="data";
	  el_typ=String_Data;
	  el_def=0;
	  String_Data @[0] {
	   name="pfc_name";
	   desc="name of the PFC layer -- layer must uniquely contain this name -- case sensitive maching is used";
	   col_flags=SAVE_DATA|AUTO_WIDTH;
	   is_matrix=0;
	   cell_geom{ 	   };
	   calc_expr {
	    expr=;
	   };
	   dim_names {
	    name="dim_names";
	   [0] 	   };
	   width=0;
	   matrix_col_width=10;
	   ar {
	    name="ar";
	   [2] "PFCmnt";"PFCout";	   };
	  };
	  int_Data @[1] {
	   UserDataItem_List @*(.user_data_) {
	    name="UserDataItem_List_1";
	    el_typ=UserDataItem;
	    el_def=0;
	    UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
	   };
	   name="size_x";
	   desc="x (horizontal) size of this pfc layer in terms of unit groups (stripes) -- only needed if the PFC layers are NOT all the same size -- a -1 indicates that all pfc layers are the same size";
	   col_flags=SAVE_DATA|AUTO_WIDTH;
	   is_matrix=0;
	   cell_geom{ 	   };
	   calc_expr {
	    expr=;
	   };
	   dim_names {
	    name="dim_names";
	   [0] 	   };
	   width=0;
	   matrix_col_width=10;
	   ar {
	    name="ar";
	   [2] -1;-1;	   };
	  };
	  int_Data @[2] {
	   UserDataItem_List @*(.user_data_) {
	    name="UserDataItem_List_1";
	    el_typ=UserDataItem;
	    el_def=0;
	    UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
	   };
	   name="size_y";
	   desc="y (vertical) size of this pfc layer in terms of unit groups (stripes) -- only needed if the PFC layers are NOT all the same size -- a -1 indicates that all pfc layers are the same size";
	   col_flags=SAVE_DATA|AUTO_WIDTH;
	   is_matrix=0;
	   cell_geom{ 	   };
	   calc_expr {
	    expr=;
	   };
	   dim_names {
	    name="dim_names";
	   [0] 	   };
	   width=0;
	   matrix_col_width=10;
	   ar {
	    name="ar";
	   [2] -1;-1;	   };
	  };
	  int_Data @[3] {
	   UserDataItem_List @*(.user_data_) {
	    name="UserDataItem_List_1";
	    el_typ=UserDataItem;
	    el_def=0;
	    UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
	   };
	   name="start_x";
	   desc="starting x (horizontal) coordinate of the unit group of stripes for this pfc within the bg layer -- a -1 indicates that PFC layers are organized horizontally across, and position computed automatically from sizes";
	   col_flags=SAVE_DATA|AUTO_WIDTH;
	   is_matrix=0;
	   cell_geom{ 	   };
	   calc_expr {
	    expr=;
	   };
	   dim_names {
	    name="dim_names";
	   [0] 	   };
	   width=0;
	   matrix_col_width=10;
	   ar {
	    name="ar";
	   [2] -1;-1;	   };
	  };
	  int_Data @[4] {
	   UserDataItem_List @*(.user_data_) {
	    name="UserDataItem_List_1";
	    el_typ=UserDataItem;
	    el_def=0;
	    UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
	   };
	   name="start_y";
	   desc="starting y (vertical) coordinate of the unit group of stripes for this pfc within the bg layer -- layers organized horizontally across by default";
	   col_flags=SAVE_DATA|AUTO_WIDTH;
	   is_matrix=0;
	   cell_geom{ 	   };
	   calc_expr {
	    expr=;
	   };
	   dim_names {
	    name="dim_names";
	   [0] 	   };
	   width=0;
	   matrix_col_width=10;
	   ar {
	    name="ar";
	   [2] 0;0;	   };
	  };
	 };
	 data_flags=SAVE_ROWS|AUTO_CALC;
	 auto_load=NO_AUTO_LOAD;
	 auto_load_file=;
	 row_height=1;
	 max_col_width=50;
	 keygen 4 0=0;
	 row_indexes {
	  name=;
	 [2] 0;1;	 };
	 last_sort_spec {
	  name="DataSortSpec_53";
	  ops {
	   name="ops";
	   el_typ=DataSortEl;
	   el_def=0;
	  };
	 };
	 row_with_hilite=-1;
	};
	cross_connect=1;
	connect_as="PFCout";
       };
       BgPfcPrjnSpec @[1] {
	name="BgPfcPrjnToMnt";
	is_used=0;
	used_status=UNUSED;
	desc=;
	unique{ cross_connect;connect_as;	};
	children {
	 name="BaseSpec_Group_1";
	 el_typ=BgPfcPrjnSpec;
	 el_def=0;
	};
	self_con=0;
	init_wts=0;
	set_scale=0;
	init_wt_val=1;
	add_rnd_var=0;
	renorm_wts {on=0: mult_norm=1: avg_wt=0.5: };
	n_pfcs=2;
	bg_table {
	 name="bg_table";
	 desc=;
	 data {
	  name="data";
	  el_typ=String_Data;
	  el_def=0;
	  String_Data @[0] {
	   name="pfc_name";
	   desc="name of the PFC layer -- layer must uniquely contain this name -- case sensitive maching is used";
	   col_flags=SAVE_DATA|AUTO_WIDTH;
	   is_matrix=0;
	   cell_geom{ 	   };
	   calc_expr {
	    expr=;
	   };
	   dim_names {
	    name="dim_names";
	   [0] 	   };
	   width=0;
	   matrix_col_width=10;
	   ar {
	    name="ar";
	   [2] "PFCmnt";"PFCout";	   };
	  };
	  int_Data @[1] {
	   UserDataItem_List @*(.user_data_) {
	    name="UserDataItem_List_1";
	    el_typ=UserDataItem;
	    el_def=0;
	    UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
	   };
	   name="size_x";
	   desc="x (horizontal) size of this pfc layer in terms of unit groups (stripes) -- only needed if the PFC layers are NOT all the same size -- a -1 indicates that all pfc layers are the same size";
	   col_flags=SAVE_DATA|AUTO_WIDTH;
	   is_matrix=0;
	   cell_geom{ 	   };
	   calc_expr {
	    expr=;
	   };
	   dim_names {
	    name="dim_names";
	   [0] 	   };
	   width=0;
	   matrix_col_width=10;
	   ar {
	    name="ar";
	   [2] -1;-1;	   };
	  };
	  int_Data @[2] {
	   UserDataItem_List @*(.user_data_) {
	    name="UserDataItem_List_1";
	    el_typ=UserDataItem;
	    el_def=0;
	    UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
	   };
	   name="size_y";
	   desc="y (vertical) size of this pfc layer in terms of unit groups (stripes) -- only needed if the PFC layers are NOT all the same size -- a -1 indicates that all pfc layers are the same size";
	   col_flags=SAVE_DATA|AUTO_WIDTH;
	   is_matrix=0;
	   cell_geom{ 	   };
	   calc_expr {
	    expr=;
	   };
	   dim_names {
	    name="dim_names";
	   [0] 	   };
	   width=0;
	   matrix_col_width=10;
	   ar {
	    name="ar";
	   [2] -1;-1;	   };
	  };
	  int_Data @[3] {
	   UserDataItem_List @*(.user_data_) {
	    name="UserDataItem_List_1";
	    el_typ=UserDataItem;
	    el_def=0;
	    UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
	   };
	   name="start_x";
	   desc="starting x (horizontal) coordinate of the unit group of stripes for this pfc within the bg layer -- a -1 indicates that PFC layers are organized horizontally across, and position computed automatically from sizes";
	   col_flags=SAVE_DATA|AUTO_WIDTH;
	   is_matrix=0;
	   cell_geom{ 	   };
	   calc_expr {
	    expr=;
	   };
	   dim_names {
	    name="dim_names";
	   [0] 	   };
	   width=0;
	   matrix_col_width=10;
	   ar {
	    name="ar";
	   [2] -1;-1;	   };
	  };
	  int_Data @[4] {
	   UserDataItem_List @*(.user_data_) {
	    name="UserDataItem_List_1";
	    el_typ=UserDataItem;
	    el_def=0;
	    UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
	   };
	   name="start_y";
	   desc="starting y (vertical) coordinate of the unit group of stripes for this pfc within the bg layer -- layers organized horizontally across by default";
	   col_flags=SAVE_DATA|AUTO_WIDTH;
	   is_matrix=0;
	   cell_geom{ 	   };
	   calc_expr {
	    expr=;
	   };
	   dim_names {
	    name="dim_names";
	   [0] 	   };
	   width=0;
	   matrix_col_width=10;
	   ar {
	    name="ar";
	   [2] 0;0;	   };
	  };
	 };
	 data_flags=SAVE_ROWS|AUTO_CALC;
	 auto_load=NO_AUTO_LOAD;
	 auto_load_file=;
	 row_height=1;
	 max_col_width=50;
	 keygen 4 0=0;
	 row_indexes {
	  name=;
	 [2] 0;1;	 };
	 last_sort_spec {
	  name="DataSortSpec_54";
	  ops {
	   name="ops";
	   el_typ=DataSortEl;
	   el_def=0;
	  };
	 };
	 row_with_hilite=-1;
	};
	cross_connect=1;
	connect_as="PFCmnt";
       };
      };
      self_con=0;
      init_wts=0;
      set_scale=0;
      init_wt_val=1;
      add_rnd_var=0;
      renorm_wts {on=0: mult_norm=1: avg_wt=0.5: };
      n_pfcs=2;
      bg_table {
       name="bg_table";
       desc=;
       data {
	name="data";
	el_typ=String_Data;
	el_def=0;
	String_Data @[0] {
	 name="pfc_name";
	 desc="name of the PFC layer -- layer must uniquely contain this name -- case sensitive maching is used";
	 col_flags=SAVE_DATA|AUTO_WIDTH;
	 is_matrix=0;
	 cell_geom{ 	 };
	 calc_expr {
	  expr=;
	 };
	 dim_names {
	  name="dim_names";
	 [0] 	 };
	 width=0;
	 matrix_col_width=10;
	 ar {
	  name="ar";
	 [2] "PFCmnt";"PFCout";	 };
	};
	int_Data @[1] {
	 UserDataItem_List @*(.user_data_) {
	  name="UserDataItem_List_1";
	  el_typ=UserDataItem;
	  el_def=0;
	  UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
	 };
	 name="size_x";
	 desc="x (horizontal) size of this pfc layer in terms of unit groups (stripes) -- only needed if the PFC layers are NOT all the same size -- a -1 indicates that all pfc layers are the same size";
	 col_flags=SAVE_DATA|AUTO_WIDTH;
	 is_matrix=0;
	 cell_geom{ 	 };
	 calc_expr {
	  expr=;
	 };
	 dim_names {
	  name="dim_names";
	 [0] 	 };
	 width=0;
	 matrix_col_width=10;
	 ar {
	  name="ar";
	 [2] -1;-1;	 };
	};
	int_Data @[2] {
	 UserDataItem_List @*(.user_data_) {
	  name="UserDataItem_List_1";
	  el_typ=UserDataItem;
	  el_def=0;
	  UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
	 };
	 name="size_y";
	 desc="y (vertical) size of this pfc layer in terms of unit groups (stripes) -- only needed if the PFC layers are NOT all the same size -- a -1 indicates that all pfc layers are the same size";
	 col_flags=SAVE_DATA|AUTO_WIDTH;
	 is_matrix=0;
	 cell_geom{ 	 };
	 calc_expr {
	  expr=;
	 };
	 dim_names {
	  name="dim_names";
	 [0] 	 };
	 width=0;
	 matrix_col_width=10;
	 ar {
	  name="ar";
	 [2] -1;-1;	 };
	};
	int_Data @[3] {
	 UserDataItem_List @*(.user_data_) {
	  name="UserDataItem_List_1";
	  el_typ=UserDataItem;
	  el_def=0;
	  UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
	 };
	 name="start_x";
	 desc="starting x (horizontal) coordinate of the unit group of stripes for this pfc within the bg layer -- a -1 indicates that PFC layers are organized horizontally across, and position computed automatically from sizes";
	 col_flags=SAVE_DATA|AUTO_WIDTH;
	 is_matrix=0;
	 cell_geom{ 	 };
	 calc_expr {
	  expr=;
	 };
	 dim_names {
	  name="dim_names";
	 [0] 	 };
	 width=0;
	 matrix_col_width=10;
	 ar {
	  name="ar";
	 [2] -1;-1;	 };
	};
	int_Data @[4] {
	 UserDataItem_List @*(.user_data_) {
	  name="UserDataItem_List_1";
	  el_typ=UserDataItem;
	  el_def=0;
	  UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
	 };
	 name="start_y";
	 desc="starting y (vertical) coordinate of the unit group of stripes for this pfc within the bg layer -- layers organized horizontally across by default";
	 col_flags=SAVE_DATA|AUTO_WIDTH;
	 is_matrix=0;
	 cell_geom{ 	 };
	 calc_expr {
	  expr=;
	 };
	 dim_names {
	  name="dim_names";
	 [0] 	 };
	 width=0;
	 matrix_col_width=10;
	 ar {
	  name="ar";
	 [2] 0;0;	 };
	};
       };
       data_flags=SAVE_ROWS|AUTO_CALC;
       auto_load=NO_AUTO_LOAD;
       auto_load_file=;
       row_height=1;
       max_col_width=50;
       keygen 4 0=0;
       row_indexes {
	name=;
       [2] 0;1;       };
       last_sort_spec {
	name="DataSortSpec_52";
	ops {
	 name="ops";
	 el_typ=DataSortEl;
	 el_def=0;
	};
       };
       row_with_hilite=-1;
      };
      cross_connect=0;
      connect_as=;
     };
     TiledGpRFPrjnSpec @[9] {
      name="DeepToTRC";
      is_used=1;
      used_status=USED;
      desc=;
      unique{       };
      children {
       name="BaseSpec_Group_1";
       el_typ=TiledGpRFPrjnSpec;
       el_def=0;
      };
      self_con=0;
      init_wts=1;
      set_scale=0;
      init_wt_val=1;
      add_rnd_var=0;
      renorm_wts {on=0: mult_norm=1: avg_wt=0.5: };
      send_gp_size {x=1: y=1: };
      send_gp_skip {x=1: y=1: };
      send_gp_start {x=0: y=0: };
      wrap=1;
      reciprocal=0;
      share_cons=0;
      wts_type=GAUSSIAN;
      full_gauss {on=1: sigma=1.2: wrap_wts=0: ctr_mv=0.8: };
      gp_gauss {on=1: sigma=1.2: wrap_wts=0: ctr_mv=0.8: };
      full_send=BY_UNIT;
      full_recv=BY_UNIT;
      full_sig {on=1: gain=0.02: ctr_mv=0.5: };
      gp_sig {on=1: gain=0.02: ctr_mv=0.5: };
      wt_range {min=0.3: max=0.7: range=0.4: scale=2.5: };
      trg_recv_geom {x=0: y=0: };
      trg_send_geom {x=0: y=0: };
     };
     TesselPrjnSpec @[10] {
      name="TesselOneToOne";
      is_used=0;
      used_status=UNUSED;
      desc=;
      unique{       };
      children {
       name="BaseSpec_Group_1";
       el_typ=TesselPrjnSpec;
       el_def=0;
      };
      self_con=0;
      init_wts=0;
      set_scale=0;
      init_wt_val=1;
      add_rnd_var=0;
      renorm_wts {on=0: mult_norm=1: avg_wt=0.5: };
      recv_off {x=0: y=0: };
      recv_n {x=-1: y=-1: };
      recv_skip {x=1: y=1: };
      recv_group {x=1: y=1: };
      wrap=1;
      send_scale {x=1: y=1: };
      send_off {x=0: y=0: };
      send_offs {
       name="send_offs";
       el_typ=TessEl;
       el_def=0;
       TessEl @[0] {
	send_off {x=0: y=0: };
	wt_val=1;
       };
      };
      last_make_cmd="MakeRectangle(width=1, height=1, left=0, bottom=0)";
      last_weights_cmd=;
     };
    };
   };
   param_seqs {
    name="param_seqs";
    el_typ=ParamSeq;
    el_def=0;
   };
   layers {
    name="layers";
    el_typ=LeabraLayer;
    el_def=0;
    pos {x=0: y=0: z=0: };
    pos2d {x=0: y=0: };
    max_disp_size {x=67: y=32: z=3: };
    max_disp_size2d {x=67: y=56: };
    LeabraLayer @[0] {
     name="Input";
     desc=;
     flags=0;
     layer_type=INPUT;
     pos_rel {rel=ABS_POS: other=NULL: x_align=LEFT: x_off=0: y_align=FRONT: y_off=0: space=2: };
     pos {x=0: y=0: z=0: };
     pos_abs {x=0: y=0: z=0: };
     pos2d {x=0: y=0: };
     pos2d_abs {x=0: y=0: };
     disp_scale=1;
     un_geom {x=5: y=5: n_not_xy=0: n=25: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=5: y=5: n_not_xy=0: n=25: };
     disp_geom {x=5: y=5: n_not_xy=0: n=25: };
     scaled_disp_geom {x=5: y=5: n_not_xy=0: n=25: };
     n_recv_prjns=0;
     n_send_prjns=17;
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_Group @. = [0] = LeabraPrjn .networks[0].layers[1].projections[0];
      Projection_Group @. = [1] = LeabraPrjn .networks[0].layers.gp[1][0].projections[2];
      Projection_Group @. = [2] = LeabraPrjn .networks[0].layers.gp[1][2].projections[3];
      Projection_Group @. = [3] = LeabraPrjn .networks[0].layers.gp[1][5].projections[4];
      Projection_Group @. = [4] = LeabraPrjn .networks[0].layers.gp[2][0].projections[2];
      Projection_Group @. = [5] = LeabraPrjn .networks[0].layers.gp[2][1].projections[2];
      Projection_Group @. = [6] = LeabraPrjn .networks[0].layers.gp[2][2].projections[2];
      Projection_Group @. = [7] = LeabraPrjn .networks[0].layers.gp[2][3].projections[2];
      Projection_Group @. = [8] = LeabraPrjn .networks[0].layers.gp[2][4].projections[2];
      Projection_Group @. = [9] = LeabraPrjn .networks[0].layers.gp[2][5].projections[2];
      Projection_Group @. = [10] = LeabraPrjn .networks[0].layers.gp[2][6].projections[2];
      Projection_Group @. = [11] = LeabraPrjn .networks[0].layers.gp[2][7].projections[2];
      Projection_Group @. = [12] = LeabraPrjn .networks[0].layers.gp[4][0].projections[7];
      Projection_Group @. = [13] = LeabraPrjn .networks[0].layers.gp[4][1].projections[7];
      Projection_Group @. = [14] = LeabraPrjn .networks[0].layers.gp[4][2].projections[2];
      Projection_Group @. = [15] = LeabraPrjn .networks[0].layers.gp[4][6].projections[4];
      Projection_Group @. = [16] = LeabraPrjn .networks[0].layers.gp[4][8].projections[2];
     };
     units {
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=.networks[0].specs.gp[1][0].children[7]$$: };
     dist {fm_input=0: fm_output=2: };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0.2;
     acts_p_avg=0.2;
     acts_p_avg_eff=0.2;
     spec {type=LeabraLayerSpec: spec=.networks[0].specs[0].children[0]$$: };
     adapt_gi=1;
     margin_low_thr=0.501;
     margin_med_thr=0.506;
     margin_hi_thr=0.508;
     margin_low_avg=0.25;
     margin_med_avg=0.0375;
     margin_hi_avg=0.175;
    };
    LeabraLayer @[1] {
     name="Hidden";
     desc=;
     flags=0;
     layer_type=HIDDEN;
     pos_rel {rel=ABS_POS: other=NULL: x_align=LEFT: x_off=0: y_align=FRONT: y_off=0: space=2: };
     pos {x=0: y=0: z=1: };
     pos_abs {x=0: y=0: z=1: };
     pos2d {x=0: y=13: };
     pos2d_abs {x=0: y=13: };
     disp_scale=1;
     un_geom {x=5: y=5: n_not_xy=0: n=25: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=5: y=5: n_not_xy=0: n=25: };
     disp_geom {x=5: y=5: n_not_xy=0: n=25: };
     scaled_disp_geom {x=5: y=5: n_not_xy=0: n=25: };
     n_recv_prjns=3;
     n_send_prjns=1;
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_Input";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=.networks[0].layers[0]$$;
       spec {type=FullPrjnSpec: spec=.networks[0].specs[3]$$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=$.networks[0].specs[2]$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=FM_INPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
      LeabraPrjn @[1] {
       name="Fm_Output";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=.networks[0].layers[2]$$;
       spec {type=FullPrjnSpec: spec=$.networks[0].specs[3]$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=.networks[0].specs[2].children[1]$$: };
       recv_idx=1;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=FM_OUTPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
      LeabraPrjn @[2] {
       name="Fm_PFCout_deep";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=.networks[0].layers.gp[4][10]$$;
       spec {type=FullPrjnSpec: spec=.networks[0].specs.gp[1][5]$$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=.networks[0].specs.gp[1][2].children[4]$$: };
       recv_idx=2;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=LATERAL;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_Group @. = [0] = LeabraPrjn .networks[0].layers[2].projections[0];
     };
     units {
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=.networks[0].specs[1]$$: };
     dist {fm_input=1: fm_output=1: };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0.2;
     acts_p_avg=0.2;
     acts_p_avg_eff=0.2;
     spec {type=LeabraLayerSpec: spec=.networks[0].specs[0]$$: };
     adapt_gi=1;
     margin_low_thr=0.501;
     margin_med_thr=0.506;
     margin_hi_thr=0.508;
     margin_low_avg=0.25;
     margin_med_avg=0.0375;
     margin_hi_avg=0.175;
    };
    LeabraLayer @[2] {
     name="Output";
     desc=;
     flags=0;
     layer_type=TARGET;
     pos_rel {rel=ABS_POS: other=NULL: x_align=LEFT: x_off=0: y_align=FRONT: y_off=0: space=2: };
     pos {x=0: y=0: z=2: };
     pos_abs {x=0: y=0: z=2: };
     pos2d {x=0: y=6: };
     pos2d_abs {x=0: y=6: };
     disp_scale=1;
     un_geom {x=5: y=5: n_not_xy=0: n=25: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=5: y=5: n_not_xy=0: n=25: };
     disp_geom {x=5: y=5: n_not_xy=0: n=25: };
     scaled_disp_geom {x=5: y=5: n_not_xy=0: n=25: };
     n_recv_prjns=2;
     n_send_prjns=2;
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_Hidden";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=.networks[0].layers[1]$$;
       spec {type=FullPrjnSpec: spec=$.networks[0].specs[3]$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=$.networks[0].specs[2]$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=FM_INPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
      LeabraPrjn @[1] {
       name="Fm_PFCout_deep";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=$.networks[0].layers.gp[4][10]$;
       spec {type=FullPrjnSpec: spec=$.networks[0].specs.gp[1][5]$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=$.networks[0].specs.gp[1][2].children[4]$: };
       recv_idx=1;
       send_idx=1;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=LATERAL;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_Group @. = [0] = LeabraPrjn .networks[0].layers[1].projections[1];
      Projection_Group @. = [1] = LeabraPrjn .networks[0].layers.gp[0][5].projections[1];
     };
     units {
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.networks[0].specs[1]$: };
     dist {fm_input=2: fm_output=0: };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0.2;
     acts_p_avg=0.2;
     acts_p_avg_eff=0.2;
     spec {type=LeabraLayerSpec: spec=$.networks[0].specs[0].children[0]$: };
     adapt_gi=1;
     margin_low_thr=0.501;
     margin_med_thr=0.506;
     margin_hi_thr=0.508;
     margin_low_avg=0.25;
     margin_med_avg=0.0375;
     margin_hi_avg=0.175;
    };
    Layer_Group @.gp[0] {
     name="PVLV_PV";
     el_typ=LeabraLayer;
     el_def=0;
     pos {x=11: y=0: z=0: };
     pos2d {x=11: y=0: };
     max_disp_size {x=5: y=9: z=1: };
     max_disp_size2d {x=5: y=9: };
     LeabraLayer @[0] {
      name="PosPV";
      desc=;
      flags=0;
      layer_type=HIDDEN;
      pos_rel {rel=RIGHT_OF: other=$.networks[0].layers[0]$: x_align=LEFT: x_off=0: y_align=FRONT: y_off=0: space=6: };
      pos {x=0: y=0: z=0: };
      pos_abs {x=11: y=0: z=0: };
      pos2d {x=0: y=0: };
      pos2d_abs {x=11: y=0: };
      disp_scale=1;
      un_geom {x=1: y=1: n_not_xy=0: n=1: };
      unit_groups=1;
      virt_groups=1;
      gp_geom {x=1: y=1: n_not_xy=0: n=1: };
      gp_spc {x=1: y=1: };
      flat_geom {x=1: y=1: n_not_xy=0: n=1: };
      disp_geom {x=1: y=1: n_not_xy=0: n=4: };
      scaled_disp_geom {x=1: y=1: n_not_xy=0: n=1: };
      n_recv_prjns=1;
      n_send_prjns=5;
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @[0] {
	name="Fm_ExtRew";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=.networks[0].layers.gp[0][5]$$;
	spec {type=TesselPrjnSpec: spec=.networks[0].specs.gp[0][8]$$: };
	con_type=LeabraCon;
	con_spec {type=LeabraConSpec: spec=.networks[0].specs.gp[0][2]$$: };
	recv_idx=0;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_INPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .networks[0].layers.gp[1][1].projections[0];
       Projection_Group @. = [1] = LeabraPrjn .networks[0].layers.gp[1][3].projections[0];
       Projection_Group @. = [2] = LeabraPrjn .networks[0].layers.gp[3][1].projections[2];
       Projection_Group @. = [3] = LeabraPrjn .networks[0].layers.gp[3][2].projections[0];
       Projection_Group @. = [4] = LeabraPrjn .networks[0].layers.gp[3][5].projections[1];
       Projection_Group @. = [5] = LeabraPrjn .networks[0].layers.gp[4][2].projections[0];
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=LeabraUnitSpec: spec=.networks[0].specs.gp[0][0].children[0]$$: };
      dist {fm_input=2: fm_output=6: };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=".*/.*/.*/.*/Lateral Hypothalamic area LHA";
      voxel_fill_pct=1;
      acts_m_avg=0.25;
      acts_p_avg=0.25;
      acts_p_avg_eff=0.25;
      spec {type=LeabraLayerSpec: spec=.networks[0].specs.gp[0][4].children[0]$$: };
      adapt_gi=1;
      margin_low_thr=0.501;
      margin_med_thr=0.506;
      margin_hi_thr=0.508;
      margin_low_avg=0.3125;
      margin_med_avg=0.046875;
      margin_hi_avg=0.21875;
     };
     LeabraLayer @[1] {
      name="NegPV";
      desc=;
      flags=0;
      layer_type=INPUT;
      pos_rel {rel=RIGHT_OF: other=.networks[0].layers.gp[0][0]$$: x_align=LEFT: x_off=0: y_align=FRONT: y_off=0: space=3: };
      pos {x=4: y=0: z=0: };
      pos_abs {x=15: y=0: z=0: };
      pos2d {x=4: y=0: };
      pos2d_abs {x=15: y=0: };
      disp_scale=1;
      un_geom {x=1: y=1: n_not_xy=0: n=1: };
      unit_groups=1;
      virt_groups=1;
      gp_geom {x=1: y=1: n_not_xy=0: n=1: };
      gp_spc {x=1: y=1: };
      flat_geom {x=1: y=1: n_not_xy=0: n=1: };
      disp_geom {x=1: y=1: n_not_xy=0: n=4: };
      scaled_disp_geom {x=1: y=1: n_not_xy=0: n=1: };
      n_recv_prjns=0;
      n_send_prjns=6;
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .networks[0].layers.gp[1][4].projections[0];
       Projection_Group @. = [1] = LeabraPrjn .networks[0].layers.gp[1][5].projections[1];
       Projection_Group @. = [2] = LeabraPrjn .networks[0].layers.gp[1][6].projections[0];
       Projection_Group @. = [3] = LeabraPrjn .networks[0].layers.gp[3][2].projections[1];
       Projection_Group @. = [4] = LeabraPrjn .networks[0].layers.gp[3][4].projections[2];
       Projection_Group @. = [5] = LeabraPrjn .networks[0].layers.gp[3][5].projections[0];
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=LeabraUnitSpec: spec=$.networks[0].specs.gp[0][0].children[0]$: };
      dist {fm_input=0: fm_output=7: };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=".*/.*/.*/.*/Lateral Hypothalamic area LHA";
      voxel_fill_pct=1;
      acts_m_avg=0.25;
      acts_p_avg=0.25;
      acts_p_avg_eff=0.25;
      spec {type=LeabraLayerSpec: spec=$.networks[0].specs.gp[0][4].children[0]$: };
      adapt_gi=1;
      margin_low_thr=0.501;
      margin_med_thr=0.506;
      margin_hi_thr=0.508;
      margin_low_avg=0.3125;
      margin_med_avg=0.046875;
      margin_hi_avg=0.21875;
     };
     LeabraLayer @[2] {
      name="PosBodyState";
      desc=;
      flags=0;
      layer_type=INPUT;
      pos_rel {rel=BEHIND: other=$.networks[0].layers.gp[0][0]$: x_align=LEFT: x_off=0: y_align=FRONT: y_off=0: space=3: };
      pos {x=0: y=4: z=0: };
      pos_abs {x=11: y=4: z=0: };
      pos2d {x=0: y=4: };
      pos2d_abs {x=11: y=4: };
      disp_scale=1;
      un_geom {x=1: y=1: n_not_xy=0: n=1: };
      unit_groups=1;
      virt_groups=1;
      gp_geom {x=1: y=1: n_not_xy=0: n=1: };
      gp_spc {x=1: y=1: };
      flat_geom {x=1: y=1: n_not_xy=0: n=1: };
      disp_geom {x=1: y=1: n_not_xy=0: n=4: };
      scaled_disp_geom {x=1: y=1: n_not_xy=0: n=1: };
      n_recv_prjns=0;
      n_send_prjns=0;
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=LeabraUnitSpec: spec=$.networks[0].specs.gp[0][0].children[0]$: };
      dist {fm_input=0: fm_output=-1: };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=".*/.*/.*/.*/Lateral Hypothalamic area LHA";
      voxel_fill_pct=1;
      acts_m_avg=0.25;
      acts_p_avg=0.25;
      acts_p_avg_eff=0.25;
      spec {type=LeabraLayerSpec: spec=$.networks[0].specs.gp[0][4].children[0]$: };
      adapt_gi=1;
      margin_low_thr=0.501;
      margin_med_thr=0.506;
      margin_hi_thr=0.508;
      margin_low_avg=0.3125;
      margin_med_avg=0.046875;
      margin_hi_avg=0.21875;
     };
     LeabraLayer @[3] {
      name="NegBodyState";
      desc=;
      flags=0;
      layer_type=INPUT;
      pos_rel {rel=BEHIND: other=.networks[0].layers.gp[0][1]$$: x_align=LEFT: x_off=0: y_align=FRONT: y_off=0: space=3: };
      pos {x=4: y=4: z=0: };
      pos_abs {x=15: y=4: z=0: };
      pos2d {x=4: y=4: };
      pos2d_abs {x=15: y=4: };
      disp_scale=1;
      un_geom {x=1: y=1: n_not_xy=0: n=1: };
      unit_groups=1;
      virt_groups=1;
      gp_geom {x=1: y=1: n_not_xy=0: n=1: };
      gp_spc {x=1: y=1: };
      flat_geom {x=1: y=1: n_not_xy=0: n=1: };
      disp_geom {x=1: y=1: n_not_xy=0: n=4: };
      scaled_disp_geom {x=1: y=1: n_not_xy=0: n=1: };
      n_recv_prjns=0;
      n_send_prjns=0;
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=LeabraUnitSpec: spec=$.networks[0].specs.gp[0][0].children[0]$: };
      dist {fm_input=0: fm_output=-1: };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=".*/.*/.*/.*/Lateral Hypothalamic area LHA";
      voxel_fill_pct=1;
      acts_m_avg=0.25;
      acts_p_avg=0.25;
      acts_p_avg_eff=0.25;
      spec {type=LeabraLayerSpec: spec=$.networks[0].specs.gp[0][4].children[0]$: };
      adapt_gi=1;
      margin_low_thr=0.501;
      margin_med_thr=0.506;
      margin_hi_thr=0.508;
      margin_low_avg=0.3125;
      margin_med_avg=0.046875;
      margin_hi_avg=0.21875;
     };
     LeabraLayer @[4] {
      name="RewTarg";
      desc=;
      flags=0;
      layer_type=INPUT;
      pos_rel {rel=BEHIND: other=.networks[0].layers.gp[0][3]$$: x_align=LEFT: x_off=0: y_align=FRONT: y_off=0: space=3: };
      pos {x=4: y=8: z=0: };
      pos_abs {x=15: y=8: z=0: };
      pos2d {x=4: y=8: };
      pos2d_abs {x=15: y=8: };
      disp_scale=1;
      un_geom {x=1: y=1: n_not_xy=0: n=1: };
      unit_groups=0;
      virt_groups=1;
      gp_geom {x=1: y=1: n_not_xy=0: n=1: };
      gp_spc {x=1: y=1: };
      flat_geom {x=1: y=1: n_not_xy=0: n=1: };
      disp_geom {x=1: y=1: n_not_xy=0: n=1: };
      scaled_disp_geom {x=1: y=1: n_not_xy=0: n=1: };
      n_recv_prjns=0;
      n_send_prjns=2;
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .networks[0].layers.gp[0][5].projections[0];
       Projection_Group @. = [1] = LeabraPrjn .networks[0].layers.gp[4][2].projections[1];
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=LeabraUnitSpec: spec=.networks[0].specs.gp[0][0]$$: };
      dist {fm_input=0: fm_output=6: };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=".*/.*/.*/.*/Lateral Hypothalamic area LHA";
      voxel_fill_pct=1;
      acts_m_avg=0.25;
      acts_p_avg=0.25;
      acts_p_avg_eff=0.25;
      spec {type=LeabraLayerSpec: spec=$.networks[0].specs.gp[0][4].children[0]$: };
      adapt_gi=1;
      margin_low_thr=0.501;
      margin_med_thr=0.506;
      margin_hi_thr=0.508;
      margin_low_avg=0.3125;
      margin_med_avg=0.046875;
      margin_hi_avg=0.21875;
     };
     LeabraLayer @[5] {
      name="ExtRew";
      desc=;
      flags=NO_ADD_SSE|NO_ADD_COMP_SSE;
      layer_type=HIDDEN;
      pos_rel {rel=BEHIND: other=.networks[0].layers.gp[0][2]$$: x_align=LEFT: x_off=0: y_align=FRONT: y_off=0: space=3: };
      pos {x=0: y=8: z=0: };
      pos_abs {x=11: y=8: z=0: };
      pos2d {x=0: y=8: };
      pos2d_abs {x=11: y=8: };
      disp_scale=1;
      un_geom {x=3: y=1: n_not_xy=0: n=3: };
      unit_groups=0;
      virt_groups=1;
      gp_geom {x=1: y=1: n_not_xy=0: n=1: };
      gp_spc {x=1: y=1: };
      flat_geom {x=3: y=1: n_not_xy=0: n=3: };
      disp_geom {x=3: y=1: n_not_xy=0: n=3: };
      scaled_disp_geom {x=3: y=1: n_not_xy=0: n=1: };
      n_recv_prjns=2;
      n_send_prjns=1;
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @[0] {
	name="Marker_Fm_RewTarg";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=.networks[0].layers.gp[0][4]$$;
	spec {type=FullPrjnSpec: spec=.networks[0].specs.gp[0][5]$$: };
	con_type=LeabraCon;
	con_spec {type=MarkerConSpec: spec=.networks[0].specs.gp[0][3]$$: };
	recv_idx=0;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_INPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[1] {
	name="Marker_Fm_Output";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers[2]$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs.gp[0][5]$: };
	con_type=LeabraCon;
	con_spec {type=MarkerConSpec: spec=$.networks[0].specs.gp[0][3]$: };
	recv_idx=1;
	send_idx=1;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_OUTPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .networks[0].layers.gp[0][0].projections[0];
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=LeabraUnitSpec: spec=$.networks[0].specs.gp[0][0]$: };
      dist {fm_input=1: fm_output=7: };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=".*/.*/.*/.*/Lateral Hypothalamic area LHA";
      voxel_fill_pct=1;
      acts_m_avg=0.25;
      acts_p_avg=0.25;
      acts_p_avg_eff=0.25;
      spec {type=ExtRewLayerSpec: spec=.networks[0].specs.gp[0][4].children[5]$$: };
      adapt_gi=1;
      margin_low_thr=0.501;
      margin_med_thr=0.506;
      margin_hi_thr=0.508;
      margin_low_avg=0.3125;
      margin_med_avg=0.046875;
      margin_hi_avg=0.21875;
     };
    };
    Layer_Group @.gp[1] {
     name="PVLV_Amyg";
     el_typ=LeabraLayer;
     el_def=0;
     pos {x=11: y=12: z=0: };
     pos2d {x=11: y=12: };
     max_disp_size {x=5: y=13: z=1: };
     max_disp_size2d {x=5: y=13: };
     LeabraLayer @[0] {
      name="LatAmyg";
      desc=;
      flags=0;
      layer_type=HIDDEN;
      pos_rel {rel=BEHIND: other=.networks[0].layers.gp[1][1]$$: x_align=LEFT: x_off=0: y_align=FRONT: y_off=0: space=3: };
      pos {x=0: y=12: z=0: };
      pos_abs {x=11: y=24: z=0: };
      pos2d {x=0: y=12: };
      pos2d_abs {x=11: y=24: };
      disp_scale=1;
      un_geom {x=2: y=1: n_not_xy=0: n=2: };
      unit_groups=1;
      virt_groups=1;
      gp_geom {x=1: y=1: n_not_xy=0: n=1: };
      gp_spc {x=1: y=1: };
      flat_geom {x=2: y=1: n_not_xy=0: n=2: };
      disp_geom {x=2: y=1: n_not_xy=0: n=6: };
      scaled_disp_geom {x=2: y=1: n_not_xy=0: n=1: };
      n_recv_prjns=4;
      n_send_prjns=4;
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @[0] {
	name="Marker_Fm_VTAp";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=.networks[0].layers.gp[3][1]$$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs.gp[0][5]$: };
	con_type=LeabraCon;
	con_spec {type=MarkerConSpec: spec=$.networks[0].specs.gp[0][3]$: };
	recv_idx=0;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_OUTPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[1] {
	name="Marker_Fm_VTAn";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=.networks[0].layers.gp[3][4]$$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs.gp[0][5]$: };
	con_type=LeabraCon;
	con_spec {type=MarkerConSpec: spec=$.networks[0].specs.gp[0][3]$: };
	recv_idx=1;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=LATERAL;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[2] {
	name="Fm_Input";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers[0]$;
	spec {type=OneToOnePrjnSpec: spec=.networks[0].specs.gp[0][6]$$: };
	con_type=LeabraCon;
	con_spec {type=LatAmygConSpec: spec=$.networks[0].specs.gp[0][1].children[0]$: };
	recv_idx=2;
	send_idx=1;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_INPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[3] {
	name="Fm_PFCmnt_deep";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=.networks[0].layers.gp[4][7]$$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs.gp[1][5]$: };
	con_type=LeabraCon;
	con_spec {type=LatAmygConSpec: spec=$.networks[0].specs.gp[0][1].children[0]$: };
	recv_idx=3;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_OUTPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .networks[0].layers.gp[1][1].projections[2];
       Projection_Group @. = [1] = LeabraPrjn .networks[0].layers.gp[1][2].projections[2];
       Projection_Group @. = [2] = LeabraPrjn .networks[0].layers.gp[1][4].projections[2];
       Projection_Group @. = [3] = LeabraPrjn .networks[0].layers.gp[1][5].projections[3];
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=LeabraUnitSpec: spec=.networks[0].specs.gp[0][0].children[7]$$: };
      dist {fm_input=1: fm_output=8: };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=".*/.*/.*/.*/Amygdala";
      voxel_fill_pct=1;
      acts_m_avg=0.25;
      acts_p_avg=0.25;
      acts_p_avg_eff=0.25;
      spec {type=LeabraLayerSpec: spec=.networks[0].specs.gp[0][4].children[2]$$: };
      adapt_gi=1;
      margin_low_thr=0.501;
      margin_med_thr=0.506;
      margin_hi_thr=0.508;
      margin_low_avg=0.3125;
      margin_med_avg=0.046875;
      margin_hi_avg=0.21875;
     };
     LeabraLayer @[1] {
      name="BAAcqPosD1";
      desc=;
      flags=0;
      layer_type=HIDDEN;
      pos_rel {rel=BEHIND: other=.networks[0].layers.gp[1][2]$$: x_align=LEFT: x_off=0: y_align=FRONT: y_off=0: space=3: };
      pos {x=0: y=8: z=0: };
      pos_abs {x=11: y=20: z=0: };
      pos2d {x=0: y=8: };
      pos2d_abs {x=11: y=20: };
      disp_scale=1;
      un_geom {x=1: y=1: n_not_xy=0: n=1: };
      unit_groups=1;
      virt_groups=1;
      gp_geom {x=1: y=1: n_not_xy=0: n=1: };
      gp_spc {x=1: y=1: };
      flat_geom {x=1: y=1: n_not_xy=0: n=1: };
      disp_geom {x=1: y=1: n_not_xy=0: n=4: };
      scaled_disp_geom {x=1: y=1: n_not_xy=0: n=1: };
      n_recv_prjns=4;
      n_send_prjns=5;
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @[0] {
	name="Deep_Raw_Fm_PosPV";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[0][0]$;
	spec {type=GpOneToOnePrjnSpec: spec=.networks[0].specs.gp[0][7]$$: };
	con_type=LeabraCon;
	con_spec {type=SendDeepRawConSpec: spec=.networks[0].specs.gp[0][2].children[4]$$: };
	recv_idx=0;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_OUTPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[1] {
	name="Marker_Fm_VTAp";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[3][1]$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs.gp[0][5]$: };
	con_type=LeabraCon;
	con_spec {type=MarkerConSpec: spec=$.networks[0].specs.gp[0][3]$: };
	recv_idx=1;
	send_idx=1;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_OUTPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[2] {
	name="Fm_LatAmyg";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=.networks[0].layers.gp[1][0]$$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs.gp[0][5]$: };
	con_type=LeabraCon;
	con_spec {type=BasAmygConSpec: spec=$.networks[0].specs.gp[0][1].children[1]$: };
	recv_idx=2;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_INPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[3] {
	name="Inhib_Fm_BAExtPosD2";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[1][2]$;
	spec {type=GpOneToOnePrjnSpec: spec=$.networks[0].specs.gp[0][7]$: };
	con_type=LeabraCon;
	con_spec {type=LeabraConSpec: spec=.networks[0].specs.gp[0][2].children[1]$$: };
	recv_idx=3;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_INPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .networks[0].layers.gp[1][2].projections[0];
       Projection_Group @. = [1] = LeabraPrjn .networks[0].layers.gp[1][3].projections[1];
       Projection_Group @. = [2] = LeabraPrjn .networks[0].layers.gp[2][0].projections[1];
       Projection_Group @. = [3] = LeabraPrjn .networks[0].layers.gp[2][1].projections[1];
       Projection_Group @. = [4] = LeabraPrjn .networks[0].layers.gp[2][4].projections[1];
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=BasAmygUnitSpec: spec=.networks[0].specs.gp[0][0].children[8]$$: };
      dist {fm_input=2: fm_output=7: };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=".*/.*/.*/.*/Amygdala";
      voxel_fill_pct=1;
      acts_m_avg=0.25;
      acts_p_avg=0.25;
      acts_p_avg_eff=0.25;
      spec {type=LeabraLayerSpec: spec=$.networks[0].specs.gp[0][4].children[2]$: };
      adapt_gi=1;
      margin_low_thr=0.501;
      margin_med_thr=0.506;
      margin_hi_thr=0.508;
      margin_low_avg=0.3125;
      margin_med_avg=0.046875;
      margin_hi_avg=0.21875;
     };
     LeabraLayer @[2] {
      name="BAExtPosD2";
      desc=;
      flags=0;
      layer_type=HIDDEN;
      pos_rel {rel=BEHIND: other=.networks[0].layers.gp[1][3]$$: x_align=LEFT: x_off=0: y_align=FRONT: y_off=0: space=3: };
      pos {x=0: y=4: z=0: };
      pos_abs {x=11: y=16: z=0: };
      pos2d {x=0: y=4: };
      pos2d_abs {x=11: y=16: };
      disp_scale=1;
      un_geom {x=1: y=1: n_not_xy=0: n=1: };
      unit_groups=1;
      virt_groups=1;
      gp_geom {x=1: y=1: n_not_xy=0: n=1: };
      gp_spc {x=1: y=1: };
      flat_geom {x=1: y=1: n_not_xy=0: n=1: };
      disp_geom {x=1: y=1: n_not_xy=0: n=4: };
      scaled_disp_geom {x=1: y=1: n_not_xy=0: n=1: };
      n_recv_prjns=4;
      n_send_prjns=1;
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @[0] {
	name="Deep_Mod_Fm_BAAcqPosD1";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[1][1]$;
	spec {type=GpOneToOnePrjnSpec: spec=$.networks[0].specs.gp[0][7]$: };
	con_type=LeabraCon;
	con_spec {type=SendDeepModConSpec: spec=.networks[0].specs.gp[0][2].children[2]$$: };
	recv_idx=0;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_OUTPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[1] {
	name="Marker_Fm_VTAp";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[3][1]$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs.gp[0][5]$: };
	con_type=LeabraCon;
	con_spec {type=MarkerConSpec: spec=$.networks[0].specs.gp[0][3]$: };
	recv_idx=1;
	send_idx=2;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_OUTPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[2] {
	name="Fm_LatAmyg";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[1][0]$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs.gp[0][5]$: };
	con_type=LeabraCon;
	con_spec {type=BasAmygConSpec: spec=$.networks[0].specs.gp[0][1].children[1].children[1]$: };
	recv_idx=2;
	send_idx=1;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=LATERAL;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[3] {
	name="Fm_Input";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers[0]$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs.gp[0][5]$: };
	con_type=LeabraCon;
	con_spec {type=BasAmygConSpec: spec=$.networks[0].specs.gp[0][1].children[1].children[1]$: };
	recv_idx=3;
	send_idx=2;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_INPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .networks[0].layers.gp[1][1].projections[3];
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=BasAmygUnitSpec: spec=$.networks[0].specs.gp[0][0].children[8].children[0]$: };
      dist {fm_input=1: fm_output=8: };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=".*/.*/.*/.*/Amygdala";
      voxel_fill_pct=1;
      acts_m_avg=0.25;
      acts_p_avg=0.25;
      acts_p_avg_eff=0.25;
      spec {type=LeabraLayerSpec: spec=.networks[0].specs.gp[0][4].children[2].children[0]$$: };
      adapt_gi=1;
      margin_low_thr=0.501;
      margin_med_thr=0.506;
      margin_hi_thr=0.508;
      margin_low_avg=0.3125;
      margin_med_avg=0.046875;
      margin_hi_avg=0.21875;
     };
     LeabraLayer @[3] {
      name="CAPos";
      desc=;
      flags=0;
      layer_type=HIDDEN;
      pos_rel {rel=BEHIND: other=$.networks[0].layers.gp[0][5]$: x_align=LEFT: x_off=0: y_align=FRONT: y_off=0: space=3: };
      pos {x=0: y=0: z=0: };
      pos_abs {x=11: y=12: z=0: };
      pos2d {x=0: y=0: };
      pos2d_abs {x=11: y=12: };
      disp_scale=1;
      un_geom {x=1: y=1: n_not_xy=0: n=1: };
      unit_groups=1;
      virt_groups=1;
      gp_geom {x=1: y=1: n_not_xy=0: n=1: };
      gp_spc {x=1: y=1: };
      flat_geom {x=1: y=1: n_not_xy=0: n=1: };
      disp_geom {x=1: y=1: n_not_xy=0: n=4: };
      scaled_disp_geom {x=1: y=1: n_not_xy=0: n=1: };
      n_recv_prjns=2;
      n_send_prjns=1;
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @[0] {
	name="Fm_PosPV";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[0][0]$;
	spec {type=GpOneToOnePrjnSpec: spec=$.networks[0].specs.gp[0][7]$: };
	con_type=LeabraCon;
	con_spec {type=LeabraConSpec: spec=.networks[0].specs.gp[0][2].children[6]$$: };
	recv_idx=0;
	send_idx=1;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_INPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[1] {
	name="Fm_BAAcqPosD1";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[1][1]$;
	spec {type=GpOneToOnePrjnSpec: spec=$.networks[0].specs.gp[0][7]$: };
	con_type=LeabraCon;
	con_spec {type=LeabraConSpec: spec=.networks[0].specs.gp[0][2].children[5]$$: };
	recv_idx=1;
	send_idx=1;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_INPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .networks[0].layers.gp[3][0].projections[0];
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=LeabraUnitSpec: spec=.networks[0].specs.gp[0][0].children[6]$$: };
      dist {fm_input=3: fm_output=7: };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=".*/.*/.*/.*/Amygdala Central Nucleus CNA";
      voxel_fill_pct=1;
      acts_m_avg=0.25;
      acts_p_avg=0.25;
      acts_p_avg_eff=0.25;
      spec {type=LeabraLayerSpec: spec=$.networks[0].specs.gp[0][4].children[2]$: };
      adapt_gi=1;
      margin_low_thr=0.501;
      margin_med_thr=0.506;
      margin_hi_thr=0.508;
      margin_low_avg=0.3125;
      margin_med_avg=0.046875;
      margin_hi_avg=0.21875;
     };
     LeabraLayer @[4] {
      name="BAAcqNegD2";
      desc=;
      flags=0;
      layer_type=HIDDEN;
      pos_rel {rel=BEHIND: other=.networks[0].layers.gp[1][5]$$: x_align=LEFT: x_off=0: y_align=FRONT: y_off=0: space=3: };
      pos {x=4: y=8: z=0: };
      pos_abs {x=15: y=20: z=0: };
      pos2d {x=4: y=8: };
      pos2d_abs {x=15: y=20: };
      disp_scale=1;
      un_geom {x=1: y=1: n_not_xy=0: n=1: };
      unit_groups=1;
      virt_groups=1;
      gp_geom {x=1: y=1: n_not_xy=0: n=1: };
      gp_spc {x=1: y=1: };
      flat_geom {x=1: y=1: n_not_xy=0: n=1: };
      disp_geom {x=1: y=1: n_not_xy=0: n=4: };
      scaled_disp_geom {x=1: y=1: n_not_xy=0: n=1: };
      n_recv_prjns=4;
      n_send_prjns=5;
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @[0] {
	name="Deep_Raw_Fm_NegPV";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[0][1]$;
	spec {type=GpOneToOnePrjnSpec: spec=$.networks[0].specs.gp[0][7]$: };
	con_type=LeabraCon;
	con_spec {type=SendDeepRawConSpec: spec=$.networks[0].specs.gp[0][2].children[4]$: };
	recv_idx=0;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_INPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[1] {
	name="Marker_Fm_VTAp";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[3][1]$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs.gp[0][5]$: };
	con_type=LeabraCon;
	con_spec {type=MarkerConSpec: spec=$.networks[0].specs.gp[0][3]$: };
	recv_idx=1;
	send_idx=3;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_OUTPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[2] {
	name="Fm_LatAmyg";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[1][0]$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs.gp[0][5]$: };
	con_type=LeabraCon;
	con_spec {type=BasAmygConSpec: spec=$.networks[0].specs.gp[0][1].children[1].children[0]$: };
	recv_idx=2;
	send_idx=2;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=LATERAL;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[3] {
	name="Inhib_Fm_BAExtNegD1";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[1][5]$;
	spec {type=GpOneToOnePrjnSpec: spec=$.networks[0].specs.gp[0][7]$: };
	con_type=LeabraCon;
	con_spec {type=LeabraConSpec: spec=$.networks[0].specs.gp[0][2].children[1]$: };
	recv_idx=3;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=LATERAL;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .networks[0].layers.gp[1][5].projections[0];
       Projection_Group @. = [1] = LeabraPrjn .networks[0].layers.gp[1][6].projections[1];
       Projection_Group @. = [2] = LeabraPrjn .networks[0].layers.gp[2][2].projections[1];
       Projection_Group @. = [3] = LeabraPrjn .networks[0].layers.gp[2][3].projections[1];
       Projection_Group @. = [4] = LeabraPrjn .networks[0].layers.gp[2][6].projections[1];
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=BasAmygUnitSpec: spec=.networks[0].specs.gp[0][0].children[8].children[1]$$: };
      dist {fm_input=1: fm_output=8: };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=".*/.*/.*/.*/Amygdala";
      voxel_fill_pct=1;
      acts_m_avg=0.25;
      acts_p_avg=0.25;
      acts_p_avg_eff=0.25;
      spec {type=LeabraLayerSpec: spec=$.networks[0].specs.gp[0][4].children[2]$: };
      adapt_gi=1;
      margin_low_thr=0.501;
      margin_med_thr=0.506;
      margin_hi_thr=0.508;
      margin_low_avg=0.3125;
      margin_med_avg=0.046875;
      margin_hi_avg=0.21875;
     };
     LeabraLayer @[5] {
      name="BAExtNegD1";
      desc=;
      flags=0;
      layer_type=HIDDEN;
      pos_rel {rel=BEHIND: other=.networks[0].layers.gp[1][6]$$: x_align=LEFT: x_off=0: y_align=FRONT: y_off=0: space=3: };
      pos {x=4: y=4: z=0: };
      pos_abs {x=15: y=16: z=0: };
      pos2d {x=4: y=4: };
      pos2d_abs {x=15: y=16: };
      disp_scale=1;
      un_geom {x=1: y=1: n_not_xy=0: n=1: };
      unit_groups=1;
      virt_groups=1;
      gp_geom {x=1: y=1: n_not_xy=0: n=1: };
      gp_spc {x=1: y=1: };
      flat_geom {x=1: y=1: n_not_xy=0: n=1: };
      disp_geom {x=1: y=1: n_not_xy=0: n=4: };
      scaled_disp_geom {x=1: y=1: n_not_xy=0: n=1: };
      n_recv_prjns=5;
      n_send_prjns=1;
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @[0] {
	name="Deep_Mod_Fm_BAAcqNegD2";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=.networks[0].layers.gp[1][4]$$;
	spec {type=GpOneToOnePrjnSpec: spec=$.networks[0].specs.gp[0][7]$: };
	con_type=LeabraCon;
	con_spec {type=SendDeepModConSpec: spec=$.networks[0].specs.gp[0][2].children[2]$: };
	recv_idx=0;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_OUTPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[1] {
	name="Deep_Raw_Fm_NegPV";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[0][1]$;
	spec {type=GpOneToOnePrjnSpec: spec=$.networks[0].specs.gp[0][7]$: };
	con_type=LeabraCon;
	con_spec {type=SendDeepRawConSpec: spec=$.networks[0].specs.gp[0][2].children[4]$: };
	recv_idx=1;
	send_idx=1;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_INPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[2] {
	name="Marker_Fm_VTAp";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[3][1]$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs.gp[0][5]$: };
	con_type=LeabraCon;
	con_spec {type=MarkerConSpec: spec=$.networks[0].specs.gp[0][3]$: };
	recv_idx=2;
	send_idx=4;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_OUTPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[3] {
	name="Fm_LatAmyg";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[1][0]$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs.gp[0][5]$: };
	con_type=LeabraCon;
	con_spec {type=BasAmygConSpec: spec=$.networks[0].specs.gp[0][1].children[1].children[2]$: };
	recv_idx=3;
	send_idx=3;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_OUTPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[4] {
	name="Fm_Input";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers[0]$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs.gp[0][5]$: };
	con_type=LeabraCon;
	con_spec {type=BasAmygConSpec: spec=$.networks[0].specs.gp[0][1].children[1].children[2]$: };
	recv_idx=4;
	send_idx=3;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_INPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .networks[0].layers.gp[1][4].projections[3];
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=BasAmygUnitSpec: spec=$.networks[0].specs.gp[0][0].children[8].children[2]$: };
      dist {fm_input=1: fm_output=9: };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=".*/.*/.*/.*/Amygdala";
      voxel_fill_pct=1;
      acts_m_avg=0.25;
      acts_p_avg=0.25;
      acts_p_avg_eff=0.25;
      spec {type=LeabraLayerSpec: spec=$.networks[0].specs.gp[0][4].children[2].children[0]$: };
      adapt_gi=1;
      margin_low_thr=0.501;
      margin_med_thr=0.506;
      margin_hi_thr=0.508;
      margin_low_avg=0.3125;
      margin_med_avg=0.046875;
      margin_hi_avg=0.21875;
     };
     LeabraLayer @[6] {
      name="CANeg";
      desc=;
      flags=0;
      layer_type=HIDDEN;
      pos_rel {rel=BEHIND: other=$.networks[0].layers.gp[0][4]$: x_align=LEFT: x_off=0: y_align=FRONT: y_off=0: space=3: };
      pos {x=4: y=0: z=0: };
      pos_abs {x=15: y=12: z=0: };
      pos2d {x=4: y=0: };
      pos2d_abs {x=15: y=12: };
      disp_scale=1;
      un_geom {x=1: y=1: n_not_xy=0: n=1: };
      unit_groups=1;
      virt_groups=1;
      gp_geom {x=1: y=1: n_not_xy=0: n=1: };
      gp_spc {x=1: y=1: };
      flat_geom {x=1: y=1: n_not_xy=0: n=1: };
      disp_geom {x=1: y=1: n_not_xy=0: n=4: };
      scaled_disp_geom {x=1: y=1: n_not_xy=0: n=1: };
      n_recv_prjns=2;
      n_send_prjns=1;
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @[0] {
	name="Fm_NegPV";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[0][1]$;
	spec {type=GpOneToOnePrjnSpec: spec=$.networks[0].specs.gp[0][7]$: };
	con_type=LeabraCon;
	con_spec {type=LeabraConSpec: spec=$.networks[0].specs.gp[0][2].children[6]$: };
	recv_idx=0;
	send_idx=2;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_INPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[1] {
	name="Fm_BAAcqNegD2";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[1][4]$;
	spec {type=GpOneToOnePrjnSpec: spec=$.networks[0].specs.gp[0][7]$: };
	con_type=LeabraCon;
	con_spec {type=LeabraConSpec: spec=$.networks[0].specs.gp[0][2]$: };
	recv_idx=1;
	send_idx=1;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_OUTPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .networks[0].layers.gp[3][3].projections[0];
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=LeabraUnitSpec: spec=$.networks[0].specs.gp[0][0].children[6]$: };
      dist {fm_input=1: fm_output=11: };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=".*/.*/.*/.*/Amygdala Central Nucleus CNA";
      voxel_fill_pct=1;
      acts_m_avg=0.25;
      acts_p_avg=0.25;
      acts_p_avg_eff=0.25;
      spec {type=LeabraLayerSpec: spec=$.networks[0].specs.gp[0][4].children[2]$: };
      adapt_gi=1;
      margin_low_thr=0.501;
      margin_med_thr=0.506;
      margin_hi_thr=0.508;
      margin_low_avg=0.3125;
      margin_med_avg=0.046875;
      margin_hi_avg=0.21875;
     };
    };
    Layer_Group @.gp[2] {
     name="PVLV_VS";
     el_typ=LeabraLayer;
     el_def=0;
     pos {x=19: y=7: z=0: };
     pos2d {x=19: y=7: };
     max_disp_size {x=5: y=16: z=1: };
     max_disp_size2d {x=5: y=16: };
     LeabraLayer @[0] {
      name="VSPatchPosD1";
      desc=;
      flags=0;
      layer_type=HIDDEN;
      pos_rel {rel=BEHIND: other=.networks[0].layers.gp[3][0]$$: x_align=LEFT: x_off=0: y_align=FRONT: y_off=0: space=6: };
      pos {x=0: y=0: z=0: };
      pos_abs {x=19: y=7: z=0: };
      pos2d {x=0: y=0: };
      pos2d_abs {x=19: y=7: };
      disp_scale=1;
      un_geom {x=1: y=1: n_not_xy=0: n=1: };
      unit_groups=1;
      virt_groups=1;
      gp_geom {x=1: y=1: n_not_xy=0: n=1: };
      gp_spc {x=1: y=1: };
      flat_geom {x=1: y=1: n_not_xy=0: n=1: };
      disp_geom {x=1: y=1: n_not_xy=0: n=4: };
      scaled_disp_geom {x=1: y=1: n_not_xy=0: n=1: };
      n_recv_prjns=3;
      n_send_prjns=2;
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @[0] {
	name="Marker_Fm_VTAp";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[3][1]$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs.gp[0][5]$: };
	con_type=LeabraCon;
	con_spec {type=MarkerConSpec: spec=$.networks[0].specs.gp[0][3]$: };
	recv_idx=0;
	send_idx=5;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_OUTPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[1] {
	name="Deep_Mod_Fm_BAAcqPosD1";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[1][1]$;
	spec {type=GpOneToOnePrjnSpec: spec=$.networks[0].specs.gp[0][7]$: };
	con_type=LeabraCon;
	con_spec {type=SendDeepModConSpec: spec=.networks[0].specs.gp[0][2].children[2].children[0]$$: };
	recv_idx=1;
	send_idx=2;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=LATERAL;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[2] {
	name="Fm_Input";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers[0]$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs.gp[0][5]$: };
	con_type=MSNCon;
	con_spec {type=MSNConSpec: spec=$.networks[0].specs.gp[0][1].children[2]$: };
	recv_idx=2;
	send_idx=4;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_INPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .networks[0].layers.gp[3][1].projections[3];
       Projection_Group @. = [1] = LeabraPrjn .networks[0].layers.gp[3][2].projections[2];
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=MSNUnitSpec: spec=.networks[0].specs.gp[0][0].children[9]$$: };
      dist {fm_input=1: fm_output=6: };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=".*/.*/.*/.*/Nucleus Accumbens NAc";
      voxel_fill_pct=1;
      acts_m_avg=0.25;
      acts_p_avg=0.25;
      acts_p_avg_eff=0.25;
      spec {type=LeabraLayerSpec: spec=.networks[0].specs.gp[0][4].children[3]$$: };
      adapt_gi=1;
      margin_low_thr=0.501;
      margin_med_thr=0.506;
      margin_hi_thr=0.508;
      margin_low_avg=0.3125;
      margin_med_avg=0.046875;
      margin_hi_avg=0.21875;
     };
     LeabraLayer @[1] {
      name="VSPatchPosD2";
      desc=;
      flags=0;
      layer_type=HIDDEN;
      pos_rel {rel=BEHIND: other=.networks[0].layers.gp[2][0]$$: x_align=LEFT: x_off=0: y_align=FRONT: y_off=0: space=3: };
      pos {x=0: y=4: z=0: };
      pos_abs {x=19: y=11: z=0: };
      pos2d {x=0: y=4: };
      pos2d_abs {x=19: y=11: };
      disp_scale=1;
      un_geom {x=1: y=1: n_not_xy=0: n=1: };
      unit_groups=1;
      virt_groups=1;
      gp_geom {x=1: y=1: n_not_xy=0: n=1: };
      gp_spc {x=1: y=1: };
      flat_geom {x=1: y=1: n_not_xy=0: n=1: };
      disp_geom {x=1: y=1: n_not_xy=0: n=4: };
      scaled_disp_geom {x=1: y=1: n_not_xy=0: n=1: };
      n_recv_prjns=3;
      n_send_prjns=2;
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @[0] {
	name="Marker_Fm_VTAp";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[3][1]$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs.gp[0][5]$: };
	con_type=LeabraCon;
	con_spec {type=MarkerConSpec: spec=$.networks[0].specs.gp[0][3]$: };
	recv_idx=0;
	send_idx=6;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_OUTPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[1] {
	name="Deep_Mod_Fm_BAAcqPosD1";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[1][1]$;
	spec {type=GpOneToOnePrjnSpec: spec=$.networks[0].specs.gp[0][7]$: };
	con_type=LeabraCon;
	con_spec {type=SendDeepModConSpec: spec=$.networks[0].specs.gp[0][2].children[2].children[0]$: };
	recv_idx=1;
	send_idx=3;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=LATERAL;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[2] {
	name="Fm_Input";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers[0]$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs.gp[0][5]$: };
	con_type=MSNCon;
	con_spec {type=MSNConSpec: spec=.networks[0].specs.gp[0][1].children[2].children[0]$$: };
	recv_idx=2;
	send_idx=5;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_INPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .networks[0].layers.gp[3][1].projections[4];
       Projection_Group @. = [1] = LeabraPrjn .networks[0].layers.gp[3][2].projections[3];
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=MSNUnitSpec: spec=.networks[0].specs.gp[0][0].children[9].children[0]$$: };
      dist {fm_input=1: fm_output=6: };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=".*/.*/.*/.*/Nucleus Accumbens NAc";
      voxel_fill_pct=1;
      acts_m_avg=0.25;
      acts_p_avg=0.25;
      acts_p_avg_eff=0.25;
      spec {type=LeabraLayerSpec: spec=$.networks[0].specs.gp[0][4].children[3]$: };
      adapt_gi=1;
      margin_low_thr=0.501;
      margin_med_thr=0.506;
      margin_hi_thr=0.508;
      margin_low_avg=0.3125;
      margin_med_avg=0.046875;
      margin_hi_avg=0.21875;
     };
     LeabraLayer @[2] {
      name="VSPatchNegD2";
      desc=;
      flags=0;
      layer_type=HIDDEN;
      pos_rel {rel=RIGHT_OF: other=.networks[0].layers.gp[2][1]$$: x_align=LEFT: x_off=0: y_align=FRONT: y_off=0: space=3: };
      pos {x=4: y=4: z=0: };
      pos_abs {x=23: y=11: z=0: };
      pos2d {x=4: y=4: };
      pos2d_abs {x=23: y=11: };
      disp_scale=1;
      un_geom {x=1: y=1: n_not_xy=0: n=1: };
      unit_groups=1;
      virt_groups=1;
      gp_geom {x=1: y=1: n_not_xy=0: n=1: };
      gp_spc {x=1: y=1: };
      flat_geom {x=1: y=1: n_not_xy=0: n=1: };
      disp_geom {x=1: y=1: n_not_xy=0: n=4: };
      scaled_disp_geom {x=1: y=1: n_not_xy=0: n=1: };
      n_recv_prjns=3;
      n_send_prjns=2;
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @[0] {
	name="Marker_Fm_VTAp";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[3][1]$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs.gp[0][5]$: };
	con_type=LeabraCon;
	con_spec {type=MarkerConSpec: spec=$.networks[0].specs.gp[0][3]$: };
	recv_idx=0;
	send_idx=7;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_OUTPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[1] {
	name="Deep_Mod_Fm_BAAcqNegD2";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[1][4]$;
	spec {type=GpOneToOnePrjnSpec: spec=$.networks[0].specs.gp[0][7]$: };
	con_type=LeabraCon;
	con_spec {type=SendDeepModConSpec: spec=$.networks[0].specs.gp[0][2].children[2].children[0]$: };
	recv_idx=1;
	send_idx=2;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=LATERAL;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[2] {
	name="Fm_Input";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers[0]$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs.gp[0][5]$: };
	con_type=MSNCon;
	con_spec {type=MSNConSpec: spec=.networks[0].specs.gp[0][1].children[2].children[2]$$: };
	recv_idx=2;
	send_idx=6;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_INPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .networks[0].layers.gp[3][2].projections[4];
       Projection_Group @. = [1] = LeabraPrjn .networks[0].layers.gp[3][4].projections[3];
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=MSNUnitSpec: spec=.networks[0].specs.gp[0][0].children[9].children[1]$$: };
      dist {fm_input=1: fm_output=7: };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=".*/.*/.*/.*/Nucleus Accumbens NAc";
      voxel_fill_pct=1;
      acts_m_avg=0.25;
      acts_p_avg=0.25;
      acts_p_avg_eff=0.25;
      spec {type=LeabraLayerSpec: spec=$.networks[0].specs.gp[0][4].children[3]$: };
      adapt_gi=1;
      margin_low_thr=0.501;
      margin_med_thr=0.506;
      margin_hi_thr=0.508;
      margin_low_avg=0.3125;
      margin_med_avg=0.046875;
      margin_hi_avg=0.21875;
     };
     LeabraLayer @[3] {
      name="VSPatchNegD1";
      desc=;
      flags=0;
      layer_type=HIDDEN;
      pos_rel {rel=RIGHT_OF: other=$.networks[0].layers.gp[2][0]$: x_align=LEFT: x_off=0: y_align=FRONT: y_off=0: space=3: };
      pos {x=4: y=0: z=0: };
      pos_abs {x=23: y=7: z=0: };
      pos2d {x=4: y=0: };
      pos2d_abs {x=23: y=7: };
      disp_scale=1;
      un_geom {x=1: y=1: n_not_xy=0: n=1: };
      unit_groups=1;
      virt_groups=1;
      gp_geom {x=1: y=1: n_not_xy=0: n=1: };
      gp_spc {x=1: y=1: };
      flat_geom {x=1: y=1: n_not_xy=0: n=1: };
      disp_geom {x=1: y=1: n_not_xy=0: n=4: };
      scaled_disp_geom {x=1: y=1: n_not_xy=0: n=1: };
      n_recv_prjns=3;
      n_send_prjns=2;
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @[0] {
	name="Marker_Fm_VTAp";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[3][1]$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs.gp[0][5]$: };
	con_type=LeabraCon;
	con_spec {type=MarkerConSpec: spec=$.networks[0].specs.gp[0][3]$: };
	recv_idx=0;
	send_idx=8;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_OUTPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[1] {
	name="Deep_Mod_Fm_BAAcqNegD2";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[1][4]$;
	spec {type=GpOneToOnePrjnSpec: spec=$.networks[0].specs.gp[0][7]$: };
	con_type=LeabraCon;
	con_spec {type=SendDeepModConSpec: spec=$.networks[0].specs.gp[0][2].children[2].children[0]$: };
	recv_idx=1;
	send_idx=3;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=LATERAL;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[2] {
	name="Fm_Input";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers[0]$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs.gp[0][5]$: };
	con_type=MSNCon;
	con_spec {type=MSNConSpec: spec=.networks[0].specs.gp[0][1].children[2].children[1]$$: };
	recv_idx=2;
	send_idx=7;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_INPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .networks[0].layers.gp[3][2].projections[5];
       Projection_Group @. = [1] = LeabraPrjn .networks[0].layers.gp[3][4].projections[4];
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=MSNUnitSpec: spec=.networks[0].specs.gp[0][0].children[9].children[2]$$: };
      dist {fm_input=1: fm_output=7: };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=".*/.*/.*/.*/Nucleus Accumbens NAc";
      voxel_fill_pct=1;
      acts_m_avg=0.25;
      acts_p_avg=0.25;
      acts_p_avg_eff=0.25;
      spec {type=LeabraLayerSpec: spec=$.networks[0].specs.gp[0][4].children[3]$: };
      adapt_gi=1;
      margin_low_thr=0.501;
      margin_med_thr=0.506;
      margin_hi_thr=0.508;
      margin_low_avg=0.3125;
      margin_med_avg=0.046875;
      margin_hi_avg=0.21875;
     };
     LeabraLayer @[4] {
      name="VSMatrixPosD1";
      desc=;
      flags=0;
      layer_type=HIDDEN;
      pos_rel {rel=BEHIND: other=$.networks[0].layers.gp[2][1]$: x_align=LEFT: x_off=0: y_align=FRONT: y_off=0: space=6: };
      pos {x=0: y=11: z=0: };
      pos_abs {x=19: y=18: z=0: };
      pos2d {x=0: y=11: };
      pos2d_abs {x=19: y=18: };
      disp_scale=1;
      un_geom {x=1: y=1: n_not_xy=0: n=1: };
      unit_groups=1;
      virt_groups=1;
      gp_geom {x=1: y=1: n_not_xy=0: n=1: };
      gp_spc {x=1: y=1: };
      flat_geom {x=1: y=1: n_not_xy=0: n=1: };
      disp_geom {x=1: y=1: n_not_xy=0: n=4: };
      scaled_disp_geom {x=1: y=1: n_not_xy=0: n=1: };
      n_recv_prjns=3;
      n_send_prjns=2;
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @[0] {
	name="Marker_Fm_VTAp";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[3][1]$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs.gp[0][5]$: };
	con_type=LeabraCon;
	con_spec {type=MarkerConSpec: spec=$.networks[0].specs.gp[0][3]$: };
	recv_idx=0;
	send_idx=9;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_OUTPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[1] {
	name="Deep_Mod_Fm_BAAcqPosD1";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[1][1]$;
	spec {type=GpOneToOnePrjnSpec: spec=$.networks[0].specs.gp[0][7]$: };
	con_type=LeabraCon;
	con_spec {type=SendDeepModConSpec: spec=$.networks[0].specs.gp[0][2].children[2].children[0]$: };
	recv_idx=1;
	send_idx=4;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=LATERAL;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[2] {
	name="Fm_Input";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers[0]$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs.gp[0][5]$: };
	con_type=MSNCon;
	con_spec {type=MSNConSpec: spec=$.networks[0].specs.gp[0][1].children[3]$: };
	recv_idx=2;
	send_idx=8;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_INPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .networks[0].layers.gp[2][5].projections[1];
       Projection_Group @. = [1] = LeabraPrjn .networks[0].layers.gp[3][2].projections[6];
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=MSNUnitSpec: spec=.networks[0].specs.gp[0][0].children[10]$$: };
      dist {fm_input=1: fm_output=7: };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=".*/.*/.*/.*/Nucleus Accumbens NAc";
      voxel_fill_pct=1;
      acts_m_avg=0.25;
      acts_p_avg=0.25;
      acts_p_avg_eff=0.25;
      spec {type=LeabraLayerSpec: spec=.networks[0].specs.gp[0][4].children[4]$$: };
      adapt_gi=1;
      margin_low_thr=0.501;
      margin_med_thr=0.506;
      margin_hi_thr=0.508;
      margin_low_avg=0.3125;
      margin_med_avg=0.046875;
      margin_hi_avg=0.21875;
     };
     LeabraLayer @[5] {
      name="VSMatrixPosD2";
      desc=;
      flags=0;
      layer_type=HIDDEN;
      pos_rel {rel=BEHIND: other=.networks[0].layers.gp[2][4]$$: x_align=LEFT: x_off=0: y_align=FRONT: y_off=0: space=3: };
      pos {x=0: y=15: z=0: };
      pos_abs {x=19: y=22: z=0: };
      pos2d {x=0: y=15: };
      pos2d_abs {x=19: y=22: };
      disp_scale=1;
      un_geom {x=1: y=1: n_not_xy=0: n=1: };
      unit_groups=1;
      virt_groups=1;
      gp_geom {x=1: y=1: n_not_xy=0: n=1: };
      gp_spc {x=1: y=1: };
      flat_geom {x=1: y=1: n_not_xy=0: n=1: };
      disp_geom {x=1: y=1: n_not_xy=0: n=4: };
      scaled_disp_geom {x=1: y=1: n_not_xy=0: n=1: };
      n_recv_prjns=3;
      n_send_prjns=1;
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @[0] {
	name="Marker_Fm_VTAp";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[3][1]$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs.gp[0][5]$: };
	con_type=LeabraCon;
	con_spec {type=MarkerConSpec: spec=$.networks[0].specs.gp[0][3]$: };
	recv_idx=0;
	send_idx=10;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_OUTPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[1] {
	name="Deep_Mod_Fm_VSMatrixPosD1";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[2][4]$;
	spec {type=GpOneToOnePrjnSpec: spec=$.networks[0].specs.gp[0][7]$: };
	con_type=LeabraCon;
	con_spec {type=SendDeepModConSpec: spec=.networks[0].specs.gp[0][2].children[3]$$: };
	recv_idx=1;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=LATERAL;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[2] {
	name="Fm_Input";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers[0]$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs.gp[0][5]$: };
	con_type=MSNCon;
	con_spec {type=MSNConSpec: spec=.networks[0].specs.gp[0][1].children[3].children[1]$$: };
	recv_idx=2;
	send_idx=9;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_INPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .networks[0].layers.gp[3][2].projections[7];
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=MSNUnitSpec: spec=.networks[0].specs.gp[0][0].children[10].children[0]$$: };
      dist {fm_input=1: fm_output=7: };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=".*/.*/.*/.*/Nucleus Accumbens NAc";
      voxel_fill_pct=1;
      acts_m_avg=0.25;
      acts_p_avg=0.25;
      acts_p_avg_eff=0.25;
      spec {type=LeabraLayerSpec: spec=$.networks[0].specs.gp[0][4].children[4]$: };
      adapt_gi=1;
      margin_low_thr=0.501;
      margin_med_thr=0.506;
      margin_hi_thr=0.508;
      margin_low_avg=0.3125;
      margin_med_avg=0.046875;
      margin_hi_avg=0.21875;
     };
     LeabraLayer @[6] {
      name="VSMatrixNegD2";
      desc=;
      flags=0;
      layer_type=HIDDEN;
      pos_rel {rel=RIGHT_OF: other=.networks[0].layers.gp[2][5]$$: x_align=LEFT: x_off=0: y_align=FRONT: y_off=0: space=3: };
      pos {x=4: y=15: z=0: };
      pos_abs {x=23: y=22: z=0: };
      pos2d {x=4: y=15: };
      pos2d_abs {x=23: y=22: };
      disp_scale=1;
      un_geom {x=1: y=1: n_not_xy=0: n=1: };
      unit_groups=1;
      virt_groups=1;
      gp_geom {x=1: y=1: n_not_xy=0: n=1: };
      gp_spc {x=1: y=1: };
      flat_geom {x=1: y=1: n_not_xy=0: n=1: };
      disp_geom {x=1: y=1: n_not_xy=0: n=4: };
      scaled_disp_geom {x=1: y=1: n_not_xy=0: n=1: };
      n_recv_prjns=3;
      n_send_prjns=2;
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @[0] {
	name="Marker_Fm_VTAp";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[3][1]$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs.gp[0][5]$: };
	con_type=LeabraCon;
	con_spec {type=MarkerConSpec: spec=$.networks[0].specs.gp[0][3]$: };
	recv_idx=0;
	send_idx=11;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_OUTPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[1] {
	name="Deep_Mod_Fm_BAAcqNegD2";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[1][4]$;
	spec {type=GpOneToOnePrjnSpec: spec=$.networks[0].specs.gp[0][7]$: };
	con_type=LeabraCon;
	con_spec {type=SendDeepModConSpec: spec=$.networks[0].specs.gp[0][2].children[2].children[0]$: };
	recv_idx=1;
	send_idx=4;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=LATERAL;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[2] {
	name="Fm_Input";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers[0]$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs.gp[0][5]$: };
	con_type=MSNCon;
	con_spec {type=MSNConSpec: spec=.networks[0].specs.gp[0][1].children[3].children[0]$$: };
	recv_idx=2;
	send_idx=10;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_INPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .networks[0].layers.gp[2][7].projections[1];
       Projection_Group @. = [1] = LeabraPrjn .networks[0].layers.gp[3][2].projections[8];
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=MSNUnitSpec: spec=.networks[0].specs.gp[0][0].children[10].children[1]$$: };
      dist {fm_input=1: fm_output=7: };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=".*/.*/.*/.*/Nucleus Accumbens NAc";
      voxel_fill_pct=1;
      acts_m_avg=0.25;
      acts_p_avg=0.25;
      acts_p_avg_eff=0.25;
      spec {type=LeabraLayerSpec: spec=$.networks[0].specs.gp[0][4].children[4]$: };
      adapt_gi=1;
      margin_low_thr=0.501;
      margin_med_thr=0.506;
      margin_hi_thr=0.508;
      margin_low_avg=0.3125;
      margin_med_avg=0.046875;
      margin_hi_avg=0.21875;
     };
     LeabraLayer @[7] {
      name="VSMatrixNegD1";
      desc=;
      flags=0;
      layer_type=HIDDEN;
      pos_rel {rel=RIGHT_OF: other=$.networks[0].layers.gp[2][4]$: x_align=LEFT: x_off=0: y_align=FRONT: y_off=0: space=3: };
      pos {x=4: y=11: z=0: };
      pos_abs {x=23: y=18: z=0: };
      pos2d {x=4: y=11: };
      pos2d_abs {x=23: y=18: };
      disp_scale=1;
      un_geom {x=1: y=1: n_not_xy=0: n=1: };
      unit_groups=1;
      virt_groups=1;
      gp_geom {x=1: y=1: n_not_xy=0: n=1: };
      gp_spc {x=1: y=1: };
      flat_geom {x=1: y=1: n_not_xy=0: n=1: };
      disp_geom {x=1: y=1: n_not_xy=0: n=4: };
      scaled_disp_geom {x=1: y=1: n_not_xy=0: n=1: };
      n_recv_prjns=3;
      n_send_prjns=1;
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @[0] {
	name="Marker_Fm_VTAp";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[3][1]$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs.gp[0][5]$: };
	con_type=LeabraCon;
	con_spec {type=MarkerConSpec: spec=$.networks[0].specs.gp[0][3]$: };
	recv_idx=0;
	send_idx=12;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_OUTPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[1] {
	name="Deep_Mod_Fm_VSMatrixNegD2";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=.networks[0].layers.gp[2][6]$$;
	spec {type=GpOneToOnePrjnSpec: spec=$.networks[0].specs.gp[0][7]$: };
	con_type=LeabraCon;
	con_spec {type=SendDeepModConSpec: spec=$.networks[0].specs.gp[0][2].children[3]$: };
	recv_idx=1;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=LATERAL;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[2] {
	name="Fm_Input";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers[0]$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs.gp[0][5]$: };
	con_type=MSNCon;
	con_spec {type=MSNConSpec: spec=.networks[0].specs.gp[0][1].children[3].children[2]$$: };
	recv_idx=2;
	send_idx=11;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_INPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .networks[0].layers.gp[3][2].projections[9];
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=MSNUnitSpec: spec=.networks[0].specs.gp[0][0].children[10].children[2]$$: };
      dist {fm_input=1: fm_output=7: };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=".*/.*/.*/.*/Nucleus Accumbens NAc";
      voxel_fill_pct=1;
      acts_m_avg=0.25;
      acts_p_avg=0.25;
      acts_p_avg_eff=0.25;
      spec {type=LeabraLayerSpec: spec=$.networks[0].specs.gp[0][4].children[4]$: };
      adapt_gi=1;
      margin_low_thr=0.501;
      margin_med_thr=0.506;
      margin_hi_thr=0.508;
      margin_low_avg=0.3125;
      margin_med_avg=0.046875;
      margin_hi_avg=0.21875;
     };
    };
    Layer_Group @.gp[3] {
     name="PVLV_DA";
     el_typ=LeabraLayer;
     el_def=0;
     pos {x=19: y=0: z=0: };
     pos2d {x=19: y=0: };
     max_disp_size {x=9: y=5: z=1: };
     max_disp_size2d {x=9: y=5: };
     LeabraLayer @[0] {
      name="PPTg_p";
      desc=;
      flags=0;
      layer_type=HIDDEN;
      pos_rel {rel=RIGHT_OF: other=$.networks[0].layers.gp[0][1]$: x_align=LEFT: x_off=0: y_align=FRONT: y_off=0: space=3: };
      pos {x=0: y=0: z=0: };
      pos_abs {x=19: y=0: z=0: };
      pos2d {x=0: y=0: };
      pos2d_abs {x=19: y=0: };
      disp_scale=1;
      un_geom {x=1: y=1: n_not_xy=0: n=1: };
      unit_groups=0;
      virt_groups=1;
      gp_geom {x=1: y=1: n_not_xy=0: n=1: };
      gp_spc {x=1: y=1: };
      flat_geom {x=1: y=1: n_not_xy=0: n=1: };
      disp_geom {x=1: y=1: n_not_xy=0: n=1: };
      scaled_disp_geom {x=1: y=1: n_not_xy=0: n=1: };
      n_recv_prjns=1;
      n_send_prjns=1;
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @[0] {
	name="Fm_CAPos";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[1][3]$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs.gp[0][5]$: };
	con_type=LeabraCon;
	con_spec {type=LeabraConSpec: spec=$.networks[0].specs.gp[0][2]$: };
	recv_idx=0;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_INPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .networks[0].layers.gp[3][1].projections[0];
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=PPTgUnitSpec: spec=$.networks[0].specs.gp[0][0].children[2]$: };
      dist {fm_input=4: fm_output=6: };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=".*/.*/.*/.*/Ventral Tegmental Area VTA";
      voxel_fill_pct=1;
      acts_m_avg=0.25;
      acts_p_avg=0.25;
      acts_p_avg_eff=0.25;
      spec {type=LeabraLayerSpec: spec=.networks[0].specs.gp[0][4].children[1]$$: };
      adapt_gi=1;
      margin_low_thr=0.501;
      margin_med_thr=0.506;
      margin_hi_thr=0.508;
      margin_low_avg=0.3125;
      margin_med_avg=0.046875;
      margin_hi_avg=0.21875;
     };
     LeabraLayer @[1] {
      name="VTAp";
      desc=;
      flags=0;
      layer_type=HIDDEN;
      pos_rel {rel=RIGHT_OF: other=$.networks[0].layers.gp[3][0]$: x_align=LEFT: x_off=0: y_align=FRONT: y_off=0: space=3: };
      pos {x=4: y=0: z=0: };
      pos_abs {x=23: y=0: z=0: };
      pos2d {x=4: y=0: };
      pos2d_abs {x=23: y=0: };
      disp_scale=1;
      un_geom {x=1: y=1: n_not_xy=0: n=1: };
      unit_groups=0;
      virt_groups=1;
      gp_geom {x=1: y=1: n_not_xy=0: n=1: };
      gp_spc {x=1: y=1: };
      flat_geom {x=1: y=1: n_not_xy=0: n=1: };
      disp_geom {x=1: y=1: n_not_xy=0: n=1: };
      scaled_disp_geom {x=1: y=1: n_not_xy=0: n=1: };
      n_recv_prjns=5;
      n_send_prjns=15;
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @[0] {
	name="Marker_Fm_PPTg_p";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[3][0]$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs.gp[0][5]$: };
	con_type=LeabraCon;
	con_spec {type=MarkerConSpec: spec=$.networks[0].specs.gp[0][3]$: };
	recv_idx=0;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=LATERAL;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[1] {
	name="Marker_Fm_LHbRMTg";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=.networks[0].layers.gp[3][2]$$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs.gp[0][5]$: };
	con_type=LeabraCon;
	con_spec {type=MarkerConSpec: spec=$.networks[0].specs.gp[0][3]$: };
	recv_idx=1;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_INPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[2] {
	name="Marker_Fm_PosPV";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[0][0]$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs.gp[0][5]$: };
	con_type=LeabraCon;
	con_spec {type=MarkerConSpec: spec=$.networks[0].specs.gp[0][3]$: };
	recv_idx=2;
	send_idx=2;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=LATERAL;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[3] {
	name="Marker_Fm_VSPatchPosD1";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[2][0]$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs.gp[0][5]$: };
	con_type=LeabraCon;
	con_spec {type=MarkerConSpec: spec=$.networks[0].specs.gp[0][3]$: };
	recv_idx=3;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_INPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[4] {
	name="Marker_Fm_VSPatchPosD2";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[2][1]$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs.gp[0][5]$: };
	con_type=LeabraCon;
	con_spec {type=MarkerConSpec: spec=$.networks[0].specs.gp[0][3]$: };
	recv_idx=4;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_INPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .networks[0].layers.gp[1][0].projections[0];
       Projection_Group @. = [1] = LeabraPrjn .networks[0].layers.gp[1][1].projections[1];
       Projection_Group @. = [2] = LeabraPrjn .networks[0].layers.gp[1][2].projections[1];
       Projection_Group @. = [3] = LeabraPrjn .networks[0].layers.gp[1][4].projections[1];
       Projection_Group @. = [4] = LeabraPrjn .networks[0].layers.gp[1][5].projections[2];
       Projection_Group @. = [5] = LeabraPrjn .networks[0].layers.gp[2][0].projections[0];
       Projection_Group @. = [6] = LeabraPrjn .networks[0].layers.gp[2][1].projections[0];
       Projection_Group @. = [7] = LeabraPrjn .networks[0].layers.gp[2][2].projections[0];
       Projection_Group @. = [8] = LeabraPrjn .networks[0].layers.gp[2][3].projections[0];
       Projection_Group @. = [9] = LeabraPrjn .networks[0].layers.gp[2][4].projections[0];
       Projection_Group @. = [10] = LeabraPrjn .networks[0].layers.gp[2][5].projections[0];
       Projection_Group @. = [11] = LeabraPrjn .networks[0].layers.gp[2][6].projections[0];
       Projection_Group @. = [12] = LeabraPrjn .networks[0].layers.gp[2][7].projections[0];
       Projection_Group @. = [13] = LeabraPrjn .networks[0].layers.gp[4][0].projections[1];
       Projection_Group @. = [14] = LeabraPrjn .networks[0].layers.gp[4][1].projections[1];
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=VTAUnitSpec: spec=$.networks[0].specs.gp[0][0].children[3]$: };
      dist {fm_input=2: fm_output=5: };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=".*/.*/.*/.*/Ventral Tegmental Area VTA";
      voxel_fill_pct=1;
      acts_m_avg=0.25;
      acts_p_avg=0.25;
      acts_p_avg_eff=0.25;
      spec {type=LeabraLayerSpec: spec=$.networks[0].specs.gp[0][4].children[1]$: };
      adapt_gi=1;
      margin_low_thr=0.501;
      margin_med_thr=0.506;
      margin_hi_thr=0.508;
      margin_low_avg=0.3125;
      margin_med_avg=0.046875;
      margin_hi_avg=0.21875;
     };
     LeabraLayer @[2] {
      name="LHbRMTg";
      desc=;
      flags=0;
      layer_type=HIDDEN;
      pos_rel {rel=RIGHT_OF: other=$.networks[0].layers.gp[3][1]$: x_align=LEFT: x_off=0: y_align=FRONT: y_off=0: space=3: };
      pos {x=8: y=0: z=0: };
      pos_abs {x=27: y=0: z=0: };
      pos2d {x=8: y=0: };
      pos2d_abs {x=27: y=0: };
      disp_scale=1;
      un_geom {x=1: y=1: n_not_xy=0: n=1: };
      unit_groups=0;
      virt_groups=1;
      gp_geom {x=1: y=1: n_not_xy=0: n=1: };
      gp_spc {x=1: y=1: };
      flat_geom {x=1: y=1: n_not_xy=0: n=1: };
      disp_geom {x=1: y=1: n_not_xy=0: n=1: };
      scaled_disp_geom {x=1: y=1: n_not_xy=0: n=1: };
      n_recv_prjns=10;
      n_send_prjns=2;
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @[0] {
	name="Marker_Fm_PosPV";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[0][0]$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs.gp[0][5]$: };
	con_type=LeabraCon;
	con_spec {type=MarkerConSpec: spec=$.networks[0].specs.gp[0][3]$: };
	recv_idx=0;
	send_idx=3;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=LATERAL;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[1] {
	name="Marker_Fm_NegPV";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[0][1]$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs.gp[0][5]$: };
	con_type=LeabraCon;
	con_spec {type=MarkerConSpec: spec=$.networks[0].specs.gp[0][3]$: };
	recv_idx=1;
	send_idx=3;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_INPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[2] {
	name="Marker_Fm_VSPatchPosD1";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[2][0]$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs.gp[0][5]$: };
	con_type=LeabraCon;
	con_spec {type=MarkerConSpec: spec=$.networks[0].specs.gp[0][3]$: };
	recv_idx=2;
	send_idx=1;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=LATERAL;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[3] {
	name="Marker_Fm_VSPatchPosD2";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[2][1]$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs.gp[0][5]$: };
	con_type=LeabraCon;
	con_spec {type=MarkerConSpec: spec=$.networks[0].specs.gp[0][3]$: };
	recv_idx=3;
	send_idx=1;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=LATERAL;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[4] {
	name="Marker_Fm_VSPatchNegD2";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=.networks[0].layers.gp[2][2]$$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs.gp[0][5]$: };
	con_type=LeabraCon;
	con_spec {type=MarkerConSpec: spec=$.networks[0].specs.gp[0][3]$: };
	recv_idx=4;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=LATERAL;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[5] {
	name="Marker_Fm_VSPatchNegD1";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=.networks[0].layers.gp[2][3]$$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs.gp[0][5]$: };
	con_type=LeabraCon;
	con_spec {type=MarkerConSpec: spec=$.networks[0].specs.gp[0][3]$: };
	recv_idx=5;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=LATERAL;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[6] {
	name="Marker_Fm_VSMatrixPosD1";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[2][4]$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs.gp[0][5]$: };
	con_type=LeabraCon;
	con_spec {type=MarkerConSpec: spec=$.networks[0].specs.gp[0][3]$: };
	recv_idx=6;
	send_idx=1;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=LATERAL;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[7] {
	name="Marker_Fm_VSMatrixPosD2";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[2][5]$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs.gp[0][5]$: };
	con_type=LeabraCon;
	con_spec {type=MarkerConSpec: spec=$.networks[0].specs.gp[0][3]$: };
	recv_idx=7;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=LATERAL;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[8] {
	name="Marker_Fm_VSMatrixNegD2";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[2][6]$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs.gp[0][5]$: };
	con_type=LeabraCon;
	con_spec {type=MarkerConSpec: spec=$.networks[0].specs.gp[0][3]$: };
	recv_idx=8;
	send_idx=1;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=LATERAL;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[9] {
	name="Marker_Fm_VSMatrixNegD1";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=.networks[0].layers.gp[2][7]$$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs.gp[0][5]$: };
	con_type=LeabraCon;
	con_spec {type=MarkerConSpec: spec=$.networks[0].specs.gp[0][3]$: };
	recv_idx=9;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=LATERAL;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .networks[0].layers.gp[3][1].projections[1];
       Projection_Group @. = [1] = LeabraPrjn .networks[0].layers.gp[3][4].projections[1];
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=LHbRMTgUnitSpec: spec=$.networks[0].specs.gp[0][0].children[1]$: };
      dist {fm_input=1: fm_output=6: };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=".*/.*/.*/.*/Lateral Habenula LHB";
      voxel_fill_pct=1;
      acts_m_avg=0.25;
      acts_p_avg=0.25;
      acts_p_avg_eff=0.25;
      spec {type=LeabraLayerSpec: spec=$.networks[0].specs.gp[0][4].children[1]$: };
      adapt_gi=1;
      margin_low_thr=0.501;
      margin_med_thr=0.506;
      margin_hi_thr=0.508;
      margin_low_avg=0.3125;
      margin_med_avg=0.046875;
      margin_hi_avg=0.21875;
     };
     LeabraLayer @[3] {
      name="PPTg_n";
      desc=;
      flags=0;
      layer_type=HIDDEN;
      pos_rel {rel=BEHIND: other=$.networks[0].layers.gp[3][0]$: x_align=LEFT: x_off=0: y_align=FRONT: y_off=0: space=3: };
      pos {x=0: y=4: z=0: };
      pos_abs {x=19: y=4: z=0: };
      pos2d {x=0: y=4: };
      pos2d_abs {x=19: y=4: };
      disp_scale=1;
      un_geom {x=1: y=1: n_not_xy=0: n=1: };
      unit_groups=0;
      virt_groups=1;
      gp_geom {x=1: y=1: n_not_xy=0: n=1: };
      gp_spc {x=1: y=1: };
      flat_geom {x=1: y=1: n_not_xy=0: n=1: };
      disp_geom {x=1: y=1: n_not_xy=0: n=1: };
      scaled_disp_geom {x=1: y=1: n_not_xy=0: n=1: };
      n_recv_prjns=1;
      n_send_prjns=1;
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @[0] {
	name="Fm_CANeg";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[1][6]$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs.gp[0][5]$: };
	con_type=LeabraCon;
	con_spec {type=LeabraConSpec: spec=$.networks[0].specs.gp[0][2]$: };
	recv_idx=0;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_INPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .networks[0].layers.gp[3][4].projections[0];
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=PPTgUnitSpec: spec=$.networks[0].specs.gp[0][0].children[2]$: };
      dist {fm_input=2: fm_output=10: };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=".*/.*/.*/.*/Ventral Tegmental Area VTA";
      voxel_fill_pct=1;
      acts_m_avg=0.25;
      acts_p_avg=0.25;
      acts_p_avg_eff=0.25;
      spec {type=LeabraLayerSpec: spec=$.networks[0].specs.gp[0][4].children[1]$: };
      adapt_gi=1;
      margin_low_thr=0.501;
      margin_med_thr=0.506;
      margin_hi_thr=0.508;
      margin_low_avg=0.3125;
      margin_med_avg=0.046875;
      margin_hi_avg=0.21875;
     };
     LeabraLayer @[4] {
      name="VTAn";
      desc=;
      flags=0;
      layer_type=HIDDEN;
      pos_rel {rel=RIGHT_OF: other=.networks[0].layers.gp[3][3]$$: x_align=LEFT: x_off=0: y_align=FRONT: y_off=0: space=3: };
      pos {x=4: y=4: z=0: };
      pos_abs {x=23: y=4: z=0: };
      pos2d {x=4: y=4: };
      pos2d_abs {x=23: y=4: };
      disp_scale=1;
      un_geom {x=1: y=1: n_not_xy=0: n=1: };
      unit_groups=0;
      virt_groups=1;
      gp_geom {x=1: y=1: n_not_xy=0: n=1: };
      gp_spc {x=1: y=1: };
      flat_geom {x=1: y=1: n_not_xy=0: n=1: };
      disp_geom {x=1: y=1: n_not_xy=0: n=1: };
      scaled_disp_geom {x=1: y=1: n_not_xy=0: n=1: };
      n_recv_prjns=5;
      n_send_prjns=1;
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @[0] {
	name="Marker_Fm_PPTg_n";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[3][3]$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs.gp[0][5]$: };
	con_type=LeabraCon;
	con_spec {type=MarkerConSpec: spec=$.networks[0].specs.gp[0][3]$: };
	recv_idx=0;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=LATERAL;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[1] {
	name="Marker_Fm_LHbRMTg";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[3][2]$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs.gp[0][5]$: };
	con_type=LeabraCon;
	con_spec {type=MarkerConSpec: spec=$.networks[0].specs.gp[0][3]$: };
	recv_idx=1;
	send_idx=1;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_OUTPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[2] {
	name="Marker_Fm_NegPV";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[0][1]$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs.gp[0][5]$: };
	con_type=LeabraCon;
	con_spec {type=MarkerConSpec: spec=$.networks[0].specs.gp[0][3]$: };
	recv_idx=2;
	send_idx=4;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_INPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[3] {
	name="Marker_Fm_VSPatchNegD2";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[2][2]$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs.gp[0][5]$: };
	con_type=LeabraCon;
	con_spec {type=MarkerConSpec: spec=$.networks[0].specs.gp[0][3]$: };
	recv_idx=3;
	send_idx=1;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_OUTPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[4] {
	name="Marker_Fm_VSPatchNegD1";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[2][3]$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs.gp[0][5]$: };
	con_type=LeabraCon;
	con_spec {type=MarkerConSpec: spec=$.networks[0].specs.gp[0][3]$: };
	recv_idx=4;
	send_idx=1;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_OUTPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .networks[0].layers.gp[1][0].projections[1];
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=VTAUnitSpec: spec=.networks[0].specs.gp[0][0].children[3].children[0]$$: };
      dist {fm_input=1: fm_output=9: };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=".*/.*/.*/.*/Ventral Tegmental Area VTA";
      voxel_fill_pct=1;
      acts_m_avg=0.25;
      acts_p_avg=0.25;
      acts_p_avg_eff=0.25;
      spec {type=LeabraLayerSpec: spec=$.networks[0].specs.gp[0][4].children[1]$: };
      adapt_gi=1;
      margin_low_thr=0.501;
      margin_med_thr=0.506;
      margin_hi_thr=0.508;
      margin_low_avg=0.3125;
      margin_med_avg=0.046875;
      margin_hi_avg=0.21875;
     };
     LeabraLayer @[5] {
      name="DRN";
      desc=;
      flags=0;
      layer_type=HIDDEN;
      pos_rel {rel=RIGHT_OF: other=$.networks[0].layers.gp[3][4]$: x_align=LEFT: x_off=0: y_align=FRONT: y_off=0: space=3: };
      pos {x=8: y=4: z=0: };
      pos_abs {x=27: y=4: z=0: };
      pos2d {x=8: y=4: };
      pos2d_abs {x=27: y=4: };
      disp_scale=1;
      un_geom {x=1: y=1: n_not_xy=0: n=1: };
      unit_groups=0;
      virt_groups=1;
      gp_geom {x=1: y=1: n_not_xy=0: n=1: };
      gp_spc {x=1: y=1: };
      flat_geom {x=1: y=1: n_not_xy=0: n=1: };
      disp_geom {x=1: y=1: n_not_xy=0: n=1: };
      scaled_disp_geom {x=1: y=1: n_not_xy=0: n=1: };
      n_recv_prjns=2;
      n_send_prjns=0;
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @[0] {
	name="Marker_Fm_NegPV";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[0][1]$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs.gp[0][5]$: };
	con_type=LeabraCon;
	con_spec {type=MarkerConSpec: spec=$.networks[0].specs.gp[0][3]$: };
	recv_idx=0;
	send_idx=5;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_INPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[1] {
	name="Marker_Fm_PosPV";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[0][0]$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs.gp[0][5]$: };
	con_type=LeabraCon;
	con_spec {type=MarkerConSpec: spec=$.networks[0].specs.gp[0][3]$: };
	recv_idx=1;
	send_idx=4;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=LATERAL;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=DRNUnitSpec: spec=$.networks[0].specs.gp[0][0].children[4]$: };
      dist {fm_input=1: fm_output=-1: };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=".*/.*/.*/.*/Ventral Tegmental Area VTA";
      voxel_fill_pct=1;
      acts_m_avg=0.25;
      acts_p_avg=0.25;
      acts_p_avg_eff=0.25;
      spec {type=LeabraLayerSpec: spec=$.networks[0].specs.gp[0][4].children[1]$: };
      adapt_gi=1;
      margin_low_thr=0.501;
      margin_med_thr=0.506;
      margin_hi_thr=0.508;
      margin_low_avg=0.3125;
      margin_med_avg=0.046875;
      margin_hi_avg=0.21875;
     };
    };
    Layer_Group @.gp[4] {
     name="PBWM";
     el_typ=LeabraLayer;
     el_def=0;
     pos {x=32: y=0: z=0: };
     pos2d {x=32: y=0: };
     max_disp_size {x=35: y=32: z=2: };
     max_disp_size2d {x=35: y=56: };
     LeabraLayer @[0] {
      name="MatrixGo";
      desc=;
      flags=0;
      layer_type=HIDDEN;
      pos_rel {rel=RIGHT_OF: other=$.networks[0].layers.gp[3][2]$: x_align=LEFT: x_off=0: y_align=FRONT: y_off=0: space=4: };
      pos {x=0: y=0: z=0: };
      pos_abs {x=32: y=0: z=0: };
      pos2d {x=0: y=0: };
      pos2d_abs {x=32: y=0: };
      disp_scale=1;
      un_geom {x=4: y=4: n_not_xy=0: n=16: };
      unit_groups=1;
      virt_groups=1;
      gp_geom {x=4: y=2: n_not_xy=0: n=8: };
      gp_spc {x=1: y=1: };
      flat_geom {x=16: y=8: n_not_xy=0: n=128: };
      disp_geom {x=19: y=9: n_not_xy=0: n=200: };
      scaled_disp_geom {x=19: y=9: n_not_xy=0: n=1: };
      n_recv_prjns=8;
      n_send_prjns=1;
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @[0] {
	name="Marker_Fm_GPi";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=.networks[0].layers.gp[4][5]$$;
	spec {type=GpOneToOnePrjnSpec: spec=.networks[0].specs.gp[1][7]$$: };
	con_type=LeabraCon;
	con_spec {type=MarkerConSpec: spec=.networks[0].specs.gp[1][3].children[1]$$: };
	recv_idx=0;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_OUTPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[1] {
	name="Marker_Fm_VTAp";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[3][1]$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs.gp[1][5]$: };
	con_type=LeabraCon;
	con_spec {type=MarkerConSpec: spec=$.networks[0].specs.gp[1][3].children[1]$: };
	recv_idx=1;
	send_idx=13;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=LATERAL;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[2] {
	name="Marker_Fm_MatrixTAN";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=.networks[0].layers.gp[4][2]$$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs.gp[1][5]$: };
	con_type=LeabraCon;
	con_spec {type=MarkerConSpec: spec=$.networks[0].specs.gp[1][3].children[1]$: };
	recv_idx=2;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=LATERAL;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[3] {
	name="Marker_Fm_PFCmnt_patch";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=.networks[0].layers.gp[4][3]$$;
	spec {type=BgPfcPrjnSpec: spec=.networks[0].specs.gp[1][8]$$: };
	con_type=LeabraCon;
	con_spec {type=MarkerConSpec: spec=$.networks[0].specs.gp[1][3].children[1]$: };
	recv_idx=3;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=LATERAL;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[4] {
	name="Deep_Raw_Fm_GPeNoGo";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=.networks[0].layers.gp[4][4]$$;
	spec {type=GpOneToOnePrjnSpec: spec=$.networks[0].specs.gp[1][7]$: };
	con_type=LeabraCon;
	con_spec {type=SendDeepRawConSpec: spec=.networks[0].specs.gp[1][3].children[4]$$: };
	recv_idx=4;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=LATERAL;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[5] {
	name="Fm_PFCmnt_deep";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[4][7]$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs.gp[1][5]$: };
	con_type=MSNCon;
	con_spec {type=MSNConSpec: spec=$.networks[0].specs.gp[1][1].children[0].children[1]$: };
	recv_idx=5;
	send_idx=1;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_OUTPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[6] {
	name="Fm_PFCmnt";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=.networks[0].layers.gp[4][6]$$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs.gp[1][5]$: };
	con_type=MSNCon;
	con_spec {type=MSNConSpec: spec=$.networks[0].specs.gp[1][1].children[0].children[1]$: };
	recv_idx=6;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=LATERAL;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[7] {
	name="Fm_Input";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers[0]$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs.gp[1][5]$: };
	con_type=MSNCon;
	con_spec {type=MSNConSpec: spec=$.networks[0].specs.gp[1][1].children[0]$: };
	recv_idx=7;
	send_idx=12;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_INPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .networks[0].layers.gp[4][5].projections[0];
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=MSNUnitSpec: spec=$.networks[0].specs.gp[1][0].children[0]$: };
      dist {fm_input=1: fm_output=4: };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=".*/.*/.*/.*/Caudate Body";
      voxel_fill_pct=1;
      acts_m_avg=0.05;
      acts_p_avg=0.05;
      acts_p_avg_eff=0.05;
      spec {type=LeabraLayerSpec: spec=$.networks[0].specs.gp[1][4].children[0]$: };
      adapt_gi=1;
      margin_low_thr=0.501;
      margin_med_thr=0.506;
      margin_hi_thr=0.508;
      margin_low_avg=0.0625;
      margin_med_avg=0.009375;
      margin_hi_avg=0.04375;
     };
     LeabraLayer @[1] {
      name="MatrixNoGo";
      desc=;
      flags=0;
      layer_type=HIDDEN;
      pos_rel {rel=BEHIND: other=.networks[0].layers.gp[4][0]$$: x_align=LEFT: x_off=0: y_align=FRONT: y_off=0: space=2: };
      pos {x=0: y=11: z=0: };
      pos_abs {x=32: y=11: z=0: };
      pos2d {x=0: y=11: };
      pos2d_abs {x=32: y=11: };
      disp_scale=1;
      un_geom {x=4: y=4: n_not_xy=0: n=16: };
      unit_groups=1;
      virt_groups=1;
      gp_geom {x=4: y=2: n_not_xy=0: n=8: };
      gp_spc {x=1: y=1: };
      flat_geom {x=16: y=8: n_not_xy=0: n=128: };
      disp_geom {x=19: y=9: n_not_xy=0: n=200: };
      scaled_disp_geom {x=19: y=9: n_not_xy=0: n=1: };
      n_recv_prjns=8;
      n_send_prjns=1;
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @[0] {
	name="Marker_Fm_GPi";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[4][5]$;
	spec {type=GpOneToOnePrjnSpec: spec=$.networks[0].specs.gp[1][7]$: };
	con_type=LeabraCon;
	con_spec {type=MarkerConSpec: spec=$.networks[0].specs.gp[1][3].children[1]$: };
	recv_idx=0;
	send_idx=1;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_OUTPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[1] {
	name="Marker_Fm_VTAp";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[3][1]$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs.gp[1][5]$: };
	con_type=LeabraCon;
	con_spec {type=MarkerConSpec: spec=$.networks[0].specs.gp[1][3].children[1]$: };
	recv_idx=1;
	send_idx=14;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=LATERAL;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[2] {
	name="Marker_Fm_MatrixTAN";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[4][2]$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs.gp[1][5]$: };
	con_type=LeabraCon;
	con_spec {type=MarkerConSpec: spec=$.networks[0].specs.gp[1][3].children[1]$: };
	recv_idx=2;
	send_idx=1;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=LATERAL;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[3] {
	name="Marker_Fm_PFCmnt_patch";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[4][3]$;
	spec {type=BgPfcPrjnSpec: spec=$.networks[0].specs.gp[1][8]$: };
	con_type=LeabraCon;
	con_spec {type=MarkerConSpec: spec=$.networks[0].specs.gp[1][3].children[1]$: };
	recv_idx=3;
	send_idx=1;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=LATERAL;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[4] {
	name="Deep_Raw_Fm_GPeNoGo";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[4][4]$;
	spec {type=GpOneToOnePrjnSpec: spec=$.networks[0].specs.gp[1][7]$: };
	con_type=LeabraCon;
	con_spec {type=SendDeepRawConSpec: spec=$.networks[0].specs.gp[1][3].children[4]$: };
	recv_idx=4;
	send_idx=1;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_OUTPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[5] {
	name="Fm_PFCmnt_deep";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[4][7]$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs.gp[1][5]$: };
	con_type=MSNCon;
	con_spec {type=MSNConSpec: spec=$.networks[0].specs.gp[1][1].children[0].children[1]$: };
	recv_idx=5;
	send_idx=2;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_OUTPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[6] {
	name="Fm_PFCmnt";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[4][6]$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs.gp[1][5]$: };
	con_type=MSNCon;
	con_spec {type=MSNConSpec: spec=$.networks[0].specs.gp[1][1].children[0].children[1]$: };
	recv_idx=6;
	send_idx=1;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_OUTPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[7] {
	name="Fm_Input";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers[0]$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs.gp[1][5]$: };
	con_type=MSNCon;
	con_spec {type=MSNConSpec: spec=.networks[0].specs.gp[1][1].children[0].children[0]$$: };
	recv_idx=7;
	send_idx=13;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_INPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .networks[0].layers.gp[4][4].projections[0];
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=MSNUnitSpec: spec=.networks[0].specs.gp[1][0].children[0].children[0]$$: };
      dist {fm_input=1: fm_output=5: };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=".*/.*/.*/.*/Caudate Body";
      voxel_fill_pct=1;
      acts_m_avg=0.05;
      acts_p_avg=0.05;
      acts_p_avg_eff=0.05;
      spec {type=LeabraLayerSpec: spec=$.networks[0].specs.gp[1][4].children[0]$: };
      adapt_gi=1;
      margin_low_thr=0.501;
      margin_med_thr=0.506;
      margin_hi_thr=0.508;
      margin_low_avg=0.0625;
      margin_med_avg=0.009375;
      margin_hi_avg=0.04375;
     };
     LeabraLayer @[2] {
      name="MatrixTAN";
      desc=;
      flags=0;
      layer_type=HIDDEN;
      pos_rel {rel=BEHIND: other=.networks[0].layers.gp[4][1]$$: x_align=LEFT: x_off=0: y_align=FRONT: y_off=0: space=2: };
      pos {x=0: y=22: z=0: };
      pos_abs {x=32: y=22: z=0: };
      pos2d {x=0: y=22: };
      pos2d_abs {x=32: y=22: };
      disp_scale=1;
      un_geom {x=1: y=1: n_not_xy=0: n=1: };
      unit_groups=0;
      virt_groups=1;
      gp_geom {x=1: y=1: n_not_xy=0: n=1: };
      gp_spc {x=1: y=1: };
      flat_geom {x=1: y=1: n_not_xy=0: n=1: };
      disp_geom {x=1: y=1: n_not_xy=0: n=1: };
      scaled_disp_geom {x=1: y=1: n_not_xy=0: n=1: };
      n_recv_prjns=2;
      n_send_prjns=2;
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @[0] {
	name="Marker_Fm_PosPV";
	off=1;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[0][0]$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs.gp[1][5]$: };
	con_type=LeabraCon;
	con_spec {type=MarkerConSpec: spec=$.networks[0].specs.gp[1][3].children[1]$: };
	recv_idx=-1;
	send_idx=-1;
	recv_n=1;
	send_n=1;
	projected=0;
	dir_fixed=0;
	direction=DIR_UNKNOWN;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[1] {
	name="Marker_Fm_RewTarg";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[0][4]$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs.gp[1][5]$: };
	con_type=LeabraCon;
	con_spec {type=MarkerConSpec: spec=$.networks[0].specs.gp[1][3].children[1]$: };
	recv_idx=0;
	send_idx=1;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_INPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[2] {
	name="Fm_Input";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers[0]$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs.gp[1][5]$: };
	con_type=LeabraCon;
	con_spec {type=LeabraDeltaConSpec: spec=.networks[0].specs.gp[1][1].children[1]$$: };
	recv_idx=1;
	send_idx=14;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_INPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .networks[0].layers.gp[4][0].projections[2];
       Projection_Group @. = [1] = LeabraPrjn .networks[0].layers.gp[4][1].projections[2];
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=TANUnitSpec: spec=.networks[0].specs.gp[0][0].children[5]$$: };
      dist {fm_input=1: fm_output=5: };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=;
      voxel_fill_pct=1;
      acts_m_avg=0.25;
      acts_p_avg=0.25;
      acts_p_avg_eff=0.25;
      spec {type=LeabraLayerSpec: spec=$.networks[0].specs.gp[0][4].children[0]$: };
      adapt_gi=1;
      margin_low_thr=0.501;
      margin_med_thr=0.506;
      margin_hi_thr=0.508;
      margin_low_avg=0.3125;
      margin_med_avg=0.046875;
      margin_hi_avg=0.21875;
     };
     LeabraLayer @[3] {
      name="PFCmnt_patch";
      desc=;
      flags=0;
      layer_type=HIDDEN;
      pos_rel {rel=BEHIND: other=$.networks[0].layers.gp[4][1]$: x_align=RIGHT: x_off=0: y_align=FRONT: y_off=0: space=2: };
      pos {x=16: y=22: z=0: };
      pos_abs {x=48: y=22: z=0: };
      pos2d {x=16: y=22: };
      pos2d_abs {x=48: y=22: };
      disp_scale=1;
      un_geom {x=1: y=1: n_not_xy=0: n=1: };
      unit_groups=1;
      virt_groups=1;
      gp_geom {x=2: y=2: n_not_xy=0: n=4: };
      gp_spc {x=1: y=1: };
      flat_geom {x=2: y=2: n_not_xy=0: n=4: };
      disp_geom {x=3: y=3: n_not_xy=0: n=16: };
      scaled_disp_geom {x=3: y=3: n_not_xy=0: n=1: };
      n_recv_prjns=1;
      n_send_prjns=2;
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @[0] {
	name="Fm_PFCmnt_deep";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[4][7]$;
	spec {type=GpOneToOnePrjnSpec: spec=$.networks[0].specs.gp[1][7]$: };
	con_type=LeabraCon;
	con_spec {type=LeabraConSpec: spec=.networks[0].specs.gp[1][3]$$: };
	recv_idx=0;
	send_idx=3;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_INPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .networks[0].layers.gp[4][0].projections[3];
       Projection_Group @. = [1] = LeabraPrjn .networks[0].layers.gp[4][1].projections[3];
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=PatchUnitSpec: spec=$.networks[0].specs.gp[1][0].children[3]$: };
      dist {fm_input=3: fm_output=5: };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=".*/.*/.*/.*/Caudate Body";
      voxel_fill_pct=1;
      acts_m_avg=0.2;
      acts_p_avg=0.2;
      acts_p_avg_eff=0.2;
      spec {type=LeabraLayerSpec: spec=.networks[0].specs.gp[1][4].children[1]$$: };
      adapt_gi=1;
      margin_low_thr=0.501;
      margin_med_thr=0.506;
      margin_hi_thr=0.508;
      margin_low_avg=0.25;
      margin_med_avg=0.0375;
      margin_hi_avg=0.175;
     };
     LeabraLayer @[4] {
      name="GPeNoGo";
      desc=;
      flags=0;
      layer_type=HIDDEN;
      pos_rel {rel=BEHIND: other=$.networks[0].layers.gp[4][5]$: x_align=LEFT: x_off=0: y_align=FRONT: y_off=0: space=2: };
      pos {x=21: y=5: z=0: };
      pos_abs {x=53: y=5: z=0: };
      pos2d {x=21: y=5: };
      pos2d_abs {x=53: y=5: };
      disp_scale=1;
      un_geom {x=1: y=1: n_not_xy=0: n=1: };
      unit_groups=1;
      virt_groups=1;
      gp_geom {x=4: y=2: n_not_xy=0: n=8: };
      gp_spc {x=1: y=1: };
      flat_geom {x=4: y=2: n_not_xy=0: n=8: };
      disp_geom {x=7: y=3: n_not_xy=0: n=32: };
      scaled_disp_geom {x=7: y=3: n_not_xy=0: n=1: };
      n_recv_prjns=1;
      n_send_prjns=3;
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @[0] {
	name="Fm_MatrixNoGo";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[4][1]$;
	spec {type=GpOneToOnePrjnSpec: spec=$.networks[0].specs.gp[1][7]$: };
	con_type=LeabraCon;
	con_spec {type=LeabraConSpec: spec=$.networks[0].specs.gp[1][3]$: };
	recv_idx=0;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_INPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .networks[0].layers.gp[4][0].projections[4];
       Projection_Group @. = [1] = LeabraPrjn .networks[0].layers.gp[4][1].projections[4];
       Projection_Group @. = [2] = LeabraPrjn .networks[0].layers.gp[4][5].projections[1];
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=LeabraUnitSpec: spec=.networks[0].specs.gp[1][0].children[2]$$: };
      dist {fm_input=2: fm_output=4: };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=".*/.*/.*/.*/Substantia Nigra";
      voxel_fill_pct=1;
      acts_m_avg=0.2;
      acts_p_avg=0.2;
      acts_p_avg_eff=0.2;
      spec {type=LeabraLayerSpec: spec=$.networks[0].specs.gp[1][4].children[2].children[0]$: };
      adapt_gi=1;
      margin_low_thr=0.501;
      margin_med_thr=0.506;
      margin_hi_thr=0.508;
      margin_low_avg=0.25;
      margin_med_avg=0.0375;
      margin_hi_avg=0.175;
     };
     LeabraLayer @[5] {
      name="GPi";
      desc=;
      flags=0;
      layer_type=HIDDEN;
      pos_rel {rel=RIGHT_OF: other=$.networks[0].layers.gp[4][0]$: x_align=LEFT: x_off=0: y_align=FRONT: y_off=0: space=2: };
      pos {x=21: y=0: z=0: };
      pos_abs {x=53: y=0: z=0: };
      pos2d {x=21: y=0: };
      pos2d_abs {x=53: y=0: };
      disp_scale=1;
      un_geom {x=1: y=1: n_not_xy=0: n=1: };
      unit_groups=1;
      virt_groups=1;
      gp_geom {x=4: y=2: n_not_xy=0: n=8: };
      gp_spc {x=1: y=1: };
      flat_geom {x=4: y=2: n_not_xy=0: n=8: };
      disp_geom {x=7: y=3: n_not_xy=0: n=32: };
      scaled_disp_geom {x=7: y=3: n_not_xy=0: n=1: };
      n_recv_prjns=2;
      n_send_prjns=5;
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @[0] {
	name="Fm_MatrixGo";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[4][0]$;
	spec {type=GpOneToOnePrjnSpec: spec=$.networks[0].specs.gp[1][7]$: };
	con_type=LeabraCon;
	con_spec {type=LeabraConSpec: spec=$.networks[0].specs.gp[1][3]$: };
	recv_idx=0;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_INPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[1] {
	name="Fm_GPeNoGo";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[4][4]$;
	spec {type=GpOneToOnePrjnSpec: spec=$.networks[0].specs.gp[1][7]$: };
	con_type=LeabraCon;
	con_spec {type=LeabraConSpec: spec=$.networks[0].specs.gp[1][3]$: };
	recv_idx=1;
	send_idx=2;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=LATERAL;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .networks[0].layers.gp[4][0].projections[0];
       Projection_Group @. = [1] = LeabraPrjn .networks[0].layers.gp[4][1].projections[0];
       Projection_Group @. = [2] = LeabraPrjn .networks[0].layers.gp[4][6].projections[0];
       Projection_Group @. = [3] = LeabraPrjn .networks[0].layers.gp[4][8].projections[0];
       Projection_Group @. = [4] = LeabraPrjn .networks[0].layers.gp[4][9].projections[0];
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=GPiInvUnitSpec: spec=$.networks[0].specs.gp[1][0].children[1]$: };
      dist {fm_input=2: fm_output=3: };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=".*/.*/.*/.*/Substantia Nigra";
      voxel_fill_pct=1;
      acts_m_avg=0.2;
      acts_p_avg=0.2;
      acts_p_avg_eff=0.2;
      spec {type=LeabraLayerSpec: spec=$.networks[0].specs.gp[1][4].children[2]$: };
      adapt_gi=1;
      margin_low_thr=0.501;
      margin_med_thr=0.506;
      margin_hi_thr=0.508;
      margin_low_avg=0.25;
      margin_med_avg=0.0375;
      margin_hi_avg=0.175;
     };
     LeabraLayer @[6] {
      name="PFCmnt";
      desc=;
      flags=0;
      layer_type=HIDDEN;
      pos_rel {rel=RIGHT_OF: other=.networks[0].layers.gp[4][8]$$: x_align=LEFT: x_off=0: y_align=FRONT: y_off=0: space=2: };
      pos {x=11: y=0: z=1: };
      pos_abs {x=43: y=0: z=1: };
      pos2d {x=11: y=24: };
      pos2d_abs {x=43: y=24: };
      disp_scale=1;
      un_geom {x=5: y=7: n_not_xy=0: n=35: };
      unit_groups=1;
      virt_groups=1;
      gp_geom {x=2: y=2: n_not_xy=0: n=4: };
      gp_spc {x=1: y=1: };
      flat_geom {x=10: y=14: n_not_xy=0: n=140: };
      disp_geom {x=11: y=15: n_not_xy=0: n=192: };
      scaled_disp_geom {x=11: y=15: n_not_xy=0: n=1: };
      n_recv_prjns=5;
      n_send_prjns=4;
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @[0] {
	name="Marker_Fm_GPi";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[4][5]$;
	spec {type=BgPfcPrjnSpec: spec=$.networks[0].specs.gp[1][8]$: };
	con_type=LeabraCon;
	con_spec {type=MarkerConSpec: spec=$.networks[0].specs.gp[1][3].children[1]$: };
	recv_idx=0;
	send_idx=2;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_OUTPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[1] {
	name="Deep_Mod_Fm_PFCmnt_deep";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[4][7]$;
	spec {type=OneToOnePrjnSpec: spec=.networks[0].specs.gp[1][6]$$: };
	con_type=LeabraCon;
	con_spec {type=SendDeepModConSpec: spec=.networks[0].specs.gp[1][3].children[2]$$: };
	recv_idx=1;
	send_idx=4;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_OUTPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[2] {
	name="Marker_Fm_PFCout";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=.networks[0].layers.gp[4][9]$$;
	spec {type=OneToOnePrjnSpec: spec=$.networks[0].specs.gp[1][6]$: };
	con_type=LeabraCon;
	con_spec {type=MarkerConSpec: spec=$.networks[0].specs.gp[1][3].children[1]$: };
	recv_idx=2;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_OUTPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[3] {
	name="Fm_PFCmnt_trc";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[4][8]$;
	spec {type=GpOneToOnePrjnSpec: spec=$.networks[0].specs.gp[1][7]$: };
	con_type=LeabraCon;
	con_spec {type=LeabraConSpec: spec=$.networks[0].specs.gp[1][2].children[2]$: };
	recv_idx=3;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=LATERAL;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[4] {
	name="Fm_Input";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers[0]$;
	spec {type=FullPrjnSpec: spec=$.networks[0].specs.gp[1][5]$: };
	con_type=LeabraCon;
	con_spec {type=LeabraConSpec: spec=.networks[0].specs.gp[1][2].children[1]$$: };
	recv_idx=4;
	send_idx=15;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_INPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .networks[0].layers.gp[4][0].projections[6];
       Projection_Group @. = [1] = LeabraPrjn .networks[0].layers.gp[4][1].projections[6];
       Projection_Group @. = [2] = LeabraPrjn .networks[0].layers.gp[4][7].projections[0];
       Projection_Group @. = [3] = LeabraPrjn .networks[0].layers.gp[4][8].projections[1];
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=PFCUnitSpec: spec=$.networks[0].specs.gp[1][0].children[4]$: };
      dist {fm_input=1: fm_output=4: };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=".*/.*/.*/.*/BA9";
      voxel_fill_pct=1;
      acts_m_avg=0.2;
      acts_p_avg=0.2;
      acts_p_avg_eff=0.2;
      spec {type=LeabraLayerSpec: spec=$.networks[0].specs.gp[1][4].children[3]$: };
      adapt_gi=1;
      margin_low_thr=0.501;
      margin_med_thr=0.506;
      margin_hi_thr=0.508;
      margin_low_avg=0.25;
      margin_med_avg=0.0375;
      margin_hi_avg=0.175;
     };
     LeabraLayer @[7] {
      name="PFCmnt_deep";
      desc=;
      flags=0;
      layer_type=HIDDEN;
      pos_rel {rel=BEHIND: other=$.networks[0].layers.gp[4][6]$: x_align=LEFT: x_off=0: y_align=FRONT: y_off=0: space=2: };
      pos {x=11: y=17: z=1: };
      pos_abs {x=43: y=17: z=1: };
      pos2d {x=11: y=41: };
      pos2d_abs {x=43: y=41: };
      disp_scale=1;
      un_geom {x=5: y=7: n_not_xy=0: n=35: };
      unit_groups=1;
      virt_groups=1;
      gp_geom {x=2: y=2: n_not_xy=0: n=4: };
      gp_spc {x=1: y=1: };
      flat_geom {x=10: y=14: n_not_xy=0: n=140: };
      disp_geom {x=11: y=15: n_not_xy=0: n=192: };
      scaled_disp_geom {x=11: y=15: n_not_xy=0: n=1: };
      n_recv_prjns=1;
      n_send_prjns=6;
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @[0] {
	name="Ctxt_Fm_PFCmnt";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[4][6]$;
	spec {type=OneToOnePrjnSpec: spec=$.networks[0].specs.gp[1][6]$: };
	con_type=LeabraCon;
	con_spec {type=DeepCtxtConSpec: spec=.networks[0].specs.gp[1][2].children[0]$$: };
	recv_idx=0;
	send_idx=2;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_INPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .networks[0].layers.gp[1][0].projections[3];
       Projection_Group @. = [1] = LeabraPrjn .networks[0].layers.gp[4][0].projections[5];
       Projection_Group @. = [2] = LeabraPrjn .networks[0].layers.gp[4][1].projections[5];
       Projection_Group @. = [3] = LeabraPrjn .networks[0].layers.gp[4][3].projections[0];
       Projection_Group @. = [4] = LeabraPrjn .networks[0].layers.gp[4][6].projections[1];
       Projection_Group @. = [5] = LeabraPrjn .networks[0].layers.gp[4][9].projections[2];
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=PFCUnitSpec: spec=.networks[0].specs.gp[1][0].children[4].children[0]$$: };
      dist {fm_input=2: fm_output=3: };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=".*/.*/.*/.*/BA9";
      voxel_fill_pct=1;
      acts_m_avg=0.2;
      acts_p_avg=0.2;
      acts_p_avg_eff=0.2;
      spec {type=LeabraLayerSpec: spec=$.networks[0].specs.gp[1][4].children[3]$: };
      adapt_gi=1;
      margin_low_thr=0.501;
      margin_med_thr=0.506;
      margin_hi_thr=0.508;
      margin_low_avg=0.25;
      margin_med_avg=0.0375;
      margin_hi_avg=0.175;
     };
     LeabraLayer @[8] {
      name="PFCmnt_trc";
      desc=;
      flags=0;
      layer_type=HIDDEN;
      pos_rel {rel=ABOVE: other=$.networks[0].layers.gp[4][0]$: x_align=LEFT: x_off=0: y_align=FRONT: y_off=0: space=24: };
      pos {x=0: y=0: z=1: };
      pos_abs {x=32: y=0: z=1: };
      pos2d {x=0: y=24: };
      pos2d_abs {x=32: y=24: };
      disp_scale=1;
      un_geom {x=4: y=4: n_not_xy=0: n=16: };
      unit_groups=1;
      virt_groups=1;
      gp_geom {x=2: y=2: n_not_xy=0: n=4: };
      gp_spc {x=1: y=1: };
      flat_geom {x=8: y=8: n_not_xy=0: n=64: };
      disp_geom {x=9: y=9: n_not_xy=0: n=100: };
      scaled_disp_geom {x=9: y=9: n_not_xy=0: n=1: };
      n_recv_prjns=3;
      n_send_prjns=1;
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @[0] {
	name="Marker_Fm_GPi";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[4][5]$;
	spec {type=BgPfcPrjnSpec: spec=$.networks[0].specs.gp[1][8]$: };
	con_type=LeabraCon;
	con_spec {type=MarkerConSpec: spec=$.networks[0].specs.gp[1][3].children[1]$: };
	recv_idx=0;
	send_idx=3;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_OUTPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[1] {
	name="Fm_PFCmnt";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[4][6]$;
	spec {type=GpOneToOnePrjnSpec: spec=$.networks[0].specs.gp[1][7]$: };
	con_type=LeabraCon;
	con_spec {type=LeabraConSpec: spec=.networks[0].specs.gp[1][2].children[3]$$: };
	recv_idx=1;
	send_idx=3;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_OUTPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[2] {
	name="Deep_Raw_Fm_Input";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers[0]$;
	spec {type=TiledGpRFPrjnSpec: spec=.networks[0].specs.gp[1][9]$$: };
	con_type=LeabraCon;
	con_spec {type=SendDeepRawConSpec: spec=$.networks[0].specs.gp[1][3].children[4]$: };
	recv_idx=2;
	send_idx=16;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_INPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .networks[0].layers.gp[4][6].projections[3];
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=LeabraUnitSpec: spec=.networks[0].specs.gp[1][0].children[6]$$: };
      dist {fm_input=1: fm_output=5: };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=;
      voxel_fill_pct=1;
      acts_m_avg=0.2;
      acts_p_avg=0.2;
      acts_p_avg_eff=0.2;
      spec {type=LeabraLayerSpec: spec=.networks[0].specs.gp[1][4].children[3].children[0]$$: };
      adapt_gi=1;
      margin_low_thr=0.501;
      margin_med_thr=0.506;
      margin_hi_thr=0.508;
      margin_low_avg=0.25;
      margin_med_avg=0.0375;
      margin_hi_avg=0.175;
     };
     LeabraLayer @[9] {
      name="PFCout";
      desc=;
      flags=0;
      layer_type=HIDDEN;
      pos_rel {rel=RIGHT_OF: other=$.networks[0].layers.gp[4][6]$: x_align=LEFT: x_off=0: y_align=FRONT: y_off=0: space=2: };
      pos {x=24: y=0: z=1: };
      pos_abs {x=56: y=0: z=1: };
      pos2d {x=24: y=24: };
      pos2d_abs {x=56: y=24: };
      disp_scale=1;
      un_geom {x=5: y=7: n_not_xy=0: n=35: };
      unit_groups=1;
      virt_groups=1;
      gp_geom {x=2: y=2: n_not_xy=0: n=4: };
      gp_spc {x=1: y=1: };
      flat_geom {x=10: y=14: n_not_xy=0: n=140: };
      disp_geom {x=11: y=15: n_not_xy=0: n=192: };
      scaled_disp_geom {x=11: y=15: n_not_xy=0: n=1: };
      n_recv_prjns=3;
      n_send_prjns=2;
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @[0] {
	name="Marker_Fm_GPi";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[4][5]$;
	spec {type=BgPfcPrjnSpec: spec=$.networks[0].specs.gp[1][8]$: };
	con_type=LeabraCon;
	con_spec {type=MarkerConSpec: spec=$.networks[0].specs.gp[1][3].children[1]$: };
	recv_idx=0;
	send_idx=4;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_INPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[1] {
	name="Deep_Mod_Fm_PFCout_deep";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[4][10]$;
	spec {type=OneToOnePrjnSpec: spec=$.networks[0].specs.gp[1][6]$: };
	con_type=LeabraCon;
	con_spec {type=SendDeepModConSpec: spec=$.networks[0].specs.gp[1][3].children[2]$: };
	recv_idx=1;
	send_idx=2;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_OUTPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @[2] {
	name="Fm_PFCmnt_deep";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[4][7]$;
	spec {type=OneToOnePrjnSpec: spec=$.networks[0].specs.gp[1][6]$: };
	con_type=LeabraCon;
	con_spec {type=LeabraConSpec: spec=.networks[0].specs.gp[1][3].children[3]$$: };
	recv_idx=2;
	send_idx=5;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_INPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .networks[0].layers.gp[4][6].projections[2];
       Projection_Group @. = [1] = LeabraPrjn .networks[0].layers.gp[4][10].projections[0];
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=PFCUnitSpec: spec=$.networks[0].specs.gp[1][0].children[5]$: };
      dist {fm_input=3: fm_output=2: };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=;
      voxel_fill_pct=1;
      acts_m_avg=0.2;
      acts_p_avg=0.2;
      acts_p_avg_eff=0.2;
      spec {type=LeabraLayerSpec: spec=$.networks[0].specs.gp[1][4].children[3]$: };
      adapt_gi=1;
      margin_low_thr=0.501;
      margin_med_thr=0.506;
      margin_hi_thr=0.508;
      margin_low_avg=0.25;
      margin_med_avg=0.0375;
      margin_hi_avg=0.175;
     };
     LeabraLayer @[10] {
      name="PFCout_deep";
      desc=;
      flags=0;
      layer_type=HIDDEN;
      pos_rel {rel=BEHIND: other=$.networks[0].layers.gp[4][9]$: x_align=LEFT: x_off=0: y_align=FRONT: y_off=0: space=2: };
      pos {x=24: y=17: z=1: };
      pos_abs {x=56: y=17: z=1: };
      pos2d {x=24: y=41: };
      pos2d_abs {x=56: y=41: };
      disp_scale=1;
      un_geom {x=5: y=7: n_not_xy=0: n=35: };
      unit_groups=1;
      virt_groups=1;
      gp_geom {x=2: y=2: n_not_xy=0: n=4: };
      gp_spc {x=1: y=1: };
      flat_geom {x=10: y=14: n_not_xy=0: n=140: };
      disp_geom {x=11: y=15: n_not_xy=0: n=192: };
      scaled_disp_geom {x=11: y=15: n_not_xy=0: n=1: };
      n_recv_prjns=1;
      n_send_prjns=3;
      projections {
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @[0] {
	name="Ctxt_Fm_PFCout";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.networks[0].layers.gp[4][9]$;
	spec {type=OneToOnePrjnSpec: spec=$.networks[0].specs.gp[1][6]$: };
	con_type=LeabraCon;
	con_spec {type=DeepCtxtConSpec: spec=$.networks[0].specs.gp[1][2].children[0]$: };
	recv_idx=0;
	send_idx=1;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_INPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
      };
      send_prjns {
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .networks[0].layers[1].projections[2];
       Projection_Group @. = [1] = LeabraPrjn .networks[0].layers[2].projections[1];
       Projection_Group @. = [2] = LeabraPrjn .networks[0].layers.gp[4][9].projections[1];
      };
      units {
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {type=PFCUnitSpec: spec=.networks[0].specs.gp[1][0].children[5].children[0]$$: };
      dist {fm_input=4: fm_output=1: };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=;
      voxel_fill_pct=1;
      acts_m_avg=0.2;
      acts_p_avg=0.2;
      acts_p_avg_eff=0.2;
      spec {type=LeabraLayerSpec: spec=$.networks[0].specs.gp[1][4].children[3]$: };
      adapt_gi=1;
      margin_low_thr=0.501;
      margin_med_thr=0.506;
      margin_hi_thr=0.508;
      margin_low_avg=0.25;
      margin_med_avg=0.0375;
      margin_hi_avg=0.175;
     };
    };
   };
   weights {
    name="weights";
    el_typ=Weights;
    el_def=0;
   };
   flags=NETIN_PER_PRJN|BUILD_INIT_WTS;
   unit_vars_type=LeabraUnitVars;
   con_group_type=LeabraConGroup;
   auto_build=AUTO_BUILD;
   auto_load_wts=NO_AUTO_LOAD;
   auto_load_file=;
   brain_atlas_name=;
   train_mode=TRAIN;
   wt_update=ON_LINE;
   small_batch_n=10;
   stats {sse_unit_avg=0: sse_sqrt=0: cnt_err_tol=0: prerr=0: };
   threads {run_time={name="TimeUsedHR_3": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: }: sync_time={name="TimeUsedHR_4": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: }: total_time={name="TimeUsedHR_5": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: }: n_wake_in_sync=0: run_time_pct=0: sync_time_pct=0: wake_in_sync_pct=2.298735696848069e-314: };
   cuda {sync_units=0: sync_cons=0: min_threads=32: max_threads=1024: cons_per_thread=2: timers_on=0: n_threads=32: };
   usr1_save_fmt=FULL_NET;
   wt_save_fmt=TEXT;
   n_units=1007;
   n_cons=99979;
   max_prjns=10;
   max_disp_size {x=67: y=32: z=3: };
   max_disp_size2d {x=67: y=56: };
   times {quarter=25: gate_cyc=18: deep_cyc=5: time_inc=0.001: wt_bal_int=10: minus=75: plus=25: total_cycles=100: current_cycle_gate_cycle=0: };
   lstats {trg_max_act_crit=0.5: off_errs=1: on_errs=1: agg_unlearnable=0: wt_bal=0: };
   net_misc {spike=0: deep=0: bias_learn=0: trial_decay=1: diff_scale_p=0: diff_scale_q1=0: wt_bal=1: lay_gp_inhib=0: inhib_cons=1: };
   deep {on=0: ctxt=0: raw_net=0: mod_net=0: raw_qtr=0: };
   rel_netin {on=1: trl_skip=10: epc_skip=10: };
  };
 };
};

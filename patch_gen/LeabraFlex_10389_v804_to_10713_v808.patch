// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
Patch .projects[0].patches[0] { 
 PatchRec_Group @.patch_recs = [0] {
  PatchRec_Group @.gp[0] = [4] { 
   PatchRec @[0] { };
   PatchRec @[1] { };
   PatchRec @[2] { };
   PatchRec @[3] { };
  };
  PatchRec_Group @.gp[1] = [114] { 
   PatchRec @[0] { };
   PatchRec @[1] { };
   PatchRec @[2] { };
   PatchRec @[3] { };
   PatchRec @[4] { };
   PatchRec @[5] { };
   PatchRec @[6] { };
   PatchRec @[7] { };
   PatchRec @[8] { };
   PatchRec @[9] { };
   PatchRec @[10] { };
   PatchRec @[11] { };
   PatchRec @[12] { };
   PatchRec @[13] { };
   PatchRec @[14] { };
   PatchRec @[15] { };
   PatchRec @[16] { };
   PatchRec @[17] { };
   PatchRec @[18] { };
   PatchRec @[19] { };
   PatchRec @[20] { };
   PatchRec @[21] { };
   PatchRec @[22] { };
   PatchRec @[23] { };
   PatchRec @[24] { };
   PatchRec @[25] { };
   PatchRec @[26] { };
   PatchRec @[27] { };
   PatchRec @[28] { };
   PatchRec @[29] { };
   PatchRec @[30] { };
   PatchRec @[31] { };
   PatchRec @[32] { };
   PatchRec @[33] { };
   PatchRec @[34] { };
   PatchRec @[35] { };
   PatchRec @[36] { };
   PatchRec @[37] { };
   PatchRec @[38] { };
   PatchRec @[39] { };
   PatchRec @[40] { };
   PatchRec @[41] { };
   PatchRec @[42] { };
   PatchRec @[43] { };
   PatchRec @[44] { };
   PatchRec @[45] { };
   PatchRec @[46] { };
   PatchRec @[47] { };
   PatchRec @[48] { };
   PatchRec @[49] { };
   PatchRec @[50] { };
   PatchRec @[51] { };
   PatchRec @[52] { };
   PatchRec @[53] { };
   PatchRec @[54] { };
   PatchRec @[55] { };
   PatchRec @[56] { };
   PatchRec @[57] { };
   PatchRec @[58] { };
   PatchRec @[59] { };
   PatchRec @[60] { };
   PatchRec @[61] { };
   PatchRec @[62] { };
   PatchRec @[63] { };
   PatchRec @[64] { };
   PatchRec @[65] { };
   PatchRec @[66] { };
   PatchRec @[67] { };
   PatchRec @[68] { };
   PatchRec @[69] { };
   PatchRec @[70] { };
   PatchRec @[71] { };
   PatchRec @[72] { };
   PatchRec @[73] { };
   PatchRec @[74] { };
   PatchRec @[75] { };
   PatchRec @[76] { };
   PatchRec @[77] { };
   PatchRec @[78] { };
   PatchRec @[79] { };
   PatchRec @[80] { };
   PatchRec @[81] { };
   PatchRec @[82] { };
   PatchRec @[83] { };
   PatchRec @[84] { };
   PatchRec @[85] { };
   PatchRec @[86] { };
   PatchRec @[87] { };
   PatchRec @[88] { };
   PatchRec @[89] { };
   PatchRec @[90] { };
   PatchRec @[91] { };
   PatchRec @[92] { };
   PatchRec @[93] { };
   PatchRec @[94] { };
   PatchRec @[95] { };
   PatchRec @[96] { };
   PatchRec @[97] { };
   PatchRec @[98] { };
   PatchRec @[99] { };
   PatchRec @[100] { };
   PatchRec @[101] { };
   PatchRec @[102] { };
   PatchRec @[103] { };
   PatchRec @[104] { };
   PatchRec @[105] { };
   PatchRec @[106] { };
   PatchRec @[107] { };
   PatchRec @[108] { };
   PatchRec @[109] { };
   PatchRec @[110] { };
   PatchRec @[111] { };
   PatchRec @[112] { };
   PatchRec @[113] { };
  };
  PatchRec_Group @.gp[2] = [17] { 
   PatchRec @[0] { };
   PatchRec @[1] { };
   PatchRec @[2] { };
   PatchRec @[3] { };
   PatchRec @[4] { };
   PatchRec @[5] { };
   PatchRec @[6] { };
   PatchRec @[7] { };
   PatchRec @[8] { };
   PatchRec @[9] { };
   PatchRec @[10] { };
   PatchRec @[11] { };
   PatchRec @[12] { };
   PatchRec @[13] { };
   PatchRec @[14] { };
   PatchRec @[15] { };
   PatchRec @[16] { };
  };
  PatchRec_Group @.gp[3] = [2] { 
   PatchRec @[0] { };
   PatchRec @[1] { };
  };
  PatchRec_Group @.gp[4] = [18] { 
   PatchRec @[0] { };
   PatchRec @[1] { };
   PatchRec @[2] { };
   PatchRec @[3] { };
   PatchRec @[4] { };
   PatchRec @[5] { };
   PatchRec @[6] { };
   PatchRec @[7] { };
   PatchRec @[8] { };
   PatchRec @[9] { };
   PatchRec @[10] { };
   PatchRec @[11] { };
   PatchRec @[12] { };
   PatchRec @[13] { };
   PatchRec @[14] { };
   PatchRec @[15] { };
   PatchRec @[16] { };
   PatchRec @[17] { };
  };
  PatchRec_Group @.gp[5] = [2] { 
   PatchRec @[0] { };
   PatchRec @[1] { };
  };
 };
};
Patch .projects[0].patches[0] {
 name="LeabraFlex_10389_v804_to_10713_v808";
 tags=;
 desc=;
 author="Randall C. O'Reilly";
 email="emergent-users@grey.colorado.edu";
 date="2017_05_11_16_24_47";
 from_name="LeabraFlex_10389_v804_updt";
 to_name="LeabraFlex_10713_v808";
 patch_recs {
  name="patch_recs";
  el_typ=PatchRec;
  el_def=0;
  path=;
  PatchRec_Group @.gp[0] {
   name="data";
   el_typ=PatchRec;
   el_def=0;
   path=;
   PatchRec @[0] {
    off=0;
    action=ASSIGN;
    obj_path_names=".data.gp[\"ConfigData\"]";
    obj_path_idx=".data.gp[3]";
    obj_type="DataTable_Group";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
DataTable_Group .projects[1].data.gp[3] { 
};
DataTable_Group .projects[1].data.gp[3] {
 name=\"ClusterRun\";
 el_typ=DataTable;
 el_def=0;
 save_tables=0;
};
";
   };
   PatchRec @[1] {
    off=0;
    action=INSERT;
    obj_path_names=".data.gp[\"OutputData\"]";
    obj_path_idx=".data.gp[1]";
    obj_type="DataTable_Group";
    mbr_path=;
    targ_idx=2;
    targ_name="TestTrialOutputData";
    insert_after="EpochOutputData";
    insert_before=;
    new_obj_type="DataTable";
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
DataTable .projects[1].data.gp[1][2] { 
 DataTableCols @.data = [30] {
  int_Data @[0] { };
  int_Data @[1] { };
  String_Data @[2] { };
  int_Data @[3] { };
  int_Data @[4] { };
  int_Data @[5] { };
  float_Data @[6] { };
  String_Data @[7] { };
  String_Data @[8] { };
  String_Data @[9] { };
  float_Data @[10] { };
  float_Data @[11] { };
  float_Data @[12] { };
  float_Data @[13] { };
  float_Data @[14] { };
  float_Data @[15] { };
  float_Data @[16] { };
  float_Data @[17] { };
  float_Data @[18] { };
  float_Data @[19] { };
  float_Data @[20] { };
  float_Data @[21] { };
  float_Data @[22] { };
  float_Data @[23] { };
  float_Data @[24] { };
  float_Data @[25] { };
  float_Data @[26] { };
  float_Data @[27] { };
  float_Data @[28] { };
  float_Data @[29] { };
 };

 DataOpList @.last_sort_spec.ops = [0] {
 };
};
DataTable .projects[1].data.gp[1][2] {
 name=\"TestTrialOutputData\";
 desc=;
 data {
  name=\"data\";
  el_typ=int_Data;
  el_def=0;
  int_Data @[0] {
   name=\"batch\";
   col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=8;
   matrix_col_width=10;
  };
  int_Data @[1] {
   name=\"epoch\";
   col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=8;
   matrix_col_width=10;
  };
  String_Data @[2] {
   name=\"train_mode\";
   col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=16;
   matrix_col_width=10;
  };
  int_Data @[3] {
   name=\"group\";
   col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=8;
   matrix_col_width=10;
  };
  int_Data @[4] {
   name=\"trial\";
   col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=8;
   matrix_col_width=10;
  };
  int_Data @[5] {
   name=\"tick\";
   col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=8;
   matrix_col_width=10;
  };
  float_Data @[6] {
   name=\"time\";
   col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=8;
   matrix_col_width=10;
  };
  String_Data @[7] {
   name=\"trial_name\";
   col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=16;
   matrix_col_width=10;
  };
  String_Data @[8] {
   name=\"group_name\";
   col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=16;
   matrix_col_width=10;
  };
  String_Data @[9] {
   name=\"output_name\";
   col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=16;
   matrix_col_width=10;
  };
  float_Data @[10] {
   name=\"rt_cycles\";
   col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=9;
   matrix_col_width=10;
  };
  float_Data @[11] {
   name=\"sse\";
   col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=8;
   matrix_col_width=10;
  };
  float_Data @[12] {
   name=\"norm_err\";
   col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=8;
   matrix_col_width=10;
  };
  float_Data @[13] {
   name=\"cos_err\";
   col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=8;
   matrix_col_width=10;
  };
  float_Data @[14] {
   name=\"ext_rew\";
   col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=8;
   matrix_col_width=10;
  };
  float_Data @[15] {
   name=\"Output_lay_sse\";
   col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=14;
   matrix_col_width=10;
  };
  float_Data @[16] {
   name=\"Output_lay_bin_err\";
   col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=18;
   matrix_col_width=10;
  };
  float_Data @[17] {
   name=\"Output_lay_norm_err\";
   col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=19;
   matrix_col_width=10;
  };
  float_Data @[18] {
   name=\"Output_lay_cos_err\";
   col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=18;
   matrix_col_width=10;
  };
  float_Data @[19] {
   name=\"Hidden_lay_net_sd\";
   col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=17;
   matrix_col_width=10;
  };
  float_Data @[20] {
   name=\"Output_lay_net_sd\";
   col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=17;
   matrix_col_width=10;
  };
  float_Data @[21] {
   name=\"net_cos_diff\";
   col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=12;
   matrix_col_width=10;
  };
  float_Data @[22] {
   name=\"net_trial_cos_diff\";
   col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=18;
   matrix_col_width=10;
  };
  float_Data @[23] {
   name=\"net_avg_act_diff\";
   col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=16;
   matrix_col_width=10;
  };
  float_Data @[24] {
   name=\"Hidden_cos_diff\";
   col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=15;
   matrix_col_width=10;
  };
  float_Data @[25] {
   name=\"Output_cos_diff\";
   col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=15;
   matrix_col_width=10;
  };
  float_Data @[26] {
   name=\"Hidden_trial_cos_diff\";
   col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=21;
   matrix_col_width=10;
  };
  float_Data @[27] {
   name=\"Output_trial_cos_diff\";
   col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=21;
   matrix_col_width=10;
  };
  float_Data @[28] {
   name=\"Hidden_avg_act_diff\";
   col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=19;
   matrix_col_width=10;
  };
  float_Data @[29] {
   name=\"Output_avg_act_diff\";
   col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=19;
   matrix_col_width=10;
  };
 };
 data_flags=AUTO_CALC;
 auto_load=NO_AUTO_LOAD;
 auto_load_file=;
 row_height=1;
 max_col_width=50;
 keygen 4 0=0;
 last_sort_spec {
  name=\"last_sort_spec\";
  ops {
   name=\"ops\";
   el_typ=DataSortEl;
   el_def=0;
  };
 };
 row_with_hilite=-1;
};
";
   };
   PatchRec @[2] {
    off=0;
    action=INSERT;
    obj_path_names=".data.gp[\"OutputData\"]";
    obj_path_idx=".data.gp[1]";
    obj_type="DataTable_Group";
    mbr_path=;
    targ_idx=2;
    targ_name="TestEpochOutputData";
    insert_after="TestTrialOutputData";
    insert_before=;
    new_obj_type="DataTable";
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
DataTable .projects[1].data.gp[1][3] { 
 DataTableCols @.data = [32] {
  int_Data @[0] { };
  int_Data @[1] { };
  float_Data @[2] { };
  float_Data @[3] { };
  float_Data @[4] { };
  float_Data @[5] { };
  float_Data @[6] { };
  float_Data @[7] { };
  float_Data @[8] { };
  float_Data @[9] { };
  float_Data @[10] { };
  float_Data @[11] { };
  float_Data @[12] { };
  float_Data @[13] { };
  float_Data @[14] { };
  float_Data @[15] { };
  float_Data @[16] { };
  float_Data @[17] { };
  float_Data @[18] { };
  float_Data @[19] { };
  float_Data @[20] { };
  float_Data @[21] { };
  float_Data @[22] { };
  float_Data @[23] { };
  float_Data @[24] { };
  float_Data @[25] { };
  float_Data @[26] { };
  float_Data @[27] { };
  float_Data @[28] { };
  float_Data @[29] { };
  float_Data @[30] { };
  float_Data @[31] { };
 };

 DataOpList @.last_sort_spec.ops = [0] {
 };
};
DataTable .projects[1].data.gp[1][3] {
 name=\"TestEpochOutputData\";
 desc=;
 data {
  name=\"data\";
  el_typ=int_Data;
  el_def=0;
  int_Data @[0] {
   name=\"batch\";
   col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=8;
   matrix_col_width=10;
  };
  int_Data @[1] {
   name=\"epoch\";
   col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=8;
   matrix_col_width=10;
  };
  float_Data @[2] {
   name=\"avg_sse\";
   col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=8;
   matrix_col_width=10;
  };
  float_Data @[3] {
   name=\"cnt_err\";
   col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=8;
   matrix_col_width=10;
  };
  float_Data @[4] {
   name=\"pct_cor\";
   col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=8;
   matrix_col_width=10;
  };
  float_Data @[5] {
   name=\"pct_err\";
   col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=8;
   matrix_col_width=10;
  };
  float_Data @[6] {
   name=\"avg_norm_err\";
   col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=12;
   matrix_col_width=10;
  };
  float_Data @[7] {
   name=\"avg_cos_err\";
   col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=11;
   matrix_col_width=10;
  };
  float_Data @[8] {
   name=\"avg_ext_rew\";
   col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=11;
   matrix_col_width=10;
  };
  float_Data @[9] {
   name=\"avg_cycles\";
   col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=10;
   matrix_col_width=10;
  };
  float_Data @[10] {
   name=\"Output_lay_avg_sse\";
   col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=18;
   matrix_col_width=10;
  };
  float_Data @[11] {
   name=\"Output_lay_cnt_err\";
   col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=18;
   matrix_col_width=10;
  };
  float_Data @[12] {
   name=\"Output_lay_pct_cor\";
   col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=18;
   matrix_col_width=10;
  };
  float_Data @[13] {
   name=\"Output_lay_pct_err\";
   col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=18;
   matrix_col_width=10;
  };
  float_Data @[14] {
   name=\"Output_lay_avg_norm_err\";
   col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=23;
   matrix_col_width=10;
  };
  float_Data @[15] {
   name=\"Output_lay_avg_cos_err\";
   col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=22;
   matrix_col_width=10;
  };
  float_Data @[16] {
   name=\"net_avg_cos_diff\";
   col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=16;
   matrix_col_width=10;
  };
  float_Data @[17] {
   name=\"net_avg_trial_cos_diff\";
   col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=22;
   matrix_col_width=10;
  };
  float_Data @[18] {
   name=\"net_avg_avg_act_diff\";
   col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=20;
   matrix_col_width=10;
  };
  float_Data @[19] {
   name=\"Hidden_avg_cos_diff\";
   col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=19;
   matrix_col_width=10;
  };
  float_Data @[20] {
   name=\"Output_avg_cos_diff\";
   col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=19;
   matrix_col_width=10;
  };
  float_Data @[21] {
   name=\"Hidden_avg_trial_cos_diff\";
   col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=25;
   matrix_col_width=10;
  };
  float_Data @[22] {
   name=\"Output_avg_trial_cos_diff\";
   col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=25;
   matrix_col_width=10;
  };
  float_Data @[23] {
   name=\"Hidden_avg_avg_act_diff\";
   col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=23;
   matrix_col_width=10;
  };
  float_Data @[24] {
   name=\"Output_avg_avg_act_diff\";
   col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=23;
   matrix_col_width=10;
  };
  float_Data @[25] {
   name=\"Hidden_avg_net_sd\";
   col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=17;
   matrix_col_width=10;
  };
  float_Data @[26] {
   name=\"Output_avg_net_sd\";
   col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=17;
   matrix_col_width=10;
  };
  float_Data @[27] {
   name=\"Hidden_netmax\";
   col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=13;
   matrix_col_width=10;
  };
  float_Data @[28] {
   name=\"Output_netmax\";
   col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=13;
   matrix_col_width=10;
  };
  float_Data @[29] {
   name=\"Input_avg_act\";
   col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=13;
   matrix_col_width=10;
  };
  float_Data @[30] {
   name=\"Hidden_avg_act\";
   col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=14;
   matrix_col_width=10;
  };
  float_Data @[31] {
   name=\"Output_avg_act\";
   col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=14;
   matrix_col_width=10;
  };
 };
 data_flags=AUTO_CALC;
 auto_load=NO_AUTO_LOAD;
 auto_load_file=;
 row_height=1;
 max_col_width=50;
 keygen 4 0=0;
 last_sort_spec {
  name=\"last_sort_spec\";
  ops {
   name=\"ops\";
   el_typ=DataSortEl;
   el_def=0;
  };
 };
 row_with_hilite=-1;
};
";
   };
   PatchRec @[3] {
    off=0;
    action=DELETE;
    obj_path_names=".data.gp[\"ConfigData\"][\"ConfigTable\"]";
    obj_path_idx=".data.gp[3][0]";
    obj_type="DataTable";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
DataTable .projects[0].data.gp[3][0] { 
 DataTableCols @.data = [16] {
  String_Data @[0] { };
  String_Data @[1] { };
  String_Data @[2] { };
  String_Data @[3] { };
  String_Data @[4] { };
  int_Data @[5] { };
  int_Data @[6] { };
  bool_Data @[7] { };
  int_Data @[8] { };
  int_Data @[9] { };
  bool_Data @[10] { };
  bool_Data @[11] { };
  String_Data @[12] { };
  int_Data @[13] { };
  int_Data @[14] { };
  int_Data @[15] { };
 };

 DataOpList @.last_sort_spec.ops = [0] {
 };
};
DataTable .projects[0].data.gp[3][0] {
 name=\"ConfigTable\";
 desc=\"different configurations of the system\";
 data {
  name=\"data\";
  el_typ=String_Data;
  el_def=0;
  String_Data @[0] {
   name=\"config_id\";
   desc=\"identifier for this type of configuration\";
   col_flags=SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=16;
   matrix_col_width=10;
   ar {
    name=\"ar\";
   [1] \"basic_train\";   };
  };
  String_Data @[1] {
   name=\"config_desc\";
   desc=\"description of this configuration\";
   col_flags=SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=16;
   matrix_col_width=10;
   ar {
    name=\"ar\";
   [1] \"default basic training\";   };
  };
  String_Data @[2] {
   name=\"init_prog\";
   desc=\"program to run to initialize at start of training\";
   col_flags=SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=16;
   matrix_col_width=10;
   ar {
    name=\"ar\";
   [1] \"BasicInit\";   };
  };
  String_Data @[3] {
   name=\"run_prog\";
   desc=\"program controlling each step of running\";
   col_flags=SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=16;
   matrix_col_width=10;
   ar {
    name=\"ar\";
   [1] \"BasicRun\";   };
  };
  String_Data @[4] {
   name=\"startup_prog\";
   desc=\"program for handling startup args specific to this environment\";
   col_flags=SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=16;
   matrix_col_width=10;
   ar {
    name=\"ar\";
   [1] \"BasicStartup\";   };
  };
  int_Data @[5] {
   name=\"train_epochs\";
   desc=\"number of total epochs to train for\";
   col_flags=SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=12;
   matrix_col_width=10;
   ar {
    name=\"ar\";
   [1] 50;   };
  };
  int_Data @[6] {
   name=\"trials_per_epoch\";
   desc=\"number of individual trials per epoch\";
   col_flags=SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=16;
   matrix_col_width=10;
   ar {
    name=\"ar\";
   [1] 50;   };
  };
  bool_Data @[7] {
   name=\"save_final_wts\";
   desc=\"save final weights after training (1 = yes, 0 = no)\";
   col_flags=SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=14;
   matrix_col_width=10;
   ar {
    name=\"ar\";
   [1] true;   };
  };
  int_Data @[8] {
   name=\"save_wts_interval\";
   desc=\"how frequently to save weights during training (in epochs)\";
   col_flags=SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=17;
   matrix_col_width=10;
   ar {
    name=\"ar\";
   [1] 200;   };
  };
  int_Data @[9] {
   name=\"test_interval\";
   desc=\"how frequently to test performance without training -- only applicable to training cases\";
   col_flags=SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=13;
   matrix_col_width=10;
   ar {
    name=\"ar\";
   [1] 1000;   };
  };
  bool_Data @[10] {
   name=\"log_trials\";
   desc=\"whether to log trial-level data or not (1 = yes, 0 = no)\";
   col_flags=SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=10;
   matrix_col_width=10;
   ar {
    name=\"ar\";
   [1] false;   };
  };
  bool_Data @[11] {
   name=\"load_weights\";
   desc=\"whether to load weights at start\";
   col_flags=SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=12;
   matrix_col_width=10;
   ar {
    name=\"ar\";
   [1] false;   };
  };
  String_Data @[12] {
   name=\"weights_file\";
   desc=\"full relative path (from project) to a weights file to load at start of training\";
   col_flags=SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=16;
   matrix_col_width=10;
   ar {
    name=\"ar\";
   [1] ;   };
  };
  int_Data @[13] {
   name=\"load_st_epc\";
   desc=\"if loading weights, what epoch does it start at?\";
   col_flags=SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=11;
   matrix_col_width=10;
   ar {
    name=\"ar\";
   [1] 1;   };
  };
  int_Data @[14] {
   name=\"lrs_step_epochs\";
   desc=\"how many epochs per given step in the lrate schedule: each step drops the lrate roughly in half (log scale)\";
   col_flags=SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=15;
   matrix_col_width=10;
   ar {
    name=\"ar\";
   [1] 50;   };
  };
  int_Data @[15] {
   name=\"lrs_bump_step\";
   desc=\"what step to bump the lrate back up to 1 and then come back down -- 3 typical when used -- gets closer to global maximum, but requires 1.5x as many epochs\";
   col_flags=SAVE_DATA|AUTO_WIDTH;
   is_matrix=0;
   cell_geom{ 1;   };
   calc_expr {
    expr=;
   };
   dim_names {
    name=\"dim_names\";
   [0]    };
   width=15;
   matrix_col_width=10;
   ar {
    name=\"ar\";
   [1] -1;   };
  };
 };
 data_flags=SAVE_ROWS|AUTO_CALC;
 auto_load=NO_AUTO_LOAD;
 auto_load_file=;
 row_height=1;
 max_col_width=50;
 keygen 4 0=0;
 row_indexes {
  name=\"row_indexes\";
 [1] 0; };
 last_sort_spec {
  name=\"last_sort_spec\";
  ops {
   name=\"ops\";
   el_typ=DataSortEl;
   el_def=0;
  };
 };
 row_with_hilite=-1;
};
";
   };
  };
  PatchRec_Group @.gp[1] {
   name="programs";
   el_typ=PatchRec;
   el_def=0;
   path=;
   PatchRec @[0] {
    off=0;
    action=DELETE;
    obj_path_names=".programs[\"MasterStartup\"].vars[\"config_id\"]";
    obj_path_idx=".programs[0].vars[2]";
    obj_type="ProgVar";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgVar .projects[0].programs[0].vars[2] { };
ProgVar .projects[0].programs[0].vars[2] {
 name=\"config_id\";
 var_type=T_String;
 string_val=;
 object_scope=NULL;
 flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
 reference=0;
 desc=\"selector for config to use\";
 init_from=NULL;
};
";
   };
   PatchRec @[1] {
    off=0;
    action=DELETE;
    obj_path_names=".programs[\"MasterStartup\"].vars[\"param_set\"]";
    obj_path_idx=".programs[0].vars[3]";
    obj_type="ProgVar";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgVar .projects[0].programs[0].vars[3] { };
ProgVar .projects[0].programs[0].vars[3] {
 name=\"param_set\";
 var_type=T_String;
 string_val=;
 object_scope=NULL;
 flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
 reference=0;
 desc=\"name of saved parameter set to apply at startup\";
 init_from=NULL;
};
";
   };
   PatchRec @[2] {
    off=0;
    action=DELETE;
    obj_path_names=".programs[\"MasterStartup\"].vars[\"Config\"]";
    obj_path_idx=".programs[0].vars[7]";
    obj_type="ProgVar";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgVar .projects[0].programs[0].vars[7] { };
ProgVar .projects[0].programs[0].vars[7] {
 name=\"Config\";
 var_type=T_Object;
 object_type=DataTable;
 object_val=.data.gp[\"ConfigData\"][\"ConfigTable\"]$$<DataTable,ConfigTable>;
 object_scope=NULL;
 objs_ptr=0;
 flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
 reference=0;
 desc=;
 init_from=NULL;
};
";
   };
   PatchRec @[3] {
    off=0;
    action=DELETE;
    obj_path_names=".programs[\"MasterStartup\"].vars[\"param_sets\"]";
    obj_path_idx=".programs[0].vars[12]";
    obj_type="ProgVar";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgVar .projects[0].programs[0].vars[12] { };
ProgVar .projects[0].programs[0].vars[12] {
 name=\"param_sets\";
 var_type=T_Object;
 object_type=ParamSet_Group;
 object_val=.active_params$$<ParamSet_Group,active_params>;
 object_scope=NULL;
 objs_ptr=0;
 flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
 reference=0;
 desc=;
 init_from=NULL;
};
";
   };
   PatchRec @[4] {
    off=0;
    action=ASSIGN;
    obj_path_names=".programs[\"MasterStartup\"].vars[\"tag\"]";
    obj_path_idx=".programs[0].vars[1]";
    obj_type="ProgVar";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgVar .projects[1].programs[0].vars[1] { };
ProgVar .projects[1].programs[0].vars[1] {
 name=\"tag\";
 var_type=T_String;
 string_val=\"_RunMaster_NetMaster\";
 object_scope=NULL;
 flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
 reference=0;
 desc=;
 init_from=NULL;
};
";
   };
   PatchRec @[5] {
    off=0;
    action=ASSIGN;
    obj_path_names=".programs[\"MasterStartup\"].vars[\"log_file_nm\"]";
    obj_path_idx=".programs[0].vars[5]";
    obj_type="ProgVar";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgVar .projects[1].programs[0].vars[3] { };
ProgVar .projects[1].programs[0].vars[3] {
 name=\"log_file_nm\";
 var_type=T_String;
 string_val=\"/Users/oreilly/emergent/proj_templates/LeabraFlex_RunMaster_NetMaster.args\";
 object_scope=NULL;
 flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
 reference=0;
 desc=\"name of log file\";
 init_from=NULL;
};
";
   };
   PatchRec @[6] {
    off=0;
    action=DELETE;
    obj_path_names=".programs[\"MasterStartup\"].functions[\"set_n_units\"]";
    obj_path_idx=".programs[0].functions[0]";
    obj_type="Function";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
Function .projects[0].programs[0].functions[0] { 
 ProgVar_List @.args = [2] {
  ProgVar @[0] { };
  ProgVar @[1] { };
 };

 ProgEl_List @.fun_code = [4] {
  If @[0] { 
   ProgEl_List @.true_code = [1] {
    ReturnExpr @[0] { };
   };
  };
  MethodCall @[1] { 
   ProgArg_List @.meth_args = [1] {
    ProgArg @[0] { };
   };
  };
  PrintExpr @[2] { };
  ReturnExpr @[3] { };
 };
};
Function .projects[0].programs[0].functions[0] {
 name=\"set_n_units\";
 desc=;
 flags=CAN_REVERT_TO_CODE;
 code_string=\"set_n_units(Layer* lay, int n_units) returns: bool\";
 return_type=T_Bool;
 object_type=taOBase;
 args {
  name=\"args\";
  el_typ=ProgVar;
  el_def=0;
  ProgVar @[0] {
   name=\"lay\";
   var_type=T_Object;
   object_type=Layer;
   object_val=NULL;
   object_scope=NULL;
   objs_ptr=0;
   flags=LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[1] {
   name=\"n_units\";
   var_type=T_Int;
   int_val=0;
   object_scope=NULL;
   flags=LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
 };
 fun_code {
  name=\"fun_code\";
  el_typ=ProgCode;
  el_def=0;
  If @[0] {
   name=\"If_iflayungeomnnunitsnunits0\";
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string=\"if (lay->un_geom.n == n_units || n_units <= 0)\";
   cond {
    expr=\"lay->un_geom.n == n_units || n_units <= 0\";
   };
   true_code {
    name=\"true_code\";
    el_typ=ProgCode;
    el_def=0;
    ReturnExpr @[0] {
     name=\"ReturnExpr_returnfalse\";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string=\"return false\";
     expr {
      expr=\"false\";
     };
    };
   };
  };
  MethodCall @[1] {
   name=\"MethodCall_laySetNUnitsnunits\";
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string=\"lay->SetNUnits(n_units)\";
   result_var=NULL;
   obj=.args[0]$$;
   method=Layer::SetNUnits;
   meth_args {
    name=\"meth_args\";
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=int;
     type=\"int\";
     name=\"n_units\";
     required=1;
     def_val=;
     prev_expr=;
     expr {
      expr=\"n_units\";
     };
    };
   };
   meth_sig=\"void SetNUnits(int n_units)\";
   meth_desc=\" set number of units in layer in the un_geom member -- attempts to lay out geometry in closest to a square that fits all the units evenly, if possible. note: does NOT rebuild the network. also does not make any changes if current number of units is same as arg, or arg <= 0 (e.g., for startup arg, just init n_units to -1 prior to getting arg val so it won't have any effect if arg not passed)\";
  };
  PrintExpr @[2] {
   name=\"PrintExpr_Printlayerlaynam_uallylayungeomn\";
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string=\"Print \\\"layer: \\\" << lay->name << \\\" changed to: \\\" << n_units << \\\" units, actually: \\\" << lay->un_geom.n\";
   expr {
    expr=\"\\\"layer: \\\" << lay->name << \\\" changed to: \\\" << n_units << \\\" units, actually: \\\" << lay->un_geom.n\";
   };
   debug=0;
  };
  ReturnExpr @[3] {
   name=\"ReturnExpr_returntrue\";
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string=\"return true\";
   expr {
    expr=\"true\";
   };
  };
 };
};
";
   };
   PatchRec @[7] {
    off=0;
    action=INSERT;
    obj_path_names=".programs[\"MasterStartup\"].prog_code";
    obj_path_idx=".programs[0].prog_code";
    obj_type="ProgEl_List";
    mbr_path=;
    targ_idx=3;
    targ_name="AssignExpr_tag";
    insert_after="Comment_Stdvariablesinst_upprogramitself";
    insert_before="ProgVarFmArg_SetVartaginProgr_artupfromArgtag";
    new_obj_type="AssignExpr";
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
AssignExpr .projects[1].programs[0].prog_code[3] { };
AssignExpr .projects[1].programs[0].prog_code[3] {
 name=\"AssignExpr_tag\";
 desc=\"start with empty tag in all cases\";
 flags=CAN_REVERT_TO_CODE;
 code_string=\"tag = \\\"\\\"\";
 result_var=.programs[\"MasterStartup\"].vars[\"tag\"]$$<ProgVar,tag>;
 expr {
  expr=\"\\\"\\\"\";
 };
};
";
   };
   PatchRec @[8] {
    off=0;
    action=DELETE;
    obj_path_names=".programs[\"MasterStartup\"].prog_code[\"ProgVarFmArg_SetVarparamsetin_fromArgparamset\"]";
    obj_path_idx=".programs[0].prog_code[5]";
    obj_type="ProgVarFmArg";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgVarFmArg .projects[0].programs[0].prog_code[5] { };
ProgVarFmArg .projects[0].programs[0].prog_code[5] {
 name=\"ProgVarFmArg_SetVarparamsetin_fromArgparamset\";
 desc=;
 flags=CAN_REVERT_TO_CODE;
 code_string=\"Set Var:param_set in Program:MasterStartup from Arg:param_set\";
 prog=.programs[\"MasterStartup\"]$$<Program,MasterStartup>;
 var_name=\"param_set\";
 arg_name=\"param_set\";
};
";
   };
   PatchRec @[9] {
    off=0;
    action=DELETE;
    obj_path_names=".programs[\"MasterStartup\"].prog_code[\"ProgVarFmArg_SetVarbatchstart_omArgbatchstart\"]";
    obj_path_idx=".programs[0].prog_code[6]";
    obj_type="ProgVarFmArg";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgVarFmArg .projects[0].programs[0].prog_code[6] { };
ProgVarFmArg .projects[0].programs[0].prog_code[6] {
 name=\"ProgVarFmArg_SetVarbatchstart_omArgbatchstart\";
 desc=\"starting batch -- replaces b_start\";
 flags=NEW_EL|CAN_REVERT_TO_CODE;
 code_string=\"Set Var:batch_start in Program:MasterBatch from Arg:batch_start\";
 prog=.programs.gp[\"ConfigProgs\"][\"MasterBatch\"]$$<Program,MasterBatch>;
 var_name=\"batch_start\";
 arg_name=\"batch_start\";
};
";
   };
   PatchRec @[10] {
    off=0;
    action=DELETE;
    obj_path_names=".programs[\"MasterStartup\"].prog_code[\"ProgVarFmArg_SetVarnbatchesin_fromArgnbatches\"]";
    obj_path_idx=".programs[0].prog_code[7]";
    obj_type="ProgVarFmArg";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgVarFmArg .projects[0].programs[0].prog_code[7] { };
ProgVarFmArg .projects[0].programs[0].prog_code[7] {
 name=\"ProgVarFmArg_SetVarnbatchesin_fromArgnbatches\";
 desc=\"number of batches to run\";
 flags=NEW_EL|CAN_REVERT_TO_CODE;
 code_string=\"Set Var:n_batches in Program:MasterBatch from Arg:n_batches\";
 prog=.programs.gp[\"ConfigProgs\"][\"MasterBatch\"]$$<Program,MasterBatch>;
 var_name=\"n_batches\";
 arg_name=\"n_batches\";
};
";
   };
   PatchRec @[11] {
    off=0;
    action=DELETE;
    obj_path_names=".programs[\"MasterStartup\"].prog_code[\"ProgVarFmArg_SetVarcurconfigi_infromArgconfig\"]";
    obj_path_idx=".programs[0].prog_code[9]";
    obj_type="ProgVarFmArg";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgVarFmArg .projects[0].programs[0].prog_code[9] { };
ProgVarFmArg .projects[0].programs[0].prog_code[9] {
 name=\"ProgVarFmArg_SetVarcurconfigi_infromArgconfig\";
 desc=\"NOTE: set in MasterTrain and copy from there, so it can use that default!\";
 flags=CAN_REVERT_TO_CODE;
 code_string=\"Set Var:cur_config in Program:MasterTrain from Arg:config\";
 prog=.programs.gp[\"ConfigProgs\"][\"MasterTrain\"]$$<Program,MasterTrain>;
 var_name=\"cur_config\";
 arg_name=\"config\";
};
";
   };
   PatchRec @[12] {
    off=0;
    action=DELETE;
    obj_path_names=".programs[\"MasterStartup\"].prog_code[\"ProgVarFmArg_SetVarconfigidin_infromArgconfig\"]";
    obj_path_idx=".programs[0].prog_code[10]";
    obj_type="ProgVarFmArg";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgVarFmArg .projects[0].programs[0].prog_code[10] { };
ProgVarFmArg .projects[0].programs[0].prog_code[10] {
 name=\"ProgVarFmArg_SetVarconfigidin_infromArgconfig\";
 desc=\"NOTE: set in MasterTrain and copy from there, so it can use that default!\";
 flags=CAN_REVERT_TO_CODE;
 code_string=\"Set Var:config_id in Program:MasterTrain from Arg:config\";
 prog=.programs.gp[\"ConfigProgs\"][\"MasterTrain\"]$$<Program,MasterTrain>;
 var_name=\"config_id\";
 arg_name=\"config\";
};
";
   };
   PatchRec @[13] {
    off=0;
    action=DELETE;
    obj_path_names=".programs[\"MasterStartup\"].prog_code[\"OtherProgramVar_VarsFmprogramMas_gidvar2var3var4\"]";
    obj_path_idx=".programs[0].prog_code[11]";
    obj_type="OtherProgramVar";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
OtherProgramVar .projects[0].programs[0].prog_code[11] { };
OtherProgramVar .projects[0].programs[0].prog_code[11] {
 name=\"OtherProgramVar_VarsFmprogramMas_gidvar2var3var4\";
 desc=;
 flags=CAN_REVERT_TO_CODE;
 code_string=\"Vars Fm:  program=MasterTrain set=from  var_1=config_id  var_2=?  var_3=?  var_4=? \";
 other_prog=.programs.gp[\"ConfigProgs\"][\"MasterTrain\"]$$<Program,MasterTrain>;
 set_other=0;
 var_1=.programs[\"MasterStartup\"].vars[\"config_id\"]$$<ProgVar,config_id>;
 var_2=NULL;
 var_3=NULL;
 var_4=NULL;
};
";
   };
   PatchRec @[14] {
    off=0;
    action=DELETE;
    obj_path_names=".programs[\"MasterStartup\"].prog_code[\"MethodCall_Configmethod\"]";
    obj_path_idx=".programs[0].prog_code[12]";
    obj_type="MethodCall";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
MethodCall .projects[0].programs[0].prog_code[12] { 
 ProgArg_List @.meth_args = [2] {
  ProgArg @[0] { };
  ProgArg @[1] { };
 };
};
MethodCall .projects[0].programs[0].prog_code[12] {
 name=\"MethodCall_Configmethod\";
 desc=;
 flags=CAN_REVERT_TO_CODE;
 code_string=\"Config->method()\";
 result_var=NULL;
 obj=.programs[\"MasterStartup\"].vars[\"Config\"]$$<ProgVar,Config>;
 method=NULL;
 meth_args {
  name=\"meth_args\";
  el_typ=ProgArg;
  el_def=0;
  ProgArg @[0] {
   arg_type=taString;
   type=\"taString\";
   name=\"column_name\";
   required=1;
   def_val=;
   prev_expr=;
   expr {
    expr=\"\\\"config_id\\\"\";
   };
  };
  ProgArg @[1] {
   arg_type=taString;
   type=\"taString\";
   name=\"value\";
   required=1;
   def_val=;
   prev_expr=;
   expr {
    expr=\"config_id\";
   };
  };
 };
 meth_sig=\"void SetCellsFromRowLookup(taString column_name, taString value)\";
 meth_desc=\" set the values of table cells in the row with value matching the 'value' arg of column matching 'column_name' arg\";
};
";
   };
   PatchRec @[15] {
    off=0;
    action=INSERT;
    obj_path_names=".programs[\"MasterStartup\"].prog_code";
    obj_path_idx=".programs[0].prog_code";
    obj_type="ProgEl_List";
    mbr_path=;
    targ_idx=9;
    targ_name="MethodCall_MyClusterRunActivateAlltrue";
    insert_after="Comment_addourspecialargsfromcommandline";
    insert_before="ProgVarFmArg_SetVarcurconfigi_infromArgconfig";
    new_obj_type="MethodCall";
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
MethodCall .projects[1].programs[0].prog_code[7] { 
 ProgArg_List @.meth_args = [1] {
  ProgArg @[0] { };
 };
};
MethodCall .projects[1].programs[0].prog_code[7] {
 name=\"MethodCall_MyClusterRunActivateAlltrue\";
 desc=\"set saved values first, before processing args\";
 flags=CAN_REVERT_TO_CODE;
 code_string=\"run_params.CopySavedToActive()\";
 result_var=NULL;
 obj=.programs[\"MasterStartup\"].vars[\"MyClusterRun\"]$$<ProgVar,MyClusterRun>;
 method=ControlPanel::ActivateAll;
 meth_args {
  name=\"meth_args\";
  el_typ=ProgArg;
  el_def=0;
  ProgArg @[0] {
   arg_type=bool;
   type=\"bool\";
   name=\"info_msg\";
   required=0;
   def_val=\"true\";
   prev_expr=;
   expr {
    expr=\"true\";
   };
  };
 };
 meth_sig=\"void ActivateAll(bool info_msg = true)\";
 meth_desc=\" activate all of the parameter sets on this and any linked param set objects -- copies the saved_value values to be the active (live) values for all parameters -- this one call can be used on a master ClusterRun or ControlPanel to activate everything in Startup program, for example -- info_msg emits a message about each ParamSet as it is activated\";
};
";
   };
   PatchRec @[16] {
    off=0;
    action=DELETE;
    obj_path_names=".programs[\"MasterStartup\"].prog_code[\"If_ifparamsetnonempty\"]";
    obj_path_idx=".programs[0].prog_code[14]";
    obj_type="If";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
If .projects[0].programs[0].prog_code[14] { 
 ProgEl_List @.true_code = [1] {
  MethodCall @[0] { 
   ProgArg_List @.meth_args = [2] {
    ProgArg @[0] { };
    ProgArg @[1] { };
   };
  };
 };
};
If .projects[0].programs[0].prog_code[14] {
 name=\"If_ifparamsetnonempty\";
 desc=\"set variables to values stored in a param set\";
 flags=CAN_REVERT_TO_CODE;
 code_string=\"if (param_set.nonempty())\";
 cond {
  expr=\"param_set.nonempty()\";
 };
 true_code {
  name=\"true_code\";
  el_typ=ProgCode;
  el_def=0;
  MethodCall @[0] {
   name=\"MethodCall_paramsetsActivat_aramSetparamset\";
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string=\"param_sets->ActivateParamSet(param_set, )\";
   result_var=NULL;
   obj=.programs[\"MasterStartup\"].vars[\"param_sets\"]$$<ProgVar,param_sets>;
   method=ParamSet_Group::ActivateParamSet;
   meth_args {
    name=\"meth_args\";
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=const_taString_ref;
     type=\"taString&\";
     name=\"set_name\";
     required=1;
     def_val=;
     prev_expr=\"param_set\";
     expr {
      expr=\"param_set\";
     };
    };
    ProgArg @[1] {
     arg_type=bool;
     type=\"bool\";
     name=\"err_not_found\";
     required=0;
     def_val=\"true\";
     prev_expr=;
     expr {
      expr=;
     };
    };
   };
   meth_sig=\"bool ActivateParamSet(taString& set_name, bool err_not_found = true)\";
   meth_desc=\" find given parameter set by name within this group, and call CopySavedtoActive(true) on that ParamSet if found, otherwise emit an error (if err_not_found) -- one step function for applying named parameter sets in programs\";
  };
 };
};
";
   };
   PatchRec @[17] {
    off=0;
    action=DELETE;
    obj_path_names=".programs[\"MasterStartup\"].prog_code[\"Comment_TODOAddyourprogr_eremultilinesok\"]";
    obj_path_idx=".programs[0].prog_code[15]";
    obj_type="Comment";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
Comment .projects[0].programs[0].prog_code[15] { };
Comment .projects[0].programs[0].prog_code[15] {
 name=\"Comment_TODOAddyourprogr_eremultilinesok\";
 desc=\"TODO: Add your program comment here (multi-lines ok).\";
 flags=CAN_REVERT_TO_CODE;
 code_string=\"// TODO: Add your program comment here (multi-lines ok).\";
};
";
   };
   PatchRec @[18] {
    off=0;
    action=DELETE;
    obj_path_names=".programs[\"MasterStartup\"].prog_code[\"Comment_Addargstotagname\"]";
    obj_path_idx=".programs[0].prog_code[16]";
    obj_type="Comment";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
Comment .projects[0].programs[0].prog_code[16] { };
Comment .projects[0].programs[0].prog_code[16] {
 name=\"Comment_Addargstotagname\";
 desc=\"= Add args to tag name =\";
 flags=CAN_REVERT_TO_CODE;
 code_string=\"// = Add args to tag name =\";
};
";
   };
   PatchRec @[19] {
    off=0;
    action=DELETE;
    obj_path_names=".programs[\"MasterStartup\"].prog_code[\"If_ifconfigidempty\"]";
    obj_path_idx=".programs[0].prog_code[17]";
    obj_type="If";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
If .projects[0].programs[0].prog_code[17] { 
 ProgEl_List @.true_code = [1] {
  MiscCall @[0] { 
   ProgArg_List @.meth_args = [9] {
    ProgArg @[0] { };
    ProgArg @[1] { };
    ProgArg @[2] { };
    ProgArg @[3] { };
    ProgArg @[4] { };
    ProgArg @[5] { };
    ProgArg @[6] { };
    ProgArg @[7] { };
    ProgArg @[8] { };
   };
  };
 };
};
If .projects[0].programs[0].prog_code[17] {
 name=\"If_ifconfigidempty\";
 desc=;
 flags=CAN_REVERT_TO_CODE;
 code_string=\"if (config_id.empty())\";
 cond {
  expr=\"config_id.empty()\";
 };
 true_code {
  name=\"true_code\";
  el_typ=ProgCode;
  el_def=0;
  MiscCall @[0] {
   name=\"MiscCall_taMiscErrorlesso_tspecifybailing\";
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string=\"taMisc::Error(\\\"lesson_id is empty -- must specify!  bailing\\\", , , , , , , , )\";
   result_var=NULL;
   object_type=taMisc;
   method=taMisc::Error;
   meth_args {
    name=\"meth_args\";
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=const_taString_ref;
     type=\"taString&\";
     name=\"a\";
     required=1;
     def_val=;
     prev_expr=;
     expr {
      expr=\"\\\"lesson_id is empty -- must specify!  bailing\\\"\";
     };
    };
    ProgArg @[1] {
     arg_type=const_taString_ref;
     type=\"taString&\";
     name=\"b\";
     required=0;
     def_val=\"\\\"\\\"\";
     prev_expr=;
     expr {
      expr=;
     };
    };
    ProgArg @[2] {
     arg_type=const_taString_ref;
     type=\"taString&\";
     name=\"c\";
     required=0;
     def_val=\"\\\"\\\"\";
     prev_expr=;
     expr {
      expr=;
     };
    };
    ProgArg @[3] {
     arg_type=const_taString_ref;
     type=\"taString&\";
     name=\"d\";
     required=0;
     def_val=\"\\\"\\\"\";
     prev_expr=;
     expr {
      expr=;
     };
    };
    ProgArg @[4] {
     arg_type=const_taString_ref;
     type=\"taString&\";
     name=\"e\";
     required=0;
     def_val=\"\\\"\\\"\";
     prev_expr=;
     expr {
      expr=;
     };
    };
    ProgArg @[5] {
     arg_type=const_taString_ref;
     type=\"taString&\";
     name=\"f\";
     required=0;
     def_val=\"\\\"\\\"\";
     prev_expr=;
     expr {
      expr=;
     };
    };
    ProgArg @[6] {
     arg_type=const_taString_ref;
     type=\"taString&\";
     name=\"g\";
     required=0;
     def_val=\"\\\"\\\"\";
     prev_expr=;
     expr {
      expr=;
     };
    };
    ProgArg @[7] {
     arg_type=const_taString_ref;
     type=\"taString&\";
     name=\"h\";
     required=0;
     def_val=\"\\\"\\\"\";
     prev_expr=;
     expr {
      expr=;
     };
    };
    ProgArg @[8] {
     arg_type=const_taString_ref;
     type=\"taString&\";
     name=\"i\";
     required=0;
     def_val=\"\\\"\\\"\";
     prev_expr=;
     expr {
      expr=;
     };
    };
   };
  };
 };
};
";
   };
   PatchRec @[20] {
    off=0;
    action=DELETE;
    obj_path_names=".programs[\"MasterStartup\"].prog_code[\"AssignExpr_tagconfigidtag\"]";
    obj_path_idx=".programs[0].prog_code[18]";
    obj_type="AssignExpr";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
AssignExpr .projects[0].programs[0].prog_code[18] { };
AssignExpr .projects[0].programs[0].prog_code[18] {
 name=\"AssignExpr_tagconfigidtag\";
 desc=;
 flags=CAN_REVERT_TO_CODE;
 code_string=\"tag = \\\"_\\\" +  config_id + tag\";
 result_var=.programs[\"MasterStartup\"].vars[\"tag\"]$$<ProgVar,tag>;
 expr {
  expr=\"\\\"_\\\" +  config_id + tag\";
 };
};
";
   };
   PatchRec @[21] {
    off=0;
    action=DELETE;
    obj_path_names=".programs[\"MasterStartup\"].prog_code[\"Comment_setanyparamsfromConfig\"]";
    obj_path_idx=".programs[0].prog_code[19]";
    obj_type="Comment";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
Comment .projects[0].programs[0].prog_code[19] { };
Comment .projects[0].programs[0].prog_code[19] {
 name=\"Comment_setanyparamsfromConfig\";
 desc=\"set any params from Config\";
 flags=CAN_REVERT_TO_CODE;
 code_string=\"// set any params from Config\";
};
";
   };
   PatchRec @[22] {
    off=0;
    action=DELETE;
    obj_path_names=".programs[\"MasterStartup\"].prog_code[\"DataColsFmArgs_DataColsFmArgsta_lrowvarconfigid\"]";
    obj_path_idx=".programs[0].prog_code[20]";
    obj_type="DataColsFmArgs";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
DataColsFmArgs .projects[0].programs[0].prog_code[20] { };
DataColsFmArgs .projects[0].programs[0].prog_code[20] {
 name=\"DataColsFmArgs_DataColsFmArgsta_lrowvarconfigid\";
 desc=;
 flags=CAN_REVERT_TO_CODE;
 code_string=\"Data Cols Fm Args:  table=Config  row_spec=row_val  row_var=config_id \";
 data_var=.programs[\"MasterStartup\"].vars[\"Config\"]$$<ProgVar,Config>;
 row_spec=ROW_VAL;
 row_var=.programs[\"MasterStartup\"].vars[\"config_id\"]$$<ProgVar,config_id>;
};
";
   };
   PatchRec @[23] {
    off=0;
    action=INSERT;
    obj_path_names=".programs[\"MasterStartup\"].prog_code";
    obj_path_idx=".programs[0].prog_code";
    obj_type="ProgEl_List";
    mbr_path=;
    targ_idx=14;
    targ_name="AssignExpr_tagMyClusterRunParamSetNamestag";
    insert_after="ControlPanelsFmArgs_CtrlPanelFmArgsvarMyClusterRun";
    insert_before="If_ifparamsetnonempty";
    new_obj_type="AssignExpr";
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
AssignExpr .projects[1].programs[0].prog_code[9] { };
AssignExpr .projects[1].programs[0].prog_code[9] {
 name=\"AssignExpr_tagMyClusterRunParamSetNamestag\";
 desc=;
 flags=CAN_REVERT_TO_CODE;
 code_string=\"tag = \\\"_\\\" +  config_id + tag\";
 result_var=.programs[\"MasterStartup\"].vars[\"tag\"]$$<ProgVar,tag>;
 expr {
  expr=\"\\\"_\\\" + MyClusterRun->ParamSetNames() + tag\";
 };
};
";
   };
   PatchRec @[24] {
    off=0;
    action=DELETE;
    obj_path_names=".programs[\"MasterStartup\"].prog_code[\"DataVarProg_DataFromtableCon_rogvar2var3var4\"]";
    obj_path_idx=".programs[0].prog_code[26]";
    obj_type="DataVarProg";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
DataVarProg .projects[0].programs[0].prog_code[26] { };
DataVarProg .projects[0].programs[0].prog_code[26] {
 name=\"DataVarProg_DataFromtableCon_rogvar2var3var4\";
 desc=;
 flags=CAN_REVERT_TO_CODE;
 code_string=\"Data From:  table=Config  row_spec=row_val  row_var=config_id  set=from  all_matches=false  var_1=startup_prog  var_2=?  var_3=?  var_4=? \";
 data_var=.programs[\"MasterStartup\"].vars[\"Config\"]$$<ProgVar,Config>;
 row_spec=ROW_VAL;
 row_var=.programs[\"MasterStartup\"].vars[\"config_id\"]$$<ProgVar,config_id>;
 set_data=0;
 all_matches=0;
 quiet=0;
 var_1=.programs[\"MasterStartup\"].vars[\"startup_prog\"]$$<ProgVar,startup_prog>;
 var_2=NULL;
 var_3=NULL;
 var_4=NULL;
};
";
   };
   PatchRec @[25] {
    off=0;
    action=ASSIGN;
    obj_path_names=".programs[\"MasterStartup\"].prog_code[\"ControlPanelsFmArgs_CtrlPanelFmArgsvarMyClusterRun\"]";
    obj_path_idx=".programs[0].prog_code[13]";
    obj_type="ControlPanelsFmArgs";
    mbr_path="flags";
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="CAN_REVERT_TO_CODE";
   };
   PatchRec @[26] {
    off=0;
    action=ASSIGN;
    obj_path_names=".programs[\"MasterStartup\"].prog_code[\"If_iftaMiscCheckArgByNamebatchstart\"]";
    obj_path_idx=".programs[0].prog_code[22]";
    obj_type="If";
    mbr_path="flags";
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="CAN_REVERT_TO_CODE";
   };
   PatchRec @[27] {
    off=0;
    action=ASSIGN;
    obj_path_names=".programs[\"MasterStartup\"].prog_code[\"OtherProgramVar_VarsToprogramSav_tagvar2var3var4\"]";
    obj_path_idx=".programs[0].prog_code[24]";
    obj_type="OtherProgramVar";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
OtherProgramVar .projects[1].programs[0].prog_code[13] { };
OtherProgramVar .projects[1].programs[0].prog_code[13] {
 name=\"OtherProgramVar_VarsToprogramSav_tagvar2var3var4\";
 desc=;
 flags=CAN_REVERT_TO_CODE;
 code_string=\"Vars To:  program=SaveWeights set=to  var_1=tag  var_2=?  var_3=?  var_4=? \";
 other_prog=.programs.gp[\"UtilProgs\"].gp[\"Monitors\"][\"SaveLogFiles\"]$$<Program,SaveLogFiles>;
 set_other=1;
 var_1=.programs[\"MasterStartup\"].vars[\"tag\"]$$<ProgVar,tag>;
 var_2=NULL;
 var_3=NULL;
 var_4=NULL;
};
";
   };
   PatchRec @[28] {
    off=0;
    action=ASSIGN;
    obj_path_names=".programs.gp[\"StartupProgs\"][\"BasicStartup\"].vars[\"tag\"]";
    obj_path_idx=".programs.gp[0][0].vars[0]";
    obj_type="ProgVar";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgVar .projects[1].programs.gp[0][0].vars[0] { };
ProgVar .projects[1].programs.gp[0][0].vars[0] {
 name=\"tag\";
 var_type=T_String;
 string_val=\"_RunMaster_NetMaster\";
 object_scope=NULL;
 flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL;
 reference=0;
 desc=;
 init_from=.programs[\"MasterStartup\"]$$<Program,MasterStartup>;
};
";
   };
   PatchRec @[29] {
    off=0;
    action=ASSIGN;
    obj_path_names=".programs.gp[\"ConfigProgs\"][\"MasterBatch\"].vars[\"n_batches\"]";
    obj_path_idx=".programs.gp[1][0].vars[2]";
    obj_type="ProgVar";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgVar .projects[1].programs.gp[1][0].vars[2] { };
ProgVar .projects[1].programs.gp[1][0].vars[2] {
 name=\"n_batches\";
 var_type=T_Int;
 int_val=1;
 object_scope=NULL;
 flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
 reference=0;
 desc=\"number of batches to run\";
 init_from=NULL;
};
";
   };
   PatchRec @[30] {
    off=0;
    action=DELETE;
    obj_path_names=".programs.gp[\"ConfigProgs\"][\"MasterTrain\"].types[\"ConfigOptions\"]";
    obj_path_idx=".programs.gp[1][1].types[0]";
    obj_type="DynEnumTableCol";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
DynEnumTableCol .projects[0].programs.gp[1][1].types[0] { 
 DynEnumItem_List @.enums = [1] {
  DynEnumItem @[0] { };
 };
};
DynEnumTableCol .projects[0].programs.gp[1][1].types[0] {
 name=\"ConfigOptions\";
 desc=;
 enums {
  name=\"enums\";
  el_typ=DynEnumItem;
  el_def=0;
  DynEnumItem @[0] {
   name=\"basic_train\";
   value=0;
   desc=;
  };
 };
 bits=0;
 src_table=.data.gp[\"ConfigData\"][\"ConfigTable\"]$$<DataTable,ConfigTable>;
 src_column=\"config_id\";
};
";
   };
   PatchRec @[31] {
    off=0;
    action=ASSIGN;
    obj_path_names=".programs.gp[\"ConfigProgs\"][\"MasterTrain\"].vars[\"Config\"]";
    obj_path_idx=".programs.gp[1][1].vars[0]";
    obj_type="ProgVar";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgVar .projects[1].programs.gp[1][1].vars[0] { };
ProgVar .projects[1].programs.gp[1][1].vars[0] {
 name=\"activate_params\";
 var_type=T_Bool;
 bool_val=1;
 object_scope=NULL;
 flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
 reference=0;
 desc=\"whether to activate selected param sets at start of train -- otherwise just uses current values as-is\";
 init_from=NULL;
};
";
   };
   PatchRec @[32] {
    off=0;
    action=ASSIGN;
    obj_path_names=".programs.gp[\"ConfigProgs\"][\"MasterTrain\"].vars[\"cur_config\"]";
    obj_path_idx=".programs.gp[1][1].vars[1]";
    obj_type="ProgVar";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgVar .projects[1].programs.gp[1][1].vars[1] { };
ProgVar .projects[1].programs.gp[1][1].vars[1] {
 name=\"run_params\";
 var_type=T_Object;
 object_type=ParamSet;
 object_val=.active_params.gp[\"RunParams\"][\"RunMaster\"]$$<ParamSet,RunMaster>;
 object_scope=.active_params.gp[\"RunParams\"]$$<ParamSet_Group,RunParams>;
 objs_ptr=0;
 flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
 reference=0;
 desc=\"select parameters for controlling how network is run\";
 init_from=NULL;
};
";
   };
   PatchRec @[33] {
    off=0;
    action=ASSIGN;
    obj_path_names=".programs.gp[\"ConfigProgs\"][\"MasterTrain\"].vars[\"config_id\"]";
    obj_path_idx=".programs.gp[1][1].vars[2]";
    obj_type="ProgVar";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgVar .projects[1].programs.gp[1][1].vars[2] { };
ProgVar .projects[1].programs.gp[1][1].vars[2] {
 name=\"net_params\";
 var_type=T_Object;
 object_type=ParamSet;
 object_val=.active_params.gp[\"NetParams\"][\"NetMaster\"]$$<ParamSet,NetMaster>;
 object_scope=.active_params.gp[\"NetParams\"]$$<ParamSet_Group,NetParams>;
 objs_ptr=0;
 flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
 reference=0;
 desc=\"select other parameters, typically network spec params -- independent of run params\";
 init_from=NULL;
};
";
   };
   PatchRec @[34] {
    off=0;
    action=INSERT;
    obj_path_names=".programs.gp[\"ConfigProgs\"][\"MasterTrain\"].vars";
    obj_path_idx=".programs.gp[1][1].vars";
    obj_type="ProgVar_List";
    mbr_path=;
    targ_idx=5;
    targ_name="cluster_run";
    insert_after="init_prog";
    insert_before="stop_train";
    new_obj_type="ProgVar";
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgVar .projects[1].programs.gp[1][1].vars[5] { };
ProgVar .projects[1].programs.gp[1][1].vars[5] {
 name=\"cluster_run\";
 var_type=T_Object;
 object_type=ClusterRun;
 object_val=.ctrl_panels[\"ClusterRun\"]$$<ClusterRun,ClusterRun>;
 object_scope=NULL;
 objs_ptr=0;
 flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
 reference=0;
 desc=\"used for setting the tag name -- param sets with EXPLORE set will be added to tag\";
 init_from=NULL;
};
";
   };
   PatchRec @[35] {
    off=0;
    action=INSERT;
    obj_path_names=".programs.gp[\"ConfigProgs\"][\"MasterTrain\"].vars";
    obj_path_idx=".programs.gp[1][1].vars";
    obj_type="ProgVar_List";
    mbr_path=;
    targ_idx=5;
    targ_name="save_log_files_interactive";
    insert_after="cluster_run";
    insert_before="stop_train";
    new_obj_type="ProgVar";
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgVar .projects[1].programs.gp[1][1].vars[6] { };
ProgVar .projects[1].programs.gp[1][1].vars[6] {
 name=\"save_log_files_interactive\";
 var_type=T_Bool;
 bool_val=0;
 object_scope=NULL;
 flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|EDIT_VAL;
 reference=0;
 desc=\"save log files when running interactively?\";
 init_from=NULL;
};
";
   };
   PatchRec @[36] {
    off=0;
    action=INSERT;
    obj_path_names=".programs.gp[\"ConfigProgs\"][\"MasterTrain\"].vars";
    obj_path_idx=".programs.gp[1][1].vars";
    obj_type="ProgVar_List";
    mbr_path=;
    targ_idx=5;
    targ_name="cust_tag";
    insert_after="save_log_files_interactive";
    insert_before="stop_train";
    new_obj_type="ProgVar";
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgVar .projects[1].programs.gp[1][1].vars[7] { };
ProgVar .projects[1].programs.gp[1][1].vars[7] {
 name=\"cust_tag\";
 var_type=T_String;
 string_val=;
 object_scope=NULL;
 flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
 reference=0;
 desc=\"add any custom tag string here -- used for labeling log and weight files along with config info\";
 init_from=NULL;
};
";
   };
   PatchRec @[37] {
    off=0;
    action=INSERT;
    obj_path_names=".programs.gp[\"ConfigProgs\"][\"MasterTrain\"].vars";
    obj_path_idx=".programs.gp[1][1].vars";
    obj_type="ProgVar_List";
    mbr_path=;
    targ_idx=5;
    targ_name="tag";
    insert_after="cust_tag";
    insert_before="stop_train";
    new_obj_type="ProgVar";
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgVar .projects[1].programs.gp[1][1].vars[8] { };
ProgVar .projects[1].programs.gp[1][1].vars[8] {
 name=\"tag\";
 var_type=T_String;
 string_val=\"__RunMaster_NetMaster\";
 object_scope=NULL;
 flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
 reference=0;
 desc=;
 init_from=NULL;
};
";
   };
   PatchRec @[38] {
    off=0;
    action=ASSIGN;
    obj_path_names=".programs.gp[\"ConfigProgs\"][\"MasterTrain\"].vars[\"Config\"]";
    obj_path_idx=".programs.gp[1][1].vars[0]";
    obj_type="ProgVar";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgVar .projects[1].programs.gp[1][1].vars[0] { };
ProgVar .projects[1].programs.gp[1][1].vars[0] {
 name=\"activate_params\";
 var_type=T_Bool;
 bool_val=1;
 object_scope=NULL;
 flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
 reference=0;
 desc=\"whether to activate selected param sets at start of train -- otherwise just uses current values as-is\";
 init_from=NULL;
};
";
   };
   PatchRec @[39] {
    off=0;
    action=ASSIGN;
    obj_path_names=".programs.gp[\"ConfigProgs\"][\"MasterTrain\"].vars[\"cur_config\"]";
    obj_path_idx=".programs.gp[1][1].vars[1]";
    obj_type="ProgVar";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgVar .projects[1].programs.gp[1][1].vars[1] { };
ProgVar .projects[1].programs.gp[1][1].vars[1] {
 name=\"run_params\";
 var_type=T_Object;
 object_type=ParamSet;
 object_val=.active_params.gp[\"RunParams\"][\"RunMaster\"]$$<ParamSet,RunMaster>;
 object_scope=.active_params.gp[\"RunParams\"]$$<ParamSet_Group,RunParams>;
 objs_ptr=0;
 flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
 reference=0;
 desc=\"select parameters for controlling how network is run\";
 init_from=NULL;
};
";
   };
   PatchRec @[40] {
    off=0;
    action=ASSIGN;
    obj_path_names=".programs.gp[\"ConfigProgs\"][\"MasterTrain\"].vars[\"config_id\"]";
    obj_path_idx=".programs.gp[1][1].vars[2]";
    obj_type="ProgVar";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgVar .projects[1].programs.gp[1][1].vars[2] { };
ProgVar .projects[1].programs.gp[1][1].vars[2] {
 name=\"net_params\";
 var_type=T_Object;
 object_type=ParamSet;
 object_val=.active_params.gp[\"NetParams\"][\"NetMaster\"]$$<ParamSet,NetMaster>;
 object_scope=.active_params.gp[\"NetParams\"]$$<ParamSet_Group,NetParams>;
 objs_ptr=0;
 flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
 reference=0;
 desc=\"select other parameters, typically network spec params -- independent of run params\";
 init_from=NULL;
};
";
   };
   PatchRec @[41] {
    off=0;
    action=ASSIGN;
    obj_path_names=".programs.gp[\"ConfigProgs\"][\"MasterTrain\"].vars[\"run_prog\"]";
    obj_path_idx=".programs.gp[1][1].vars[3]";
    obj_type="ProgVar";
    mbr_path="flags";
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL";
   };
   PatchRec @[42] {
    off=0;
    action=ASSIGN;
    obj_path_names=".programs.gp[\"ConfigProgs\"][\"MasterTrain\"].vars[\"init_prog\"]";
    obj_path_idx=".programs.gp[1][1].vars[4]";
    obj_type="ProgVar";
    mbr_path="flags";
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL";
   };
   PatchRec @[43] {
    off=0;
    action=DELETE;
    obj_path_names=".programs.gp[\"ConfigProgs\"][\"MasterTrain\"].init_code[\"AssignExpr_configidcurconfig\"]";
    obj_path_idx=".programs.gp[1][1].init_code[1]";
    obj_type="AssignExpr";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
AssignExpr .projects[0].programs.gp[1][1].init_code[1] { };
AssignExpr .projects[0].programs.gp[1][1].init_code[1] {
 name=\"AssignExpr_configidcurconfig\";
 desc=;
 flags=CAN_REVERT_TO_CODE;
 code_string=\"config_id = cur_config\";
 result_var=.programs.gp[\"ConfigProgs\"][\"MasterTrain\"].vars[\"config_id\"]$$<ProgVar,config_id>;
 expr {
  expr=\"cur_config\";
 };
};
";
   };
   PatchRec @[44] {
    off=0;
    action=INSERT;
    obj_path_names=".programs.gp[\"ConfigProgs\"][\"MasterTrain\"].prog_code";
    obj_path_idx=".programs.gp[1][1].prog_code";
    obj_type="ProgEl_List";
    mbr_path=;
    targ_idx=0;
    targ_name="LocalVars_LocalVars0vars";
    insert_after=;
    insert_before="AssignExpr_stoptrainfalse";
    new_obj_type="LocalVars";
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
LocalVars .projects[1].programs.gp[1][1].prog_code[0] { 
 ProgVar_List @.local_vars = [0] {
 };
};
LocalVars .projects[1].programs.gp[1][1].prog_code[0] {
 name=\"LocalVars_LocalVars0vars\";
 desc=;
 flags=CAN_REVERT_TO_CODE;
 code_string=\"LocalVars (0 vars)\";
 local_vars {
  name=\"local_vars\";
  el_typ=ProgVar;
  el_def=0;
 };
};
";
   };
   PatchRec @[45] {
    off=0;
    action=DELETE;
    obj_path_names=".programs.gp[\"ConfigProgs\"][\"MasterTrain\"].prog_code[\"AssignExpr_configidcurconfig\"]";
    obj_path_idx=".programs.gp[1][1].prog_code[1]";
    obj_type="AssignExpr";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
AssignExpr .projects[0].programs.gp[1][1].prog_code[1] { };
AssignExpr .projects[0].programs.gp[1][1].prog_code[1] {
 name=\"AssignExpr_configidcurconfig\";
 desc=;
 flags=CAN_REVERT_TO_CODE;
 code_string=\"config_id = cur_config\";
 result_var=.programs.gp[\"ConfigProgs\"][\"MasterTrain\"].vars[\"config_id\"]$$<ProgVar,config_id>;
 expr {
  expr=\"cur_config\";
 };
};
";
   };
   PatchRec @[46] {
    off=0;
    action=DELETE;
    obj_path_names=".programs.gp[\"ConfigProgs\"][\"MasterTrain\"].prog_code[\"DataVarProg_DataFromtableCon_runprogvar3var4\"]";
    obj_path_idx=".programs.gp[1][1].prog_code[2]";
    obj_type="DataVarProg";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
DataVarProg .projects[0].programs.gp[1][1].prog_code[2] { };
DataVarProg .projects[0].programs.gp[1][1].prog_code[2] {
 name=\"DataVarProg_DataFromtableCon_runprogvar3var4\";
 desc=;
 flags=CAN_REVERT_TO_CODE;
 code_string=\"Data From:  table=Config  row_spec=row_val  row_var=config_id  set=from  all_matches=false  var_1=init_prog  var_2=run_prog  var_3=?  var_4=? \";
 data_var=.programs.gp[\"ConfigProgs\"][\"MasterTrain\"].vars[\"Config\"]$$<ProgVar,Config>;
 row_spec=ROW_VAL;
 row_var=.programs.gp[\"ConfigProgs\"][\"MasterTrain\"].vars[\"config_id\"]$$<ProgVar,config_id>;
 set_data=0;
 all_matches=0;
 quiet=0;
 var_1=.programs.gp[\"ConfigProgs\"][\"MasterTrain\"].vars[\"init_prog\"]$$<ProgVar,init_prog>;
 var_2=.programs.gp[\"ConfigProgs\"][\"MasterTrain\"].vars[\"run_prog\"]$$<ProgVar,run_prog>;
 var_3=NULL;
 var_4=NULL;
};
";
   };
   PatchRec @[47] {
    off=0;
    action=DELETE;
    obj_path_names=".programs.gp[\"ConfigProgs\"][\"MasterTrain\"].prog_code[\"MethodCall_Configmethod\"]";
    obj_path_idx=".programs.gp[1][1].prog_code[3]";
    obj_type="MethodCall";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
MethodCall .projects[0].programs.gp[1][1].prog_code[3] { 
 ProgArg_List @.meth_args = [2] {
  ProgArg @[0] { };
  ProgArg @[1] { };
 };
};
MethodCall .projects[0].programs.gp[1][1].prog_code[3] {
 name=\"MethodCall_Configmethod\";
 desc=;
 flags=OFF|CAN_REVERT_TO_CODE;
 code_string=\"Config->method()\";
 result_var=NULL;
 obj=.programs.gp[\"ConfigProgs\"][\"MasterTrain\"].vars[\"Config\"]$$<ProgVar,Config>;
 method=NULL;
 meth_args {
  name=\"meth_args\";
  el_typ=ProgArg;
  el_def=0;
  ProgArg @[0] {
   arg_type=taString;
   type=\"taString\";
   name=\"column_name\";
   required=1;
   def_val=;
   prev_expr=;
   expr {
    expr=\"\\\"config_id\\\"\";
   };
  };
  ProgArg @[1] {
   arg_type=taString;
   type=\"taString\";
   name=\"value\";
   required=1;
   def_val=;
   prev_expr=;
   expr {
    expr=\"config_id\";
   };
  };
 };
 meth_sig=\"void SetCellsFromRowLookup(taString column_name, taString value)\";
 meth_desc=\" set the values of table cells in the row with value matching the 'value' arg of column matching 'column_name' arg\";
};
";
   };
   PatchRec @[48] {
    off=0;
    action=DELETE;
    obj_path_names=".programs.gp[\"ConfigProgs\"][\"MasterTrain\"].prog_code[\"ProgramCallVar_CallFmproggroupI_networkconfigid\"]";
    obj_path_idx=".programs.gp[1][1].prog_code[4]";
    obj_type="ProgramCallVar";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgramCallVar .projects[0].programs.gp[1][1].prog_code[4] { 
 ProgArg_List @.prog_args = [2] {
  ProgArg @[0] { };
  ProgArg @[1] { };
 };
};
ProgramCallVar .projects[0].programs.gp[1][1].prog_code[4] {
 name=\"ProgramCallVar_CallFmproggroupI_networkconfigid\";
 desc=;
 flags=CAN_REVERT_TO_CODE;
 code_string=\"Call Fm: prog_group=InitProgs prog_name_var=init_prog (network, config_id)\";
 prog_args {
  name=\"prog_args\";
  el_typ=ProgArg;
  el_def=0;
  ProgArg @[0] {
   arg_type=LeabraNetwork;
   type=\"LeabraNetwork*\";
   name=\"network\";
   required=1;
   def_val=;
   prev_expr=;
   expr {
    expr=\"network\";
   };
  };
  ProgArg @[1] {
   arg_type=taString;
   type=\"String\";
   name=\"config_id\";
   required=1;
   def_val=;
   prev_expr=;
   expr {
    expr=\"config_id\";
   };
  };
 };
 prog_group=.programs.gp[\"ConfigProgs\"].gp[\"InitProgs\"]$$<Program_Group,InitProgs>;
 prog_name_var=.programs.gp[\"ConfigProgs\"][\"MasterTrain\"].vars[\"init_prog\"]$$<ProgVar,init_prog>;
};
";
   };
   PatchRec @[49] {
    off=0;
    action=INSERT;
    obj_path_names=".programs.gp[\"ConfigProgs\"][\"MasterTrain\"].prog_code";
    obj_path_idx=".programs.gp[1][1].prog_code";
    obj_type="ProgEl_List";
    mbr_path=;
    targ_idx=1;
    targ_name="If_iftaMiscinteractive";
    insert_after="AssignExpr_stoptrainfalse";
    insert_before="AssignExpr_configidcurconfig";
    new_obj_type="If";
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
If .projects[1].programs.gp[1][1].prog_code[2] { 
 ProgEl_List @.true_code = [3] {
  AssignExpr @[0] { };
  OtherProgramVar @[1] { };
  If @[2] { 
   ProgEl_List @.true_code = [2] {
    MethodCall @[0] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    MethodCall @[1] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
   };
  };
 };
};
If .projects[1].programs.gp[1][1].prog_code[2] {
 name=\"If_iftaMiscinteractive\";
 desc=;
 flags=CAN_REVERT_TO_CODE;
 code_string=\"if (taMisc::interactive)\";
 cond {
  expr=\"taMisc::interactive\";
 };
 true_code {
  name=\"true_code\";
  el_typ=ProgCode;
  el_def=0;
  AssignExpr @[0] {
   name=\"AssignExpr_tagcusttagcluste_amSetNamesfalse\";
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string=\"tag = \\\"_\\\" + cust_tag + \\\"_\\\" + cluster_run->ParamSetNames(false)\";
   result_var=.programs.gp[\"ConfigProgs\"][\"MasterTrain\"].vars[\"tag\"]$$<ProgVar,tag>;
   expr {
    expr=\"\\\"_\\\" + cust_tag + \\\"_\\\" + cluster_run->ParamSetNames(false)\";
   };
  };
  OtherProgramVar @[1] {
   name=\"OtherProgramVar_VarsToprogramSav_tagvar2var3var4\";
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string=\"Vars To:  program=SaveLogFiles set=to  var_1=tag  var_2=?  var_3=?  var_4=? \";
   other_prog=.programs.gp[\"UtilProgs\"].gp[\"Monitors\"][\"SaveLogFiles\"]$$<Program,SaveLogFiles>;
   set_other=1;
   var_1=$.programs.gp[\"ConfigProgs\"][\"MasterTrain\"].vars[\"tag\"]$;
   var_2=NULL;
   var_3=NULL;
   var_4=NULL;
  };
  If @[2] {
   name=\"If_ifactivateparams\";
   desc=\"only if running interactively -- otherwise set in MasterStartup!\";
   flags=CAN_REVERT_TO_CODE;
   code_string=\"if (activate_params)\";
   cond {
    expr=\"activate_params\";
   };
   true_code {
    name=\"true_code\";
    el_typ=ProgCode;
    el_def=0;
    MethodCall @[0] {
     name=\"MethodCall_runparamsActivatetrue\";
     desc=\"activate config values\";
     flags=CAN_REVERT_TO_CODE;
     code_string=\"run_params->Activate(true)\";
     result_var=NULL;
     obj=.programs.gp[\"ConfigProgs\"][\"MasterTrain\"].vars[\"run_params\"]$$<ProgVar,run_params>;
     method=ParamSet::Activate;
     meth_args {
      name=\"meth_args\";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=bool;
       type=\"bool\";
       name=\"info_msg\";
       required=0;
       def_val=\"false\";
       prev_expr=;
       expr {
	expr=\"true\";
       };
      };
     };
     meth_sig=\"void Activate(bool info_msg = false)\";
     meth_desc=\" copy the saved_value values to be active (live) values on the objects\";
    };
    MethodCall @[1] {
     name=\"MethodCall_netparamsActivatetrue\";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string=\"net_params->Activate(true)\";
     result_var=NULL;
     obj=.programs.gp[\"ConfigProgs\"][\"MasterTrain\"].vars[\"net_params\"]$$<ProgVar,net_params>;
     method=ParamSet::Activate;
     meth_args {
      name=\"meth_args\";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=bool;
       type=\"bool\";
       name=\"info_msg\";
       required=0;
       def_val=\"false\";
       prev_expr=;
       expr {
	expr=\"true\";
       };
      };
     };
     meth_sig=\"void Activate(bool info_msg = false)\";
     meth_desc=\" copy the saved_value values to be active (live) values on the objects\";
    };
   };
  };
 };
};
";
   };
   PatchRec @[50] {
    off=0;
    action=INSERT;
    obj_path_names=".programs.gp[\"ConfigProgs\"][\"MasterTrain\"].prog_code";
    obj_path_idx=".programs.gp[1][1].prog_code";
    obj_type="ProgEl_List";
    mbr_path=;
    targ_idx=1;
    targ_name="ProgramCallVar_CallFmproggroupI_initprognetwork";
    insert_after="If_iftaMiscinteractive";
    insert_before="AssignExpr_configidcurconfig";
    new_obj_type="ProgramCallVar";
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgramCallVar .projects[1].programs.gp[1][1].prog_code[3] { 
 ProgArg_List @.prog_args = [1] {
  ProgArg @[0] { };
 };
};
ProgramCallVar .projects[1].programs.gp[1][1].prog_code[3] {
 name=\"ProgramCallVar_CallFmproggroupI_initprognetwork\";
 desc=;
 flags=CAN_REVERT_TO_CODE;
 code_string=\"Call Fm: prog_group=InitProgs prog_name_var=init_prog (network)\";
 prog_args {
  name=\"prog_args\";
  el_typ=ProgArg;
  el_def=0;
  ProgArg @[0] {
   arg_type=LeabraNetwork;
   type=\"LeabraNetwork*\";
   name=\"network\";
   required=1;
   def_val=;
   prev_expr=;
   expr {
    expr=\"network\";
   };
  };
 };
 prog_group=.programs.gp[\"ConfigProgs\"].gp[\"InitProgs\"]$$<Program_Group,InitProgs>;
 prog_name_var=.programs.gp[\"ConfigProgs\"][\"MasterTrain\"].vars[\"init_prog\"]$$<ProgVar,init_prog>;
};
";
   };
   PatchRec @[51] {
    off=0;
    action=ASSIGN;
    obj_path_names=".programs.gp[\"ConfigProgs\"][\"MasterTrain\"].prog_code[\"WhileLoop_whilestoptrain\"].loop_code[\"ProgramCall_MasterRunnetworkconfigidrunprog\"]";
    obj_path_idx=".programs.gp[1][1].prog_code[5].loop_code[0]";
    obj_type="ProgramCall";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgramCall .projects[1].programs.gp[1][1].prog_code[4].loop_code[0] { 
 ProgArg_List @.prog_args = [2] {
  ProgArg @[0] { };
  ProgArg @[1] { };
 };
};
ProgramCall .projects[1].programs.gp[1][1].prog_code[4].loop_code[0] {
 name=\"ProgramCall_MasterRunnetworkrunprog\";
 desc=;
 flags=CAN_REVERT_TO_CODE;
 code_string=\"MasterRun(network, run_prog)\";
 prog_args {
  name=\"prog_args\";
  el_typ=ProgArg;
  el_def=0;
  ProgArg @[0] {
   arg_type=LeabraNetwork;
   type=\"LeabraNetwork*\";
   name=\"network\";
   required=1;
   def_val=;
   prev_expr=\"network\";
   expr {
    expr=\"network\";
   };
  };
  ProgArg @[1] {
   arg_type=taString;
   type=\"String\";
   name=\"run_prog\";
   required=1;
   def_val=;
   prev_expr=\"config_id\";
   expr {
    expr=\"run_prog\";
   };
  };
 };
 target=.programs.gp[\"ConfigProgs\"][\"MasterRun\"]$$<Program,MasterRun>;
 targ_ld_init=\"*MasterRun*\";
};
";
   };
   PatchRec @[52] {
    off=0;
    action=ASSIGN;
    obj_path_names=".programs.gp[\"ConfigProgs\"][\"MasterTrain\"].prog_code[\"WhileLoop_whilestoptrain\"].loop_code[\"ProgramCall_MasterRunnetworkconfigidrunprog\"]";
    obj_path_idx=".programs.gp[1][1].prog_code[5].loop_code[0]";
    obj_type="ProgramCall";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgramCall .projects[1].programs.gp[1][1].prog_code[4].loop_code[0] { 
 ProgArg_List @.prog_args = [2] {
  ProgArg @[0] { };
  ProgArg @[1] { };
 };
};
ProgramCall .projects[1].programs.gp[1][1].prog_code[4].loop_code[0] {
 name=\"ProgramCall_MasterRunnetworkrunprog\";
 desc=;
 flags=CAN_REVERT_TO_CODE;
 code_string=\"MasterRun(network, run_prog)\";
 prog_args {
  name=\"prog_args\";
  el_typ=ProgArg;
  el_def=0;
  ProgArg @[0] {
   arg_type=LeabraNetwork;
   type=\"LeabraNetwork*\";
   name=\"network\";
   required=1;
   def_val=;
   prev_expr=\"network\";
   expr {
    expr=\"network\";
   };
  };
  ProgArg @[1] {
   arg_type=taString;
   type=\"String\";
   name=\"run_prog\";
   required=1;
   def_val=;
   prev_expr=\"config_id\";
   expr {
    expr=\"run_prog\";
   };
  };
 };
 target=.programs.gp[\"ConfigProgs\"][\"MasterRun\"]$$<Program,MasterRun>;
 targ_ld_init=\"*MasterRun*\";
};
";
   };
   PatchRec @[53] {
    off=0;
    action=DELETE;
    obj_path_names=".programs.gp[\"ConfigProgs\"][\"MasterTrain\"].prog_code[\"WhileLoop_whilestoptrain\"].loop_code[\"ProgramCall_MasterRunnetworkconfigidrunprog\"].prog_args[\"config_id\"]";
    obj_path_idx=".programs.gp[1][1].prog_code[5].loop_code[0].prog_args[1]";
    obj_type="ProgArg";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgArg .projects[0].programs.gp[1][1].prog_code[5].loop_code[0].prog_args[1] { };
ProgArg .projects[0].programs.gp[1][1].prog_code[5].loop_code[0].prog_args[1] {
 arg_type=taString;
 type=\"String\";
 name=\"config_id\";
 required=1;
 def_val=;
 prev_expr=;
 expr {
  expr=\"config_id\";
 };
};
";
   };
   PatchRec @[54] {
    off=0;
    action=DELETE;
    obj_path_names=".programs.gp[\"ConfigProgs\"][\"MasterRun\"].args[\"config_id\"]";
    obj_path_idx=".programs.gp[1][2].args[1]";
    obj_type="ProgVar";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgVar .projects[0].programs.gp[1][2].args[1] { };
ProgVar .projects[0].programs.gp[1][2].args[1] {
 name=\"config_id\";
 var_type=T_String;
 string_val=\"basic_train\";
 object_scope=NULL;
 flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
 reference=0;
 desc=\"configuration to use -- lookup in Config table\";
 init_from=NULL;
};
";
   };
   PatchRec @[55] {
    off=0;
    action=ASSIGN;
    obj_path_names=".programs.gp[\"ConfigProgs\"][\"MasterRun\"].args[\"run_prog\"]";
    obj_path_idx=".programs.gp[1][2].args[2]";
    obj_type="ProgVar";
    mbr_path="flags";
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG";
   };
   PatchRec @[56] {
    off=0;
    action=DELETE;
    obj_path_names=".programs.gp[\"ConfigProgs\"][\"MasterRun\"].vars[\"Config\"]";
    obj_path_idx=".programs.gp[1][2].vars[0]";
    obj_type="ProgVar";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgVar .projects[0].programs.gp[1][2].vars[0] { };
ProgVar .projects[0].programs.gp[1][2].vars[0] {
 name=\"Config\";
 var_type=T_Object;
 object_type=DataTable;
 object_val=.data.gp[\"ConfigData\"][\"ConfigTable\"]$$<DataTable,ConfigTable>;
 object_scope=NULL;
 objs_ptr=0;
 flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|EDIT_VAL;
 reference=0;
 desc=;
 init_from=NULL;
};
";
   };
   PatchRec @[57] {
    off=0;
    action=ASSIGN;
    obj_path_names=".programs.gp[\"ConfigProgs\"][\"MasterRun\"].prog_code[\"ProgramCallVar_CallFmproggroupR_networkconfigid\"]";
    obj_path_idx=".programs.gp[1][2].prog_code[0]";
    obj_type="ProgramCallVar";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgramCallVar .projects[1].programs.gp[1][2].prog_code[0] { 
 ProgArg_List @.prog_args = [1] {
  ProgArg @[0] { };
 };
};
ProgramCallVar .projects[1].programs.gp[1][2].prog_code[0] {
 name=\"ProgramCallVar_CallFmproggroupR_rrunprognetwork\";
 desc=;
 flags=CAN_REVERT_TO_CODE;
 code_string=\"Call Fm: prog_group=RunProgs prog_name_var=run_prog (network)\";
 prog_args {
  name=\"prog_args\";
  el_typ=ProgArg;
  el_def=0;
  ProgArg @[0] {
   arg_type=LeabraNetwork;
   type=\"LeabraNetwork*\";
   name=\"network\";
   required=1;
   def_val=;
   prev_expr=\"network\";
   expr {
    expr=\"network\";
   };
  };
 };
 prog_group=.programs.gp[\"ConfigProgs\"].gp[\"RunProgs\"]$$<Program_Group,RunProgs>;
 prog_name_var=.programs.gp[\"ConfigProgs\"][\"MasterRun\"].args[\"run_prog\"]$$<ProgVar,run_prog>;
};
";
   };
   PatchRec @[58] {
    off=0;
    action=ASSIGN;
    obj_path_names=".programs.gp[\"ConfigProgs\"][\"MasterRun\"].prog_code[\"ProgramCallVar_CallFmproggroupR_networkconfigid\"]";
    obj_path_idx=".programs.gp[1][2].prog_code[0]";
    obj_type="ProgramCallVar";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgramCallVar .projects[1].programs.gp[1][2].prog_code[0] { 
 ProgArg_List @.prog_args = [1] {
  ProgArg @[0] { };
 };
};
ProgramCallVar .projects[1].programs.gp[1][2].prog_code[0] {
 name=\"ProgramCallVar_CallFmproggroupR_rrunprognetwork\";
 desc=;
 flags=CAN_REVERT_TO_CODE;
 code_string=\"Call Fm: prog_group=RunProgs prog_name_var=run_prog (network)\";
 prog_args {
  name=\"prog_args\";
  el_typ=ProgArg;
  el_def=0;
  ProgArg @[0] {
   arg_type=LeabraNetwork;
   type=\"LeabraNetwork*\";
   name=\"network\";
   required=1;
   def_val=;
   prev_expr=\"network\";
   expr {
    expr=\"network\";
   };
  };
 };
 prog_group=.programs.gp[\"ConfigProgs\"].gp[\"RunProgs\"]$$<Program_Group,RunProgs>;
 prog_name_var=.programs.gp[\"ConfigProgs\"][\"MasterRun\"].args[\"run_prog\"]$$<ProgVar,run_prog>;
};
";
   };
   PatchRec @[59] {
    off=0;
    action=DELETE;
    obj_path_names=".programs.gp[\"ConfigProgs\"][\"MasterRun\"].prog_code[\"ProgramCallVar_CallFmproggroupR_networkconfigid\"].prog_args[\"config_id\"]";
    obj_path_idx=".programs.gp[1][2].prog_code[0].prog_args[1]";
    obj_type="ProgArg";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgArg .projects[0].programs.gp[1][2].prog_code[0].prog_args[1] { };
ProgArg .projects[0].programs.gp[1][2].prog_code[0].prog_args[1] {
 arg_type=taString;
 type=\"String\";
 name=\"config_id\";
 required=1;
 def_val=;
 prev_expr=;
 expr {
  expr=\"config_id\";
 };
};
";
   };
   PatchRec @[60] {
    off=0;
    action=DELETE;
    obj_path_names=".programs.gp[\"ConfigProgs\"].gp[\"InitProgs\"][\"BasicInit\"].args[\"config_id\"]";
    obj_path_idx=".programs.gp[1].gp[0][0].args[1]";
    obj_type="ProgVar";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgVar .projects[0].programs.gp[1].gp[0][0].args[1] { };
ProgVar .projects[0].programs.gp[1].gp[0][0].args[1] {
 name=\"config_id\";
 var_type=T_String;
 string_val=\"basic_train\";
 object_scope=NULL;
 flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
 reference=0;
 desc=\"configuration to use -- lookup in Config table\";
 init_from=NULL;
};
";
   };
   PatchRec @[61] {
    off=0;
    action=INSERT;
    obj_path_names=".programs.gp[\"ConfigProgs\"].gp[\"InitProgs\"][\"BasicInit\"].vars";
    obj_path_idx=".programs.gp[1].gp[0][0].vars";
    obj_type="ProgVar_List";
    mbr_path=;
    targ_idx=4;
    targ_name="test_run";
    insert_after="prjn_unlesion_list";
    insert_before=;
    new_obj_type="ProgVar";
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgVar .projects[1].programs.gp[1].gp[0][0].vars[4] { };
ProgVar .projects[1].programs.gp[1].gp[0][0].vars[4] {
 name=\"test_run\";
 var_type=T_Bool;
 bool_val=0;
 object_scope=NULL;
 flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED;
 reference=0;
 desc=\"is this a testing-only run, no training?\";
 init_from=.programs.gp[\"UtilProgs\"][\"TrainStart\"]$$<Program,TrainStart>;
};
";
   };
   PatchRec @[62] {
    off=0;
    action=DELETE;
    obj_path_names=".programs.gp[\"ConfigProgs\"].gp[\"InitProgs\"][\"BasicInit\"].prog_code[\"ProgramCall_StdGlobalsInitnetworkconfigid\"]";
    obj_path_idx=".programs.gp[1].gp[0][0].prog_code[0]";
    obj_type="ProgramCall";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgramCall .projects[0].programs.gp[1].gp[0][0].prog_code[0] { 
 ProgArg_List @.prog_args = [2] {
  ProgArg @[0] { };
  ProgArg @[1] { };
 };
};
ProgramCall .projects[0].programs.gp[1].gp[0][0].prog_code[0] {
 name=\"ProgramCall_StdGlobalsInitnetworkconfigid\";
 desc=\"always do std globals init\";
 flags=CAN_REVERT_TO_CODE;
 code_string=\"StdGlobalsInit(network, config_id)\";
 prog_args {
  name=\"prog_args\";
  el_typ=ProgArg;
  el_def=0;
  ProgArg @[0] {
   arg_type=LeabraNetwork;
   type=\"LeabraNetwork*\";
   name=\"network\";
   required=1;
   def_val=;
   prev_expr=;
   expr {
    expr=\"network\";
   };
  };
  ProgArg @[1] {
   arg_type=taString;
   type=\"String\";
   name=\"config_id\";
   required=1;
   def_val=;
   prev_expr=;
   expr {
    expr=\"config_id\";
   };
  };
 };
 target=.programs.gp[\"UtilProgs\"][\"StdGlobalsInit\"]$$<Program,StdGlobalsInit>;
 targ_ld_init=\"*StdGlobalsInit*\";
};
";
   };
   PatchRec @[63] {
    off=0;
    action=ASSIGN;
    obj_path_names=".programs.gp[\"ConfigProgs\"].gp[\"InitProgs\"][\"BasicInit\"].prog_code[\"If_ifconfigidcontainstest\"]";
    obj_path_idx=".programs.gp[1].gp[0][0].prog_code[3]";
    obj_type="If";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
If .projects[1].programs.gp[1].gp[0][0].prog_code[2] { 
 ProgEl_List @.true_code = [1] {
  MemberAssign @[0] { };
 };
};
If .projects[1].programs.gp[1].gp[0][0].prog_code[2] {
 name=\"If_iftestrun\";
 desc=;
 flags=CAN_REVERT_TO_CODE;
 code_string=\"if (test_run)\";
 cond {
  expr=\"test_run\";
 };
 true_code {
  name=\"true_code\";
  el_typ=ProgCode;
  el_def=0;
  MemberAssign @[0] {
   name=\"MemberAssign_networktrainmode_abraNetworkTEST\";
   desc=\"set network to training mode\";
   flags=CAN_REVERT_TO_CODE;
   code_string=\"network.train_mode = LeabraNetwork::TEST\";
   obj=.programs.gp[\"ConfigProgs\"].gp[\"InitProgs\"][\"BasicInit\"].args[\"network\"]$$<ProgVar,network>;
   path=\"train_mode\";
   expr {
    expr=\"LeabraNetwork::TEST\";
   };
   update_after=0;
  };
 };
};
";
   };
   PatchRec @[64] {
    off=0;
    action=ASSIGN;
    obj_path_names=".programs.gp[\"ConfigProgs\"].gp[\"InitProgs\"][\"BasicInit\"].prog_code[\"Else_If_ifconfigidcontainstest\"]";
    obj_path_idx=".programs.gp[1].gp[0][0].prog_code[4]";
    obj_type="Else";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
Else .projects[1].programs.gp[1].gp[0][0].prog_code[3] { 
 ProgEl_List @.true_code = [1] {
  MemberAssign @[0] { };
 };
};
Else .projects[1].programs.gp[1].gp[0][0].prog_code[3] {
 name=\"Else_If_iftestrun\";
 desc=;
 flags=CAN_REVERT_TO_CODE;
 code_string=\"else\";
 cond {
  expr=;
 };
 true_code {
  name=\"true_code\";
  el_typ=ProgCode;
  el_def=0;
  MemberAssign @[0] {
   name=\"MemberAssign_networktrainmode_braNetworkTRAIN\";
   desc=\"set network to training mode\";
   flags=CAN_REVERT_TO_CODE;
   code_string=\"network.train_mode = LeabraNetwork::TRAIN\";
   obj=.programs.gp[\"ConfigProgs\"].gp[\"InitProgs\"][\"BasicInit\"].args[\"network\"]$$<ProgVar,network>;
   path=\"train_mode\";
   expr {
    expr=\"LeabraNetwork::TRAIN\";
   };
   update_after=0;
  };
 };
};
";
   };
   PatchRec @[65] {
    off=0;
    action=ASSIGN;
    obj_path_names=".programs.gp[\"ConfigProgs\"].gp[\"InitProgs\"][\"BasicInit\"].prog_code[\"If_ifconfigidcontainstest\"]";
    obj_path_idx=".programs.gp[1].gp[0][0].prog_code[3]";
    obj_type="If";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
If .projects[1].programs.gp[1].gp[0][0].prog_code[2] { 
 ProgEl_List @.true_code = [1] {
  MemberAssign @[0] { };
 };
};
If .projects[1].programs.gp[1].gp[0][0].prog_code[2] {
 name=\"If_iftestrun\";
 desc=;
 flags=CAN_REVERT_TO_CODE;
 code_string=\"if (test_run)\";
 cond {
  expr=\"test_run\";
 };
 true_code {
  name=\"true_code\";
  el_typ=ProgCode;
  el_def=0;
  MemberAssign @[0] {
   name=\"MemberAssign_networktrainmode_abraNetworkTEST\";
   desc=\"set network to training mode\";
   flags=CAN_REVERT_TO_CODE;
   code_string=\"network.train_mode = LeabraNetwork::TEST\";
   obj=.programs.gp[\"ConfigProgs\"].gp[\"InitProgs\"][\"BasicInit\"].args[\"network\"]$$<ProgVar,network>;
   path=\"train_mode\";
   expr {
    expr=\"LeabraNetwork::TEST\";
   };
   update_after=0;
  };
 };
};
";
   };
   PatchRec @[66] {
    off=0;
    action=DELETE;
    obj_path_names=".programs.gp[\"ConfigProgs\"].gp[\"RunProgs\"][\"BasicRun\"].args[\"config_id\"]";
    obj_path_idx=".programs.gp[1].gp[1][0].args[1]";
    obj_type="ProgVar";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgVar .projects[0].programs.gp[1].gp[1][0].args[1] { };
ProgVar .projects[0].programs.gp[1].gp[1][0].args[1] {
 name=\"config_id\";
 var_type=T_String;
 string_val=\"basic_train\";
 object_scope=NULL;
 flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|EDIT_VAL|PGRM_ARG;
 reference=0;
 desc=\"configuration to use -- lookup in Config table\";
 init_from=NULL;
};
";
   };
   PatchRec @[67] {
    off=0;
    action=DELETE;
    obj_path_names=".programs.gp[\"ConfigProgs\"].gp[\"RunProgs\"][\"BasicRun\"].vars[\"trials_per_epoch\"]";
    obj_path_idx=".programs.gp[1].gp[1][0].vars[0]";
    obj_type="ProgVar";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgVar .projects[0].programs.gp[1].gp[1][0].vars[0] { };
ProgVar .projects[0].programs.gp[1].gp[1][0].vars[0] {
 name=\"trials_per_epoch\";
 var_type=T_Int;
 int_val=50;
 object_scope=NULL;
 flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED;
 reference=0;
 desc=;
 init_from=.programs.gp[\"UtilProgs\"][\"StdGlobalsInit\"]$$<Program,StdGlobalsInit>;
};
";
   };
   PatchRec @[68] {
    off=0;
    action=INSERT;
    obj_path_names=".programs.gp[\"ConfigProgs\"].gp[\"RunProgs\"][\"BasicRun\"].vars";
    obj_path_idx=".programs.gp[1].gp[1][0].vars";
    obj_type="ProgVar_List";
    mbr_path=;
    targ_idx=2;
    targ_name="trials_per_epoch_eff";
    insert_after="train_epochs";
    insert_before="update_net_view";
    new_obj_type="ProgVar";
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgVar .projects[1].programs.gp[1].gp[1][0].vars[1] { };
ProgVar .projects[1].programs.gp[1].gp[1][0].vars[1] {
 name=\"trials_per_epoch_eff\";
 var_type=T_Int;
 int_val=50;
 object_scope=NULL;
 flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED;
 reference=0;
 desc=;
 init_from=.programs.gp[\"UtilProgs\"][\"TrainStart\"]$$<Program,TrainStart>;
};
";
   };
   PatchRec @[69] {
    off=0;
    action=INSERT;
    obj_path_names=".programs.gp[\"ConfigProgs\"].gp[\"RunProgs\"][\"BasicRun\"].vars";
    obj_path_idx=".programs.gp[1].gp[1][0].vars";
    obj_type="ProgVar_List";
    mbr_path=;
    targ_idx=2;
    targ_name="test_interval";
    insert_after="trials_per_epoch_eff";
    insert_before="update_net_view";
    new_obj_type="ProgVar";
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgVar .projects[1].programs.gp[1].gp[1][0].vars[2] { };
ProgVar .projects[1].programs.gp[1].gp[1][0].vars[2] {
 name=\"test_interval\";
 var_type=T_Int;
 int_val=1;
 object_scope=NULL;
 flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED;
 reference=0;
 desc=;
 init_from=.programs.gp[\"UtilProgs\"][\"TrainStart\"]$$<Program,TrainStart>;
};
";
   };
   PatchRec @[70] {
    off=0;
    action=ASSIGN;
    obj_path_names=".programs.gp[\"ConfigProgs\"].gp[\"RunProgs\"][\"BasicRun\"].vars[\"train_epochs\"]";
    obj_path_idx=".programs.gp[1].gp[1][0].vars[1]";
    obj_type="ProgVar";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgVar .projects[1].programs.gp[1].gp[1][0].vars[0] { };
ProgVar .projects[1].programs.gp[1].gp[1][0].vars[0] {
 name=\"train_epochs\";
 var_type=T_Int;
 int_val=50;
 object_scope=NULL;
 flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED;
 reference=0;
 desc=;
 init_from=.programs.gp[\"UtilProgs\"][\"TrainStart\"]$$<Program,TrainStart>;
};
";
   };
   PatchRec @[71] {
    off=0;
    action=ASSIGN;
    obj_path_names=".programs.gp[\"ConfigProgs\"].gp[\"RunProgs\"][\"BasicRun\"].prog_code[\"If_ifnetworktrialtrialsperepoch\"]";
    obj_path_idx=".programs.gp[1].gp[1][0].prog_code[5]";
    obj_type="If";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
If .projects[1].programs.gp[1].gp[1][0].prog_code[5] { 
 ProgEl_List @.true_code = [5] {
  ProgramCall @[0] { 
   ProgArg_List @.prog_args = [1] {
    ProgArg @[0] { };
   };
  };
  If @[1] { 
   ProgEl_List @.true_code = [1] {
    ProgramCall @[0] { 
     ProgArg_List @.prog_args = [1] {
      ProgArg @[0] { };
     };
    };
   };
  };
  MemberAssign @[2] { };
  If @[3] { 
   ProgEl_List @.true_code = [2] {
    ProgramCall @[0] { 
     ProgArg_List @.prog_args = [1] {
      ProgArg @[0] { };
     };
    };
    ReturnExpr @[1] { };
   };
  };
  ProgramCall @[4] { 
   ProgArg_List @.prog_args = [1] {
    ProgArg @[0] { };
   };
  };
 };
};
If .projects[1].programs.gp[1].gp[1][0].prog_code[5] {
 name=\"If_ifnetworktrialtrialsperepocheff\";
 desc=;
 flags=CAN_REVERT_TO_CODE;
 code_string=\"if (network.trial >= trials_per_epoch_eff)\";
 cond {
  expr=\"network.trial >= trials_per_epoch_eff\";
 };
 true_code {
  name=\"true_code\";
  el_typ=ProgCode;
  el_def=0;
  ProgramCall @[0] {
   name=\"ProgramCall_EpochEndnetwork\";
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string=\"EpochEnd(network)\";
   prog_args {
    name=\"prog_args\";
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=LeabraNetwork;
     type=\"LeabraNetwork*\";
     name=\"network\";
     required=1;
     def_val=;
     prev_expr=;
     expr {
      expr=\"network\";
     };
    };
   };
   target=.programs.gp[\"UtilProgs\"][\"EpochEnd\"]$$<Program,EpochEnd>;
   targ_ld_init=\"*EpochEnd*\";
  };
  If @[1] {
   name=\"If_iftestinterval0n_chtestinterval0\";
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string=\"if (test_interval > 0 && network.epoch % test_interval == 0)\";
   cond {
    expr=\"test_interval > 0 && network.epoch % test_interval == 0\";
   };
   true_code {
    name=\"true_code\";
    el_typ=ProgCode;
    el_def=0;
    ProgramCall @[0] {
     name=\"ProgramCall_TestAllnetwork\";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string=\"TestAll(network)\";
     prog_args {
      name=\"prog_args\";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=LeabraNetwork;
       type=\"LeabraNetwork*\";
       name=\"network\";
       required=1;
       def_val=;
       prev_expr=\"network\";
       expr {
	expr=\"network\";
       };
      };
     };
     target=.programs.gp[\"TaskProgs\"][\"TestAll\"]$$<Program,TestAll>;
     targ_ld_init=\"*TestAll*\";
    };
   };
  };
  MemberAssign @[2] {
   name=\"MemberAssign_networkepochnetworkepoch1\";
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string=\"network.epoch = network.epoch + 1\";
   obj=.programs.gp[\"ConfigProgs\"].gp[\"RunProgs\"][\"BasicRun\"].args[\"network\"]$$<ProgVar,network>;
   path=\"epoch\";
   expr {
    expr=\"network.epoch + 1\";
   };
   update_after=0;
  };
  If @[3] {
   name=\"If_ifnetworkepochtrainepochs\";
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string=\"if (network.epoch >= train_epochs)\";
   cond {
    expr=\"network.epoch >= train_epochs\";
   };
   true_code {
    name=\"true_code\";
    el_typ=ProgCode;
    el_def=0;
    ProgramCall @[0] {
     name=\"ProgramCall_TrainEndnetwork\";
     desc=\"calls stop_train and does final training stuff\";
     flags=CAN_REVERT_TO_CODE;
     code_string=\"TrainEnd(network)\";
     prog_args {
      name=\"prog_args\";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=LeabraNetwork;
       type=\"LeabraNetwork*\";
       name=\"network\";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr=\"network\";
       };
      };
     };
     target=.programs.gp[\"UtilProgs\"][\"TrainEnd\"]$$<Program,TrainEnd>;
     targ_ld_init=\"*TrainEnd*\";
    };
    ReturnExpr @[1] {
     name=\"ReturnExpr_return\";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string=\"return \";
     expr {
      expr=;
     };
    };
   };
  };
  ProgramCall @[4] {
   name=\"ProgramCall_EpochStartnetwork\";
   desc=\"time to start a new epoch!\";
   flags=CAN_REVERT_TO_CODE;
   code_string=\"EpochStart(network)\";
   prog_args {
    name=\"prog_args\";
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=LeabraNetwork;
     type=\"LeabraNetwork*\";
     name=\"network\";
     required=1;
     def_val=;
     prev_expr=;
     expr {
      expr=\"network\";
     };
    };
   };
   target=.programs.gp[\"UtilProgs\"][\"EpochStart\"]$$<Program,EpochStart>;
   targ_ld_init=\"*EpochStart*\";
  };
 };
};
";
   };
   PatchRec @[72] {
    off=0;
    action=ASSIGN;
    obj_path_names=".programs.gp[\"ConfigProgs\"].gp[\"RunProgs\"][\"BasicRun\"].prog_code[\"If_ifnetworktrialtrialsperepoch\"]";
    obj_path_idx=".programs.gp[1].gp[1][0].prog_code[5]";
    obj_type="If";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
If .projects[1].programs.gp[1].gp[1][0].prog_code[5] { 
 ProgEl_List @.true_code = [5] {
  ProgramCall @[0] { 
   ProgArg_List @.prog_args = [1] {
    ProgArg @[0] { };
   };
  };
  If @[1] { 
   ProgEl_List @.true_code = [1] {
    ProgramCall @[0] { 
     ProgArg_List @.prog_args = [1] {
      ProgArg @[0] { };
     };
    };
   };
  };
  MemberAssign @[2] { };
  If @[3] { 
   ProgEl_List @.true_code = [2] {
    ProgramCall @[0] { 
     ProgArg_List @.prog_args = [1] {
      ProgArg @[0] { };
     };
    };
    ReturnExpr @[1] { };
   };
  };
  ProgramCall @[4] { 
   ProgArg_List @.prog_args = [1] {
    ProgArg @[0] { };
   };
  };
 };
};
If .projects[1].programs.gp[1].gp[1][0].prog_code[5] {
 name=\"If_ifnetworktrialtrialsperepocheff\";
 desc=;
 flags=CAN_REVERT_TO_CODE;
 code_string=\"if (network.trial >= trials_per_epoch_eff)\";
 cond {
  expr=\"network.trial >= trials_per_epoch_eff\";
 };
 true_code {
  name=\"true_code\";
  el_typ=ProgCode;
  el_def=0;
  ProgramCall @[0] {
   name=\"ProgramCall_EpochEndnetwork\";
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string=\"EpochEnd(network)\";
   prog_args {
    name=\"prog_args\";
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=LeabraNetwork;
     type=\"LeabraNetwork*\";
     name=\"network\";
     required=1;
     def_val=;
     prev_expr=;
     expr {
      expr=\"network\";
     };
    };
   };
   target=.programs.gp[\"UtilProgs\"][\"EpochEnd\"]$$<Program,EpochEnd>;
   targ_ld_init=\"*EpochEnd*\";
  };
  If @[1] {
   name=\"If_iftestinterval0n_chtestinterval0\";
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string=\"if (test_interval > 0 && network.epoch % test_interval == 0)\";
   cond {
    expr=\"test_interval > 0 && network.epoch % test_interval == 0\";
   };
   true_code {
    name=\"true_code\";
    el_typ=ProgCode;
    el_def=0;
    ProgramCall @[0] {
     name=\"ProgramCall_TestAllnetwork\";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string=\"TestAll(network)\";
     prog_args {
      name=\"prog_args\";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=LeabraNetwork;
       type=\"LeabraNetwork*\";
       name=\"network\";
       required=1;
       def_val=;
       prev_expr=\"network\";
       expr {
	expr=\"network\";
       };
      };
     };
     target=.programs.gp[\"TaskProgs\"][\"TestAll\"]$$<Program,TestAll>;
     targ_ld_init=\"*TestAll*\";
    };
   };
  };
  MemberAssign @[2] {
   name=\"MemberAssign_networkepochnetworkepoch1\";
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string=\"network.epoch = network.epoch + 1\";
   obj=.programs.gp[\"ConfigProgs\"].gp[\"RunProgs\"][\"BasicRun\"].args[\"network\"]$$<ProgVar,network>;
   path=\"epoch\";
   expr {
    expr=\"network.epoch + 1\";
   };
   update_after=0;
  };
  If @[3] {
   name=\"If_ifnetworkepochtrainepochs\";
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string=\"if (network.epoch >= train_epochs)\";
   cond {
    expr=\"network.epoch >= train_epochs\";
   };
   true_code {
    name=\"true_code\";
    el_typ=ProgCode;
    el_def=0;
    ProgramCall @[0] {
     name=\"ProgramCall_TrainEndnetwork\";
     desc=\"calls stop_train and does final training stuff\";
     flags=CAN_REVERT_TO_CODE;
     code_string=\"TrainEnd(network)\";
     prog_args {
      name=\"prog_args\";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=LeabraNetwork;
       type=\"LeabraNetwork*\";
       name=\"network\";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr=\"network\";
       };
      };
     };
     target=.programs.gp[\"UtilProgs\"][\"TrainEnd\"]$$<Program,TrainEnd>;
     targ_ld_init=\"*TrainEnd*\";
    };
    ReturnExpr @[1] {
     name=\"ReturnExpr_return\";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string=\"return \";
     expr {
      expr=;
     };
    };
   };
  };
  ProgramCall @[4] {
   name=\"ProgramCall_EpochStartnetwork\";
   desc=\"time to start a new epoch!\";
   flags=CAN_REVERT_TO_CODE;
   code_string=\"EpochStart(network)\";
   prog_args {
    name=\"prog_args\";
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=LeabraNetwork;
     type=\"LeabraNetwork*\";
     name=\"network\";
     required=1;
     def_val=;
     prev_expr=;
     expr {
      expr=\"network\";
     };
    };
   };
   target=.programs.gp[\"UtilProgs\"][\"EpochStart\"]$$<Program,EpochStart>;
   targ_ld_init=\"*EpochStart*\";
  };
 };
};
";
   };
   PatchRec @[73] {
    off=0;
    action=INSERT;
    obj_path_names=".programs.gp[\"ConfigProgs\"].gp[\"RunProgs\"][\"BasicRun\"].prog_code[\"If_ifnetworktrialtrialsperepoch\"].true_code";
    obj_path_idx=".programs.gp[1].gp[1][0].prog_code[5].true_code";
    obj_type="ProgEl_List";
    mbr_path=;
    targ_idx=1;
    targ_name="If_iftestinterval0n_chtestinterval0";
    insert_after="ProgramCall_EpochEndnetwork";
    insert_before="MemberAssign_networkepochnetworkepoch1";
    new_obj_type="If";
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
If .projects[1].programs.gp[1].gp[1][0].prog_code[5].true_code[1] { 
 ProgEl_List @.true_code = [1] {
  ProgramCall @[0] { 
   ProgArg_List @.prog_args = [1] {
    ProgArg @[0] { };
   };
  };
 };
};
If .projects[1].programs.gp[1].gp[1][0].prog_code[5].true_code[1] {
 name=\"If_iftestinterval0n_chtestinterval0\";
 desc=;
 flags=CAN_REVERT_TO_CODE;
 code_string=\"if (test_interval > 0 && network.epoch % test_interval == 0)\";
 cond {
  expr=\"test_interval > 0 && network.epoch % test_interval == 0\";
 };
 true_code {
  name=\"true_code\";
  el_typ=ProgCode;
  el_def=0;
  ProgramCall @[0] {
   name=\"ProgramCall_TestAllnetwork\";
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string=\"TestAll(network)\";
   prog_args {
    name=\"prog_args\";
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=LeabraNetwork;
     type=\"LeabraNetwork*\";
     name=\"network\";
     required=1;
     def_val=;
     prev_expr=\"network\";
     expr {
      expr=\"network\";
     };
    };
   };
   target=.programs.gp[\"TaskProgs\"][\"TestAll\"]$$<Program,TestAll>;
   targ_ld_init=\"*TestAll*\";
  };
 };
};
";
   };
   PatchRec @[74] {
    off=0;
    action=INSERT;
    obj_path_names=".programs.gp[\"TaskProgs\"]";
    obj_path_idx=".programs.gp[2]";
    obj_type="Program_Group";
    mbr_path=;
    targ_idx=1;
    targ_name="BasicTest";
    insert_after="BasicTrain";
    insert_before=;
    new_obj_type="Program";
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
Program .projects[1].programs.gp[2][1] { 
 UserDataItem_List @*(.user_data_) {
  UserData_DocLink @[0] { };
 };

 ProgObjList @.objs = [1] {
  TimeUsed @[0] { };
 };

 ProgType_List @.types = [0] {
 };

 ProgVar_List @.args = [3] {
  ProgVar @[0] { };
  ProgVar @[1] { };
  ProgVar @[2] { };
 };

 ProgVar_List @.vars = [1] {
  ProgVar @[0] { };
 };

 Function_List @.functions = [0] {
 };

 ProgEl_List @.init_code = [1] {
  MethodCall @[0] { 
   ProgArg_List @.meth_args = [0] {
   };
  };
 };

 ProgEl_List @.prog_code = [19] {
  MethodCall @[0] { 
   ProgArg_List @.meth_args = [1] {
    ProgArg @[0] { };
   };
  };
  Comment @[1] { };
  ProgramCall @[2] { 
   ProgArg_List @.prog_args = [1] {
    ProgArg @[0] { };
   };
  };
  ProgramCall @[3] { 
   ProgArg_List @.prog_args = [3] {
    ProgArg @[0] { };
    ProgArg @[1] { };
    ProgArg @[2] { };
   };
  };
  ProgramCall @[4] { 
   ProgArg_List @.prog_args = [2] {
    ProgArg @[0] { };
    ProgArg @[1] { };
   };
  };
  Comment @[5] { };
  ProgramCall @[6] { 
   ProgArg_List @.prog_args = [1] {
    ProgArg @[0] { };
   };
  };
  MethodCall @[7] { 
   ProgArg_List @.meth_args = [0] {
   };
  };
  NetUpdateView @[8] { };
  StopStepPoint @[9] { };
  Comment @[10] { };
  MethodCall @[11] { 
   ProgArg_List @.meth_args = [0] {
   };
  };
  ProgramCall @[12] { 
   ProgArg_List @.prog_args = [2] {
    ProgArg @[0] { };
    ProgArg @[1] { };
   };
  };
  ProgramCall @[13] { 
   ProgArg_List @.prog_args = [1] {
    ProgArg @[0] { };
   };
  };
  MethodCall @[14] { 
   ProgArg_List @.meth_args = [0] {
   };
  };
  NetUpdateView @[15] { };
  ProgramCall @[16] { 
   ProgArg_List @.prog_args = [1] {
    ProgArg @[0] { };
   };
  };
  MethodCall @[17] { 
   ProgArg_List @.meth_args = [0] {
   };
  };
  ProgramCall @[18] { 
   ProgArg_List @.prog_args = [1] {
    ProgArg @[0] { };
   };
  };
 };
};
Program .projects[1].programs.gp[2][1] {
 UserDataItem_List @*(.user_data_) {
  name=;
  el_typ=UserData_DocLink;
  el_def=0;
  UserData_DocLink @[0] {name=\"DocLink\": doc=.programs.gp[\"TaskProgs\"][\"BasicTrain\"].doc$$<taDoc,doc>: };
 };
 name=\"BasicTest\";
 short_nm=\"BscTst\";
 tags=;
 desc=\"basic training -- this is a standard Leabra minus-plus trial\";
 version {
  major=0;
  minor=0;
  step=0;
 };
 author=\"Randall C. O'Reilly\";
 email=\"emergent-users@grey.colorado.edu\";
 flags=2;
 stop_step_cond {
  expr=;
 };
 objs {
  name=\"objs\";
  el_typ=taNBase;
  el_def=0;
  TimeUsed @[0] {name=\"BasicTrainTime\": start={usr=3215: sys=830: tot=149439832771: }: end={usr=3216: sys=830: tot=149439832771: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
 };
 types {
  name=\"types\";
  el_typ=DynEnumType;
  el_def=0;
 };
 args {
  name=\"args\";
  el_typ=ProgVar;
  el_def=0;
  ProgVar @[0] {
   name=\"network\";
   var_type=T_Object;
   object_type=LeabraNetwork;
   object_val=.networks[\"Network_0\"]$$<LeabraNetwork,Network_0>;
   object_scope=NULL;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
   reference=0;
   desc=\"network to operate on -- updates batch counter on network and passes it to train program\";
   init_from=NULL;
  };
  ProgVar @[1] {
   name=\"input_data\";
   var_type=T_Object;
   object_type=DataTable;
   object_val=.data.gp[\"InputData\"][\"StdInputData\"]$$<DataTable,StdInputData>;
   object_scope=NULL;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[2] {
   name=\"update_net_view\";
   var_type=T_Bool;
   bool_val=0;
   object_scope=NULL;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
   reference=0;
   desc=\"if true, will update network views at end of settling\";
   init_from=NULL;
  };
 };
 vars {
  name=\"vars\";
  el_typ=ProgVar;
  el_def=0;
  ProgVar @[0] {
   name=\"basic_train_time\";
   var_type=T_Object;
   object_type=TimeUsed;
   object_val=.objs[0]$$;
   object_scope=NULL;
   objs_ptr=1;
   flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
 };
 functions {
  name=\"functions\";
  el_typ=Function;
  el_def=0;
 };
 init_code {
  name=\"init_code\";
  el_typ=ProgCode;
  el_def=0;
  MethodCall @[0] {
   name=\"MethodCall_basictraintimeResetUsed\";
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string=\"basic_train_time->ResetUsed()\";
   result_var=NULL;
   obj=.vars[0]$$;
   method=TimeUsed::ResetUsed;
   meth_args {
    name=\"meth_args\";
    el_typ=ProgArg;
    el_def=0;
   };
   meth_sig=\"void ResetUsed()\";
   meth_desc=\" reset time used information\";
  };
 };
 prog_code {
  name=\"prog_code\";
  el_typ=ProgCode;
  el_def=0;
  MethodCall @[0] {
   name=\"MethodCall_basictraintimeStartTimerfalse\";
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string=\"basic_train_time->StartTimer(false)\";
   result_var=NULL;
   obj=$.vars[0]$;
   method=TimeUsed::StartTimer;
   meth_args {
    name=\"meth_args\";
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=bool;
     type=\"bool\";
     name=\"reset_used\";
     required=0;
     def_val=\"true\";
     prev_expr=;
     expr {
      expr=\"false\";
     };
    };
   };
   meth_sig=\"void StartTimer(bool reset_used = true)\";
   meth_desc=\" record the current time as the starting time, and optionally reset the time used information\";
  };
  Comment @[1] {
   name=\"Comment_StartTrial\";
   desc=\"=== Start Trial ===\";
   flags=CAN_REVERT_TO_CODE;
   code_string=\"// === Start Trial ===\";
  };
  ProgramCall @[2] {
   name=\"ProgramCall_TrialStartnetwork\";
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string=\"TrialStart(network)\";
   prog_args {
    name=\"prog_args\";
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=LeabraNetwork;
     type=\"LeabraNetwork*\";
     name=\"network\";
     required=1;
     def_val=;
     prev_expr=;
     expr {
      expr=\"network\";
     };
    };
   };
   target=.programs.gp[\"UtilProgs\"][\"TrialStart\"]$$<Program,TrialStart>;
   targ_ld_init=\"*TrialStart*\";
  };
  ProgramCall @[3] {
   name=\"ProgramCall_ChooseNextEventn_rkinputdatatrue\";
   desc=\"pick next event permuted..\";
   flags=CAN_REVERT_TO_CODE;
   code_string=\"ChooseNextEvent(network, input_data, true)\";
   prog_args {
    name=\"prog_args\";
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=LeabraNetwork;
     type=\"LeabraNetwork*\";
     name=\"network\";
     required=1;
     def_val=;
     prev_expr=;
     expr {
      expr=\"network\";
     };
    };
    ProgArg @[1] {
     arg_type=DataTable;
     type=\"DataTable*\";
     name=\"input_data\";
     required=1;
     def_val=;
     prev_expr=;
     expr {
      expr=\"input_data\";
     };
    };
    ProgArg @[2] {
     arg_type=bool;
     type=\"bool\";
     name=\"permuted\";
     required=1;
     def_val=;
     prev_expr=;
     expr {
      expr=\"true\";
     };
    };
   };
   target=.programs.gp[\"EnviroProgs\"][\"ChooseNextEvent\"]$$<Program,ChooseNextEvent>;
   targ_ld_init=\"*ChooseNextEvent*\";
  };
  ProgramCall @[4] {
   name=\"ProgramCall_ApplyInputsnetworkinputdata\";
   desc=\"apply std external input activations from the input_data table to the network\";
   flags=CAN_REVERT_TO_CODE;
   code_string=\"ApplyInputs(network, input_data)\";
   prog_args {
    name=\"prog_args\";
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=Network;
     type=\"LeabraNetwork*\";
     name=\"network\";
     required=1;
     def_val=;
     prev_expr=;
     expr {
      expr=\"network\";
     };
    };
    ProgArg @[1] {
     arg_type=DataTable;
     type=\"DataTable*\";
     name=\"input_data\";
     required=1;
     def_val=;
     prev_expr=;
     expr {
      expr=\"input_data\";
     };
    };
   };
   target=.programs.gp[\"EnviroProgs\"][\"ApplyInputs\"]$$<Program,ApplyInputs>;
   targ_ld_init=\"*ApplyInputs*\";
  };
  Comment @[5] {
   name=\"Comment_RunMinusPhase\";
   desc=\"=== Run Minus Phase ===\";
   flags=CAN_REVERT_TO_CODE;
   code_string=\"// === Run Minus Phase ===\";
  };
  ProgramCall @[6] {
   name=\"ProgramCall_SettleMinusnetwork\";
   desc=\"settle for minus phase, using ct_time.minus as fixed number of cycles to run\";
   flags=CAN_REVERT_TO_CODE;
   code_string=\"SettleMinus(network)\";
   prog_args {
    name=\"prog_args\";
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=LeabraNetwork;
     type=\"LeabraNetwork*\";
     name=\"network\";
     required=1;
     def_val=;
     prev_expr=;
     expr {
      expr=\"network\";
     };
    };
   };
   target=.programs.gp[\"UtilProgs\"][\"SettleMinus\"]$$<Program,SettleMinus>;
   targ_ld_init=\"*SettleMinus*\";
  };
  MethodCall @[7] {
   name=\"MethodCall_networkComputePhaseStats\";
   desc=\"compute stats appropriate for given phase\";
   flags=CAN_REVERT_TO_CODE;
   code_string=\"network->Compute_PhaseStats()\";
   result_var=NULL;
   obj=.args[0]$$;
   method=LeabraNetwork::Compute_PhaseStats;
   meth_args {
    name=\"meth_args\";
    el_typ=ProgArg;
    el_def=0;
   };
   meth_sig=\"void Compute_PhaseStats()\";
   meth_desc=\" compute MinusStats at the end of the minus phase, and PlusStats at the end of the plus phase -- this is preferred over the previous implementation of calling TrialStats only at the end of the minus phase, which required targets to be present in the minus phase, which is not always the case\";
  };
  NetUpdateView @[8] {
   name=\"NetUpdateView_NetUpdateView\";
   desc=\"update network views, if update_net_view == true\";
   flags=CAN_REVERT_TO_CODE;
   code_string=\"Net Update View\";
   network_var=$.args[0]$;
   update_var=.args[2]$$;
  };
  StopStepPoint @[9] {
   name=\"StopStepPoint_StopStepPoint\";
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string=\"Stop_Step Point\";
   cond {
    expr=;
   };
  };
  Comment @[10] {
   name=\"Comment_RunPlusPhase\";
   desc=\"=== Run Plus Phase ===\";
   flags=CAN_REVERT_TO_CODE;
   code_string=\"// === Run Plus Phase ===\";
  };
  MethodCall @[11] {
   name=\"MethodCall_networkInitInputData\";
   desc=\"only need to re-apply if something is new!\";
   flags=OFF|CAN_REVERT_TO_CODE;
   code_string=\"network->Init_InputData()\";
   result_var=NULL;
   obj=$.args[0]$;
   method=Network::Init_InputData;
   meth_args {
    name=\"meth_args\";
    el_typ=ProgArg;
    el_def=0;
   };
   meth_sig=\"void Init_InputData()\";
   meth_desc=\" Initializes external and target inputs\";
  };
  ProgramCall @[12] {
   name=\"ProgramCall_ApplyInputsnetworkinputdata_1\";
   desc=\"only need to re-apply if something is new!\";
   flags=OFF|CAN_REVERT_TO_CODE;
   code_string=\"ApplyInputs(network, input_data)\";
   prog_args {
    name=\"prog_args\";
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=Network;
     type=\"LeabraNetwork*\";
     name=\"network\";
     required=1;
     def_val=;
     prev_expr=;
     expr {
      expr=\"network\";
     };
    };
    ProgArg @[1] {
     arg_type=DataTable;
     type=\"DataTable*\";
     name=\"input_data\";
     required=1;
     def_val=;
     prev_expr=;
     expr {
      expr=\"input_data\";
     };
    };
   };
   target=$.programs.gp[\"EnviroProgs\"][\"ApplyInputs\"]$;
   targ_ld_init=\"*ApplyInputs*\";
  };
  ProgramCall @[13] {
   name=\"ProgramCall_SettlePlusnetwork\";
   desc=\"settle for designated plus phase number of cycles\";
   flags=CAN_REVERT_TO_CODE;
   code_string=\"SettlePlus(network)\";
   prog_args {
    name=\"prog_args\";
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=LeabraNetwork;
     type=\"LeabraNetwork*\";
     name=\"network\";
     required=1;
     def_val=;
     prev_expr=;
     expr {
      expr=\"network\";
     };
    };
   };
   target=.programs.gp[\"UtilProgs\"][\"SettlePlus\"]$$<Program,SettlePlus>;
   targ_ld_init=\"*Settle*\";
  };
  MethodCall @[14] {
   name=\"MethodCall_networkComputePhaseStats_1\";
   desc=\"compute stats appropriate for given phase\";
   flags=CAN_REVERT_TO_CODE;
   code_string=\"network->Compute_PhaseStats()\";
   result_var=NULL;
   obj=$.args[0]$;
   method=LeabraNetwork::Compute_PhaseStats;
   meth_args {
    name=\"meth_args\";
    el_typ=ProgArg;
    el_def=0;
   };
   meth_sig=\"void Compute_PhaseStats()\";
   meth_desc=\" compute MinusStats at the end of the minus phase, and PlusStats at the end of the plus phase -- this is preferred over the previous implementation of calling TrialStats only at the end of the minus phase, which required targets to be present in the minus phase, which is not always the case\";
  };
  NetUpdateView @[15] {
   name=\"NetUpdateView_NetUpdateView_1\";
   desc=\"update network views, if update_net_view == true\";
   flags=CAN_REVERT_TO_CODE;
   code_string=\"Net Update View\";
   network_var=$.args[0]$;
   update_var=$.args[2]$;
  };
  ProgramCall @[16] {
   name=\"ProgramCall_TrialEndnetwork\";
   desc=\"standard end of trial stuff\";
   flags=CAN_REVERT_TO_CODE;
   code_string=\"TrialEnd(network)\";
   prog_args {
    name=\"prog_args\";
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=LeabraNetwork;
     type=\"LeabraNetwork*\";
     name=\"network\";
     required=1;
     def_val=;
     prev_expr=;
     expr {
      expr=\"network\";
     };
    };
   };
   target=.programs.gp[\"UtilProgs\"][\"TrialEnd\"]$$<Program,TrialEnd>;
   targ_ld_init=\"*TrialEnd*\";
  };
  MethodCall @[17] {
   name=\"MethodCall_basictraintimeEndTimer\";
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string=\"basic_train_time->EndTimer()\";
   result_var=NULL;
   obj=$.vars[0]$;
   method=TimeUsed::EndTimer;
   meth_args {
    name=\"meth_args\";
    el_typ=ProgArg;
    el_def=0;
   };
   meth_sig=\"void EndTimer()\";
   meth_desc=\" record the current time as the ending time, and compute difference as the time used\";
  };
  ProgramCall @[18] {
   name=\"ProgramCall_LeabraTestTrialMonitornetwork\";
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string=\"LeabraTestTrialMonitor(network)\";
   prog_args {
    name=\"prog_args\";
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=Network;
     type=\"LeabraNetwork*\";
     name=\"network\";
     required=1;
     def_val=;
     prev_expr=;
     expr {
      expr=\"network\";
     };
    };
   };
   target=.programs.gp[\"UtilProgs\"].gp[\"Monitors\"][\"LeabraTestTrialMonitor\"]$$<Program,LeabraTestTrialMonitor>;
   targ_ld_init=\"*LeabraTestTrialMonitor*\";
  };
 };
 step_prog=.programs.gp[\"UtilProgs\"][\"Cycle\"]$$<Program,Cycle>;
 step_n=1;
 doc {
  name=\"doc\";
  desc=;
  web_doc=0;
  wiki=;
  url=\"local\";
  full_url=\"local\";
  text_size=1;
  text=;
  html_text=;
 };
};
";
   };
   PatchRec @[75] {
    off=0;
    action=INSERT;
    obj_path_names=".programs.gp[\"TaskProgs\"]";
    obj_path_idx=".programs.gp[2]";
    obj_type="Program_Group";
    mbr_path=;
    targ_idx=1;
    targ_name="TestAll";
    insert_after="BasicTest";
    insert_before=;
    new_obj_type="Program";
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
Program .projects[1].programs.gp[2][2] { 
 UserDataItem_List @*(.user_data_) {
  UserData_DocLink @[0] { };
 };

 ProgObjList @.objs = [0] {
 };

 ProgType_List @.types = [0] {
 };

 ProgVar_List @.args = [1] {
  ProgVar @[0] { };
 };

 ProgVar_List @.vars = [7] {
  ProgVar @[0] { };
  ProgVar @[1] { };
  ProgVar @[2] { };
  ProgVar @[3] { };
  ProgVar @[4] { };
  ProgVar @[5] { };
  ProgVar @[6] { };
 };

 Function_List @.functions = [0] {
 };

 ProgEl_List @.init_code = [1] {
  NetCounterInit @[0] { };
 };

 ProgEl_List @.prog_code = [6] {
  NetCounterInit @[0] { };
  MethodCall @[1] { 
   ProgArg_List @.meth_args = [0] {
   };
  };
  MethodCall @[2] { 
   ProgArg_List @.meth_args = [0] {
   };
  };
  NetDataLoop @[3] { 
   ProgEl_List @.loop_code = [2] {
    ProgramCall @[0] { 
     ProgArg_List @.prog_args = [3] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
     };
    };
    If @[1] { 
     ProgEl_List @.true_code = [1] {
      StopStepPoint @[0] { };
     };
    };
   };
  };
  MethodCall @[4] { 
   ProgArg_List @.meth_args = [0] {
   };
  };
  ProgramCall @[5] { 
   ProgArg_List @.prog_args = [1] {
    ProgArg @[0] { };
   };
  };
 };
};
Program .projects[1].programs.gp[2][2] {
 UserDataItem_List @*(.user_data_) {
  name=;
  el_typ=UserData_DocLink;
  el_def=0;
  UserData_DocLink @[0] {name=\"DocLink\": doc=.doc$$: };
 };
 name=\"TestAll\";
 short_nm=\"TesAll\";
 tags=\"Leabra, Std\";
 desc=\"test all items in a data table and save to a separate monitor\";
 version {
  major=8;
  minor=0;
  step=0;
 };
 author=\"Randall C. O'Reilly\";
 email=\"emergent-users@grey.colorado.edu\";
 flags=NO_STOP_STEP;
 stop_step_cond {
  expr=;
 };
 objs {
  name=\"objs\";
  el_typ=taNBase;
  el_def=0;
 };
 types {
  name=\"types\";
  el_typ=DynEnumType;
  el_def=0;
 };
 args {
  name=\"args\";
  el_typ=ProgVar;
  el_def=0;
  ProgVar @[0] {
   name=\"network\";
   var_type=T_Object;
   object_type=LeabraNetwork;
   object_val=.networks[\"Network_0\"]$$<LeabraNetwork,Network_0>;
   object_scope=NULL;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
   reference=0;
   desc=\"network to operate on\";
   init_from=NULL;
  };
 };
 vars {
  name=\"vars\";
  el_typ=ProgVar;
  el_def=0;
  ProgVar @[0] {
   name=\"input_data\";
   var_type=T_Object;
   object_type=DataTable;
   object_val=.data.gp[\"InputData\"][\"StdInputData\"]$$<DataTable,StdInputData>;
   object_scope=NULL;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=\"table of patterns to present to the network, one row at a time\";
   init_from=NULL;
  };
  ProgVar @[1] {
   name=\"data_loop_order\";
   var_type=T_HardEnum;
   int_val=0;
   object_scope=NULL;
   hard_enum_type=DataLoop::Order;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=\"controls the order in which events (rows of the input data datatable) are presented to the network
(SEQUENTIAL, PERMUTED, RANDOM)\";
   init_from=NULL;
  };
  ProgVar @[2] {
   name=\"trial\";
   var_type=T_Int;
   int_val=0;
   object_scope=NULL;
   flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=\"current trial (event) within the epoch -- increments automatically\";
   init_from=NULL;
  };
  ProgVar @[3] {
   name=\"trial_mon_data\";
   var_type=T_Object;
   object_type=DataTable;
   object_val=.data.gp[\"OutputData\"][\"TestTrialOutputData\"]$$<DataTable,TestTrialOutputData>;
   object_scope=NULL;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=\"trial-level output data -- we reset it every epoch by default, so it just contains last epoch of data\";
   init_from=NULL;
  };
  ProgVar @[4] {
   name=\"step_on_err\";
   var_type=T_Bool;
   bool_val=0;
   object_scope=NULL;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=\"when you step at the Epoch level, this will automatically step through to the next point at which an error was made -- you can use the netview history to replay what happend\";
   init_from=NULL;
  };
  ProgVar @[5] {
   name=\"data_loop_index\";
   var_type=T_Int;
   int_val=6;
   object_scope=NULL;
   flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=\"index counter for the looping over items in the input_data datatable (not always the same as trial counter, depending on distributed memory computation)\";
   init_from=NULL;
  };
  ProgVar @[6] {
   name=\"test_updt_view\";
   var_type=T_Bool;
   bool_val=0;
   object_scope=NULL;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=\"update display when testing items?\";
   init_from=NULL;
  };
 };
 functions {
  name=\"functions\";
  el_typ=Function;
  el_def=0;
 };
 init_code {
  name=\"init_code\";
  el_typ=ProgCode;
  el_def=0;
  NetCounterInit @[0] {
   name=\"NetCounterInit_NetCounterInittrial\";
   desc=\"initialize trial counter (local variable and in the network)\";
   flags=CAN_REVERT_TO_CODE;
   code_string=\"Net Counter Init: trial\";
   network_var=.args[0]$$;
   local_ctr_var=.vars[2]$$;
   counter=Network::trial;
   update_after=0;
  };
 };
 prog_code {
  name=\"prog_code\";
  el_typ=ProgCode;
  el_def=0;
  NetCounterInit @[0] {
   name=\"NetCounterInit_NetCounterInittrial\";
   desc=\"initialize trial counter (local variable and in the network)\";
   flags=CAN_REVERT_TO_CODE;
   code_string=\"Net Counter Init: trial\";
   network_var=$.args[0]$;
   local_ctr_var=$.vars[2]$;
   counter=Network::trial;
   update_after=0;
  };
  MethodCall @[1] {
   name=\"MethodCall_networkInitEpoch\";
   desc=\"added in 8.0: essential for param_seqs\";
   flags=CAN_REVERT_TO_CODE;
   code_string=\"network->Init_Epoch()\";
   result_var=NULL;
   obj=$.args[0]$;
   method=Network::Init_Epoch;
   meth_args {
    name=\"meth_args\";
    el_typ=ProgArg;
    el_def=0;
   };
   meth_sig=\"void Init_Epoch()\";
   meth_desc=\" Initializes network state at the start of a new epoch -- updates parameters according to param_seq for example\";
  };
  MethodCall @[2] {
   name=\"MethodCall_trialmondataResetData\";
   desc=\"reset trial-level monitor data every epoch, so it reflects only the most recent epoch's worth of data (turn flags OFF to accumulate trial data across entire training run)\";
   flags=CAN_REVERT_TO_CODE;
   code_string=\"trial_mon_data->ResetData()\";
   result_var=NULL;
   obj=.vars[3]$$;
   method=DataTable::ResetData;
   meth_args {
    name=\"meth_args\";
    el_typ=ProgArg;
    el_def=0;
   };
   meth_sig=\"void ResetData()\";
   meth_desc=\" deletes all the data (rows), but keeps the column structure -- this cannot be undone!\";
  };
  NetDataLoop @[3] {
   name=\"NetDataLoop_NetDataLoopSEQUE_ardatalooporder\";
   desc=\"iterates over the events/rows of input_data, according to data_loop_order variable\";
   flags=CAN_REVERT_TO_CODE;
   code_string=\"Net Data Loop (SEQUENTIAL):  table=input_data  index=data_loop_index  order_var=data_loop_order \";
   loop_code {
    name=\"loop_code\";
    el_typ=ProgCode;
    el_def=0;
    ProgramCall @[0] {
     name=\"ProgramCall_BasicTestnetwork_atatestupdtview\";
     desc=\"run the trial program, passing network and input_data\";
     flags=CAN_REVERT_TO_CODE;
     code_string=\"BasicTest(network, input_data, test_updt_view)\";
     prog_args {
      name=\"prog_args\";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=LeabraNetwork;
       type=\"LeabraNetwork*\";
       name=\"network\";
       required=1;
       def_val=;
       prev_expr=\"network\";
       expr {
	expr=\"network\";
       };
      };
      ProgArg @[1] {
       arg_type=DataTable;
       type=\"DataTable*\";
       name=\"input_data\";
       required=1;
       def_val=;
       prev_expr=\"input_data\";
       expr {
	expr=\"input_data\";
       };
      };
      ProgArg @[2] {
       arg_type=bool;
       type=\"bool\";
       name=\"update_net_view\";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr=\"test_updt_view\";
       };
      };
     };
     target=.programs.gp[\"TaskProgs\"][\"BasicTest\"]$$<Program,BasicTest>;
     targ_ld_init=\"*BasicTest*\";
    };
    If @[1] {
     name=\"If_ifsteponerrnetworksse00\";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string=\"if (step_on_err && network.sse > 0.0)\";
     cond {
      expr=\"step_on_err && network.sse > 0.0\";
     };
     true_code {
      name=\"true_code\";
      el_typ=ProgCode;
      el_def=0;
      StopStepPoint @[0] {
       name=\"StopStepPoint_StopStepPoint\";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string=\"Stop_Step Point\";
       cond {
	expr=;
       };
      };
     };
    };
   };
   data_var=.vars[0]$$;
   index_var=.vars[5]$$;
   order_var=.vars[1]$$;
   order=SEQUENTIAL;
   update_after=0;
   dmem_nprocs=1;
   dmem_this_proc=0;
   grouped=0;
   group_col 9 0=\"Group\";
   group_index_var=NULL;
   group_order_var=NULL;
   group_order=PERMUTED;
   group_idx_list{    };
  };
  MethodCall @[4] {
   name=\"MethodCall_networkComputeEpochStats\";
   desc=\"network accumulates some core statistics over the epoch -- this finalizes that process and computes summary stats\";
   flags=CAN_REVERT_TO_CODE;
   code_string=\"network->Compute_EpochStats()\";
   result_var=NULL;
   obj=$.args[0]$;
   method=LeabraNetwork::Compute_EpochStats;
   meth_args {
    name=\"meth_args\";
    el_typ=ProgArg;
    el_def=0;
   };
   meth_sig=\"void Compute_EpochStats()\";
   meth_desc=\" compute epoch-level statistics; calls DMem_ComputeAggs (if dmem) and EpochSSE -- specific algos may add more compute epoch-level statistics, including SSE, AvgExtRew and AvgCycles\";
  };
  ProgramCall @[5] {
   name=\"ProgramCall_LeabraTestEpochMonitornetwork\";
   desc=\"run program that records data from network and possibly other sources about the epoch\";
   flags=CAN_REVERT_TO_CODE;
   code_string=\"LeabraTestEpochMonitor(network)\";
   prog_args {
    name=\"prog_args\";
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=Network;
     type=\"LeabraNetwork*\";
     name=\"network\";
     required=1;
     def_val=;
     prev_expr=;
     expr {
      expr=\"network\";
     };
    };
   };
   target=.programs.gp[\"UtilProgs\"].gp[\"Monitors\"][\"LeabraTestEpochMonitor\"]$$<Program,LeabraTestEpochMonitor>;
   targ_ld_init=\"*LeabraTestEpochMonitor*\";
  };
 };
 step_prog=NULL;
 step_n=1;
 doc {
  name=\"doc\";
  desc=;
  web_doc=1;
  wiki=\"emergent\";
  url=\"LeabraEpoch\";
  full_url=\"https://grey.colorado.edu/emergent/index.php/LeabraEpoch\";
  text_size=1;
  text=;
  html_text=;
 };
};
";
   };
   PatchRec @[76] {
    off=0;
    action=ASSIGN;
    obj_path_names=".programs.gp[\"EnviroProgs\"][\"ChooseNextEvent\"].vars[\"input_idx\"]";
    obj_path_idx=".programs.gp[3][0].vars[1]";
    obj_type="ProgVar";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgVar .projects[1].programs.gp[3][0].vars[1] { };
ProgVar .projects[1].programs.gp[3][0].vars[1] {
 name=\"input_idx\";
 var_type=T_Int;
 int_val=3;
 object_scope=NULL;
 flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
 reference=0;
 desc=;
 init_from=NULL;
};
";
   };
   PatchRec @[77] {
    off=0;
    action=DELETE;
    obj_path_names=".programs.gp[\"UtilProgs\"][\"StdGlobalsInit\"]";
    obj_path_idx=".programs.gp[4][0]";
    obj_type="Program";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
Program .projects[0].programs.gp[4][0] { 
 UserDataItem_List @*(.user_data_) {
  UserData_DocLink @[0] { };
 };

 ProgObjList @.objs = [0] {
 };

 ProgType_List @.types = [0] {
 };

 ProgVar_List @.args = [2] {
  ProgVar @[0] { };
  ProgVar @[1] { };
 };

 ProgVar_List @.vars = [13] {
  ProgVar @[0] { };
  ProgVar @[1] { };
  ProgVar @[2] { };
  ProgVar @[3] { };
  ProgVar @[4] { };
  ProgVar @[5] { };
  ProgVar @[6] { };
  ProgVar @[7] { };
  ProgVar @[8] { };
  ProgVar @[9] { };
  ProgVar @[10] { };
  ProgVar @[11] { };
  ProgVar @[12] { };
 };

 Function_List @.functions = [0] {
 };

 ProgEl_List @.init_code = [0] {
 };

 ProgEl_List @.prog_code = [4] {
  Comment @[0] { };
  DataVarProg @[1] { };
  AssignExpr @[2] { };
  If @[3] { 
   ProgEl_List @.true_code = [2] {
    AssignExpr @[0] { };
    If @[1] { 
     ProgEl_List @.true_code = [1] {
      VarIncr @[0] { };
     };
    };
   };
  };
 };
};
Program .projects[0].programs.gp[4][0] {
 UserDataItem_List @*(.user_data_) {
  name=;
  el_typ=UserData_DocLink;
  el_def=0;
  UserData_DocLink @[0] {name=\"DocLink\": doc=.doc$$: };
 };
 name=\"StdGlobalsInit\";
 short_nm=\"GlobInit\";
 tags=;
 desc=\"initialize standard global params, which live here too -- set other programs to init_from these guys\";
 version {
  major=0;
  minor=0;
  step=0;
 };
 author=\"Randall C. O'Reilly\";
 email=\"randy.oreilly@colorado.edu\";
 flags=NO_STOP_STEP;
 stop_step_cond {
  expr=;
 };
 objs {
  name=\"objs\";
  el_typ=taNBase;
  el_def=0;
 };
 types {
  name=\"types\";
  el_typ=DynEnumType;
  el_def=0;
 };
 args {
  name=\"args\";
  el_typ=ProgVar;
  el_def=0;
  ProgVar @[0] {
   name=\"network\";
   var_type=T_Object;
   object_type=LeabraNetwork;
   object_val=.networks[\"Network_0\"]$$<LeabraNetwork,Network_0>;
   object_scope=NULL;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|EDIT_VAL|PGRM_ARG;
   reference=0;
   desc=\"network to operate on -- updates batch counter on network and passes it to train program\";
   init_from=NULL;
  };
  ProgVar @[1] {
   name=\"config_id\";
   var_type=T_String;
   string_val=\"basic_train\";
   object_scope=NULL;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
   reference=0;
   desc=\"configuration to use -- lookup in Config table\";
   init_from=NULL;
  };
 };
 vars {
  name=\"vars\";
  el_typ=ProgVar;
  el_def=0;
  ProgVar @[0] {
   name=\"Config\";
   var_type=T_Object;
   object_type=DataTable;
   object_val=.data.gp[\"ConfigData\"][\"ConfigTable\"]$$<DataTable,ConfigTable>;
   object_scope=NULL;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[1] {
   name=\"trials_per_epoch\";
   var_type=T_Int;
   int_val=50;
   object_scope=NULL;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[2] {
   name=\"trials_per_epoch_orig\";
   var_type=T_Int;
   int_val=50;
   object_scope=NULL;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=\"original specification from Config\";
   init_from=NULL;
  };
  ProgVar @[3] {
   name=\"train_epochs\";
   var_type=T_Int;
   int_val=50;
   object_scope=NULL;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[4] {
   name=\"save_final_wts\";
   var_type=T_Int;
   int_val=1;
   object_scope=NULL;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[5] {
   name=\"save_wts_interval\";
   var_type=T_Int;
   int_val=200;
   object_scope=NULL;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[6] {
   name=\"test_interval\";
   var_type=T_Int;
   int_val=1000;
   object_scope=NULL;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[7] {
   name=\"log_trials\";
   var_type=T_Int;
   int_val=0;
   object_scope=NULL;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[8] {
   name=\"load_weights\";
   var_type=T_Bool;
   bool_val=0;
   object_scope=NULL;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[9] {
   name=\"weights_file\";
   var_type=T_String;
   string_val=;
   object_scope=NULL;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[10] {
   name=\"load_st_epc\";
   var_type=T_Int;
   int_val=1;
   object_scope=NULL;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[11] {
   name=\"lrs_step_epochs\";
   var_type=T_Int;
   int_val=50;
   object_scope=NULL;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
  ProgVar @[12] {
   name=\"lrs_bump_step\";
   var_type=T_Int;
   int_val=-1;
   object_scope=NULL;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
 };
 functions {
  name=\"functions\";
  el_typ=Function;
  el_def=0;
 };
 init_code {
  name=\"init_code\";
  el_typ=ProgCode;
  el_def=0;
 };
 prog_code {
  name=\"prog_code\";
  el_typ=ProgCode;
  el_def=0;
  Comment @[0] {
   name=\"Comment_GrabGlobalParams_currentconfigid\";
   desc=\"== Grab Global Params from Config Table for current config_id ==\";
   flags=CAN_REVERT_TO_CODE;
   code_string=\"// == Grab Global Params from Config Table for current config_id ==\";
  };
  DataVarProg @[1] {
   name=\"DataVarProg_DataFromtableCon_mallmatchestrue\";
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string=\"Data From:  table=Config  row_spec=row_val  row_var=config_id  set=from  all_matches=true \";
   data_var=.vars[0]$$;
   row_spec=ROW_VAL;
   row_var=.args[1]$$;
   set_data=0;
   all_matches=1;
   quiet=0;
   var_1=NULL;
   var_2=NULL;
   var_3=NULL;
   var_4=NULL;
  };
  AssignExpr @[2] {
   name=\"AssignExpr_trialsperepochorigtrialsperepoch\";
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string=\"trials_per_epoch_orig = trials_per_epoch\";
   result_var=.vars[2]$$;
   expr {
    expr=\"trials_per_epoch\";
   };
  };
  If @[3] {
   name=\"If_iftaMiscdmemnprocs1\";
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string=\"if (taMisc::dmem_nprocs > 1)\";
   cond {
    expr=\"taMisc::dmem_nprocs > 1\";
   };
   true_code {
    name=\"true_code\";
    el_typ=ProgCode;
    el_def=0;
    AssignExpr @[0] {
     name=\"AssignExpr_trialsperepochtr_aMiscdmemnprocs\";
     desc=\"dmem means that each guy does less -- uses randomization to get good mix across processors\";
     flags=CAN_REVERT_TO_CODE;
     code_string=\"trials_per_epoch = trials_per_epoch / taMisc::dmem_nprocs\";
     result_var=.vars[1]$$;
     expr {
      expr=\"trials_per_epoch / taMisc::dmem_nprocs\";
     };
    };
    If @[1] {
     name=\"If_iftrialsperepoch_alsperepochorig\";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string=\"if (trials_per_epoch * taMisc::dmem_nprocs < trials_per_epoch_orig)\";
     cond {
      expr=\"trials_per_epoch * taMisc::dmem_nprocs < trials_per_epoch_orig\";
     };
     true_code {
      name=\"true_code\";
      el_typ=ProgCode;
      el_def=0;
      VarIncr @[0] {
       name=\"VarIncr_trialsperepoch1\";
       desc=\"round up..\";
       flags=CAN_REVERT_TO_CODE;
       code_string=\"trials_per_epoch += 1\";
       var=$.vars[1]$;
       expr {
	expr=\"1\";
       };
      };
     };
    };
   };
  };
 };
 step_prog=NULL;
 step_n=1;
 doc {
  name=\"doc\";
  desc=;
  web_doc=0;
  wiki=;
  url=\"local\";
  full_url=\"local\";
  text_size=1;
  text=;
  html_text=;
 };
};
";
   };
   PatchRec @[78] {
    off=0;
    action=INSERT;
    obj_path_names=".programs.gp[\"UtilProgs\"][\"TrainStart\"].vars";
    obj_path_idx=".programs.gp[4][5].vars";
    obj_type="ProgVar_List";
    mbr_path=;
    targ_idx=0;
    targ_name="dmem_rnd_seed";
    insert_after=;
    insert_before="weights_file";
    new_obj_type="ProgVar";
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgVar .projects[1].programs.gp[4][4].vars[0] { };
ProgVar .projects[1].programs.gp[4][4].vars[0] {
 name=\"dmem_rnd_seed\";
 var_type=T_Object;
 object_type=RndSeed;
 object_val=.programs.gp[\"UtilProgs\"][\"TrainStart\"].objs[\"dmem_rnd_seed\"]$$<RndSeed,dmem_rnd_seed>;
 object_scope=NULL;
 objs_ptr=1;
 flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
 reference=0;
 desc=;
 init_from=NULL;
};
";
   };
   PatchRec @[79] {
    off=0;
    action=INSERT;
    obj_path_names=".programs.gp[\"UtilProgs\"][\"TrainStart\"].vars";
    obj_path_idx=".programs.gp[4][5].vars";
    obj_type="ProgVar_List";
    mbr_path=;
    targ_idx=0;
    targ_name="load_weights";
    insert_after="dmem_rnd_seed";
    insert_before="weights_file";
    new_obj_type="ProgVar";
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgVar .projects[1].programs.gp[4][4].vars[1] { };
ProgVar .projects[1].programs.gp[4][4].vars[1] {
 name=\"load_weights\";
 var_type=T_Bool;
 bool_val=0;
 object_scope=NULL;
 flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
 reference=0;
 desc=\"load initial weights from a file (specified in weights_file)\";
 init_from=NULL;
};
";
   };
   PatchRec @[80] {
    off=0;
    action=DELETE;
    obj_path_names=".programs.gp[\"UtilProgs\"][\"TrainStart\"].vars[\"load_weights\"]";
    obj_path_idx=".programs.gp[4][5].vars[1]";
    obj_type="ProgVar";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgVar .projects[0].programs.gp[4][5].vars[1] { };
ProgVar .projects[0].programs.gp[4][5].vars[1] {
 name=\"load_weights\";
 var_type=T_Bool;
 bool_val=0;
 object_scope=NULL;
 flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED;
 reference=0;
 desc=\"fm enviro\";
 init_from=.programs.gp[\"UtilProgs\"][\"StdGlobalsInit\"]$$<Program,StdGlobalsInit>;
};
";
   };
   PatchRec @[81] {
    off=0;
    action=INSERT;
    obj_path_names=".programs.gp[\"UtilProgs\"][\"TrainStart\"].vars";
    obj_path_idx=".programs.gp[4][5].vars";
    obj_type="ProgVar_List";
    mbr_path=;
    targ_idx=4;
    targ_name="lrs_n_steps";
    insert_after="lrs_step_epochs";
    insert_before="lrs_bump_step";
    new_obj_type="ProgVar";
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgVar .projects[1].programs.gp[4][4].vars[5] { };
ProgVar .projects[1].programs.gp[4][4].vars[5] {
 name=\"lrs_n_steps\";
 var_type=T_Int;
 int_val=7;
 object_scope=NULL;
 flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
 reference=0;
 desc=\"number of steps in the learning rate schedule\";
 init_from=NULL;
};
";
   };
   PatchRec @[82] {
    off=0;
    action=ASSIGN;
    obj_path_names=".programs.gp[\"UtilProgs\"][\"TrainStart\"].vars[\"dmem_rnd_seed\"]";
    obj_path_idx=".programs.gp[4][5].vars[6]";
    obj_type="ProgVar";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgVar .projects[1].programs.gp[4][4].vars[8] { };
ProgVar .projects[1].programs.gp[4][4].vars[8] {
 name=\"save_log_files_interactive\";
 var_type=T_Bool;
 bool_val=0;
 object_scope=NULL;
 flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
 reference=0;
 desc=\"save log files when running interactively?\";
 init_from=NULL;
};
";
   };
   PatchRec @[83] {
    off=0;
    action=INSERT;
    obj_path_names=".programs.gp[\"UtilProgs\"][\"TrainStart\"].vars";
    obj_path_idx=".programs.gp[4][5].vars";
    obj_type="ProgVar_List";
    mbr_path=;
    targ_idx=8;
    targ_name="train_epochs";
    insert_after="dmem_new_seed";
    insert_before=;
    new_obj_type="ProgVar";
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgVar .projects[1].programs.gp[4][4].vars[10] { };
ProgVar .projects[1].programs.gp[4][4].vars[10] {
 name=\"train_epochs\";
 var_type=T_Int;
 int_val=50;
 object_scope=NULL;
 flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|EDIT_VAL;
 reference=0;
 desc=\"number of epochs to train network for\";
 init_from=NULL;
};
";
   };
   PatchRec @[84] {
    off=0;
    action=INSERT;
    obj_path_names=".programs.gp[\"UtilProgs\"][\"TrainStart\"].vars";
    obj_path_idx=".programs.gp[4][5].vars";
    obj_type="ProgVar_List";
    mbr_path=;
    targ_idx=8;
    targ_name="trials_per_epoch";
    insert_after="train_epochs";
    insert_before=;
    new_obj_type="ProgVar";
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgVar .projects[1].programs.gp[4][4].vars[11] { };
ProgVar .projects[1].programs.gp[4][4].vars[11] {
 name=\"trials_per_epoch\";
 var_type=T_Int;
 int_val=50;
 object_scope=NULL;
 flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
 reference=0;
 desc=\"number of trials per epoch\";
 init_from=NULL;
};
";
   };
   PatchRec @[85] {
    off=0;
    action=INSERT;
    obj_path_names=".programs.gp[\"UtilProgs\"][\"TrainStart\"].vars";
    obj_path_idx=".programs.gp[4][5].vars";
    obj_type="ProgVar_List";
    mbr_path=;
    targ_idx=8;
    targ_name="trials_per_epoch_eff";
    insert_after="trials_per_epoch";
    insert_before=;
    new_obj_type="ProgVar";
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgVar .projects[1].programs.gp[4][4].vars[12] { };
ProgVar .projects[1].programs.gp[4][4].vars[12] {
 name=\"trials_per_epoch_eff\";
 var_type=T_Int;
 int_val=50;
 object_scope=NULL;
 flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
 reference=0;
 desc=\"effective value, taking into account number of MPI processors\";
 init_from=NULL;
};
";
   };
   PatchRec @[86] {
    off=0;
    action=INSERT;
    obj_path_names=".programs.gp[\"UtilProgs\"][\"TrainStart\"].vars";
    obj_path_idx=".programs.gp[4][5].vars";
    obj_type="ProgVar_List";
    mbr_path=;
    targ_idx=8;
    targ_name="test_run";
    insert_after="trials_per_epoch_eff";
    insert_before=;
    new_obj_type="ProgVar";
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgVar .projects[1].programs.gp[4][4].vars[13] { };
ProgVar .projects[1].programs.gp[4][4].vars[13] {
 name=\"test_run\";
 var_type=T_Bool;
 bool_val=0;
 object_scope=NULL;
 flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|EDIT_VAL;
 reference=0;
 desc=\"is this a testing-only run, no training?\";
 init_from=NULL;
};
";
   };
   PatchRec @[87] {
    off=0;
    action=INSERT;
    obj_path_names=".programs.gp[\"UtilProgs\"][\"TrainStart\"].vars";
    obj_path_idx=".programs.gp[4][5].vars";
    obj_type="ProgVar_List";
    mbr_path=;
    targ_idx=8;
    targ_name="test_interval";
    insert_after="test_run";
    insert_before=;
    new_obj_type="ProgVar";
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgVar .projects[1].programs.gp[4][4].vars[14] { };
ProgVar .projects[1].programs.gp[4][4].vars[14] {
 name=\"test_interval\";
 var_type=T_Int;
 int_val=1;
 object_scope=NULL;
 flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|EDIT_VAL;
 reference=0;
 desc=\"how frequently (epochs) to run a test during training\";
 init_from=NULL;
};
";
   };
   PatchRec @[88] {
    off=0;
    action=ASSIGN;
    obj_path_names=".programs.gp[\"UtilProgs\"][\"TrainStart\"].vars[\"weights_file\"]";
    obj_path_idx=".programs.gp[4][5].vars[0]";
    obj_type="ProgVar";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgVar .projects[1].programs.gp[4][4].vars[2] { };
ProgVar .projects[1].programs.gp[4][4].vars[2] {
 name=\"weights_file\";
 var_type=T_String;
 string_val=;
 object_scope=NULL;
 flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
 reference=0;
 desc=\"full relative path (from project) of weights file to load -- use CRR: prefix to load from cluster run results directory\";
 init_from=NULL;
};
";
   };
   PatchRec @[89] {
    off=0;
    action=ASSIGN;
    obj_path_names=".programs.gp[\"UtilProgs\"][\"TrainStart\"].vars[\"load_st_epc\"]";
    obj_path_idx=".programs.gp[4][5].vars[2]";
    obj_type="ProgVar";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgVar .projects[1].programs.gp[4][4].vars[3] { };
ProgVar .projects[1].programs.gp[4][4].vars[3] {
 name=\"load_st_epc\";
 var_type=T_Int;
 int_val=1;
 object_scope=NULL;
 flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
 reference=0;
 desc=\"after loading weights, reset epoch counter to this value (-1 = leave at value from the loaded weights)\";
 init_from=NULL;
};
";
   };
   PatchRec @[90] {
    off=0;
    action=ASSIGN;
    obj_path_names=".programs.gp[\"UtilProgs\"][\"TrainStart\"].vars[\"lrs_step_epochs\"]";
    obj_path_idx=".programs.gp[4][5].vars[3]";
    obj_type="ProgVar";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgVar .projects[1].programs.gp[4][4].vars[4] { };
ProgVar .projects[1].programs.gp[4][4].vars[4] {
 name=\"lrs_step_epochs\";
 var_type=T_Int;
 int_val=50;
 object_scope=NULL;
 flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
 reference=0;
 desc=\"learning rate schedule epochs per step of decrease in learning rate\";
 init_from=NULL;
};
";
   };
   PatchRec @[91] {
    off=0;
    action=ASSIGN;
    obj_path_names=".programs.gp[\"UtilProgs\"][\"TrainStart\"].vars[\"lrs_bump_step\"]";
    obj_path_idx=".programs.gp[4][5].vars[4]";
    obj_type="ProgVar";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgVar .projects[1].programs.gp[4][4].vars[6] { };
ProgVar .projects[1].programs.gp[4][4].vars[6] {
 name=\"lrs_bump_step\";
 var_type=T_Int;
 int_val=-1;
 object_scope=NULL;
 flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
 reference=0;
 desc=\"if positive (3 is typical), then bump up the learning rate at this step in the schedule -- can help improve final performance level\";
 init_from=NULL;
};
";
   };
   PatchRec @[92] {
    off=0;
    action=ASSIGN;
    obj_path_names=".programs.gp[\"UtilProgs\"][\"TrainStart\"].vars[\"dmem_rnd_seed\"]";
    obj_path_idx=".programs.gp[4][5].vars[6]";
    obj_type="ProgVar";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgVar .projects[1].programs.gp[4][4].vars[8] { };
ProgVar .projects[1].programs.gp[4][4].vars[8] {
 name=\"save_log_files_interactive\";
 var_type=T_Bool;
 bool_val=0;
 object_scope=NULL;
 flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
 reference=0;
 desc=\"save log files when running interactively?\";
 init_from=NULL;
};
";
   };
   PatchRec @[93] {
    off=0;
    action=INSERT;
    obj_path_names=".programs.gp[\"UtilProgs\"][\"TrainStart\"].functions";
    obj_path_idx=".programs.gp[4][5].functions";
    obj_type="Function_List";
    mbr_path=;
    targ_idx=0;
    targ_name="DMemSafeTrialsPerEpoch";
    insert_after=;
    insert_before=;
    new_obj_type="Function";
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
Function .projects[1].programs.gp[4][4].functions[0] { 
 ProgVar_List @.args = [0] {
 };

 ProgEl_List @.fun_code = [3] {
  LocalVars @[0] { 
   ProgVar_List @.local_vars = [0] {
   };
  };
  AssignExpr @[1] { };
  If @[2] { 
   ProgEl_List @.true_code = [2] {
    AssignExpr @[0] { };
    If @[1] { 
     ProgEl_List @.true_code = [1] {
      VarIncr @[0] { };
     };
    };
   };
  };
 };
};
Function .projects[1].programs.gp[4][4].functions[0] {
 name=\"DMemSafeTrialsPerEpoch\";
 desc=;
 flags=NEW_EL|CAN_REVERT_TO_CODE;
 code_string=\"DMemSafeTrialsPerEpoch() returns: int\";
 return_type=T_Int;
 object_type=taOBase;
 args {
  name=\"args\";
  el_typ=ProgVar;
  el_def=0;
 };
 fun_code {
  name=\"fun_code\";
  el_typ=ProgCode;
  el_def=0;
  LocalVars @[0] {
   name=\"LocalVars_LocalVars0vars\";
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string=\"LocalVars (0 vars)\";
   local_vars {
    name=\"local_vars\";
    el_typ=ProgVar;
    el_def=0;
   };
  };
  AssignExpr @[1] {
   name=\"AssignExpr_trialsperepochefftrialsperepoch\";
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string=\"trials_per_epoch_eff = trials_per_epoch\";
   result_var=.programs.gp[\"UtilProgs\"][\"TrainStart\"].vars[\"trials_per_epoch_eff\"]$$<ProgVar,trials_per_epoch_eff>;
   expr {
    expr=\"trials_per_epoch\";
   };
  };
  If @[2] {
   name=\"If_iftaMiscdmemnprocs1\";
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string=\"if (taMisc::dmem_nprocs > 1)\";
   cond {
    expr=\"taMisc::dmem_nprocs > 1\";
   };
   true_code {
    name=\"true_code\";
    el_typ=ProgCode;
    el_def=0;
    AssignExpr @[0] {
     name=\"AssignExpr_trialsperepochef_aMiscdmemnprocs\";
     desc=\"dmem means that each guy does less -- uses randomization to get good mix across processors\";
     flags=CAN_REVERT_TO_CODE;
     code_string=\"trials_per_epoch_eff = trials_per_epoch / taMisc::dmem_nprocs\";
     result_var=$.programs.gp[\"UtilProgs\"][\"TrainStart\"].vars[\"trials_per_epoch_eff\"]$;
     expr {
      expr=\"trials_per_epoch / taMisc::dmem_nprocs\";
     };
    };
    If @[1] {
     name=\"If_iftrialsperepoch_strialsperepoch\";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string=\"if (trials_per_epoch_eff * taMisc::dmem_nprocs < trials_per_epoch)\";
     cond {
      expr=\"trials_per_epoch_eff * taMisc::dmem_nprocs < trials_per_epoch\";
     };
     true_code {
      name=\"true_code\";
      el_typ=ProgCode;
      el_def=0;
      VarIncr @[0] {
       name=\"VarIncr_trialsperepocheff1\";
       desc=\"round up..\";
       flags=CAN_REVERT_TO_CODE;
       code_string=\"trials_per_epoch_eff += 1\";
       var=$.programs.gp[\"UtilProgs\"][\"TrainStart\"].vars[\"trials_per_epoch_eff\"]$;
       expr {
	expr=\"1\";
       };
      };
     };
    };
   };
  };
 };
};
";
   };
   PatchRec @[94] {
    off=0;
    action=INSERT;
    obj_path_names=".programs.gp[\"UtilProgs\"][\"TrainStart\"].prog_code";
    obj_path_idx=".programs.gp[4][5].prog_code";
    obj_type="ProgEl_List";
    mbr_path=;
    targ_idx=0;
    targ_name="FunctionCall_DMemSafeTrialsPerEpoch";
    insert_after=;
    insert_before="ProgramCall_BatchRndSeednetwork";
    new_obj_type="FunctionCall";
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
FunctionCall .projects[1].programs.gp[4][4].prog_code[0] { 
 ProgArg_List @.fun_args = [0] {
 };
};
FunctionCall .projects[1].programs.gp[4][4].prog_code[0] {
 name=\"FunctionCall_DMemSafeTrialsPerEpoch\";
 desc=;
 flags=NEW_EL|CAN_REVERT_TO_CODE;
 code_string=\"DMemSafeTrialsPerEpoch()\";
 result_var=NULL;
 fun=.programs.gp[\"UtilProgs\"][\"TrainStart\"].functions[\"DMemSafeTrialsPerEpoch\"]$$<Function,DMemSafeTrialsPerEpoch>;
 fun_args {
  name=\"fun_args\";
  el_typ=ProgArg;
  el_def=0;
 };
};
";
   };
   PatchRec @[95] {
    off=0;
    action=ASSIGN;
    obj_path_names=".programs.gp[\"UtilProgs\"][\"TrainStart\"].prog_code[\"If_iftaMiscinteractive\"]";
    obj_path_idx=".programs.gp[4][5].prog_code[2]";
    obj_type="If";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
If .projects[1].programs.gp[4][4].prog_code[3] { 
 ProgEl_List @.true_code = [1] {
  ProgramCall @[0] { 
   ProgArg_List @.prog_args = [1] {
    ProgArg @[0] { };
   };
  };
 };
};
If .projects[1].programs.gp[4][4].prog_code[3] {
 name=\"If_iftaMiscinteract_ilesinteractive\";
 desc=;
 flags=CAN_REVERT_TO_CODE;
 code_string=\"if (!taMisc::interactive || save_log_files_interactive)\";
 cond {
  expr=\"!taMisc::interactive || save_log_files_interactive\";
 };
 true_code {
  name=\"true_code\";
  el_typ=ProgCode;
  el_def=0;
  ProgramCall @[0] {
   name=\"ProgramCall_SaveLogFilesnetwork\";
   desc=\"save log files for all jobs -- after network is fully built and configed\";
   flags=CAN_REVERT_TO_CODE;
   code_string=\"SaveLogFiles(network)\";
   prog_args {
    name=\"prog_args\";
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=LeabraNetwork;
     type=\"LeabraNetwork*\";
     name=\"network\";
     required=1;
     def_val=;
     prev_expr=;
     expr {
      expr=\"network\";
     };
    };
   };
   target=.programs.gp[\"UtilProgs\"].gp[\"Monitors\"][\"SaveLogFiles\"]$$<Program,SaveLogFiles>;
   targ_ld_init=\"*SaveLogFiles*\";
  };
 };
};
";
   };
   PatchRec @[96] {
    off=0;
    action=ASSIGN;
    obj_path_names=".programs.gp[\"UtilProgs\"][\"TrainStart\"].prog_code[\"MethodCall_LRSConSpecLogLra_chs5lrsbumpstep\"]";
    obj_path_idx=".programs.gp[4][5].prog_code[6]";
    obj_type="MethodCall";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
MethodCall .projects[1].programs.gp[4][4].prog_code[7] { 
 ProgArg_List @.meth_args = [3] {
  ProgArg @[0] { };
  ProgArg @[1] { };
  ProgArg @[2] { };
 };
};
MethodCall .projects[1].programs.gp[4][4].prog_code[7] {
 name=\"MethodCall_LRSConSpecLogLra_tepslrsbumpstep\";
 desc=;
 flags=CAN_REVERT_TO_CODE;
 code_string=\"LRSConSpec->LogLrateSched(lrs_step_epochs, lrs_n_steps, lrs_bump_step)\";
 result_var=NULL;
 obj=.programs.gp[\"UtilProgs\"][\"TrainStart\"].vars[\"LRSConSpec\"]$$<ProgVar,LRSConSpec>;
 method=LeabraConSpec::LogLrateSched;
 meth_args {
  name=\"meth_args\";
  el_typ=ProgArg;
  el_def=0;
  ProgArg @[0] {
   arg_type=int;
   type=\"int\";
   name=\"epcs_per_step\";
   required=0;
   def_val=\"50\";
   prev_expr=\"lrs_step_epochs\";
   expr {
    expr=\"lrs_step_epochs\";
   };
  };
  ProgArg @[1] {
   arg_type=int;
   type=\"int\";
   name=\"n_steps\";
   required=0;
   def_val=\"5\";
   prev_expr=\"7\";
   expr {
    expr=\"lrs_n_steps\";
   };
  };
  ProgArg @[2] {
   arg_type=int;
   type=\"int\";
   name=\"bump_step\";
   required=0;
   def_val=\"-1\";
   prev_expr=;
   expr {
    expr=\"lrs_bump_step\";
   };
  };
 };
 meth_sig=\"void LogLrateSched(int epcs_per_step = 50, int n_steps = 5, int bump_step = -1)\";
 meth_desc=\" establish a logarithmic learning rate schedule with given total number of steps (including first step at lrate) and epochs per step: numbers go down in sequence: 1, .5, .2, .1, .05, .02, .01, etc.. this is a particularly good lrate schedule for large nets on hard tasks -- if bump_step > 0 (3 is a good default), the lrate bumps back up to 1 and back down to that step level, and then proceeds from there -- this can pop a model out of a local minimum and result in better final performance\";
};
";
   };
   PatchRec @[97] {
    off=0;
    action=ASSIGN;
    obj_path_names=".programs.gp[\"UtilProgs\"][\"TrainStart\"].prog_code[\"If_iftaMiscinteractive\"]";
    obj_path_idx=".programs.gp[4][5].prog_code[2]";
    obj_type="If";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
If .projects[1].programs.gp[4][4].prog_code[3] { 
 ProgEl_List @.true_code = [1] {
  ProgramCall @[0] { 
   ProgArg_List @.prog_args = [1] {
    ProgArg @[0] { };
   };
  };
 };
};
If .projects[1].programs.gp[4][4].prog_code[3] {
 name=\"If_iftaMiscinteract_ilesinteractive\";
 desc=;
 flags=CAN_REVERT_TO_CODE;
 code_string=\"if (!taMisc::interactive || save_log_files_interactive)\";
 cond {
  expr=\"!taMisc::interactive || save_log_files_interactive\";
 };
 true_code {
  name=\"true_code\";
  el_typ=ProgCode;
  el_def=0;
  ProgramCall @[0] {
   name=\"ProgramCall_SaveLogFilesnetwork\";
   desc=\"save log files for all jobs -- after network is fully built and configed\";
   flags=CAN_REVERT_TO_CODE;
   code_string=\"SaveLogFiles(network)\";
   prog_args {
    name=\"prog_args\";
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=LeabraNetwork;
     type=\"LeabraNetwork*\";
     name=\"network\";
     required=1;
     def_val=;
     prev_expr=;
     expr {
      expr=\"network\";
     };
    };
   };
   target=.programs.gp[\"UtilProgs\"].gp[\"Monitors\"][\"SaveLogFiles\"]$$<Program,SaveLogFiles>;
   targ_ld_init=\"*SaveLogFiles*\";
  };
 };
};
";
   };
   PatchRec @[98] {
    off=0;
    action=REPLACE;
    obj_path_names=".programs.gp[\"UtilProgs\"][\"TrainStart\"].prog_code[\"If_ifloadweightsweightsfilenonempty\"].true_code";
    obj_path_idx=".programs.gp[4][5].prog_code[5].true_code";
    obj_type="ProgEl_List";
    mbr_path=;
    targ_idx=2;
    targ_name="MemberAssign_networkepochloadstepc";
    insert_after=;
    insert_before=;
    new_obj_type="If";
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
If .projects[1].programs.gp[4][4].prog_code[6].true_code[2] { 
 ProgEl_List @.true_code = [1] {
  MemberAssign @[0] { };
 };
};
If .projects[1].programs.gp[4][4].prog_code[6].true_code[2] {
 name=\"If_ifloadstepc0\";
 desc=;
 flags=CAN_REVERT_TO_CODE;
 code_string=\"if (load_st_epc >= 0)\";
 cond {
  expr=\"load_st_epc >= 0\";
 };
 true_code {
  name=\"true_code\";
  el_typ=ProgCode;
  el_def=0;
  MemberAssign @[0] {
   name=\"MemberAssign_networkepochloadstepc\";
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string=\"network.epoch = load_st_epc\";
   obj=.programs.gp[\"UtilProgs\"][\"TrainStart\"].args[\"network\"]$$<ProgVar,network>;
   path=\"epoch\";
   expr {
    expr=\"load_st_epc\";
   };
   update_after=1;
  };
 };
};
";
   };
   PatchRec @[99] {
    off=0;
    action=ASSIGN;
    obj_path_names=".programs.gp[\"UtilProgs\"][\"TrainStart\"].prog_code[\"MethodCall_LRSConSpecLogLra_chs5lrsbumpstep\"]";
    obj_path_idx=".programs.gp[4][5].prog_code[6]";
    obj_type="MethodCall";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
MethodCall .projects[1].programs.gp[4][4].prog_code[7] { 
 ProgArg_List @.meth_args = [3] {
  ProgArg @[0] { };
  ProgArg @[1] { };
  ProgArg @[2] { };
 };
};
MethodCall .projects[1].programs.gp[4][4].prog_code[7] {
 name=\"MethodCall_LRSConSpecLogLra_tepslrsbumpstep\";
 desc=;
 flags=CAN_REVERT_TO_CODE;
 code_string=\"LRSConSpec->LogLrateSched(lrs_step_epochs, lrs_n_steps, lrs_bump_step)\";
 result_var=NULL;
 obj=.programs.gp[\"UtilProgs\"][\"TrainStart\"].vars[\"LRSConSpec\"]$$<ProgVar,LRSConSpec>;
 method=LeabraConSpec::LogLrateSched;
 meth_args {
  name=\"meth_args\";
  el_typ=ProgArg;
  el_def=0;
  ProgArg @[0] {
   arg_type=int;
   type=\"int\";
   name=\"epcs_per_step\";
   required=0;
   def_val=\"50\";
   prev_expr=\"lrs_step_epochs\";
   expr {
    expr=\"lrs_step_epochs\";
   };
  };
  ProgArg @[1] {
   arg_type=int;
   type=\"int\";
   name=\"n_steps\";
   required=0;
   def_val=\"5\";
   prev_expr=\"7\";
   expr {
    expr=\"lrs_n_steps\";
   };
  };
  ProgArg @[2] {
   arg_type=int;
   type=\"int\";
   name=\"bump_step\";
   required=0;
   def_val=\"-1\";
   prev_expr=;
   expr {
    expr=\"lrs_bump_step\";
   };
  };
 };
 meth_sig=\"void LogLrateSched(int epcs_per_step = 50, int n_steps = 5, int bump_step = -1)\";
 meth_desc=\" establish a logarithmic learning rate schedule with given total number of steps (including first step at lrate) and epochs per step: numbers go down in sequence: 1, .5, .2, .1, .05, .02, .01, etc.. this is a particularly good lrate schedule for large nets on hard tasks -- if bump_step > 0 (3 is a good default), the lrate bumps back up to 1 and back down to that step level, and then proceeds from there -- this can pop a model out of a local minimum and result in better final performance\";
};
";
   };
   PatchRec @[100] {
    off=0;
    action=ASSIGN;
    obj_path_names=".programs.gp[\"UtilProgs\"][\"TrainStart\"].prog_code[\"MethodCall_LRSConSpecLogLra_chs5lrsbumpstep\"].meth_args[\"n_steps\"]";
    obj_path_idx=".programs.gp[4][5].prog_code[6].meth_args[1]";
    obj_type="ProgArg";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgArg .projects[1].programs.gp[4][4].prog_code[7].meth_args[1] { };
ProgArg .projects[1].programs.gp[4][4].prog_code[7].meth_args[1] {
 arg_type=int;
 type=\"int\";
 name=\"n_steps\";
 required=0;
 def_val=\"5\";
 prev_expr=\"7\";
 expr {
  expr=\"lrs_n_steps\";
 };
};
";
   };
   PatchRec @[101] {
    off=0;
    action=ASSIGN;
    obj_path_names=".programs.gp[\"UtilProgs\"][\"TrainEnd\"].vars[\"save_final_wts\"]";
    obj_path_idx=".programs.gp[4][6].vars[0]";
    obj_type="ProgVar";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgVar .projects[1].programs.gp[4][5].vars[0] { };
ProgVar .projects[1].programs.gp[4][5].vars[0] {
 name=\"save_final_wts\";
 var_type=T_Bool;
 bool_val=1;
 object_scope=NULL;
 flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
 reference=0;
 desc=\"should final weights after training is complete be saved?\";
 init_from=NULL;
};
";
   };
   PatchRec @[102] {
    off=0;
    action=ASSIGN;
    obj_path_names=".programs.gp[\"UtilProgs\"][\"EpochEnd\"].vars[\"save_wts_interval\"]";
    obj_path_idx=".programs.gp[4][8].vars[0]";
    obj_type="ProgVar";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgVar .projects[1].programs.gp[4][7].vars[0] { };
ProgVar .projects[1].programs.gp[4][7].vars[0] {
 name=\"save_wts_interval\";
 var_type=T_Int;
 int_val=200;
 object_scope=NULL;
 flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
 reference=0;
 desc=\"how frequently (epochs) to save weights during training\";
 init_from=NULL;
};
";
   };
   PatchRec @[103] {
    off=0;
    action=ASSIGN;
    obj_path_names=".programs.gp[\"UtilProgs\"][\"Trial\"].vars[\"update_net_view\"]";
    obj_path_idx=".programs.gp[4][13].vars[0]";
    obj_type="ProgVar";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgVar .projects[1].programs.gp[4][12].vars[0] { };
ProgVar .projects[1].programs.gp[4][12].vars[0] {
 name=\"update_net_view\";
 var_type=T_Bool;
 bool_val=1;
 object_scope=NULL;
 flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
 reference=0;
 desc=\"determines whether to update any network view displays after trial is completed\";
 init_from=NULL;
};
";
   };
   PatchRec @[104] {
    off=0;
    action=ASSIGN;
    obj_path_names=".programs.gp[\"UtilProgs\"][\"Quarter\"].vars[\"update_net_view\"]";
    obj_path_idx=".programs.gp[4][14].vars[1]";
    obj_type="ProgVar";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgVar .projects[1].programs.gp[4][13].vars[1] { };
ProgVar .projects[1].programs.gp[4][13].vars[1] {
 name=\"update_net_view\";
 var_type=T_Bool;
 bool_val=0;
 object_scope=NULL;
 flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
 reference=0;
 desc=\"if true, will update network views at end of settling\";
 init_from=NULL;
};
";
   };
   PatchRec @[105] {
    off=0;
    action=ASSIGN;
    obj_path_names=".programs.gp[\"UtilProgs\"][\"SaveWeights\"].vars[\"tag\"]";
    obj_path_idx=".programs.gp[4][16].vars[0]";
    obj_type="ProgVar";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgVar .projects[1].programs.gp[4][15].vars[0] { };
ProgVar .projects[1].programs.gp[4][15].vars[0] {
 name=\"tag\";
 var_type=T_String;
 string_val=\"__RunMaster_NetMaster\";
 object_scope=NULL;
 flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED;
 reference=0;
 desc=\"user defined tag (set by startup script)\";
 init_from=.programs.gp[\"UtilProgs\"].gp[\"Monitors\"][\"SaveLogFiles\"]$$<Program,SaveLogFiles>;
};
";
   };
   PatchRec @[106] {
    off=0;
    action=ASSIGN;
    obj_path_names=".programs.gp[\"UtilProgs\"][\"SaveWeights\"].vars[\"fname\"]";
    obj_path_idx=".programs.gp[4][16].vars[2]";
    obj_type="ProgVar";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgVar .projects[1].programs.gp[4][15].vars[2] { };
ProgVar .projects[1].programs.gp[4][15].vars[2] {
 name=\"fname\";
 var_type=T_String;
 string_val=\"/Users/oreilly/emergent/proj_templates/LeabraFlex_RunMaster_NetMaster.00_0050.wts.gz\";
 object_scope=NULL;
 flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
 reference=0;
 desc=;
 init_from=NULL;
};
";
   };
   PatchRec @[107] {
    off=0;
    action=ASSIGN;
    obj_path_names=".programs.gp[\"UtilProgs\"][\"SaveWeights\"].vars[\"final_tag\"]";
    obj_path_idx=".programs.gp[4][16].vars[5]";
    obj_type="ProgVar";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgVar .projects[1].programs.gp[4][15].vars[5] { };
ProgVar .projects[1].programs.gp[4][15].vars[5] {
 name=\"final_tag\";
 var_type=T_String;
 string_val=\"_RunMaster_NetMaster.00_0050\";
 object_scope=NULL;
 flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
 reference=0;
 desc=\"batch + epoch\";
 init_from=NULL;
};
";
   };
   PatchRec @[108] {
    off=0;
    action=INSERT;
    obj_path_names=".programs.gp[\"UtilProgs\"].gp[\"Monitors\"]";
    obj_path_idx=".programs.gp[4].gp[0]";
    obj_type="Program_Group";
    mbr_path=;
    targ_idx=3;
    targ_name="LeabraTestTrialMonitor";
    insert_after="LeabraEpochMonitor";
    insert_before=;
    new_obj_type="Program";
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
Program .projects[1].programs.gp[4].gp[0][3] { 
 UserDataItem_List @*(.user_data_) {
  UserData_DocLink @[0] { };
 };

 ProgObjList @.objs = [1] {
  NetMonitor @[0] { 
   NetMonItem_List @.items = [26] {
    NetMonItem @[0] { };
    NetMonItem @[1] { };
    NetMonItem @[2] { };
    NetMonItem @[3] { };
    NetMonItem @[4] { };
    NetMonItem @[5] { };
    NetMonItem @[6] { };
    NetMonItem @[7] { };
    NetMonItem @[8] { };
    NetMonItem @[9] { };
    NetMonItem @[10] { };
    NetMonItem @[11] { };
    NetMonItem @[12] { };
    NetMonItem @[13] { };
    NetMonItem @[14] { };
    NetMonItem @[15] { };
    NetMonItem @[16] { };
    NetMonItem @[17] { };
    NetMonItem @[18] { };
    NetMonItem @[19] { };
    NetMonItem @[20] { };
    NetMonItem @[21] { };
    NetMonItem @[22] { };
    NetMonItem @[23] { };
    NetMonItem @[24] { };
    NetMonItem @[25] { };
   };
  };
 };

 ProgType_List @.types = [0] {
 };

 ProgVar_List @.args = [1] {
  ProgVar @[0] { };
 };

 ProgVar_List @.vars = [3] {
  ProgVar @[0] { };
  ProgVar @[1] { };
  ProgVar @[2] { };
 };

 Function_List @.functions = [0] {
 };

 ProgEl_List @.init_code = [4] {
  MethodCall @[0] { 
   ProgArg_List @.meth_args = [2] {
    ProgArg @[0] { };
    ProgArg @[1] { };
   };
  };
  MethodCall @[1] { 
   ProgArg_List @.meth_args = [1] {
    ProgArg @[0] { };
   };
  };
  MethodCall @[2] { 
   ProgArg_List @.meth_args = [1] {
    ProgArg @[0] { };
   };
  };
  AssignExpr @[3] { };
 };

 ProgEl_List @.prog_code = [5] {
  If @[0] { 
   ProgEl_List @.true_code = [3] {
    MethodCall @[0] { 
     ProgArg_List @.meth_args = [2] {
      ProgArg @[0] { };
      ProgArg @[1] { };
     };
    };
    MethodCall @[1] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    AssignExpr @[2] { };
   };
  };
  MethodCall @[1] { 
   ProgArg_List @.meth_args = [0] {
   };
  };
  MethodCall @[2] { 
   ProgArg_List @.meth_args = [0] {
   };
  };
  MethodCall @[3] { 
   ProgArg_List @.meth_args = [0] {
   };
  };
  MethodCall @[4] { 
   ProgArg_List @.meth_args = [2] {
    ProgArg @[0] { };
    ProgArg @[1] { };
   };
  };
 };
};
Program .projects[1].programs.gp[4].gp[0][3] {
 UserDataItem_List @*(.user_data_) {
  name=;
  el_typ=UserData_DocLink;
  el_def=0;
  UserData_DocLink @[0] {name=\"DocLink\": doc=.programs.gp[\"UtilProgs\"].gp[\"Monitors\"][\"LeabraTrialMonitor\"].doc$$<taDoc,doc>: };
 };
 name=\"LeabraTestTrialMonitor\";
 short_nm=\"TsTrMn\";
 tags=\"Leabra, Std, Monitor\";
 desc=\"monitor trial-level data from the network (and potentially other sources) -- stores results in datatable (TrialOutputData typically) that can be used for graph/grid views and further analysis \";
 version {
  major=0;
  minor=0;
  step=0;
 };
 author=\"Randall C. O'Reilly\";
 email=\"emergent-users@grey.colorado.edu\";
 flags=NO_STOP_STEP;
 stop_step_cond {
  expr=;
 };
 objs {
  name=\"objs\";
  el_typ=NetMonitor;
  el_def=0;
  NetMonitor @[0] {
   name=\"trial_netmon\";
   items {
    name=\"items\";
    el_typ=NetMonItem;
    el_def=0;
    NetMonItem @[0] {
     name=\"batch\";
     computed=0;
     object_type=LeabraNetwork;
     object=.networks[\"Network_0\"]$$<LeabraNetwork,Network_0>;
     variable=\"batch\";
     var_label=;
     name_style=AUTO_NAME;
     max_name_len=6;
     options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
     val_type=VT_FLOAT;
     matrix=0;
     matrix_geom{      };
     data_agg=0;
     data_src=NULL;
     agg_col {
      col_name=\"agg_col\";
     };
     agg {name=\"agg\": op=NONE: rel={name=\"rel\": rel=LESSTHANOREQUAL: val=0: val_string=\"\": use_var=0: var=NULL: }: };
     select_rows=0;
     select_spec {
      col_name=\"select_spec\";
      name=\"select_spec_EQUAL_\";
      on=1;
      rel=EQUAL;
      use_var=0;
      cmp 0 1;
      var=NULL;
      enable_var=NULL;
     };
     pre_proc_1 {name=\"pre_proc_1\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_2 {name=\"pre_proc_2\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_3 {name=\"pre_proc_3\": opr=NONE: arg=0: lw=-1: hi=1: };
    };
    NetMonItem @[1] {
     name=\"epoch\";
     computed=0;
     object_type=LeabraNetwork;
     object=$.networks[\"Network_0\"]$;
     variable=\"epoch\";
     var_label=;
     name_style=AUTO_NAME;
     max_name_len=6;
     options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
     val_type=VT_FLOAT;
     matrix=0;
     matrix_geom{      };
     data_agg=0;
     data_src=NULL;
     agg_col {
      col_name=\"agg_col\";
     };
     agg {name=\"agg\": op=NONE: rel={name=\"rel\": rel=LESSTHANOREQUAL: val=0: val_string=\"\": use_var=0: var=NULL: }: };
     select_rows=0;
     select_spec {
      col_name=\"select_spec\";
      name=\"select_spec_EQUAL_\";
      on=1;
      rel=EQUAL;
      use_var=0;
      cmp 0 1;
      var=NULL;
      enable_var=NULL;
     };
     pre_proc_1 {name=\"pre_proc_1\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_2 {name=\"pre_proc_2\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_3 {name=\"pre_proc_3\": opr=NONE: arg=0: lw=-1: hi=1: };
    };
    NetMonItem @[2] {
     name=\"train_mode\";
     computed=0;
     object_type=LeabraNetwork;
     object=$.networks[\"Network_0\"]$;
     variable=\"train_mode\";
     var_label=;
     name_style=AUTO_NAME;
     max_name_len=6;
     options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
     val_type=VT_FLOAT;
     matrix=0;
     matrix_geom{      };
     data_agg=0;
     data_src=NULL;
     agg_col {
      col_name=;
     };
     agg {name=\"agg\": op=NONE: rel={name=\"rel\": rel=LESSTHANOREQUAL: val=0: val_string=\"\": use_var=0: var=NULL: }: };
     select_rows=0;
     select_spec {
      col_name=;
      name=\"_EQUAL_\";
      on=1;
      rel=EQUAL;
      use_var=0;
      cmp 0 1;
      var=NULL;
      enable_var=NULL;
     };
     pre_proc_1 {name=\"pre_proc_1\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_2 {name=\"pre_proc_2\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_3 {name=\"pre_proc_3\": opr=NONE: arg=0: lw=-1: hi=1: };
    };
    NetMonItem @[3] {
     name=\"group\";
     computed=0;
     object_type=LeabraNetwork;
     object=$.networks[\"Network_0\"]$;
     variable=\"group\";
     var_label=;
     name_style=AUTO_NAME;
     max_name_len=6;
     options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
     val_type=VT_FLOAT;
     matrix=0;
     matrix_geom{      };
     data_agg=0;
     data_src=NULL;
     agg_col {
      col_name=;
     };
     agg {name=\"agg\": op=NONE: rel={name=\"rel\": rel=LESSTHANOREQUAL: val=0: val_string=\"\": use_var=0: var=NULL: }: };
     select_rows=0;
     select_spec {
      col_name=;
      name=\"_EQUAL_\";
      on=1;
      rel=EQUAL;
      use_var=0;
      cmp 0 1;
      var=NULL;
      enable_var=NULL;
     };
     pre_proc_1 {name=\"pre_proc_1\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_2 {name=\"pre_proc_2\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_3 {name=\"pre_proc_3\": opr=NONE: arg=0: lw=-1: hi=1: };
    };
    NetMonItem @[4] {
     name=\"trial\";
     computed=0;
     object_type=LeabraNetwork;
     object=$.networks[\"Network_0\"]$;
     variable=\"trial\";
     var_label=;
     name_style=AUTO_NAME;
     max_name_len=6;
     options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
     val_type=VT_FLOAT;
     matrix=0;
     matrix_geom{      };
     data_agg=0;
     data_src=NULL;
     agg_col {
      col_name=\"agg_col\";
     };
     agg {name=\"agg\": op=NONE: rel={name=\"rel\": rel=LESSTHANOREQUAL: val=0: val_string=\"\": use_var=0: var=NULL: }: };
     select_rows=0;
     select_spec {
      col_name=\"select_spec\";
      name=\"select_spec_EQUAL_\";
      on=1;
      rel=EQUAL;
      use_var=0;
      cmp 0 1;
      var=NULL;
      enable_var=NULL;
     };
     pre_proc_1 {name=\"pre_proc_1\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_2 {name=\"pre_proc_2\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_3 {name=\"pre_proc_3\": opr=NONE: arg=0: lw=-1: hi=1: };
    };
    NetMonItem @[5] {
     name=\"tick\";
     computed=0;
     object_type=LeabraNetwork;
     object=$.networks[\"Network_0\"]$;
     variable=\"tick\";
     var_label=;
     name_style=AUTO_NAME;
     max_name_len=6;
     options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
     val_type=VT_FLOAT;
     matrix=0;
     matrix_geom{      };
     data_agg=0;
     data_src=NULL;
     agg_col {
      col_name=;
     };
     agg {name=\"agg\": op=NONE: rel={name=\"rel\": rel=LESSTHANOREQUAL: val=0: val_string=\"\": use_var=0: var=NULL: }: };
     select_rows=0;
     select_spec {
      col_name=;
      name=\"_EQUAL_\";
      on=1;
      rel=EQUAL;
      use_var=0;
      cmp 0 1;
      var=NULL;
      enable_var=NULL;
     };
     pre_proc_1 {name=\"pre_proc_1\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_2 {name=\"pre_proc_2\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_3 {name=\"pre_proc_3\": opr=NONE: arg=0: lw=-1: hi=1: };
    };
    NetMonItem @[6] {
     name=\"time\";
     computed=0;
     object_type=LeabraNetwork;
     object=$.networks[\"Network_0\"]$;
     variable=\"time\";
     var_label=;
     name_style=AUTO_NAME;
     max_name_len=6;
     options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
     val_type=VT_FLOAT;
     matrix=0;
     matrix_geom{      };
     data_agg=0;
     data_src=NULL;
     agg_col {
      col_name=;
     };
     agg {name=\"agg\": op=NONE: rel={name=\"rel\": rel=LESSTHANOREQUAL: val=0: val_string=\"\": use_var=0: var=NULL: }: };
     select_rows=0;
     select_spec {
      col_name=;
      name=\"_EQUAL_\";
      on=1;
      rel=EQUAL;
      use_var=0;
      cmp 0 1;
      var=NULL;
      enable_var=NULL;
     };
     pre_proc_1 {name=\"pre_proc_1\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_2 {name=\"pre_proc_2\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_3 {name=\"pre_proc_3\": opr=NONE: arg=0: lw=-1: hi=1: };
    };
    NetMonItem @[7] {
     name=\"trial_name\";
     computed=0;
     object_type=LeabraNetwork;
     object=$.networks[\"Network_0\"]$;
     variable=\"trial_name\";
     var_label=;
     name_style=AUTO_NAME;
     max_name_len=6;
     options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
     val_type=VT_FLOAT;
     matrix=0;
     matrix_geom{      };
     data_agg=0;
     data_src=NULL;
     agg_col {
      col_name=\"agg_col\";
     };
     agg {name=\"agg\": op=NONE: rel={name=\"rel\": rel=LESSTHANOREQUAL: val=0: val_string=\"\": use_var=0: var=NULL: }: };
     select_rows=0;
     select_spec {
      col_name=\"select_spec\";
      name=\"select_spec_EQUAL_\";
      on=1;
      rel=EQUAL;
      use_var=0;
      cmp 0 1;
      var=NULL;
      enable_var=NULL;
     };
     pre_proc_1 {name=\"pre_proc_1\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_2 {name=\"pre_proc_2\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_3 {name=\"pre_proc_3\": opr=NONE: arg=0: lw=-1: hi=1: };
    };
    NetMonItem @[8] {
     name=\"group_name\";
     computed=0;
     object_type=LeabraNetwork;
     object=$.networks[\"Network_0\"]$;
     variable=\"group_name\";
     var_label=;
     name_style=AUTO_NAME;
     max_name_len=6;
     options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
     val_type=VT_FLOAT;
     matrix=0;
     matrix_geom{      };
     data_agg=0;
     data_src=NULL;
     agg_col {
      col_name=\"agg_col\";
     };
     agg {name=\"agg\": op=NONE: rel={name=\"rel\": rel=LESSTHANOREQUAL: val=0: val_string=\"\": use_var=0: var=NULL: }: };
     select_rows=0;
     select_spec {
      col_name=\"select_spec\";
      name=\"select_spec_EQUAL_\";
      on=1;
      rel=EQUAL;
      use_var=0;
      cmp 0 1;
      var=NULL;
      enable_var=NULL;
     };
     pre_proc_1 {name=\"pre_proc_1\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_2 {name=\"pre_proc_2\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_3 {name=\"pre_proc_3\": opr=NONE: arg=0: lw=-1: hi=1: };
    };
    NetMonItem @[9] {
     name=\"output_name\";
     computed=0;
     object_type=LeabraNetwork;
     object=$.networks[\"Network_0\"]$;
     variable=\"minus_output_name\";
     var_label=;
     name_style=MY_NAME;
     max_name_len=6;
     options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
     val_type=VT_FLOAT;
     matrix=0;
     matrix_geom{      };
     data_agg=0;
     data_src=NULL;
     agg_col {
      col_name=;
     };
     agg {name=\"agg\": op=NONE: rel={name=\"rel\": rel=LESSTHANOREQUAL: val=0: val_string=\"\": use_var=0: var=NULL: }: };
     select_rows=0;
     select_spec {
      col_name=;
      name=\"_EQUAL_\";
      on=1;
      rel=EQUAL;
      use_var=0;
      cmp 0 1;
      var=NULL;
      enable_var=NULL;
     };
     pre_proc_1 {name=\"pre_proc_1\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_2 {name=\"pre_proc_2\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_3 {name=\"pre_proc_3\": opr=NONE: arg=0: lw=-1: hi=1: };
    };
    NetMonItem @[10] {
     name=\"rt_cycles\";
     computed=0;
     object_type=LeabraNetwork;
     object=$.networks[\"Network_0\"]$;
     variable=\"rt_cycles\";
     var_label=;
     name_style=AUTO_NAME;
     max_name_len=6;
     options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
     val_type=VT_FLOAT;
     matrix=0;
     matrix_geom{      };
     data_agg=0;
     data_src=NULL;
     agg_col {
      col_name=\"agg_col\";
     };
     agg {name=\"agg\": op=NONE: rel={name=\"rel\": rel=LESSTHANOREQUAL: val=0: val_string=\"\": use_var=0: var=NULL: }: };
     select_rows=0;
     select_spec {
      col_name=\"select_spec\";
      name=\"select_spec_EQUAL_\";
      on=1;
      rel=EQUAL;
      use_var=0;
      cmp 0 1;
      var=NULL;
      enable_var=NULL;
     };
     pre_proc_1 {name=\"pre_proc_1\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_2 {name=\"pre_proc_2\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_3 {name=\"pre_proc_3\": opr=NONE: arg=0: lw=-1: hi=1: };
    };
    NetMonItem @[11] {
     name=\"sse\";
     computed=0;
     object_type=LeabraNetwork;
     object=$.networks[\"Network_0\"]$;
     variable=\"sse\";
     var_label=;
     name_style=AUTO_NAME;
     max_name_len=6;
     options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
     val_type=VT_FLOAT;
     matrix=0;
     matrix_geom{      };
     data_agg=0;
     data_src=NULL;
     agg_col {
      col_name=\"agg_col\";
     };
     agg {name=\"agg\": op=NONE: rel={name=\"rel\": rel=LESSTHANOREQUAL: val=0: val_string=\"\": use_var=0: var=NULL: }: };
     select_rows=0;
     select_spec {
      col_name=\"select_spec\";
      name=\"select_spec_EQUAL_\";
      on=1;
      rel=EQUAL;
      use_var=0;
      cmp 0 1;
      var=NULL;
      enable_var=NULL;
     };
     pre_proc_1 {name=\"pre_proc_1\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_2 {name=\"pre_proc_2\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_3 {name=\"pre_proc_3\": opr=NONE: arg=0: lw=-1: hi=1: };
    };
    NetMonItem @[12] {
     name=\"norm_err\";
     computed=0;
     object_type=LeabraNetwork;
     object=$.networks[\"Network_0\"]$;
     variable=\"norm_err\";
     var_label=;
     name_style=AUTO_NAME;
     max_name_len=6;
     options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
     val_type=VT_FLOAT;
     matrix=0;
     matrix_geom{      };
     data_agg=0;
     data_src=NULL;
     agg_col {
      col_name=;
     };
     agg {name=\"agg\": op=NONE: rel={name=\"rel\": rel=LESSTHANOREQUAL: val=0: val_string=\"\": use_var=0: var=NULL: }: };
     select_rows=0;
     select_spec {
      col_name=;
      name=\"_EQUAL_\";
      on=1;
      rel=EQUAL;
      use_var=0;
      cmp 0 1;
      var=NULL;
      enable_var=NULL;
     };
     pre_proc_1 {name=\"pre_proc_1\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_2 {name=\"pre_proc_2\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_3 {name=\"pre_proc_3\": opr=NONE: arg=0: lw=-1: hi=1: };
    };
    NetMonItem @[13] {
     name=\"cos_err\";
     computed=0;
     object_type=LeabraNetwork;
     object=$.networks[\"Network_0\"]$;
     variable=\"cos_err\";
     var_label=;
     name_style=AUTO_NAME;
     max_name_len=6;
     options=OUTPUT_LAYERS|TARGET_LAYERS;
     val_type=VT_FLOAT;
     matrix=0;
     matrix_geom{      };
     data_agg=0;
     data_src=NULL;
     agg_col {
      col_name=;
     };
     agg {name=\"agg\": op=NONE: rel={name=\"rel\": rel=LESSTHANOREQUAL: val=0: val_string=\"\": use_var=0: var=NULL: }: };
     select_rows=0;
     select_spec {
      col_name=;
      name=\"_EQUAL_\";
      on=1;
      rel=EQUAL;
      use_var=0;
      cmp 0 1;
      var=NULL;
      enable_var=NULL;
     };
     pre_proc_1 {name=\"pre_proc_1\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_2 {name=\"pre_proc_2\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_3 {name=\"pre_proc_3\": opr=NONE: arg=0: lw=-1: hi=1: };
    };
    NetMonItem @[14] {
     name=\"ext_rew\";
     computed=0;
     object_type=LeabraNetwork;
     object=$.networks[\"Network_0\"]$;
     variable=\"ext_rew\";
     var_label=;
     name_style=AUTO_NAME;
     max_name_len=6;
     options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
     val_type=VT_FLOAT;
     matrix=0;
     matrix_geom{      };
     data_agg=0;
     data_src=NULL;
     agg_col {
      col_name=\"agg_col\";
     };
     agg {name=\"agg\": op=NONE: rel={name=\"rel\": rel=LESSTHANOREQUAL: val=0: val_string=\"\": use_var=0: var=NULL: }: };
     select_rows=0;
     select_spec {
      col_name=\"select_spec\";
      name=\"select_spec_EQUAL_\";
      on=1;
      rel=EQUAL;
      use_var=0;
      cmp 0 1;
      var=NULL;
      enable_var=NULL;
     };
     pre_proc_1 {name=\"pre_proc_1\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_2 {name=\"pre_proc_2\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_3 {name=\"pre_proc_3\": opr=NONE: arg=0: lw=-1: hi=1: };
    };
    NetMonItem @[15] {
     name=\"lay_sse\";
     computed=0;
     object_type=LeabraNetwork;
     object=$.networks[\"Network_0\"]$;
     variable=\"layers.sse\";
     var_label=\"lay_sse\";
     name_style=AUTO_NAME;
     max_name_len=6;
     options=OUTPUT_LAYERS|TARGET_LAYERS;
     val_type=VT_FLOAT;
     matrix=0;
     matrix_geom{      };
     data_agg=0;
     data_src=NULL;
     agg_col {
      col_name=\"agg_col\";
     };
     agg {name=\"agg\": op=NONE: rel={name=\"rel\": rel=LESSTHANOREQUAL: val=0: val_string=\"\": use_var=0: var=NULL: }: };
     select_rows=0;
     select_spec {
      col_name=\"select_spec\";
      name=\"select_spec_EQUAL_\";
      on=1;
      rel=EQUAL;
      use_var=0;
      cmp 0 1;
      var=NULL;
      enable_var=NULL;
     };
     pre_proc_1 {name=\"pre_proc_1\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_2 {name=\"pre_proc_2\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_3 {name=\"pre_proc_3\": opr=NONE: arg=0: lw=-1: hi=1: };
    };
    NetMonItem @[16] {
     name=\"lay_bin_err\";
     computed=0;
     object_type=LeabraNetwork;
     object=$.networks[\"Network_0\"]$;
     variable=\"layers.bin_err\";
     var_label=\"lay_bin_err\";
     name_style=AUTO_NAME;
     max_name_len=6;
     options=OUTPUT_LAYERS|TARGET_LAYERS;
     val_type=VT_FLOAT;
     matrix=0;
     matrix_geom{      };
     data_agg=0;
     data_src=NULL;
     agg_col {
      col_name=\"agg_col\";
     };
     agg {name=\"agg\": op=NONE: rel={name=\"rel\": rel=LESSTHANOREQUAL: val=0: val_string=\"\": use_var=0: var=NULL: }: };
     select_rows=0;
     select_spec {
      col_name=\"select_spec\";
      name=\"select_spec_EQUAL_\";
      on=1;
      rel=EQUAL;
      use_var=0;
      cmp 0 1;
      var=NULL;
      enable_var=NULL;
     };
     pre_proc_1 {name=\"pre_proc_1\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_2 {name=\"pre_proc_2\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_3 {name=\"pre_proc_3\": opr=NONE: arg=0: lw=-1: hi=1: };
    };
    NetMonItem @[17] {
     name=\"lay_norm_err\";
     computed=0;
     object_type=LeabraNetwork;
     object=$.networks[\"Network_0\"]$;
     variable=\"layers.norm_err\";
     var_label=\"lay_norm_err\";
     name_style=AUTO_NAME;
     max_name_len=6;
     options=OUTPUT_LAYERS|TARGET_LAYERS;
     val_type=VT_FLOAT;
     matrix=0;
     matrix_geom{      };
     data_agg=0;
     data_src=NULL;
     agg_col {
      col_name=\"agg_col\";
     };
     agg {name=\"agg\": op=NONE: rel={name=\"rel\": rel=LESSTHANOREQUAL: val=0: val_string=\"\": use_var=0: var=NULL: }: };
     select_rows=0;
     select_spec {
      col_name=\"select_spec\";
      name=\"select_spec_EQUAL_\";
      on=1;
      rel=EQUAL;
      use_var=0;
      cmp 0 1;
      var=NULL;
      enable_var=NULL;
     };
     pre_proc_1 {name=\"pre_proc_1\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_2 {name=\"pre_proc_2\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_3 {name=\"pre_proc_3\": opr=NONE: arg=0: lw=-1: hi=1: };
    };
    NetMonItem @[18] {
     name=\"lay_cos_err\";
     computed=0;
     object_type=LeabraNetwork;
     object=$.networks[\"Network_0\"]$;
     variable=\"layers.cos_err\";
     var_label=\"lay_cos_err\";
     name_style=AUTO_NAME;
     max_name_len=6;
     options=OUTPUT_LAYERS|TARGET_LAYERS;
     val_type=VT_FLOAT;
     matrix=0;
     matrix_geom{      };
     data_agg=0;
     data_src=NULL;
     agg_col {
      col_name=\"agg_col\";
     };
     agg {name=\"agg\": op=NONE: rel={name=\"rel\": rel=LESSTHANOREQUAL: val=0: val_string=\"\": use_var=0: var=NULL: }: };
     select_rows=0;
     select_spec {
      col_name=\"select_spec\";
      name=\"select_spec_EQUAL_\";
      on=1;
      rel=EQUAL;
      use_var=0;
      cmp 0 1;
      var=NULL;
      enable_var=NULL;
     };
     pre_proc_1 {name=\"pre_proc_1\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_2 {name=\"pre_proc_2\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_3 {name=\"pre_proc_3\": opr=NONE: arg=0: lw=-1: hi=1: };
    };
    NetMonItem @[19] {
     name=\"lay_net_sd\";
     computed=0;
     object_type=LeabraNetwork;
     object=$.networks[\"Network_0\"]$;
     variable=\"layers.net_sd\";
     var_label=\"lay_net_sd\";
     name_style=AUTO_NAME;
     max_name_len=6;
     options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
     val_type=VT_FLOAT;
     matrix=0;
     matrix_geom{      };
     data_agg=0;
     data_src=NULL;
     agg_col {
      col_name=\"agg_col\";
     };
     agg {name=\"agg\": op=NONE: rel={name=\"rel\": rel=LESSTHANOREQUAL: val=0: val_string=\"\": use_var=0: var=NULL: }: };
     select_rows=0;
     select_spec {
      col_name=\"select_spec\";
      name=\"select_spec_EQUAL_\";
      on=1;
      rel=EQUAL;
      use_var=0;
      cmp 0 1;
      var=NULL;
      enable_var=NULL;
     };
     pre_proc_1 {name=\"pre_proc_1\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_2 {name=\"pre_proc_2\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_3 {name=\"pre_proc_3\": opr=NONE: arg=0: lw=-1: hi=1: };
    };
    NetMonItem @[20] {
     name=\"net_cos_diff\";
     computed=0;
     object_type=LeabraNetwork;
     object=$.networks[\"Network_0\"]$;
     variable=\"cos_diff\";
     var_label=\"net_cos_diff\";
     name_style=AUTO_NAME;
     max_name_len=6;
     options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
     val_type=VT_FLOAT;
     matrix=0;
     matrix_geom{      };
     data_agg=0;
     data_src=NULL;
     agg_col {
      col_name=;
     };
     agg {name=\"agg\": op=NONE: rel={name=\"rel\": rel=LESSTHANOREQUAL: val=0: val_string=\"\": use_var=0: var=NULL: }: };
     select_rows=0;
     select_spec {
      col_name=;
      name=\"_EQUAL_\";
      on=1;
      rel=EQUAL;
      use_var=0;
      cmp 0 1;
      var=NULL;
      enable_var=NULL;
     };
     pre_proc_1 {name=\"pre_proc_1\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_2 {name=\"pre_proc_2\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_3 {name=\"pre_proc_3\": opr=NONE: arg=0: lw=-1: hi=1: };
    };
    NetMonItem @[21] {
     name=\"net_trial_cos_diff\";
     computed=0;
     object_type=LeabraNetwork;
     object=$.networks[\"Network_0\"]$;
     variable=\"trial_cos_diff\";
     var_label=\"net_trial_cos_diff\";
     name_style=AUTO_NAME;
     max_name_len=6;
     options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
     val_type=VT_FLOAT;
     matrix=0;
     matrix_geom{      };
     data_agg=0;
     data_src=NULL;
     agg_col {
      col_name=;
     };
     agg {name=\"agg\": op=NONE: rel={name=\"rel\": rel=LESSTHANOREQUAL: val=0: val_string=\"\": use_var=0: var=NULL: }: };
     select_rows=0;
     select_spec {
      col_name=;
      name=\"_EQUAL_\";
      on=1;
      rel=EQUAL;
      use_var=0;
      cmp 0 1;
      var=NULL;
      enable_var=NULL;
     };
     pre_proc_1 {name=\"pre_proc_1\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_2 {name=\"pre_proc_2\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_3 {name=\"pre_proc_3\": opr=NONE: arg=0: lw=-1: hi=1: };
    };
    NetMonItem @[22] {
     name=\"net_avg_act_diff\";
     computed=0;
     object_type=LeabraNetwork;
     object=$.networks[\"Network_0\"]$;
     variable=\"avg_act_diff\";
     var_label=\"net_avg_act_diff\";
     name_style=AUTO_NAME;
     max_name_len=6;
     options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
     val_type=VT_FLOAT;
     matrix=0;
     matrix_geom{      };
     data_agg=0;
     data_src=NULL;
     agg_col {
      col_name=;
     };
     agg {name=\"agg\": op=NONE: rel={name=\"rel\": rel=LESSTHANOREQUAL: val=0: val_string=\"\": use_var=0: var=NULL: }: };
     select_rows=0;
     select_spec {
      col_name=;
      name=\"_EQUAL_\";
      on=1;
      rel=EQUAL;
      use_var=0;
      cmp 0 1;
      var=NULL;
      enable_var=NULL;
     };
     pre_proc_1 {name=\"pre_proc_1\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_2 {name=\"pre_proc_2\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_3 {name=\"pre_proc_3\": opr=NONE: arg=0: lw=-1: hi=1: };
    };
    NetMonItem @[23] {
     name=\"cos_diff\";
     computed=0;
     object_type=LeabraNetwork;
     object=$.networks[\"Network_0\"]$;
     variable=\"layers.cos_diff\";
     var_label=\"cos_diff\";
     name_style=AUTO_NAME;
     max_name_len=8;
     options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
     val_type=VT_FLOAT;
     matrix=0;
     matrix_geom{      };
     data_agg=0;
     data_src=NULL;
     agg_col {
      col_name=;
     };
     agg {name=\"agg\": op=NONE: rel={name=\"rel\": rel=LESSTHANOREQUAL: val=0: val_string=\"\": use_var=0: var=NULL: }: };
     select_rows=0;
     select_spec {
      col_name=;
      name=\"_EQUAL_\";
      on=1;
      rel=EQUAL;
      use_var=0;
      cmp 0 1;
      var=NULL;
      enable_var=NULL;
     };
     pre_proc_1 {name=\"pre_proc_1\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_2 {name=\"pre_proc_2\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_3 {name=\"pre_proc_3\": opr=NONE: arg=0: lw=-1: hi=1: };
    };
    NetMonItem @[24] {
     name=\"trial_cos_diff\";
     computed=0;
     object_type=LeabraNetwork;
     object=$.networks[\"Network_0\"]$;
     variable=\"layers.trial_cos_diff\";
     var_label=\"trial_cos_diff\";
     name_style=AUTO_NAME;
     max_name_len=8;
     options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
     val_type=VT_FLOAT;
     matrix=0;
     matrix_geom{      };
     data_agg=0;
     data_src=NULL;
     agg_col {
      col_name=;
     };
     agg {name=\"agg\": op=NONE: rel={name=\"rel\": rel=LESSTHANOREQUAL: val=0: val_string=\"\": use_var=0: var=NULL: }: };
     select_rows=0;
     select_spec {
      col_name=;
      name=\"_EQUAL_\";
      on=1;
      rel=EQUAL;
      use_var=0;
      cmp 0 1;
      var=NULL;
      enable_var=NULL;
     };
     pre_proc_1 {name=\"pre_proc_1\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_2 {name=\"pre_proc_2\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_3 {name=\"pre_proc_3\": opr=NONE: arg=0: lw=-1: hi=1: };
    };
    NetMonItem @[25] {
     name=\"avg_act_diff\";
     computed=0;
     object_type=LeabraNetwork;
     object=$.networks[\"Network_0\"]$;
     variable=\"layers.avg_act_diff\";
     var_label=\"avg_act_diff\";
     name_style=AUTO_NAME;
     max_name_len=8;
     options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
     val_type=VT_FLOAT;
     matrix=0;
     matrix_geom{      };
     data_agg=0;
     data_src=NULL;
     agg_col {
      col_name=;
     };
     agg {name=\"agg\": op=NONE: rel={name=\"rel\": rel=LESSTHANOREQUAL: val=0: val_string=\"\": use_var=0: var=NULL: }: };
     select_rows=0;
     select_spec {
      col_name=;
      name=\"_EQUAL_\";
      on=1;
      rel=EQUAL;
      use_var=0;
      cmp 0 1;
      var=NULL;
      enable_var=NULL;
     };
     pre_proc_1 {name=\"pre_proc_1\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_2 {name=\"pre_proc_2\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_3 {name=\"pre_proc_3\": opr=NONE: arg=0: lw=-1: hi=1: };
    };
   };
   network=$.networks[\"Network_0\"]$;
   data=.data.gp[\"OutputData\"][\"TestTrialOutputData\"]$$<DataTable,TestTrialOutputData>;
   rmv_orphan_cols=1;
  };
 };
 types {
  name=\"types\";
  el_typ=DynEnumType;
  el_def=0;
 };
 args {
  name=\"args\";
  el_typ=ProgVar;
  el_def=0;
  ProgVar @[0] {
   name=\"network\";
   var_type=T_Object;
   object_type=Network;
   object_val=$.networks[\"Network_0\"]$;
   object_scope=NULL;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
   reference=0;
   desc=\"network to record data from\";
   init_from=NULL;
  };
 };
 vars {
  name=\"vars\";
  el_typ=ProgVar;
  el_def=0;
  ProgVar @[0] {
   name=\"trial_mon_data\";
   var_type=T_Object;
   object_type=DataTable;
   object_val=$.data.gp[\"OutputData\"][\"TestTrialOutputData\"]$;
   object_scope=.data.gp[\"OutputData\"]$$<DataTable_Group,OutputData>;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=\"data table to record trial-level data to (this program writes new data to this table!)\";
   init_from=NULL;
  };
  ProgVar @[1] {
   name=\"trial_netmon\";
   var_type=T_Object;
   object_type=NetMonitor;
   object_val=.objs[0]$$;
   object_scope=NULL;
   objs_ptr=1;
   flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=\"pointer to the NetMonitor object in objs secton of this program that contains configuration for what to record and where to get it\";
   init_from=NULL;
  };
  ProgVar @[2] {
   name=\"run_already\";
   var_type=T_Bool;
   bool_val=0;
   object_scope=NULL;
   flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
 };
 functions {
  name=\"functions\";
  el_typ=Function;
  el_def=0;
 };
 init_code {
  name=\"init_code\";
  el_typ=ProgCode;
  el_def=0;
  MethodCall @[0] {
   name=\"MethodCall_trialnetmonSetDa_lmondatanetwork\";
   desc=\"set the network and datatable for the NetMonitor\";
   flags=CAN_REVERT_TO_CODE;
   code_string=\"trial_netmon->SetDataNetwork(trial_mon_data, network)\";
   result_var=NULL;
   obj=.vars[1]$$;
   method=NetMonitor::SetDataNetwork;
   meth_args {
    name=\"meth_args\";
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=DataTable_ptr;
     type=\"DataTable*\";
     name=\"dt\";
     required=1;
     def_val=;
     prev_expr=;
     expr {
      expr=\"trial_mon_data\";
     };
    };
    ProgArg @[1] {
     arg_type=Network_ptr;
     type=\"Network*\";
     name=\"net\";
     required=1;
     def_val=;
     prev_expr=;
     expr {
      expr=\"network\";
     };
    };
   };
   meth_sig=\"void SetDataNetwork(DataTable* dt, Network* net)\";
   meth_desc=\" set both the data table and network -- convenient for programs -- calls ResetDataTableCols too -- don't call if columns are manually added or this is adding additional rows to a table\";
  };
  MethodCall @[1] {
   name=\"MethodCall_trialnetmonCheckConfigfalse\";
   desc=\"check the configuration of the network monitor -- will emit warnings and errors for misconfigurations\";
   flags=CAN_REVERT_TO_CODE;
   code_string=\"trial_netmon->CheckConfig(false)\";
   result_var=NULL;
   obj=$.vars[1]$;
   method=taBase::CheckConfig;
   meth_args {
    name=\"meth_args\";
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=bool;
     type=\"bool\";
     name=\"quiet\";
     required=0;
     def_val=\"false\";
     prev_expr=;
     expr {
      expr=\"false\";
     };
    };
   };
   meth_sig=\"bool CheckConfig(bool quiet = false)\";
   meth_desc=\" check the configuration of this object and all its children (defaults to no confirm of success)\";
  };
  MethodCall @[2] {
   name=\"MethodCall_trialnetmonUpdateMonitorstrue\";
   desc=\"update the monitor items and data schema based on current settings of the NetMonitor object\";
   flags=CAN_REVERT_TO_CODE;
   code_string=\"trial_netmon->UpdateMonitors(true)\";
   result_var=NULL;
   obj=$.vars[1]$;
   method=NetMonitor::UpdateMonitors;
   meth_args {
    name=\"meth_args\";
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=bool;
     type=\"bool\";
     name=\"reset_first\";
     required=0;
     def_val=\"false\";
     prev_expr=;
     expr {
      expr=\"true\";
     };
    };
   };
   meth_sig=\"void UpdateMonitors(bool reset_first = false)\";
   meth_desc=\" old name for UpdateDataTable\";
  };
  AssignExpr @[3] {
   name=\"AssignExpr_runalreadyfalse\";
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string=\"run_already = false\";
   result_var=.vars[2]$$;
   expr {
    expr=\"false\";
   };
  };
 };
 prog_code {
  name=\"prog_code\";
  el_typ=ProgCode;
  el_def=0;
  If @[0] {
   name=\"If_ifrunalready\";
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string=\"if (!run_already)\";
   cond {
    expr=\"!run_already\";
   };
   true_code {
    name=\"true_code\";
    el_typ=ProgCode;
    el_def=0;
    MethodCall @[0] {
     name=\"MethodCall_trialnetmonSetDa_lmondatanetwork\";
     desc=\"set the network and datatable for the NetMonitor\";
     flags=CAN_REVERT_TO_CODE;
     code_string=\"trial_netmon->SetDataNetwork(trial_mon_data, network)\";
     result_var=NULL;
     obj=$.vars[1]$;
     method=NetMonitor::SetDataNetwork;
     meth_args {
      name=\"meth_args\";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=DataTable_ptr;
       type=\"DataTable*\";
       name=\"dt\";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr=\"trial_mon_data\";
       };
      };
      ProgArg @[1] {
       arg_type=Network_ptr;
       type=\"Network*\";
       name=\"net\";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr=\"network\";
       };
      };
     };
     meth_sig=\"void SetDataNetwork(DataTable* dt, Network* net)\";
     meth_desc=\" set both the data table and network -- convenient for programs -- calls ResetDataTableCols too -- don't call if columns are manually added or this is adding additional rows to a table\";
    };
    MethodCall @[1] {
     name=\"MethodCall_trialnetmonUpdateMonitorstrue\";
     desc=\"update the monitor items and data schema based on current settings of the NetMonitor object\";
     flags=CAN_REVERT_TO_CODE;
     code_string=\"trial_netmon->UpdateMonitors(true)\";
     result_var=NULL;
     obj=$.vars[1]$;
     method=NetMonitor::UpdateMonitors;
     meth_args {
      name=\"meth_args\";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=bool;
       type=\"bool\";
       name=\"reset_first\";
       required=0;
       def_val=\"false\";
       prev_expr=;
       expr {
	expr=\"true\";
       };
      };
     };
     meth_sig=\"void UpdateMonitors(bool reset_first = false)\";
     meth_desc=\" old name for UpdateDataTable\";
    };
    AssignExpr @[2] {
     name=\"AssignExpr_runalreadytrue\";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string=\"run_already = true\";
     result_var=$.vars[2]$;
     expr {
      expr=\"true\";
     };
    };
   };
  };
  MethodCall @[1] {
   name=\"MethodCall_trialmondataAddBlankRow\";
   desc=\"add a new blank row to the data\";
   flags=CAN_REVERT_TO_CODE;
   code_string=\"trial_mon_data->AddBlankRow()\";
   result_var=NULL;
   obj=.vars[0]$$;
   method=DataTable::AddBlankRow;
   meth_args {
    name=\"meth_args\";
    el_typ=ProgArg;
    el_def=0;
   };
   meth_sig=\"int AddBlankRow()\";
   meth_desc=\" add a new row to the data table, sets read (source) and write (sink) index to this last row (as in ReadItem or WriteItem), so that subsequent data routines refer to this new row, and returns row \";
  };
  MethodCall @[2] {
   name=\"MethodCall_trialnetmonGetMonVals\";
   desc=\"get the new monitor data from the network and other sources -- this does the main work\";
   flags=CAN_REVERT_TO_CODE;
   code_string=\"trial_netmon->GetMonVals()\";
   result_var=NULL;
   obj=$.vars[1]$;
   method=NetMonitor::GetMonVals;
   meth_args {
    name=\"meth_args\";
    el_typ=ProgArg;
    el_def=0;
   };
   meth_sig=\"void GetMonVals()\";
   meth_desc=\" get all the values and store in current row of data table -- call in program to get new data\";
  };
  MethodCall @[3] {
   name=\"MethodCall_trialmondataWriteClose\";
   desc=\"update views and other things after writing new data to monitor data table\";
   flags=CAN_REVERT_TO_CODE;
   code_string=\"trial_mon_data->WriteClose()\";
   result_var=NULL;
   obj=$.vars[0]$;
   method=DataTable::WriteClose;
   meth_args {
    name=\"meth_args\";
    el_typ=ProgArg;
    el_def=0;
   };
   meth_sig=\"void WriteClose()\";
   meth_desc=\" closes up a write operation -- call when done writing data -- performs any post-writing cleanup/closing of files, etc\";
  };
  MethodCall @[4] {
   name=\"MethodCall_networkDMemShare_tatrialmondata1\";
   desc=\"only functional for dmem projects: synchronizes trial data across processes so that all distributed memory processors have the same trial-level data, despite having run only a subset of them each\";
   flags=CAN_REVERT_TO_CODE;
   code_string=\"network->DMem_ShareTrialData(trial_mon_data, 1)\";
   result_var=NULL;
   obj=.args[0]$$;
   method=Network::DMem_ShareTrialData;
   meth_args {
    name=\"meth_args\";
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=DataTable_ptr;
     type=\"DataTable*\";
     name=\"dt\";
     required=1;
     def_val=;
     prev_expr=;
     expr {
      expr=\"trial_mon_data\";
     };
    };
    ProgArg @[1] {
     arg_type=int;
     type=\"int\";
     name=\"n_rows\";
     required=0;
     def_val=\"1\";
     prev_expr=;
     expr {
      expr=\"1\";
     };
    };
   };
   meth_sig=\"void DMem_ShareTrialData(DataTable* dt, int n_rows = 1)\";
   meth_desc=\" share trial data from given datatable across the trial-level dmem communicator (outer loop) -- each processor gets data from all other processors; if called every trial with n_rows = 1, data will be identical to non-dmem; if called at end of epoch with n_rows = -1 data will be grouped by processor but this is more efficient\";
  };
 };
 step_prog=.$$;
 step_n=1;
 doc {
  name=\"doc\";
  desc=;
  web_doc=1;
  wiki=\"emergent\";
  url=\"Monitor_Data\";
  full_url=\"https://grey.colorado.edu/emergent/index.php/Monitor_Data\";
  text_size=1;
  text=;
  html_text=;
 };
};
";
   };
   PatchRec @[109] {
    off=0;
    action=INSERT;
    obj_path_names=".programs.gp[\"UtilProgs\"].gp[\"Monitors\"]";
    obj_path_idx=".programs.gp[4].gp[0]";
    obj_type="Program_Group";
    mbr_path=;
    targ_idx=3;
    targ_name="LeabraTestEpochMonitor";
    insert_after="LeabraTestTrialMonitor";
    insert_before=;
    new_obj_type="Program";
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
Program .projects[1].programs.gp[4].gp[0][4] { 
 UserDataItem_List @*(.user_data_) {
  UserData_DocLink @[0] { };
 };

 ProgObjList @.objs = [1] {
  NetMonitor @[0] { 
   NetMonItem_List @.items = [25] {
    NetMonItem @[0] { };
    NetMonItem @[1] { };
    NetMonItem @[2] { };
    NetMonItem @[3] { };
    NetMonItem @[4] { };
    NetMonItem @[5] { };
    NetMonItem @[6] { };
    NetMonItem @[7] { };
    NetMonItem @[8] { };
    NetMonItem @[9] { };
    NetMonItem @[10] { };
    NetMonItem @[11] { };
    NetMonItem @[12] { };
    NetMonItem @[13] { };
    NetMonItem @[14] { };
    NetMonItem @[15] { };
    NetMonItem @[16] { };
    NetMonItem @[17] { };
    NetMonItem @[18] { };
    NetMonItem @[19] { };
    NetMonItem @[20] { };
    NetMonItem @[21] { };
    NetMonItem @[22] { };
    NetMonItem @[23] { };
    NetMonItem @[24] { };
   };
  };
 };

 ProgType_List @.types = [0] {
 };

 ProgVar_List @.args = [1] {
  ProgVar @[0] { };
 };

 ProgVar_List @.vars = [3] {
  ProgVar @[0] { };
  ProgVar @[1] { };
  ProgVar @[2] { };
 };

 Function_List @.functions = [0] {
 };

 ProgEl_List @.init_code = [4] {
  MethodCall @[0] { 
   ProgArg_List @.meth_args = [2] {
    ProgArg @[0] { };
    ProgArg @[1] { };
   };
  };
  MethodCall @[1] { 
   ProgArg_List @.meth_args = [1] {
    ProgArg @[0] { };
   };
  };
  MethodCall @[2] { 
   ProgArg_List @.meth_args = [1] {
    ProgArg @[0] { };
   };
  };
  AssignExpr @[3] { };
 };

 ProgEl_List @.prog_code = [5] {
  If @[0] { 
   ProgEl_List @.true_code = [3] {
    MethodCall @[0] { 
     ProgArg_List @.meth_args = [2] {
      ProgArg @[0] { };
      ProgArg @[1] { };
     };
    };
    MethodCall @[1] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    AssignExpr @[2] { };
   };
  };
  MethodCall @[1] { 
   ProgArg_List @.meth_args = [0] {
   };
  };
  MethodCall @[2] { 
   ProgArg_List @.meth_args = [0] {
   };
  };
  MethodCall @[3] { 
   ProgArg_List @.meth_args = [0] {
   };
  };
  Comment @[4] { };
 };
};
Program .projects[1].programs.gp[4].gp[0][4] {
 UserDataItem_List @*(.user_data_) {
  name=;
  el_typ=UserData_DocLink;
  el_def=0;
  UserData_DocLink @[0] {name=\"DocLink\": doc=.programs.gp[\"UtilProgs\"].gp[\"Monitors\"][\"LeabraEpochMonitor\"].doc$$<taDoc,doc>: };
 };
 name=\"LeabraTestEpochMonitor\";
 short_nm=\"TstMnt\";
 tags=\"Leabra, Std, Monitor\";
 desc=\"monitor epoch-level data from the network to a datatable (EpochOutputData typically) for use in graphing and viewing and further analysis\";
 version {
  major=0;
  minor=0;
  step=0;
 };
 author=\"Randall C. O'Reilly\";
 email=\"emergent-users@grey.colorado.edu\";
 flags=NO_STOP_STEP;
 stop_step_cond {
  expr=;
 };
 objs {
  name=\"objs\";
  el_typ=NetMonitor;
  el_def=0;
  NetMonitor @[0] {
   name=\"epoch_netmon\";
   items {
    name=\"items\";
    el_typ=NetMonItem;
    el_def=0;
    NetMonItem @[0] {
     name=\"batch\";
     computed=0;
     object_type=LeabraNetwork;
     object=.networks[\"Network_0\"]$$<LeabraNetwork,Network_0>;
     variable=\"batch\";
     var_label=;
     name_style=AUTO_NAME;
     max_name_len=6;
     options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
     val_type=VT_FLOAT;
     matrix=0;
     matrix_geom{      };
     data_agg=0;
     data_src=NULL;
     agg_col {
      col_name=\"agg_col\";
     };
     agg {name=\"agg\": op=NONE: rel={name=\"rel\": rel=LESSTHANOREQUAL: val=0: val_string=\"\": use_var=0: var=NULL: }: };
     select_rows=0;
     select_spec {
      col_name=\"select_spec\";
      name=\"select_spec_EQUAL_\";
      on=1;
      rel=EQUAL;
      use_var=0;
      cmp 0 1;
      var=NULL;
      enable_var=NULL;
     };
     pre_proc_1 {name=\"pre_proc_1\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_2 {name=\"pre_proc_2\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_3 {name=\"pre_proc_3\": opr=NONE: arg=0: lw=-1: hi=1: };
    };
    NetMonItem @[1] {
     name=\"epoch\";
     computed=0;
     object_type=LeabraNetwork;
     object=$.networks[\"Network_0\"]$;
     variable=\"epoch\";
     var_label=;
     name_style=AUTO_NAME;
     max_name_len=6;
     options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
     val_type=VT_FLOAT;
     matrix=0;
     matrix_geom{      };
     data_agg=0;
     data_src=NULL;
     agg_col {
      col_name=\"agg_col\";
     };
     agg {name=\"agg\": op=NONE: rel={name=\"rel\": rel=LESSTHANOREQUAL: val=0: val_string=\"\": use_var=0: var=NULL: }: };
     select_rows=0;
     select_spec {
      col_name=\"select_spec\";
      name=\"select_spec_EQUAL_\";
      on=1;
      rel=EQUAL;
      use_var=0;
      cmp 0 1;
      var=NULL;
      enable_var=NULL;
     };
     pre_proc_1 {name=\"pre_proc_1\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_2 {name=\"pre_proc_2\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_3 {name=\"pre_proc_3\": opr=NONE: arg=0: lw=-1: hi=1: };
    };
    NetMonItem @[2] {
     name=\"avg_sse\";
     computed=0;
     object_type=LeabraNetwork;
     object=$.networks[\"Network_0\"]$;
     variable=\"avg_sse\";
     var_label=;
     name_style=AUTO_NAME;
     max_name_len=6;
     options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
     val_type=VT_FLOAT;
     matrix=0;
     matrix_geom{      };
     data_agg=0;
     data_src=NULL;
     agg_col {
      col_name=\"agg_col\";
     };
     agg {name=\"agg\": op=NONE: rel={name=\"rel\": rel=LESSTHANOREQUAL: val=0: val_string=\"\": use_var=0: var=NULL: }: };
     select_rows=0;
     select_spec {
      col_name=\"select_spec\";
      name=\"select_spec_EQUAL_\";
      on=1;
      rel=EQUAL;
      use_var=0;
      cmp 0 1;
      var=NULL;
      enable_var=NULL;
     };
     pre_proc_1 {name=\"pre_proc_1\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_2 {name=\"pre_proc_2\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_3 {name=\"pre_proc_3\": opr=NONE: arg=0: lw=-1: hi=1: };
    };
    NetMonItem @[3] {
     name=\"cnt_err\";
     computed=0;
     object_type=LeabraNetwork;
     object=$.networks[\"Network_0\"]$;
     variable=\"cnt_err\";
     var_label=;
     name_style=AUTO_NAME;
     max_name_len=6;
     options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
     val_type=VT_FLOAT;
     matrix=0;
     matrix_geom{      };
     data_agg=0;
     data_src=NULL;
     agg_col {
      col_name=\"agg_col\";
     };
     agg {name=\"agg\": op=NONE: rel={name=\"rel\": rel=LESSTHANOREQUAL: val=0: val_string=\"\": use_var=0: var=NULL: }: };
     select_rows=0;
     select_spec {
      col_name=\"select_spec\";
      name=\"select_spec_EQUAL_\";
      on=1;
      rel=EQUAL;
      use_var=0;
      cmp 0 1;
      var=NULL;
      enable_var=NULL;
     };
     pre_proc_1 {name=\"pre_proc_1\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_2 {name=\"pre_proc_2\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_3 {name=\"pre_proc_3\": opr=NONE: arg=0: lw=-1: hi=1: };
    };
    NetMonItem @[4] {
     name=\"pct_cor\";
     computed=0;
     object_type=LeabraNetwork;
     object=$.networks[\"Network_0\"]$;
     variable=\"pct_cor\";
     var_label=;
     name_style=AUTO_NAME;
     max_name_len=6;
     options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
     val_type=VT_FLOAT;
     matrix=0;
     matrix_geom{      };
     data_agg=0;
     data_src=NULL;
     agg_col {
      col_name=\"agg_col\";
     };
     agg {name=\"agg\": op=NONE: rel={name=\"rel\": rel=LESSTHANOREQUAL: val=0: val_string=\"\": use_var=0: var=NULL: }: };
     select_rows=0;
     select_spec {
      col_name=\"select_spec\";
      name=\"select_spec_EQUAL_\";
      on=1;
      rel=EQUAL;
      use_var=0;
      cmp 0 1;
      var=NULL;
      enable_var=NULL;
     };
     pre_proc_1 {name=\"pre_proc_1\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_2 {name=\"pre_proc_2\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_3 {name=\"pre_proc_3\": opr=NONE: arg=0: lw=-1: hi=1: };
    };
    NetMonItem @[5] {
     name=\"pct_err\";
     computed=0;
     object_type=LeabraNetwork;
     object=$.networks[\"Network_0\"]$;
     variable=\"pct_err\";
     var_label=;
     name_style=AUTO_NAME;
     max_name_len=6;
     options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
     val_type=VT_FLOAT;
     matrix=0;
     matrix_geom{      };
     data_agg=0;
     data_src=NULL;
     agg_col {
      col_name=\"agg_col\";
     };
     agg {name=\"agg\": op=NONE: rel={name=\"rel\": rel=LESSTHANOREQUAL: val=0: val_string=\"\": use_var=0: var=NULL: }: };
     select_rows=0;
     select_spec {
      col_name=\"select_spec\";
      name=\"select_spec_EQUAL_\";
      on=1;
      rel=EQUAL;
      use_var=0;
      cmp 0 1;
      var=NULL;
      enable_var=NULL;
     };
     pre_proc_1 {name=\"pre_proc_1\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_2 {name=\"pre_proc_2\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_3 {name=\"pre_proc_3\": opr=NONE: arg=0: lw=-1: hi=1: };
    };
    NetMonItem @[6] {
     name=\"avg_norm_err\";
     computed=0;
     object_type=LeabraNetwork;
     object=$.networks[\"Network_0\"]$;
     variable=\"avg_norm_err\";
     var_label=;
     name_style=AUTO_NAME;
     max_name_len=6;
     options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
     val_type=VT_FLOAT;
     matrix=0;
     matrix_geom{      };
     data_agg=0;
     data_src=NULL;
     agg_col {
      col_name=\"agg_col\";
     };
     agg {name=\"agg\": op=NONE: rel={name=\"rel\": rel=LESSTHANOREQUAL: val=0: val_string=\"\": use_var=0: var=NULL: }: };
     select_rows=0;
     select_spec {
      col_name=\"select_spec\";
      name=\"select_spec_EQUAL_\";
      on=1;
      rel=EQUAL;
      use_var=0;
      cmp 0 1;
      var=NULL;
      enable_var=NULL;
     };
     pre_proc_1 {name=\"pre_proc_1\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_2 {name=\"pre_proc_2\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_3 {name=\"pre_proc_3\": opr=NONE: arg=0: lw=-1: hi=1: };
    };
    NetMonItem @[7] {
     name=\"avg_cos_err\";
     computed=0;
     object_type=LeabraNetwork;
     object=$.networks[\"Network_0\"]$;
     variable=\"avg_cos_err\";
     var_label=;
     name_style=AUTO_NAME;
     max_name_len=6;
     options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
     val_type=VT_FLOAT;
     matrix=0;
     matrix_geom{      };
     data_agg=0;
     data_src=NULL;
     agg_col {
      col_name=\"agg_col\";
     };
     agg {name=\"agg\": op=NONE: rel={name=\"rel\": rel=LESSTHANOREQUAL: val=0: val_string=\"\": use_var=0: var=NULL: }: };
     select_rows=0;
     select_spec {
      col_name=\"select_spec\";
      name=\"select_spec_EQUAL_\";
      on=1;
      rel=EQUAL;
      use_var=0;
      cmp 0 1;
      var=NULL;
      enable_var=NULL;
     };
     pre_proc_1 {name=\"pre_proc_1\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_2 {name=\"pre_proc_2\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_3 {name=\"pre_proc_3\": opr=NONE: arg=0: lw=-1: hi=1: };
    };
    NetMonItem @[8] {
     name=\"avg_ext_rew\";
     computed=0;
     object_type=LeabraNetwork;
     object=$.networks[\"Network_0\"]$;
     variable=\"avg_ext_rew\";
     var_label=;
     name_style=AUTO_NAME;
     max_name_len=6;
     options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
     val_type=VT_FLOAT;
     matrix=0;
     matrix_geom{      };
     data_agg=0;
     data_src=NULL;
     agg_col {
      col_name=\"agg_col\";
     };
     agg {name=\"agg\": op=NONE: rel={name=\"rel\": rel=LESSTHANOREQUAL: val=0: val_string=\"\": use_var=0: var=NULL: }: };
     select_rows=0;
     select_spec {
      col_name=\"select_spec\";
      name=\"select_spec_EQUAL_\";
      on=1;
      rel=EQUAL;
      use_var=0;
      cmp 0 1;
      var=NULL;
      enable_var=NULL;
     };
     pre_proc_1 {name=\"pre_proc_1\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_2 {name=\"pre_proc_2\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_3 {name=\"pre_proc_3\": opr=NONE: arg=0: lw=-1: hi=1: };
    };
    NetMonItem @[9] {
     name=\"avg_cycles\";
     computed=0;
     object_type=LeabraNetwork;
     object=$.networks[\"Network_0\"]$;
     variable=\"avg_cycles\";
     var_label=;
     name_style=AUTO_NAME;
     max_name_len=6;
     options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
     val_type=VT_FLOAT;
     matrix=0;
     matrix_geom{      };
     data_agg=0;
     data_src=NULL;
     agg_col {
      col_name=\"agg_col\";
     };
     agg {name=\"agg\": op=NONE: rel={name=\"rel\": rel=LESSTHANOREQUAL: val=0: val_string=\"\": use_var=0: var=NULL: }: };
     select_rows=0;
     select_spec {
      col_name=\"select_spec\";
      name=\"select_spec_EQUAL_\";
      on=1;
      rel=EQUAL;
      use_var=0;
      cmp 0 1;
      var=NULL;
      enable_var=NULL;
     };
     pre_proc_1 {name=\"pre_proc_1\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_2 {name=\"pre_proc_2\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_3 {name=\"pre_proc_3\": opr=NONE: arg=0: lw=-1: hi=1: };
    };
    NetMonItem @[10] {
     name=\"lay_avg_sse\";
     computed=0;
     object_type=LeabraNetwork;
     object=$.networks[\"Network_0\"]$;
     variable=\"layers.avg_sse\";
     var_label=\"lay_avg_sse\";
     name_style=AUTO_NAME;
     max_name_len=6;
     options=OUTPUT_LAYERS|TARGET_LAYERS;
     val_type=VT_FLOAT;
     matrix=0;
     matrix_geom{      };
     data_agg=0;
     data_src=NULL;
     agg_col {
      col_name=\"agg_col\";
     };
     agg {name=\"agg\": op=NONE: rel={name=\"rel\": rel=LESSTHANOREQUAL: val=0: val_string=\"\": use_var=0: var=NULL: }: };
     select_rows=0;
     select_spec {
      col_name=\"select_spec\";
      name=\"select_spec_EQUAL_\";
      on=1;
      rel=EQUAL;
      use_var=0;
      cmp 0 1;
      var=NULL;
      enable_var=NULL;
     };
     pre_proc_1 {name=\"pre_proc_1\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_2 {name=\"pre_proc_2\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_3 {name=\"pre_proc_3\": opr=NONE: arg=0: lw=-1: hi=1: };
    };
    NetMonItem @[11] {
     name=\"lay_cnt_err\";
     computed=0;
     object_type=LeabraNetwork;
     object=$.networks[\"Network_0\"]$;
     variable=\"layers.cnt_err\";
     var_label=\"lay_cnt_err\";
     name_style=AUTO_NAME;
     max_name_len=6;
     options=OUTPUT_LAYERS|TARGET_LAYERS;
     val_type=VT_FLOAT;
     matrix=0;
     matrix_geom{      };
     data_agg=0;
     data_src=NULL;
     agg_col {
      col_name=\"agg_col\";
     };
     agg {name=\"agg\": op=NONE: rel={name=\"rel\": rel=LESSTHANOREQUAL: val=0: val_string=\"\": use_var=0: var=NULL: }: };
     select_rows=0;
     select_spec {
      col_name=\"select_spec\";
      name=\"select_spec_EQUAL_\";
      on=1;
      rel=EQUAL;
      use_var=0;
      cmp 0 1;
      var=NULL;
      enable_var=NULL;
     };
     pre_proc_1 {name=\"pre_proc_1\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_2 {name=\"pre_proc_2\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_3 {name=\"pre_proc_3\": opr=NONE: arg=0: lw=-1: hi=1: };
    };
    NetMonItem @[12] {
     name=\"lay_pct_cor\";
     computed=0;
     object_type=LeabraNetwork;
     object=$.networks[\"Network_0\"]$;
     variable=\"layers.pct_cor\";
     var_label=\"lay_pct_cor\";
     name_style=AUTO_NAME;
     max_name_len=6;
     options=OUTPUT_LAYERS|TARGET_LAYERS;
     val_type=VT_FLOAT;
     matrix=0;
     matrix_geom{      };
     data_agg=0;
     data_src=NULL;
     agg_col {
      col_name=\"agg_col\";
     };
     agg {name=\"agg\": op=NONE: rel={name=\"rel\": rel=LESSTHANOREQUAL: val=0: val_string=\"\": use_var=0: var=NULL: }: };
     select_rows=0;
     select_spec {
      col_name=\"select_spec\";
      name=\"select_spec_EQUAL_\";
      on=1;
      rel=EQUAL;
      use_var=0;
      cmp 0 1;
      var=NULL;
      enable_var=NULL;
     };
     pre_proc_1 {name=\"pre_proc_1\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_2 {name=\"pre_proc_2\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_3 {name=\"pre_proc_3\": opr=NONE: arg=0: lw=-1: hi=1: };
    };
    NetMonItem @[13] {
     name=\"lay_pct_err\";
     computed=0;
     object_type=LeabraNetwork;
     object=$.networks[\"Network_0\"]$;
     variable=\"layers.pct_err\";
     var_label=\"lay_pct_err\";
     name_style=AUTO_NAME;
     max_name_len=6;
     options=OUTPUT_LAYERS|TARGET_LAYERS;
     val_type=VT_FLOAT;
     matrix=0;
     matrix_geom{      };
     data_agg=0;
     data_src=NULL;
     agg_col {
      col_name=\"agg_col\";
     };
     agg {name=\"agg\": op=NONE: rel={name=\"rel\": rel=LESSTHANOREQUAL: val=0: val_string=\"\": use_var=0: var=NULL: }: };
     select_rows=0;
     select_spec {
      col_name=\"select_spec\";
      name=\"select_spec_EQUAL_\";
      on=1;
      rel=EQUAL;
      use_var=0;
      cmp 0 1;
      var=NULL;
      enable_var=NULL;
     };
     pre_proc_1 {name=\"pre_proc_1\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_2 {name=\"pre_proc_2\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_3 {name=\"pre_proc_3\": opr=NONE: arg=0: lw=-1: hi=1: };
    };
    NetMonItem @[14] {
     name=\"lay_avg_norm_err\";
     computed=0;
     object_type=LeabraNetwork;
     object=$.networks[\"Network_0\"]$;
     variable=\"layers.avg_norm_err\";
     var_label=\"lay_avg_norm_err\";
     name_style=AUTO_NAME;
     max_name_len=6;
     options=OUTPUT_LAYERS|TARGET_LAYERS;
     val_type=VT_FLOAT;
     matrix=0;
     matrix_geom{      };
     data_agg=0;
     data_src=NULL;
     agg_col {
      col_name=\"agg_col\";
     };
     agg {name=\"agg\": op=NONE: rel={name=\"rel\": rel=LESSTHANOREQUAL: val=0: val_string=\"\": use_var=0: var=NULL: }: };
     select_rows=0;
     select_spec {
      col_name=\"select_spec\";
      name=\"select_spec_EQUAL_\";
      on=1;
      rel=EQUAL;
      use_var=0;
      cmp 0 1;
      var=NULL;
      enable_var=NULL;
     };
     pre_proc_1 {name=\"pre_proc_1\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_2 {name=\"pre_proc_2\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_3 {name=\"pre_proc_3\": opr=NONE: arg=0: lw=-1: hi=1: };
    };
    NetMonItem @[15] {
     name=\"lay_avg_cos_err\";
     computed=0;
     object_type=LeabraNetwork;
     object=$.networks[\"Network_0\"]$;
     variable=\"layers.avg_cos_err\";
     var_label=\"lay_avg_cos_err\";
     name_style=AUTO_NAME;
     max_name_len=6;
     options=OUTPUT_LAYERS|TARGET_LAYERS;
     val_type=VT_FLOAT;
     matrix=0;
     matrix_geom{      };
     data_agg=0;
     data_src=NULL;
     agg_col {
      col_name=\"agg_col\";
     };
     agg {name=\"agg\": op=NONE: rel={name=\"rel\": rel=LESSTHANOREQUAL: val=0: val_string=\"\": use_var=0: var=NULL: }: };
     select_rows=0;
     select_spec {
      col_name=\"select_spec\";
      name=\"select_spec_EQUAL_\";
      on=1;
      rel=EQUAL;
      use_var=0;
      cmp 0 1;
      var=NULL;
      enable_var=NULL;
     };
     pre_proc_1 {name=\"pre_proc_1\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_2 {name=\"pre_proc_2\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_3 {name=\"pre_proc_3\": opr=NONE: arg=0: lw=-1: hi=1: };
    };
    NetMonItem @[16] {
     name=\"net_avg_cos_diff\";
     computed=0;
     object_type=LeabraNetwork;
     object=$.networks[\"Network_0\"]$;
     variable=\"avg_cos_diff\";
     var_label=\"net_avg_cos_diff\";
     name_style=AUTO_NAME;
     max_name_len=6;
     options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
     val_type=VT_FLOAT;
     matrix=0;
     matrix_geom{      };
     data_agg=0;
     data_src=NULL;
     agg_col {
      col_name=;
     };
     agg {name=\"agg\": op=NONE: rel={name=\"rel\": rel=LESSTHANOREQUAL: val=0: val_string=\"\": use_var=0: var=NULL: }: };
     select_rows=0;
     select_spec {
      col_name=;
      name=\"_EQUAL_\";
      on=1;
      rel=EQUAL;
      use_var=0;
      cmp 0 1;
      var=NULL;
      enable_var=NULL;
     };
     pre_proc_1 {name=\"pre_proc_1\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_2 {name=\"pre_proc_2\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_3 {name=\"pre_proc_3\": opr=NONE: arg=0: lw=-1: hi=1: };
    };
    NetMonItem @[17] {
     name=\"net_avg_trial_cos_diff\";
     computed=0;
     object_type=LeabraNetwork;
     object=$.networks[\"Network_0\"]$;
     variable=\"avg_trial_cos_diff\";
     var_label=\"net_avg_trial_cos_diff\";
     name_style=AUTO_NAME;
     max_name_len=6;
     options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
     val_type=VT_FLOAT;
     matrix=0;
     matrix_geom{      };
     data_agg=0;
     data_src=NULL;
     agg_col {
      col_name=;
     };
     agg {name=\"agg\": op=NONE: rel={name=\"rel\": rel=LESSTHANOREQUAL: val=0: val_string=\"\": use_var=0: var=NULL: }: };
     select_rows=0;
     select_spec {
      col_name=;
      name=\"_EQUAL_\";
      on=1;
      rel=EQUAL;
      use_var=0;
      cmp 0 1;
      var=NULL;
      enable_var=NULL;
     };
     pre_proc_1 {name=\"pre_proc_1\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_2 {name=\"pre_proc_2\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_3 {name=\"pre_proc_3\": opr=NONE: arg=0: lw=-1: hi=1: };
    };
    NetMonItem @[18] {
     name=\"net_avg_avg_act_diff\";
     computed=0;
     object_type=LeabraNetwork;
     object=$.networks[\"Network_0\"]$;
     variable=\"avg_avg_act_diff\";
     var_label=\"net_avg_avg_act_diff\";
     name_style=AUTO_NAME;
     max_name_len=6;
     options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
     val_type=VT_FLOAT;
     matrix=0;
     matrix_geom{      };
     data_agg=0;
     data_src=NULL;
     agg_col {
      col_name=;
     };
     agg {name=\"agg\": op=NONE: rel={name=\"rel\": rel=LESSTHANOREQUAL: val=0: val_string=\"\": use_var=0: var=NULL: }: };
     select_rows=0;
     select_spec {
      col_name=;
      name=\"_EQUAL_\";
      on=1;
      rel=EQUAL;
      use_var=0;
      cmp 0 1;
      var=NULL;
      enable_var=NULL;
     };
     pre_proc_1 {name=\"pre_proc_1\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_2 {name=\"pre_proc_2\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_3 {name=\"pre_proc_3\": opr=NONE: arg=0: lw=-1: hi=1: };
    };
    NetMonItem @[19] {
     name=\"avg_cos_diff\";
     computed=0;
     object_type=LeabraNetwork;
     object=$.networks[\"Network_0\"]$;
     variable=\"layers.avg_cos_diff\";
     var_label=\"avg_cos_diff\";
     name_style=AUTO_NAME;
     max_name_len=8;
     options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
     val_type=VT_FLOAT;
     matrix=0;
     matrix_geom{      };
     data_agg=0;
     data_src=NULL;
     agg_col {
      col_name=;
     };
     agg {name=\"agg\": op=NONE: rel={name=\"rel\": rel=LESSTHANOREQUAL: val=0: val_string=\"\": use_var=0: var=NULL: }: };
     select_rows=0;
     select_spec {
      col_name=;
      name=\"_EQUAL_\";
      on=1;
      rel=EQUAL;
      use_var=0;
      cmp 0 1;
      var=NULL;
      enable_var=NULL;
     };
     pre_proc_1 {name=\"pre_proc_1\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_2 {name=\"pre_proc_2\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_3 {name=\"pre_proc_3\": opr=NONE: arg=0: lw=-1: hi=1: };
    };
    NetMonItem @[20] {
     name=\"avg_trial_cos_diff\";
     computed=0;
     object_type=LeabraNetwork;
     object=$.networks[\"Network_0\"]$;
     variable=\"layers.avg_trial_cos_diff\";
     var_label=\"avg_trial_cos_diff\";
     name_style=AUTO_NAME;
     max_name_len=8;
     options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
     val_type=VT_FLOAT;
     matrix=0;
     matrix_geom{      };
     data_agg=0;
     data_src=NULL;
     agg_col {
      col_name=;
     };
     agg {name=\"agg\": op=NONE: rel={name=\"rel\": rel=LESSTHANOREQUAL: val=0: val_string=\"\": use_var=0: var=NULL: }: };
     select_rows=0;
     select_spec {
      col_name=;
      name=\"_EQUAL_\";
      on=1;
      rel=EQUAL;
      use_var=0;
      cmp 0 1;
      var=NULL;
      enable_var=NULL;
     };
     pre_proc_1 {name=\"pre_proc_1\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_2 {name=\"pre_proc_2\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_3 {name=\"pre_proc_3\": opr=NONE: arg=0: lw=-1: hi=1: };
    };
    NetMonItem @[21] {
     name=\"avg_avg_act_diff\";
     computed=0;
     object_type=LeabraNetwork;
     object=$.networks[\"Network_0\"]$;
     variable=\"layers.avg_avg_act_diff\";
     var_label=\"avg_avg_act_diff\";
     name_style=AUTO_NAME;
     max_name_len=8;
     options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
     val_type=VT_FLOAT;
     matrix=0;
     matrix_geom{      };
     data_agg=0;
     data_src=NULL;
     agg_col {
      col_name=;
     };
     agg {name=\"agg\": op=NONE: rel={name=\"rel\": rel=LESSTHANOREQUAL: val=0: val_string=\"\": use_var=0: var=NULL: }: };
     select_rows=0;
     select_spec {
      col_name=;
      name=\"_EQUAL_\";
      on=1;
      rel=EQUAL;
      use_var=0;
      cmp 0 1;
      var=NULL;
      enable_var=NULL;
     };
     pre_proc_1 {name=\"pre_proc_1\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_2 {name=\"pre_proc_2\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_3 {name=\"pre_proc_3\": opr=NONE: arg=0: lw=-1: hi=1: };
    };
    NetMonItem @[22] {
     name=\"avg_net_sd\";
     computed=0;
     object_type=LeabraNetwork;
     object=$.networks[\"Network_0\"]$;
     variable=\"layers.avg_net_sd\";
     var_label=\"avg_net_sd\";
     name_style=AUTO_NAME;
     max_name_len=8;
     options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
     val_type=VT_FLOAT;
     matrix=0;
     matrix_geom{      };
     data_agg=0;
     data_src=NULL;
     agg_col {
      col_name=;
     };
     agg {name=\"agg\": op=NONE: rel={name=\"rel\": rel=LESSTHANOREQUAL: val=0: val_string=\"\": use_var=0: var=NULL: }: };
     select_rows=0;
     select_spec {
      col_name=;
      name=\"_EQUAL_\";
      on=1;
      rel=EQUAL;
      use_var=0;
      cmp 0 1;
      var=NULL;
      enable_var=NULL;
     };
     pre_proc_1 {name=\"pre_proc_1\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_2 {name=\"pre_proc_2\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_3 {name=\"pre_proc_3\": opr=NONE: arg=0: lw=-1: hi=1: };
    };
    NetMonItem @[23] {
     name=\"netmax\";
     computed=0;
     object_type=LeabraNetwork;
     object=$.networks[\"Network_0\"]$;
     variable=\"layers.avg_netin.max\";
     var_label=\"netmax\";
     name_style=AUTO_NAME;
     max_name_len=6;
     options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
     val_type=VT_FLOAT;
     matrix=0;
     matrix_geom{      };
     data_agg=0;
     data_src=NULL;
     agg_col {
      col_name=;
     };
     agg {name=\"agg\": op=NONE: rel={name=\"rel\": rel=LESSTHANOREQUAL: val=0: val_string=\"\": use_var=0: var=NULL: }: };
     select_rows=0;
     select_spec {
      col_name=;
      name=\"_EQUAL_\";
      on=1;
      rel=EQUAL;
      use_var=0;
      cmp 2 0=0;
      var=NULL;
      enable_var=NULL;
     };
     pre_proc_1 {name=\"pre_proc_1\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_2 {name=\"pre_proc_2\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_3 {name=\"pre_proc_3\": opr=NONE: arg=0: lw=-1: hi=1: };
    };
    NetMonItem @[24] {
     name=\"avg_act\";
     computed=0;
     object_type=LeabraNetwork;
     object=$.networks[\"Network_0\"]$;
     variable=\".layers.acts_p_avg\";
     var_label=\"avg_act\";
     name_style=AUTO_NAME;
     max_name_len=6;
     options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
     val_type=VT_FLOAT;
     matrix=0;
     matrix_geom{      };
     data_agg=0;
     data_src=NULL;
     agg_col {
      col_name=;
     };
     agg {name=\"agg\": op=NONE: rel={name=\"rel\": rel=LESSTHANOREQUAL: val=0: val_string=\"\": use_var=0: var=NULL: }: };
     select_rows=0;
     select_spec {
      col_name=;
      name=\"_EQUAL_\";
      on=1;
      rel=EQUAL;
      use_var=0;
      cmp 2 0=0;
      var=NULL;
      enable_var=NULL;
     };
     pre_proc_1 {name=\"pre_proc_1\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_2 {name=\"pre_proc_2\": opr=NONE: arg=0: lw=-1: hi=1: };
     pre_proc_3 {name=\"pre_proc_3\": opr=NONE: arg=0: lw=-1: hi=1: };
    };
   };
   network=$.networks[\"Network_0\"]$;
   data=.data.gp[\"OutputData\"][\"TestEpochOutputData\"]$$<DataTable,TestEpochOutputData>;
   rmv_orphan_cols=1;
  };
 };
 types {
  name=\"types\";
  el_typ=DynEnumType;
  el_def=0;
 };
 args {
  name=\"args\";
  el_typ=ProgVar;
  el_def=0;
  ProgVar @[0] {
   name=\"network\";
   var_type=T_Object;
   object_type=Network;
   object_val=$.networks[\"Network_0\"]$;
   object_scope=NULL;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
   reference=0;
   desc=\"network to get data from\";
   init_from=NULL;
  };
 };
 vars {
  name=\"vars\";
  el_typ=ProgVar;
  el_def=0;
  ProgVar @[0] {
   name=\"epoch_mon_data\";
   var_type=T_Object;
   object_type=DataTable;
   object_val=$.data.gp[\"OutputData\"][\"TestEpochOutputData\"]$;
   object_scope=.data.gp[\"OutputData\"]$$<DataTable_Group,OutputData>;
   objs_ptr=0;
   flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=\"data table to write the epoch data to\";
   init_from=NULL;
  };
  ProgVar @[1] {
   name=\"epoch_netmon\";
   var_type=T_Object;
   object_type=NetMonitor;
   object_val=.objs[0]$$;
   object_scope=NULL;
   objs_ptr=1;
   flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=\"network monitor object that contains full specs for what to record and where to get it\";
   init_from=NULL;
  };
  ProgVar @[2] {
   name=\"run_already\";
   var_type=T_Bool;
   bool_val=0;
   object_scope=NULL;
   flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
   reference=0;
   desc=;
   init_from=NULL;
  };
 };
 functions {
  name=\"functions\";
  el_typ=Function;
  el_def=0;
 };
 init_code {
  name=\"init_code\";
  el_typ=ProgCode;
  el_def=0;
  MethodCall @[0] {
   name=\"MethodCall_epochnetmonSetDa_hmondatanetwork\";
   desc=\"set data and network on NetMonitor object\";
   flags=CAN_REVERT_TO_CODE;
   code_string=\"epoch_netmon->SetDataNetwork(epoch_mon_data, network)\";
   result_var=NULL;
   obj=.vars[1]$$;
   method=NetMonitor::SetDataNetwork;
   meth_args {
    name=\"meth_args\";
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=DataTable_ptr;
     type=\"DataTable*\";
     name=\"dt\";
     required=1;
     def_val=;
     prev_expr=;
     expr {
      expr=\"epoch_mon_data\";
     };
    };
    ProgArg @[1] {
     arg_type=Network_ptr;
     type=\"Network*\";
     name=\"net\";
     required=1;
     def_val=;
     prev_expr=;
     expr {
      expr=\"network\";
     };
    };
   };
   meth_sig=\"void SetDataNetwork(DataTable* dt, Network* net)\";
   meth_desc=\" set both the data table and network -- convenient for programs -- calls ResetDataTableCols too -- don't call if columns are manually added or this is adding additional rows to a table\";
  };
  MethodCall @[1] {
   name=\"MethodCall_epochnetmonCheckConfigfalse\";
   desc=\"check configuration and emit errors/warnings for problems\";
   flags=CAN_REVERT_TO_CODE;
   code_string=\"epoch_netmon->CheckConfig(false)\";
   result_var=NULL;
   obj=$.vars[1]$;
   method=taBase::CheckConfig;
   meth_args {
    name=\"meth_args\";
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=bool;
     type=\"bool\";
     name=\"quiet\";
     required=0;
     def_val=\"false\";
     prev_expr=;
     expr {
      expr=\"false\";
     };
    };
   };
   meth_sig=\"bool CheckConfig(bool quiet = false)\";
   meth_desc=\" check the configuration of this object and all its children (defaults to no confirm of success)\";
  };
  MethodCall @[2] {
   name=\"MethodCall_epochnetmonUpdateMonitorstrue\";
   desc=\"update the monitor items and data schema based on current settings of NetMonitor\";
   flags=CAN_REVERT_TO_CODE;
   code_string=\"epoch_netmon->UpdateMonitors(true)\";
   result_var=NULL;
   obj=$.vars[1]$;
   method=NetMonitor::UpdateMonitors;
   meth_args {
    name=\"meth_args\";
    el_typ=ProgArg;
    el_def=0;
    ProgArg @[0] {
     arg_type=bool;
     type=\"bool\";
     name=\"reset_first\";
     required=0;
     def_val=\"false\";
     prev_expr=;
     expr {
      expr=\"true\";
     };
    };
   };
   meth_sig=\"void UpdateMonitors(bool reset_first = false)\";
   meth_desc=\" old name for UpdateDataTable\";
  };
  AssignExpr @[3] {
   name=\"AssignExpr_runalreadyfalse\";
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string=\"run_already = false\";
   result_var=.vars[2]$$;
   expr {
    expr=\"false\";
   };
  };
 };
 prog_code {
  name=\"prog_code\";
  el_typ=ProgCode;
  el_def=0;
  If @[0] {
   name=\"If_ifrunalready\";
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string=\"if (!run_already)\";
   cond {
    expr=\"!run_already\";
   };
   true_code {
    name=\"true_code\";
    el_typ=ProgCode;
    el_def=0;
    MethodCall @[0] {
     name=\"MethodCall_epochnetmonSetDa_hmondatanetwork\";
     desc=\"set data and network on NetMonitor object\";
     flags=CAN_REVERT_TO_CODE;
     code_string=\"epoch_netmon->SetDataNetwork(epoch_mon_data, network)\";
     result_var=NULL;
     obj=$.vars[1]$;
     method=NetMonitor::SetDataNetwork;
     meth_args {
      name=\"meth_args\";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=DataTable_ptr;
       type=\"DataTable*\";
       name=\"dt\";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr=\"epoch_mon_data\";
       };
      };
      ProgArg @[1] {
       arg_type=Network_ptr;
       type=\"Network*\";
       name=\"net\";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr=\"network\";
       };
      };
     };
     meth_sig=\"void SetDataNetwork(DataTable* dt, Network* net)\";
     meth_desc=\" set both the data table and network -- convenient for programs -- calls ResetDataTableCols too -- don't call if columns are manually added or this is adding additional rows to a table\";
    };
    MethodCall @[1] {
     name=\"MethodCall_epochnetmonUpdateMonitorstrue\";
     desc=\"update the monitor items and data schema based on current settings of NetMonitor\";
     flags=CAN_REVERT_TO_CODE;
     code_string=\"epoch_netmon->UpdateMonitors(true)\";
     result_var=NULL;
     obj=$.vars[1]$;
     method=NetMonitor::UpdateMonitors;
     meth_args {
      name=\"meth_args\";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=bool;
       type=\"bool\";
       name=\"reset_first\";
       required=0;
       def_val=\"false\";
       prev_expr=;
       expr {
	expr=\"true\";
       };
      };
     };
     meth_sig=\"void UpdateMonitors(bool reset_first = false)\";
     meth_desc=\" old name for UpdateDataTable\";
    };
    AssignExpr @[2] {
     name=\"AssignExpr_runalreadytrue\";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string=\"run_already = true\";
     result_var=$.vars[2]$;
     expr {
      expr=\"true\";
     };
    };
   };
  };
  MethodCall @[1] {
   name=\"MethodCall_epochmondataAddBlankRow\";
   desc=\"add a new blank row to the data\";
   flags=CAN_REVERT_TO_CODE;
   code_string=\"epoch_mon_data->AddBlankRow()\";
   result_var=NULL;
   obj=.vars[0]$$;
   method=DataTable::AddBlankRow;
   meth_args {
    name=\"meth_args\";
    el_typ=ProgArg;
    el_def=0;
   };
   meth_sig=\"int AddBlankRow()\";
   meth_desc=\" add a new row to the data table, sets read (source) and write (sink) index to this last row (as in ReadItem or WriteItem), so that subsequent data routines refer to this new row, and returns row \";
  };
  MethodCall @[2] {
   name=\"MethodCall_epochnetmonGetMonVals\";
   desc=\"get the new monitor data and stor it into the data table -- this does the main job here\";
   flags=CAN_REVERT_TO_CODE;
   code_string=\"epoch_netmon->GetMonVals()\";
   result_var=NULL;
   obj=$.vars[1]$;
   method=NetMonitor::GetMonVals;
   meth_args {
    name=\"meth_args\";
    el_typ=ProgArg;
    el_def=0;
   };
   meth_sig=\"void GetMonVals()\";
   meth_desc=\" get all the values and store in current row of data table -- call in program to get new data\";
  };
  MethodCall @[3] {
   name=\"MethodCall_epochmondataWriteClose\";
   desc=\"update after writing new data to monitor data table\";
   flags=CAN_REVERT_TO_CODE;
   code_string=\"epoch_mon_data->WriteClose()\";
   result_var=NULL;
   obj=$.vars[0]$;
   method=DataTable::WriteClose;
   meth_args {
    name=\"meth_args\";
    el_typ=ProgArg;
    el_def=0;
   };
   meth_sig=\"void WriteClose()\";
   meth_desc=\" closes up a write operation -- call when done writing data -- performs any post-writing cleanup/closing of files, etc\";
  };
  Comment @[4] {
   name=\"Comment_NOTEifdoingaTest_atablecorrectly\";
   desc=\"NOTE: if doing a TestEpoch and wanting to include test results in this train epoch log, then see these instructions:
http://grey.colorado.edu/emergent/index.php/Test_Programs
quick summary here:
* Add computed, data_agg, op = LAST items to epoch_netmon to grab from the EpochTestOutputData table.
* duplicate this program, call the new one LeabraEpochMonitor_postest, remove all netmon items for training, leaving only test,
  turn off rmv_orphan_cols flag, and set arg for UpdateMonitors in init_code to false
* in original LeabraEpochMonitor, click OFF flag for WriteClose() line
* in LeabraEpoch add call to LeabraEpochTest, then _posttest after the first LeabraEpochMonitor call.
This will ensure that training data is monitored first, right after the training epoch, and then the test epoch is run,
and the testing data is updated.  The first epoch monitor should have all the items, so that it formats the data table correctly.
 
\";
   flags=CAN_REVERT_TO_CODE;
   code_string=\"// NOTE: if doing a TestEpoch and wanting to include test results in this train epoch log, then see these instructions:
http://grey.colorado.edu/emergent/index.php/Test_Programs
quick summary here:
* Add computed, data_agg, op = LAST items to epoch_netmon to grab from the EpochTestOutputData table.
* duplicate this program, call the new one LeabraEpochMonitor_postest, remove all netmon items for training, leaving only test,
  turn off rmv_orphan_cols flag, and set arg for UpdateMonitors in init_code to false
* in original LeabraEpochMonitor, click OFF flag for WriteClose() line
* in LeabraEpoch add call to LeabraEpochTest, then _posttest after the first LeabraEpochMonitor call.
This will ensure that training data is monitored first, right after the training epoch, and then the test epoch is run,
and the testing data is updated.  The first epoch monitor should have all the items, so that it formats the data table correctly.
 
\";
  };
 };
 step_prog=.$$;
 step_n=1;
 doc {
  name=\"doc\";
  desc=;
  web_doc=1;
  wiki=\"emergent\";
  url=\"Monitor_Data\";
  full_url=\"https://grey.colorado.edu/emergent/index.php/Monitor_Data\";
  text_size=1;
  text=;
  html_text=;
 };
};
";
   };
   PatchRec @[110] {
    off=0;
    action=ASSIGN;
    obj_path_names=".programs.gp[\"UtilProgs\"].gp[\"Monitors\"][\"SaveLogFiles\"].vars[\"tag\"]";
    obj_path_idx=".programs.gp[4].gp[0][0].vars[0]";
    obj_type="ProgVar";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgVar .projects[1].programs.gp[4].gp[0][0].vars[0] { };
ProgVar .projects[1].programs.gp[4].gp[0][0].vars[0] {
 name=\"tag\";
 var_type=T_String;
 string_val=\"__RunMaster_NetMaster\";
 object_scope=NULL;
 flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
 reference=0;
 desc=\"this is set by MasterStartup or MasterTrain -- is primary source of tag for any other programs (SaveWeights copies from here)\";
 init_from=NULL;
};
";
   };
   PatchRec @[111] {
    off=0;
    action=ASSIGN;
    obj_path_names=".programs.gp[\"UtilProgs\"].gp[\"Monitors\"][\"SaveLogFiles\"].vars[\"log_trials\"]";
    obj_path_idx=".programs.gp[4].gp[0][0].vars[1]";
    obj_type="ProgVar";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgVar .projects[1].programs.gp[4].gp[0][0].vars[1] { };
ProgVar .projects[1].programs.gp[4].gp[0][0].vars[1] {
 name=\"log_trials\";
 var_type=T_Bool;
 bool_val=0;
 object_scope=NULL;
 flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
 reference=0;
 desc=\"should trial-level data be saved to log files?\";
 init_from=NULL;
};
";
   };
   PatchRec @[112] {
    off=0;
    action=ASSIGN;
    obj_path_names=".programs.gp[\"UtilProgs\"].gp[\"Monitors\"][\"SaveLogFiles\"].vars[\"log_file_nm\"]";
    obj_path_idx=".programs.gp[4].gp[0][0].vars[3]";
    obj_type="ProgVar";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgVar .projects[1].programs.gp[4].gp[0][0].vars[3] { };
ProgVar .projects[1].programs.gp[4].gp[0][0].vars[3] {
 name=\"log_file_nm\";
 var_type=T_String;
 string_val=\"/Users/oreilly/emergent/proj_templates/LeabraFlex__RunMaster_NetMaster.trn_epc.dat\";
 object_scope=NULL;
 flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
 reference=0;
 desc=\"name of log file\";
 init_from=NULL;
};
";
   };
   PatchRec @[113] {
    off=0;
    action=INSERT;
    obj_path_names=".programs.gp[\"UtilProgs\"].gp[\"Monitors\"][\"SaveLogFiles\"].init_code";
    obj_path_idx=".programs.gp[4].gp[0][0].init_code";
    obj_type="ProgEl_List";
    mbr_path=;
    targ_idx=0;
    targ_name="If_iftaMiscinteractive";
    insert_after=;
    insert_before=;
    new_obj_type="If";
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
If .projects[1].programs.gp[4].gp[0][0].init_code[0] { 
 ProgEl_List @.true_code = [1] {
  MethodCall @[0] { 
   ProgArg_List @.meth_args = [0] {
   };
  };
 };
};
If .projects[1].programs.gp[4].gp[0][0].init_code[0] {
 name=\"If_iftaMiscinteractive\";
 desc=;
 flags=CAN_REVERT_TO_CODE;
 code_string=\"if (taMisc::interactive)\";
 cond {
  expr=\"taMisc::interactive\";
 };
 true_code {
  name=\"true_code\";
  el_typ=ProgCode;
  el_def=0;
  MethodCall @[0] {
   name=\"MethodCall_epochoutputdataCloseDataLog\";
   desc=;
   flags=CAN_REVERT_TO_CODE;
   code_string=\"epoch_output_data->CloseDataLog()\";
   result_var=NULL;
   obj=.programs.gp[\"UtilProgs\"].gp[\"Monitors\"][\"SaveLogFiles\"].vars[\"epoch_output_data\"]$$<ProgVar,epoch_output_data>;
   method=DataTable::CloseDataLog;
   meth_args {
    name=\"meth_args\";
    el_typ=ProgArg;
    el_def=0;
   };
   meth_sig=\"void CloseDataLog()\";
   meth_desc=\" close the data log file if it was previously open\";
  };
 };
};
";
   };
  };
  PatchRec_Group @.gp[2] {
   name="ctrl_panels";
   el_typ=PatchRec;
   el_def=0;
   path=;
   PatchRec @[0] {
    off=0;
    action=INSERT;
    obj_path_names=".ctrl_panels[\"ClusterRun\"].mbrs";
    obj_path_idx=".ctrl_panels[0].mbrs";
    obj_type="ControlPanelMember_Group";
    mbr_path=;
    targ_idx=0;
    targ_name="run_params";
    insert_after=;
    insert_before=;
    new_obj_type="ControlPanelMember";
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ControlPanelMember .projects[1].ctrl_panels[0].mbrs[0] { };
ControlPanelMember .projects[1].ctrl_panels[0].mbrs[0] {
 label=\"run_params\";
 short_label=1;
 cust_label=0;
 desc=\"select parameters for controlling how network is run\";
 cust_desc=0;
 base=.programs.gp[\"ConfigProgs\"][\"MasterTrain\"].vars[\"run_params\"]$$<ProgVar,run_params>;
 mbr=ProgVar::object_val;
 data {ctrl_type=CLUSTER_RUN: is_numeric=0: is_single=1: state=EXPLORE: saved_value=\"\": range=\"\": notes=\"set to explore for name to be added to tag\": };
};
";
   };
   PatchRec @[1] {
    off=0;
    action=INSERT;
    obj_path_names=".ctrl_panels[\"ClusterRun\"].mbrs";
    obj_path_idx=".ctrl_panels[0].mbrs";
    obj_type="ControlPanelMember_Group";
    mbr_path=;
    targ_idx=0;
    targ_name="net_params";
    insert_after="run_params";
    insert_before=;
    new_obj_type="ControlPanelMember";
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ControlPanelMember .projects[1].ctrl_panels[0].mbrs[1] { };
ControlPanelMember .projects[1].ctrl_panels[0].mbrs[1] {
 label=\"net_params\";
 short_label=1;
 cust_label=0;
 desc=\"select other parameters, typically network spec params -- independent of run params\";
 cust_desc=0;
 base=.programs.gp[\"ConfigProgs\"][\"MasterTrain\"].vars[\"net_params\"]$$<ProgVar,net_params>;
 mbr=ProgVar::object_val;
 data {ctrl_type=CLUSTER_RUN: is_numeric=0: is_single=1: state=EXPLORE: saved_value=\"\": range=\"\": notes=\"\": };
};
";
   };
   PatchRec @[2] {
    off=0;
    action=DELETE;
    obj_path_names=".ctrl_panels[\"ControlPanel\"].mbrs[\"cur_config\"]";
    obj_path_idx=".ctrl_panels[1].mbrs[0]";
    obj_type="ControlPanelMember";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ControlPanelMember .projects[0].ctrl_panels[1].mbrs[0] { };
ControlPanelMember .projects[0].ctrl_panels[1].mbrs[0] {
 label=\"cur_config\";
 short_label=1;
 cust_label=0;
 desc=\"configuration to run -- selects from configs in the Config data table\";
 cust_desc=1;
 base=.programs.gp[\"ConfigProgs\"][\"MasterTrain\"].vars[\"cur_config\"].dyn_enum_val$$<DynEnum,>;
 mbr=DynEnum::value;
 data {ctrl_type=CONTROL: is_numeric=0: is_single=1: state=EXPLORE: saved_value=\"\": range=\"0:1:0.1\": notes=\"\": };
};
";
   };
   PatchRec @[3] {
    off=0;
    action=DELETE;
    obj_path_names=".ctrl_panels[\"ControlPanel\"].mbrs[\"mstr_run_stop_step_grain\"]";
    obj_path_idx=".ctrl_panels[1].mbrs[1]";
    obj_type="ControlPanelMember";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ControlPanelMember .projects[0].ctrl_panels[1].mbrs[1] { };
ControlPanelMember .projects[0].ctrl_panels[1].mbrs[1] {
 label=\"mstr_run_stop_step_grain\";
 short_label=0;
 cust_label=1;
 desc=\"what grain to stop / step for the MasterRun program (MstrRun) -- can expand this by editing MasterRun program\";
 cust_desc=1;
 base=.programs.gp[\"ConfigProgs\"][\"MasterRun\"].vars[\"stop_step_grain\"].dyn_enum_val$$<DynEnum,>;
 mbr=DynEnum::value;
 data {ctrl_type=CONTROL: is_numeric=0: is_single=1: state=EXPLORE: saved_value=\"\": range=\"0:1:0.1\": notes=\"\": };
};
";
   };
   PatchRec @[4] {
    off=0;
    action=DELETE;
    obj_path_names=".ctrl_panels[\"ControlPanel\"].mbrs[\"Cycle_update_net_view\"]";
    obj_path_idx=".ctrl_panels[1].mbrs[2]";
    obj_type="ControlPanelMember";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ControlPanelMember .projects[0].ctrl_panels[1].mbrs[2] { };
ControlPanelMember .projects[0].ctrl_panels[1].mbrs[2] {
 label=\"Cycle_update_net_view\";
 short_label=0;
 cust_label=1;
 desc=\"determines whether network views will be updated on a cycle-by-cycle basis (slow, but often quite useful for seeing how processing is proceeding)\";
 cust_desc=1;
 base=.programs.gp[\"UtilProgs\"][\"Cycle\"].vars[\"update_net_view\"]$$<ProgVar,update_net_view>;
 mbr=ProgVar::bool_val;
 data {ctrl_type=CONTROL: is_numeric=0: is_single=1: state=EXPLORE: saved_value=\"\": range=\"0:1:0.1\": notes=\"\": };
};
";
   };
   PatchRec @[5] {
    off=0;
    action=DELETE;
    obj_path_names=".ctrl_panels[\"ControlPanel\"].mbrs[\"cycle_qtr\"]";
    obj_path_idx=".ctrl_panels[1].mbrs[3]";
    obj_type="ControlPanelMember";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ControlPanelMember .projects[0].ctrl_panels[1].mbrs[3] { };
ControlPanelMember .projects[0].ctrl_panels[1].mbrs[3] {
 label=\"cycle_qtr\";
 short_label=1;
 cust_label=0;
 desc=\"[Default: true]  one CycleRun runs for a full quarter number of actual cycles -- this greatly speeds up processing by reducing threading overhead, but prevents e.g., interactive viewing at the individual cycle level -- this is not saved -- have to re-engage it when needed, to prevent unintentionally slowing everything down\";
 cust_desc=0;
 base=.networks[\"Network_0\"].times$$<LeabraTimes,>;
 mbr=LeabraTimes::cycle_qtr;
 data {ctrl_type=CONTROL: is_numeric=0: is_single=1: state=EXPLORE: saved_value=\"\": range=\"0:1:0.1\": notes=\"\": };
};
";
   };
   PatchRec @[6] {
    off=0;
    action=DELETE;
    obj_path_names=".ctrl_panels[\"ControlPanel\"].mbrs[\"leabra_con_spec_0_lrate\"]";
    obj_path_idx=".ctrl_panels[1].mbrs[4]";
    obj_type="ControlPanelMember";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ControlPanelMember .projects[0].ctrl_panels[1].mbrs[4] { };
ControlPanelMember .projects[0].ctrl_panels[1].mbrs[4] {
 label=\"leabra_con_spec_0_lrate\";
 short_label=0;
 cust_label=0;
 desc=\"[Default: 0.04]  learning rate -- how fast the weights change per experience -- since version 7.8.5, a hidden factor of 2 has been removed, so this should be 2x what you used to use previously (e.g., default used to be .02, now is .04) -- this governs the rate of change for the fastest adapting weights -- see slow_wts for a more slowly adapting factor\";
 cust_desc=0;
 base=.networks[\"Network_0\"].specs[\"LeabraConSpec_0\"]$$<LeabraConSpec,LeabraConSpec_0>;
 mbr=LeabraConSpec::lrate;
 data {ctrl_type=CONTROL: is_numeric=1: is_single=1: state=EXPLORE: saved_value=\"\": range=\"0:1:0.1\": notes=\"\": };
};
";
   };
   PatchRec @[7] {
    off=0;
    action=INSERT;
    obj_path_names=".ctrl_panels[\"ControlPanel\"].mbrs";
    obj_path_idx=".ctrl_panels[1].mbrs";
    obj_type="ControlPanelMember_Group";
    mbr_path=;
    targ_idx=0;
    targ_name="activate_params";
    insert_after=;
    insert_before="cur_config";
    new_obj_type="ControlPanelMember";
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ControlPanelMember .projects[1].ctrl_panels[1].mbrs[0] { };
ControlPanelMember .projects[1].ctrl_panels[1].mbrs[0] {
 label=\"activate_params\";
 short_label=1;
 cust_label=0;
 desc=\"whether to activate selected param sets at start of train -- otherwise just uses current values as-is\";
 cust_desc=0;
 base=.programs.gp[\"ConfigProgs\"][\"MasterTrain\"].vars[\"activate_params\"]$$<ProgVar,activate_params>;
 mbr=ProgVar::bool_val;
 data {ctrl_type=CONTROL: is_numeric=0: is_single=1: state=EXPLORE: saved_value=\"true\": range=\"\": notes=\"should MasterTrain activate param sets at start\": };
};
";
   };
   PatchRec @[8] {
    off=0;
    action=INSERT;
    obj_path_names=".ctrl_panels[\"ControlPanel\"].mbrs";
    obj_path_idx=".ctrl_panels[1].mbrs";
    obj_type="ControlPanelMember_Group";
    mbr_path=;
    targ_idx=0;
    targ_name="run_params";
    insert_after="activate_params";
    insert_before="cur_config";
    new_obj_type="ControlPanelMember";
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ControlPanelMember .projects[1].ctrl_panels[1].mbrs[1] { };
ControlPanelMember .projects[1].ctrl_panels[1].mbrs[1] {
 label=\"run_params\";
 short_label=1;
 cust_label=0;
 desc=\"select parameters for controlling how network is run\";
 cust_desc=0;
 base=.programs.gp[\"ConfigProgs\"][\"MasterTrain\"].vars[\"run_params\"]$$<ProgVar,run_params>;
 mbr=ProgVar::object_val;
 data {ctrl_type=CONTROL: is_numeric=0: is_single=1: state=EXPLORE: saved_value=\".projects[\\\"LeabraFlexParamSetExperiment\\\"].active_params.gp[\\\"RunParams\\\"][\\\"SpecialTrain\\\"]\": range=\"\": notes=\"MasterTrain sets these params at start\": };
};
";
   };
   PatchRec @[9] {
    off=0;
    action=INSERT;
    obj_path_names=".ctrl_panels[\"ControlPanel\"].mbrs";
    obj_path_idx=".ctrl_panels[1].mbrs";
    obj_type="ControlPanelMember_Group";
    mbr_path=;
    targ_idx=0;
    targ_name="net_params";
    insert_after="run_params";
    insert_before="cur_config";
    new_obj_type="ControlPanelMember";
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ControlPanelMember .projects[1].ctrl_panels[1].mbrs[2] { };
ControlPanelMember .projects[1].ctrl_panels[1].mbrs[2] {
 label=\"net_params\";
 short_label=1;
 cust_label=0;
 desc=\"select other parameters, typically network spec params -- independent of run params\";
 cust_desc=0;
 base=.programs.gp[\"ConfigProgs\"][\"MasterTrain\"].vars[\"net_params\"]$$<ProgVar,net_params>;
 mbr=ProgVar::object_val;
 data {ctrl_type=CONTROL: is_numeric=0: is_single=1: state=EXPLORE: saved_value=\".projects[\\\"LeabraFlexParamSetExperiment\\\"].active_params.gp[\\\"MiscParams\\\"][\\\"MiscOne\\\"]\": range=\"\": notes=\"add extra params as needed..\": };
};
";
   };
   PatchRec @[10] {
    off=0;
    action=INSERT;
    obj_path_names=".ctrl_panels[\"ControlPanel\"].mbrs";
    obj_path_idx=".ctrl_panels[1].mbrs";
    obj_type="ControlPanelMember_Group";
    mbr_path=;
    targ_idx=0;
    targ_name="master_run_stop_step_grain";
    insert_after="net_params";
    insert_before="cur_config";
    new_obj_type="ControlPanelMember";
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ControlPanelMember .projects[1].ctrl_panels[1].mbrs[3] { };
ControlPanelMember .projects[1].ctrl_panels[1].mbrs[3] {
 label=\"master_run_stop_step_grain\";
 short_label=0;
 cust_label=0;
 desc=\"select grain size for Step function on MasterRun program -- can extend this functionality -- very useful!\";
 cust_desc=0;
 base=.programs.gp[\"ConfigProgs\"][\"MasterRun\"].vars[\"stop_step_grain\"].dyn_enum_val$$<DynEnum,>;
 mbr=DynEnum::value;
 data {ctrl_type=CONTROL: is_numeric=0: is_single=1: state=EXPLORE: saved_value=\"0\": range=\"0:1:0.1\": notes=\"MasterRun step can do many different things -- very useful!\": };
};
";
   };
   PatchRec @[11] {
    off=0;
    action=INSERT;
    obj_path_names=".ctrl_panels[\"ControlPanel\"].mbrs";
    obj_path_idx=".ctrl_panels[1].mbrs";
    obj_type="ControlPanelMember_Group";
    mbr_path=;
    targ_idx=0;
    targ_name="network_cycle_qtr";
    insert_after="master_run_stop_step_grain";
    insert_before="cur_config";
    new_obj_type="ControlPanelMember";
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ControlPanelMember .projects[1].ctrl_panels[1].mbrs[4] { };
ControlPanelMember .projects[1].ctrl_panels[1].mbrs[4] {
 label=\"network_cycle_qtr\";
 short_label=0;
 cust_label=1;
 desc=\"[Default: true]  one CycleRun runs for a full quarter number of actual cycles -- this greatly speeds up processing by reducing threading overhead, but prevents e.g., interactive viewing at the individual cycle level -- this is not saved -- have to re-engage it when needed, to prevent unintentionally slowing everything down\";
 cust_desc=0;
 base=.networks[\"Network_0\"].times$$<LeabraTimes,>;
 mbr=LeabraTimes::cycle_qtr;
 data {ctrl_type=CONTROL: is_numeric=0: is_single=1: state=EXPLORE: saved_value=\"true\": range=\"0:1:0.1\": notes=\"turn OFF to see individual cycles, ON for MUCH faster running\": };
};
";
   };
   PatchRec @[12] {
    off=0;
    action=INSERT;
    obj_path_names=".ctrl_panels[\"ControlPanel\"].mbrs";
    obj_path_idx=".ctrl_panels[1].mbrs";
    obj_type="ControlPanelMember_Group";
    mbr_path=;
    targ_idx=0;
    targ_name="cycle_update_net_view";
    insert_after="network_cycle_qtr";
    insert_before="cur_config";
    new_obj_type="ControlPanelMember";
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ControlPanelMember .projects[1].ctrl_panels[1].mbrs[5] { };
ControlPanelMember .projects[1].ctrl_panels[1].mbrs[5] {
 label=\"cycle_update_net_view\";
 short_label=0;
 cust_label=0;
 desc=\"determines whether network views will be updated on a cycle-by-cycle basis (slow, but often quite useful for seeing how processing is proceeding)\";
 cust_desc=0;
 base=.programs.gp[\"UtilProgs\"][\"Cycle\"].vars[\"update_net_view\"]$$<ProgVar,update_net_view>;
 mbr=ProgVar::bool_val;
 data {ctrl_type=CONTROL: is_numeric=0: is_single=1: state=EXPLORE: saved_value=\"true\": range=\"0:1:0.1\": notes=\"update network view at cycle level -- actual value depends on cycle_qtr\": };
};
";
   };
   PatchRec @[13] {
    off=0;
    action=INSERT;
    obj_path_names=".ctrl_panels[\"ControlPanel\"].mbrs";
    obj_path_idx=".ctrl_panels[1].mbrs";
    obj_type="ControlPanelMember_Group";
    mbr_path=;
    targ_idx=0;
    targ_name="quarter_update_net_view";
    insert_after="cycle_update_net_view";
    insert_before="cur_config";
    new_obj_type="ControlPanelMember";
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ControlPanelMember .projects[1].ctrl_panels[1].mbrs[6] { };
ControlPanelMember .projects[1].ctrl_panels[1].mbrs[6] {
 label=\"quarter_update_net_view\";
 short_label=0;
 cust_label=0;
 desc=\"if true, will update network views at end of settling\";
 cust_desc=0;
 base=.programs.gp[\"UtilProgs\"][\"Quarter\"].vars[\"update_net_view\"]$$<ProgVar,update_net_view>;
 mbr=ProgVar::bool_val;
 data {ctrl_type=CONTROL: is_numeric=0: is_single=1: state=EXPLORE: saved_value=\"false\": range=\"\": notes=\"redundant with cycle for cycle_qtr = ON\": };
};
";
   };
   PatchRec @[14] {
    off=0;
    action=INSERT;
    obj_path_names=".ctrl_panels[\"ControlPanel\"].mbrs";
    obj_path_idx=".ctrl_panels[1].mbrs";
    obj_type="ControlPanelMember_Group";
    mbr_path=;
    targ_idx=0;
    targ_name="trial_update_net_view";
    insert_after="quarter_update_net_view";
    insert_before="cur_config";
    new_obj_type="ControlPanelMember";
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ControlPanelMember .projects[1].ctrl_panels[1].mbrs[7] { };
ControlPanelMember .projects[1].ctrl_panels[1].mbrs[7] {
 label=\"trial_update_net_view\";
 short_label=0;
 cust_label=0;
 desc=\"determines whether to update any network view displays after trial is completed\";
 cust_desc=0;
 base=.programs.gp[\"UtilProgs\"][\"Trial\"].vars[\"update_net_view\"]$$<ProgVar,update_net_view>;
 mbr=ProgVar::bool_val;
 data {ctrl_type=CONTROL: is_numeric=0: is_single=1: state=EXPLORE: saved_value=\"false\": range=\"\": notes=\"mostly redundant but some updates happen after trial\": };
};
";
   };
   PatchRec @[15] {
    off=0;
    action=INSERT;
    obj_path_names=".ctrl_panels[\"ControlPanel\"].mbrs";
    obj_path_idx=".ctrl_panels[1].mbrs";
    obj_type="ControlPanelMember_Group";
    mbr_path=;
    targ_idx=0;
    targ_name="save_log_files_interactive";
    insert_after="trial_update_net_view";
    insert_before="cur_config";
    new_obj_type="ControlPanelMember";
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ControlPanelMember .projects[1].ctrl_panels[1].mbrs[8] { };
ControlPanelMember .projects[1].ctrl_panels[1].mbrs[8] {
 label=\"save_log_files_interactive\";
 short_label=1;
 cust_label=0;
 desc=\"save log files when running interactively?\";
 cust_desc=0;
 base=.programs.gp[\"UtilProgs\"][\"TrainStart\"].vars[\"save_log_files_interactive\"]$$<ProgVar,save_log_files_interactive>;
 mbr=ProgVar::bool_val;
 data {ctrl_type=CONTROL: is_numeric=0: is_single=1: state=EXPLORE: saved_value=\"false\": range=\"\": notes=\"save log files while running interactively\": };
};
";
   };
   PatchRec @[16] {
    off=0;
    action=INSERT;
    obj_path_names=".ctrl_panels[\"ControlPanel\"].mbrs";
    obj_path_idx=".ctrl_panels[1].mbrs";
    obj_type="ControlPanelMember_Group";
    mbr_path=;
    targ_idx=0;
    targ_name="cust_tag";
    insert_after="save_log_files_interactive";
    insert_before="cur_config";
    new_obj_type="ControlPanelMember";
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ControlPanelMember .projects[1].ctrl_panels[1].mbrs[9] { };
ControlPanelMember .projects[1].ctrl_panels[1].mbrs[9] {
 label=\"cust_tag\";
 short_label=1;
 cust_label=0;
 desc=\"add any custom tag string here -- used for labeling log and weight files along with config info\";
 cust_desc=0;
 base=.programs.gp[\"ConfigProgs\"][\"MasterTrain\"].vars[\"cust_tag\"]$$<ProgVar,cust_tag>;
 mbr=ProgVar::string_val;
 data {ctrl_type=CONTROL: is_numeric=0: is_single=1: state=EXPLORE: saved_value=\"mtau10_mrg1st.5\": range=\"\": notes=\"update this to label log files -- will also be labeled with config names \": };
};
";
   };
  };
  PatchRec_Group @.gp[3] {
   name="active_params";
   el_typ=PatchRec;
   el_def=0;
   path=;
   PatchRec @[0] {
    off=0;
    action=INSERT;
    obj_path_names=".active_params.gp";
    obj_path_idx=".active_params.gp";
    obj_type="taSubGroup";
    mbr_path=;
    targ_idx=0;
    targ_name="RunParams";
    insert_after=;
    insert_before=;
    new_obj_type="ParamSet_Group";
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ParamSet_Group .projects[1].active_params.gp[0] { 
 ParamSet @[0] { 
  ControlPanelMember_Group @.mbrs = [18] {
   ControlPanelMember @[0] { };
   ControlPanelMember @[1] { };
   ControlPanelMember @[2] { };
   ControlPanelMember @[3] { };
   ControlPanelMember @[4] { };
   ControlPanelMember @[5] { };
   ControlPanelMember @[6] { };
   ControlPanelMember @[7] { };
   ControlPanelMember @[8] { };
   ControlPanelMember @[9] { };
   ControlPanelMember @[10] { };
   ControlPanelMember @[11] { };
   ControlPanelMember @[12] { };
   ControlPanelMember @[13] { };
   ControlPanelMember @[14] { };
   ControlPanelMember @[15] { };
   ControlPanelMember @[16] { };
   ControlPanelMember @[17] { };
  };

  ControlPanelMethod_Group @.mths = [0] {
  };
 };
 ParamSet @[1] { 
  ControlPanelMember_Group @.mbrs = [18] {
   ControlPanelMember @[0] { };
   ControlPanelMember @[1] { };
   ControlPanelMember @[2] { };
   ControlPanelMember @[3] { };
   ControlPanelMember @[4] { };
   ControlPanelMember @[5] { };
   ControlPanelMember @[6] { };
   ControlPanelMember @[7] { };
   ControlPanelMember @[8] { };
   ControlPanelMember @[9] { };
   ControlPanelMember @[10] { };
   ControlPanelMember @[11] { };
   ControlPanelMember @[12] { };
   ControlPanelMember @[13] { };
   ControlPanelMember @[14] { };
   ControlPanelMember @[15] { };
   ControlPanelMember @[16] { };
   ControlPanelMember @[17] { };
  };

  ControlPanelMethod_Group @.mths = [0] {
  };
 };
};
ParamSet_Group .projects[1].active_params.gp[0] {
 name=\"RunParams\";
 el_typ=ParamSet;
 el_def=0;
 master_and_clones=1;
 ParamSet @[0] {
  name=\"RunMaster\";
  cp_state=MASTER;
  updt_while_running=0;
  desc=\"default values for basic training parameters -- this is a 'master' param set -- make changes here and all others in group will auto-update\";
  mbrs {
   name=\"mbrs\";
   el_typ=ControlPanelMember;
   el_def=0;
   ControlPanelMember @[0] {
    label=\"run_prog\";
    short_label=1;
    cust_label=0;
    desc=\"name of run program to run -- must exist in the RunProgs group\";
    cust_desc=0;
    base=.programs.gp[\"ConfigProgs\"][\"MasterTrain\"].vars[\"run_prog\"]$$<ProgVar,run_prog>;
    mbr=ProgVar::string_val;
    data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=STABLE: saved_value=\"BasicRun\": range=\"\": notes=\"\": };
   };
   ControlPanelMember @[1] {
    label=\"init_prog\";
    short_label=1;
    cust_label=0;
    desc=\"name of init program -- must exist in the InitProgs group\";
    cust_desc=0;
    base=.programs.gp[\"ConfigProgs\"][\"MasterTrain\"].vars[\"init_prog\"]$$<ProgVar,init_prog>;
    mbr=ProgVar::string_val;
    data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=STABLE: saved_value=\"BasicInit\": range=\"\": notes=\"\": };
   };
   ControlPanelMember @[2] {
    label=\"startup_prog\";
    short_label=1;
    cust_label=0;
    desc=\"additional configuration-specific startup code to run, in the StartupProgs -- any global startup stuff should still be in MasterStartup -- this should only be for startup that is specific to a particular configuration (rare)\";
    cust_desc=0;
    base=.programs[\"MasterStartup\"].vars[\"startup_prog\"]$$<ProgVar,startup_prog>;
    mbr=ProgVar::string_val;
    data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=STABLE: saved_value=\"BasicStartup\": range=\"\": notes=\"\": };
   };
   ControlPanelMember @[3] {
    label=\"train_epochs\";
    short_label=1;
    cust_label=0;
    desc=\"number of epochs to train network for\";
    cust_desc=0;
    base=.programs.gp[\"UtilProgs\"][\"TrainStart\"].vars[\"train_epochs\"]$$<ProgVar,train_epochs>;
    mbr=ProgVar::int_val;
    data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value=\"50\": range=\"\": notes=\"\": };
   };
   ControlPanelMember @[4] {
    label=\"trials_per_epoch\";
    short_label=1;
    cust_label=0;
    desc=\"number of trials per epoch\";
    cust_desc=0;
    base=.programs.gp[\"UtilProgs\"][\"TrainStart\"].vars[\"trials_per_epoch\"]$$<ProgVar,trials_per_epoch>;
    mbr=ProgVar::int_val;
    data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value=\"50\": range=\"\": notes=\"\": };
   };
   ControlPanelMember @[5] {
    label=\"save_final_wts\";
    short_label=1;
    cust_label=0;
    desc=\"should final weights after training is complete be saved?\";
    cust_desc=0;
    base=.programs.gp[\"UtilProgs\"][\"TrainEnd\"].vars[\"save_final_wts\"]$$<ProgVar,save_final_wts>;
    mbr=ProgVar::bool_val;
    data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=STABLE: saved_value=\"true\": range=\"\": notes=\"\": };
   };
   ControlPanelMember @[6] {
    label=\"save_wts_interval\";
    short_label=1;
    cust_label=0;
    desc=\"how frequently (epochs) to save weights during training\";
    cust_desc=0;
    base=.programs.gp[\"UtilProgs\"][\"EpochEnd\"].vars[\"save_wts_interval\"]$$<ProgVar,save_wts_interval>;
    mbr=ProgVar::int_val;
    data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value=\"200\": range=\"\": notes=\"\": };
   };
   ControlPanelMember @[7] {
    label=\"test_run\";
    short_label=1;
    cust_label=0;
    desc=\"is this a testing-only run, no training?\";
    cust_desc=0;
    base=.programs.gp[\"UtilProgs\"][\"TrainStart\"].vars[\"test_run\"]$$<ProgVar,test_run>;
    mbr=ProgVar::bool_val;
    data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=STABLE: saved_value=\"false\": range=\"\": notes=\"\": };
   };
   ControlPanelMember @[8] {
    label=\"test_interval\";
    short_label=1;
    cust_label=0;
    desc=\"how frequently (epochs) to run a test during training\";
    cust_desc=0;
    base=.programs.gp[\"UtilProgs\"][\"TrainStart\"].vars[\"test_interval\"]$$<ProgVar,test_interval>;
    mbr=ProgVar::int_val;
    data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value=\"1\": range=\"\": notes=\"\": };
   };
   ControlPanelMember @[9] {
    label=\"log_trials\";
    short_label=1;
    cust_label=0;
    desc=\"should trial-level data be saved to log files?\";
    cust_desc=0;
    base=.programs.gp[\"UtilProgs\"].gp[\"Monitors\"][\"SaveLogFiles\"].vars[\"log_trials\"]$$<ProgVar,log_trials>;
    mbr=ProgVar::bool_val;
    data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=STABLE: saved_value=\"false\": range=\"\": notes=\"\": };
   };
   ControlPanelMember @[10] {
    label=\"load_weights\";
    short_label=1;
    cust_label=0;
    desc=\"load initial weights from a file (specified in weights_file)\";
    cust_desc=0;
    base=.programs.gp[\"UtilProgs\"][\"TrainStart\"].vars[\"load_weights\"]$$<ProgVar,load_weights>;
    mbr=ProgVar::bool_val;
    data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=STABLE: saved_value=\"false\": range=\"\": notes=\"\": };
   };
   ControlPanelMember @[11] {
    label=\"weights_file\";
    short_label=1;
    cust_label=0;
    desc=\"full relative path (from project) of weights file to load -- use CRR: prefix to load from cluster run results directory\";
    cust_desc=0;
    base=.programs.gp[\"UtilProgs\"][\"TrainStart\"].vars[\"weights_file\"]$$<ProgVar,weights_file>;
    mbr=ProgVar::string_val;
    data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=STABLE: saved_value=\"\": range=\"\": notes=\"\": };
   };
   ControlPanelMember @[12] {
    label=\"load_st_epc\";
    short_label=1;
    cust_label=0;
    desc=\"after loading weights, reset epoch counter to this value (-1 = leave at value from the loaded weights)\";
    cust_desc=0;
    base=.programs.gp[\"UtilProgs\"][\"TrainStart\"].vars[\"load_st_epc\"]$$<ProgVar,load_st_epc>;
    mbr=ProgVar::int_val;
    data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value=\"1\": range=\"\": notes=\"\": };
   };
   ControlPanelMember @[13] {
    label=\"lrs_step_epochs\";
    short_label=1;
    cust_label=0;
    desc=\"learning rate schedule epochs per step of decrease in learning rate\";
    cust_desc=0;
    base=.programs.gp[\"UtilProgs\"][\"TrainStart\"].vars[\"lrs_step_epochs\"]$$<ProgVar,lrs_step_epochs>;
    mbr=ProgVar::int_val;
    data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value=\"50\": range=\"\": notes=\"\": };
   };
   ControlPanelMember @[14] {
    label=\"lrs_n_steps\";
    short_label=1;
    cust_label=0;
    desc=\"number of steps in the learning rate schedule\";
    cust_desc=0;
    base=.programs.gp[\"UtilProgs\"][\"TrainStart\"].vars[\"lrs_n_steps\"]$$<ProgVar,lrs_n_steps>;
    mbr=ProgVar::int_val;
    data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value=\"7\": range=\"\": notes=\"\": };
   };
   ControlPanelMember @[15] {
    label=\"lrs_bump_step\";
    short_label=1;
    cust_label=0;
    desc=\"if positive (3 is typical), then bump up the learning rate at this step in the schedule -- can help improve final performance level\";
    cust_desc=0;
    base=.programs.gp[\"UtilProgs\"][\"TrainStart\"].vars[\"lrs_bump_step\"]$$<ProgVar,lrs_bump_step>;
    mbr=ProgVar::int_val;
    data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value=\"-1\": range=\"\": notes=\"\": };
   };
   ControlPanelMember @[16] {
    label=\"n_batches\";
    short_label=1;
    cust_label=0;
    desc=\"number of batches to run\";
    cust_desc=0;
    base=.programs.gp[\"ConfigProgs\"][\"MasterBatch\"].vars[\"n_batches\"]$$<ProgVar,n_batches>;
    mbr=ProgVar::int_val;
    data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value=\"1\": range=\"\": notes=\"\": };
   };
   ControlPanelMember @[17] {
    label=\"batch_start\";
    short_label=1;
    cust_label=0;
    desc=\"batch number to start on\";
    cust_desc=0;
    base=.programs.gp[\"ConfigProgs\"][\"MasterBatch\"].vars[\"batch_start\"]$$<ProgVar,batch_start>;
    mbr=ProgVar::int_val;
    data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value=\"0\": range=\"\": notes=\"\": };
   };
  };
  mths {
   name=\"mths\";
   el_typ=ControlPanelMethod;
   el_def=0;
   group_type=GT_BUTTONS;
  };
  date=\"2017_05_10_15_38_40\";
 };
 ParamSet @[1] {
  name=\"RunConfig1\";
  cp_state=CLONE;
  updt_while_running=0;
  desc=\"another configuration of run parameters to choose from.. make as many as you need!  this is a 'clone' of the master and will auto-update for any additions or changes to members\";
  mbrs {
   name=\"mbrs\";
   el_typ=ControlPanelMember;
   el_def=0;
   ControlPanelMember @[0] {
    label=\"run_prog\";
    short_label=1;
    cust_label=0;
    desc=\"name of run program to run -- must exist in the RunProgs group\";
    cust_desc=0;
    base=$.programs.gp[\"ConfigProgs\"][\"MasterTrain\"].vars[\"run_prog\"]$;
    mbr=ProgVar::string_val;
    data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=STABLE: saved_value=\"BasicRun\": range=\"\": notes=\"\": };
   };
   ControlPanelMember @[1] {
    label=\"init_prog\";
    short_label=1;
    cust_label=0;
    desc=\"name of init program -- must exist in the InitProgs group\";
    cust_desc=0;
    base=$.programs.gp[\"ConfigProgs\"][\"MasterTrain\"].vars[\"init_prog\"]$;
    mbr=ProgVar::string_val;
    data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=STABLE: saved_value=\"BasicInit\": range=\"\": notes=\"\": };
   };
   ControlPanelMember @[2] {
    label=\"startup_prog\";
    short_label=1;
    cust_label=0;
    desc=\"additional configuration-specific startup code to run, in the StartupProgs -- any global startup stuff should still be in MasterStartup -- this should only be for startup that is specific to a particular configuration (rare)\";
    cust_desc=0;
    base=$.programs[\"MasterStartup\"].vars[\"startup_prog\"]$;
    mbr=ProgVar::string_val;
    data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=STABLE: saved_value=\"BasicStartup\": range=\"\": notes=\"\": };
   };
   ControlPanelMember @[3] {
    label=\"train_epochs\";
    short_label=1;
    cust_label=0;
    desc=\"number of epochs to train network for\";
    cust_desc=0;
    base=$.programs.gp[\"UtilProgs\"][\"TrainStart\"].vars[\"train_epochs\"]$;
    mbr=ProgVar::int_val;
    data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value=\"5\": range=\"\": notes=\"\": };
   };
   ControlPanelMember @[4] {
    label=\"trials_per_epoch\";
    short_label=1;
    cust_label=0;
    desc=\"number of trials per epoch\";
    cust_desc=0;
    base=$.programs.gp[\"UtilProgs\"][\"TrainStart\"].vars[\"trials_per_epoch\"]$;
    mbr=ProgVar::int_val;
    data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value=\"25\": range=\"\": notes=\"\": };
   };
   ControlPanelMember @[5] {
    label=\"save_final_wts\";
    short_label=1;
    cust_label=0;
    desc=\"should final weights after training is complete be saved?\";
    cust_desc=0;
    base=$.programs.gp[\"UtilProgs\"][\"TrainEnd\"].vars[\"save_final_wts\"]$;
    mbr=ProgVar::bool_val;
    data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=STABLE: saved_value=\"false\": range=\"\": notes=\"\": };
   };
   ControlPanelMember @[6] {
    label=\"save_wts_interval\";
    short_label=1;
    cust_label=0;
    desc=\"how frequently (epochs) to save weights during training\";
    cust_desc=0;
    base=$.programs.gp[\"UtilProgs\"][\"EpochEnd\"].vars[\"save_wts_interval\"]$;
    mbr=ProgVar::int_val;
    data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value=\"200\": range=\"\": notes=\"\": };
   };
   ControlPanelMember @[7] {
    label=\"test_run\";
    short_label=1;
    cust_label=0;
    desc=\"is this a testing-only run, no training?\";
    cust_desc=0;
    base=$.programs.gp[\"UtilProgs\"][\"TrainStart\"].vars[\"test_run\"]$;
    mbr=ProgVar::bool_val;
    data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=STABLE: saved_value=\"false\": range=\"\": notes=\"\": };
   };
   ControlPanelMember @[8] {
    label=\"test_interval\";
    short_label=1;
    cust_label=0;
    desc=\"how frequently (epochs) to run a test during training\";
    cust_desc=0;
    base=$.programs.gp[\"UtilProgs\"][\"TrainStart\"].vars[\"test_interval\"]$;
    mbr=ProgVar::int_val;
    data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value=\"1\": range=\"\": notes=\"\": };
   };
   ControlPanelMember @[9] {
    label=\"log_trials\";
    short_label=1;
    cust_label=0;
    desc=\"should trial-level data be saved to log files?\";
    cust_desc=0;
    base=$.programs.gp[\"UtilProgs\"].gp[\"Monitors\"][\"SaveLogFiles\"].vars[\"log_trials\"]$;
    mbr=ProgVar::bool_val;
    data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=STABLE: saved_value=\"false\": range=\"\": notes=\"\": };
   };
   ControlPanelMember @[10] {
    label=\"load_weights\";
    short_label=1;
    cust_label=0;
    desc=\"load initial weights from a file (specified in weights_file)\";
    cust_desc=0;
    base=$.programs.gp[\"UtilProgs\"][\"TrainStart\"].vars[\"load_weights\"]$;
    mbr=ProgVar::bool_val;
    data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=STABLE: saved_value=\"false\": range=\"\": notes=\"\": };
   };
   ControlPanelMember @[11] {
    label=\"weights_file\";
    short_label=1;
    cust_label=0;
    desc=\"full relative path (from project) of weights file to load -- use CRR: prefix to load from cluster run results directory\";
    cust_desc=0;
    base=$.programs.gp[\"UtilProgs\"][\"TrainStart\"].vars[\"weights_file\"]$;
    mbr=ProgVar::string_val;
    data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=STABLE: saved_value=\"\": range=\"\": notes=\"\": };
   };
   ControlPanelMember @[12] {
    label=\"load_st_epc\";
    short_label=1;
    cust_label=0;
    desc=\"after loading weights, reset epoch counter to this value (-1 = leave at value from the loaded weights)\";
    cust_desc=0;
    base=$.programs.gp[\"UtilProgs\"][\"TrainStart\"].vars[\"load_st_epc\"]$;
    mbr=ProgVar::int_val;
    data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value=\"1\": range=\"\": notes=\"\": };
   };
   ControlPanelMember @[13] {
    label=\"lrs_step_epochs\";
    short_label=1;
    cust_label=0;
    desc=\"learning rate schedule epochs per step of decrease in learning rate\";
    cust_desc=0;
    base=$.programs.gp[\"UtilProgs\"][\"TrainStart\"].vars[\"lrs_step_epochs\"]$;
    mbr=ProgVar::int_val;
    data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value=\"50\": range=\"\": notes=\"\": };
   };
   ControlPanelMember @[14] {
    label=\"lrs_n_steps\";
    short_label=1;
    cust_label=0;
    desc=\"number of steps in the learning rate schedule\";
    cust_desc=0;
    base=$.programs.gp[\"UtilProgs\"][\"TrainStart\"].vars[\"lrs_n_steps\"]$;
    mbr=ProgVar::int_val;
    data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value=\"7\": range=\"\": notes=\"\": };
   };
   ControlPanelMember @[15] {
    label=\"lrs_bump_step\";
    short_label=1;
    cust_label=0;
    desc=\"if positive (3 is typical), then bump up the learning rate at this step in the schedule -- can help improve final performance level\";
    cust_desc=0;
    base=$.programs.gp[\"UtilProgs\"][\"TrainStart\"].vars[\"lrs_bump_step\"]$;
    mbr=ProgVar::int_val;
    data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value=\"-1\": range=\"\": notes=\"\": };
   };
   ControlPanelMember @[16] {
    label=\"n_batches\";
    short_label=1;
    cust_label=0;
    desc=\"number of batches to run\";
    cust_desc=0;
    base=$.programs.gp[\"ConfigProgs\"][\"MasterBatch\"].vars[\"n_batches\"]$;
    mbr=ProgVar::int_val;
    data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value=\"1\": range=\"\": notes=\"\": };
   };
   ControlPanelMember @[17] {
    label=\"batch_start\";
    short_label=1;
    cust_label=0;
    desc=\"batch number to start on\";
    cust_desc=0;
    base=$.programs.gp[\"ConfigProgs\"][\"MasterBatch\"].vars[\"batch_start\"]$;
    mbr=ProgVar::int_val;
    data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value=\"0\": range=\"\": notes=\"\": };
   };
  };
  mths {
   name=\"mths\";
   el_typ=ControlPanelMethod;
   el_def=0;
   group_type=GT_BUTTONS;
  };
  date=;
 };
};
";
   };
   PatchRec @[1] {
    off=0;
    action=INSERT;
    obj_path_names=".active_params.gp";
    obj_path_idx=".active_params.gp";
    obj_type="taSubGroup";
    mbr_path=;
    targ_idx=0;
    targ_name="NetParams";
    insert_after="RunParams";
    insert_before=;
    new_obj_type="ParamSet_Group";
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ParamSet_Group .projects[1].active_params.gp[1] { 
 ParamSet @[0] { 
  ControlPanelMember_Group @.mbrs = [1] {
   ControlPanelMember @[0] { };
  };

  ControlPanelMethod_Group @.mths = [0] {
  };
 };
 ParamSet @[1] { 
  ControlPanelMember_Group @.mbrs = [1] {
   ControlPanelMember @[0] { };
  };

  ControlPanelMethod_Group @.mths = [0] {
  };
 };
};
ParamSet_Group .projects[1].active_params.gp[1] {
 name=\"NetParams\";
 el_typ=ParamSet;
 el_def=0;
 master_and_clones=1;
 ParamSet @[0] {
  name=\"NetMaster\";
  cp_state=MASTER;
  updt_while_running=0;
  desc=\"Network params -- this contains default values for all params -- this is a 'master' param set -- make changes here and all others in group will auto-update\";
  mbrs {
   name=\"mbrs\";
   el_typ=ControlPanelMember;
   el_def=0;
   ControlPanelMember @[0] {
    label=\"leabra_con_spec_0_lrate\";
    short_label=0;
    cust_label=0;
    desc=\"[Default: 0.04]  learning rate -- how fast the weights change per experience -- since version 7.8.5, a hidden factor of 2 has been removed, so this should be 2x what you used to use previously (e.g., default used to be .02, now is .04) -- this governs the rate of change for the fastest adapting weights -- see slow_wts for a more slowly adapting factor\";
    cust_desc=0;
    base=.networks[\"Network_0\"].specs[\"LeabraConSpec_0\"]$$<LeabraConSpec,LeabraConSpec_0>;
    mbr=LeabraConSpec::lrate;
    data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value=\"0.04\": range=\"0:1:0.1\": notes=\"\": };
   };
  };
  mths {
   name=\"mths\";
   el_typ=ControlPanelMethod;
   el_def=0;
   group_type=GT_BUTTONS;
  };
  date=\"2017_05_10_15_38_40\";
 };
 ParamSet @[1] {
  name=\"NetConfig1\";
  cp_state=CLONE;
  updt_while_running=0;
  desc=\"another configuration of misc parameters to choose from.. make as many as you need!  this is a 'clone' of the master and will auto-update for any additions or changes to members\";
  mbrs {
   name=\"mbrs\";
   el_typ=ControlPanelMember;
   el_def=0;
   ControlPanelMember @[0] {
    label=\"leabra_con_spec_0_lrate\";
    short_label=0;
    cust_label=0;
    desc=\"[Default: 0.04]  learning rate -- how fast the weights change per experience -- since version 7.8.5, a hidden factor of 2 has been removed, so this should be 2x what you used to use previously (e.g., default used to be .02, now is .04) -- this governs the rate of change for the fastest adapting weights -- see slow_wts for a more slowly adapting factor\";
    cust_desc=0;
    base=$.networks[\"Network_0\"].specs[\"LeabraConSpec_0\"]$;
    mbr=LeabraConSpec::lrate;
    data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value=\"0.02\": range=\"0:1:0.1\": notes=\"\": };
   };
  };
  mths {
   name=\"mths\";
   el_typ=ControlPanelMethod;
   el_def=0;
   group_type=GT_BUTTONS;
  };
  date=;
 };
};
";
   };
  };
  PatchRec_Group @.gp[4] {
   name="programs_1";
   el_typ=PatchRec;
   el_def=0;
   path=;
   PatchRec @[0] {
    off=0;
    action=DELETE;
    obj_path_names=".programs[\"MasterStartup\"].prog_code[\"OtherProgramVar_VarsFmprogramMas_ar1var2var3var4\"]";
    obj_path_idx=".programs[0].prog_code[8]";
    obj_type="OtherProgramVar";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
OtherProgramVar .projects[1].programs[0].prog_code[8] { };
OtherProgramVar .projects[1].programs[0].prog_code[8] {
 name=\"OtherProgramVar_VarsFmprogramMas_ar1var2var3var4\";
 desc=;
 flags=CAN_REVERT_TO_CODE;
 code_string=\"Vars Fm:  program=MasterTrain set=from  var_1=config_id  var_2=?  var_3=?  var_4=? \";
 other_prog=.programs.gp[\"ConfigProgs\"][\"MasterTrain\"]$$<Program,MasterTrain>;
 set_other=0;
 var_1=NULL;
 var_2=NULL;
 var_3=NULL;
 var_4=NULL;
};
";
   };
   PatchRec @[1] {
    off=0;
    action=DELETE;
    obj_path_names=".programs[\"MasterStartup\"].prog_code[\"MethodCall_objectmethod\"]";
    obj_path_idx=".programs[0].prog_code[9]";
    obj_type="MethodCall";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
MethodCall .projects[1].programs[0].prog_code[9] { 
 ProgArg_List @.meth_args = [2] {
  ProgArg @[0] { };
  ProgArg @[1] { };
 };
};
MethodCall .projects[1].programs[0].prog_code[9] {
 name=\"MethodCall_objectmethod\";
 desc=;
 flags=CAN_REVERT_TO_CODE;
 code_string=\"Config->method()\";
 result_var=NULL;
 obj=NULL;
 method=NULL;
 meth_args {
  name=\"meth_args\";
  el_typ=ProgArg;
  el_def=0;
  ProgArg @[0] {
   arg_type=taString;
   type=\"taString\";
   name=\"column_name\";
   required=1;
   def_val=;
   prev_expr=;
   expr {
    expr=\"\\\"config_id\\\"\";
   };
  };
  ProgArg @[1] {
   arg_type=taString;
   type=\"taString\";
   name=\"value\";
   required=1;
   def_val=;
   prev_expr=;
   expr {
    expr=\"config_id\";
   };
  };
 };
 meth_sig=\"void SetCellsFromRowLookup(taString column_name, taString value)\";
 meth_desc=\" set the values of table cells in the row with value matching the 'value' arg of column matching 'column_name' arg\";
};
";
   };
   PatchRec @[2] {
    off=0;
    action=REPLACE;
    obj_path_names=".programs[\"MasterStartup\"].prog_code";
    obj_path_idx=".programs[0].prog_code";
    obj_type="ProgEl_List";
    mbr_path=;
    targ_idx=12;
    targ_name="DataColsFmArgs_DataColsFmArgsta_pecrowvalrowvar";
    insert_after=;
    insert_before=;
    new_obj_type="Comment";
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
Comment .projects[0].programs[0].prog_code[10] { };
Comment .projects[0].programs[0].prog_code[10] {
 name=\"Comment_Setlogfiles\";
 desc=\"Set log files\";
 flags=CAN_REVERT_TO_CODE;
 code_string=\"// Set log files\";
};
";
   };
   PatchRec @[3] {
    off=0;
    action=REPLACE;
    obj_path_names=".programs[\"MasterStartup\"].prog_code";
    obj_path_idx=".programs[0].prog_code";
    obj_type="ProgEl_List";
    mbr_path=;
    targ_idx=16;
    targ_name="DataVarProg_DataFromtablerow_rogvar2var3var4";
    insert_after=;
    insert_before=;
    new_obj_type="Comment";
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
Comment .projects[0].programs[0].prog_code[14] { };
Comment .projects[0].programs[0].prog_code[14] {
 name=\"Comment_Callsubstartupprograms\";
 desc=\"= Call sub-startup programs =\";
 flags=CAN_REVERT_TO_CODE;
 code_string=\"// = Call sub-startup programs =\";
};
";
   };
   PatchRec @[4] {
    off=0;
    action=ASSIGN;
    obj_path_names=".programs.gp[\"ConfigProgs\"][\"MasterTrain\"].vars[\"run_params\"]";
    obj_path_idx=".programs.gp[1][1].vars[1]";
    obj_type="ProgVar";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgVar .projects[0].programs.gp[1][1].vars[1] { };
ProgVar .projects[0].programs.gp[1][1].vars[1] {
 name=\"run_params\";
 var_type=T_Object;
 object_type=ParamSet;
 object_val=.active_params.gp[\"RunParams\"][\"RunMaster\"]$$<ParamSet,RunMaster>;
 object_scope=.active_params.gp[\"RunParams\"]$$<ParamSet_Group,RunParams>;
 objs_ptr=0;
 flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
 reference=0;
 desc=\"select parameters for controlling how network is run\";
 init_from=NULL;
};
";
   };
   PatchRec @[5] {
    off=0;
    action=ASSIGN;
    obj_path_names=".programs.gp[\"ConfigProgs\"][\"MasterTrain\"].vars[\"net_params\"]";
    obj_path_idx=".programs.gp[1][1].vars[2]";
    obj_type="ProgVar";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgVar .projects[0].programs.gp[1][1].vars[2] { };
ProgVar .projects[0].programs.gp[1][1].vars[2] {
 name=\"net_params\";
 var_type=T_Object;
 object_type=ParamSet;
 object_val=.active_params.gp[\"NetParams\"][\"NetMaster\"]$$<ParamSet,NetMaster>;
 object_scope=.active_params.gp[\"NetParams\"]$$<ParamSet_Group,NetParams>;
 objs_ptr=0;
 flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
 reference=0;
 desc=\"select other parameters, typically network spec params -- independent of run params\";
 init_from=NULL;
};
";
   };
   PatchRec @[6] {
    off=0;
    action=ASSIGN;
    obj_path_names=".programs.gp[\"ConfigProgs\"].gp[\"RunProgs\"][\"BasicRun\"].prog_code[\"If_ifnetworktrialtrialsperepocheff\"].true_code[\"If_iftestinterval0n_chtestinterval0\"].true_code[\"ProgramCall_programname\"]";
    obj_path_idx=".programs.gp[1].gp[1][0].prog_code[5].true_code[1].true_code[0]";
    obj_type="ProgramCall";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgramCall .projects[0].programs.gp[1].gp[1][0].prog_code[5].true_code[1].true_code[0] { 
 ProgArg_List @.prog_args = [1] {
  ProgArg @[0] { };
 };
};
ProgramCall .projects[0].programs.gp[1].gp[1][0].prog_code[5].true_code[1].true_code[0] {
 name=\"ProgramCall_TestAllnetwork\";
 desc=;
 flags=CAN_REVERT_TO_CODE;
 code_string=\"TestAll(network)\";
 prog_args {
  name=\"prog_args\";
  el_typ=ProgArg;
  el_def=0;
  ProgArg @[0] {
   arg_type=LeabraNetwork;
   type=\"LeabraNetwork*\";
   name=\"network\";
   required=1;
   def_val=;
   prev_expr=\"network\";
   expr {
    expr=\"network\";
   };
  };
 };
 target=.programs.gp[\"TaskProgs\"][\"TestAll\"]$$<Program,TestAll>;
 targ_ld_init=\"*TestAll*\";
};
";
   };
   PatchRec @[7] {
    off=0;
    action=ASSIGN;
    obj_path_names=".programs.gp[\"ConfigProgs\"].gp[\"RunProgs\"][\"BasicRun\"].prog_code[\"If_ifnetworktrialtrialsperepocheff\"].true_code[\"If_iftestinterval0n_chtestinterval0\"].true_code[\"ProgramCall_programname\"]";
    obj_path_idx=".programs.gp[1].gp[1][0].prog_code[5].true_code[1].true_code[0]";
    obj_type="ProgramCall";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgramCall .projects[0].programs.gp[1].gp[1][0].prog_code[5].true_code[1].true_code[0] { 
 ProgArg_List @.prog_args = [1] {
  ProgArg @[0] { };
 };
};
ProgramCall .projects[0].programs.gp[1].gp[1][0].prog_code[5].true_code[1].true_code[0] {
 name=\"ProgramCall_TestAllnetwork\";
 desc=;
 flags=CAN_REVERT_TO_CODE;
 code_string=\"TestAll(network)\";
 prog_args {
  name=\"prog_args\";
  el_typ=ProgArg;
  el_def=0;
  ProgArg @[0] {
   arg_type=LeabraNetwork;
   type=\"LeabraNetwork*\";
   name=\"network\";
   required=1;
   def_val=;
   prev_expr=\"network\";
   expr {
    expr=\"network\";
   };
  };
 };
 target=.programs.gp[\"TaskProgs\"][\"TestAll\"]$$<Program,TestAll>;
 targ_ld_init=\"*TestAll*\";
};
";
   };
   PatchRec @[8] {
    off=0;
    action=ASSIGN;
    obj_path_names=".programs.gp[\"TaskProgs\"][\"BasicTest\"].prog_code[\"ProgramCall_programname\"]";
    obj_path_idx=".programs.gp[2][1].prog_code[18]";
    obj_type="ProgramCall";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgramCall .projects[0].programs.gp[2][1].prog_code[18] { 
 ProgArg_List @.prog_args = [1] {
  ProgArg @[0] { };
 };
};
ProgramCall .projects[0].programs.gp[2][1].prog_code[18] {
 name=\"ProgramCall_LeabraTestTrialMonitornetwork\";
 desc=;
 flags=CAN_REVERT_TO_CODE;
 code_string=\"LeabraTestTrialMonitor(network)\";
 prog_args {
  name=\"prog_args\";
  el_typ=ProgArg;
  el_def=0;
  ProgArg @[0] {
   arg_type=Network;
   type=\"LeabraNetwork*\";
   name=\"network\";
   required=1;
   def_val=;
   prev_expr=;
   expr {
    expr=\"network\";
   };
  };
 };
 target=.programs.gp[\"UtilProgs\"].gp[\"Monitors\"][\"LeabraTestTrialMonitor\"]$$<Program,LeabraTestTrialMonitor>;
 targ_ld_init=\"*LeabraTestTrialMonitor*\";
};
";
   };
   PatchRec @[9] {
    off=0;
    action=ASSIGN;
    obj_path_names=".programs.gp[\"TaskProgs\"][\"BasicTest\"].prog_code[\"ProgramCall_programname\"]";
    obj_path_idx=".programs.gp[2][1].prog_code[18]";
    obj_type="ProgramCall";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgramCall .projects[0].programs.gp[2][1].prog_code[18] { 
 ProgArg_List @.prog_args = [1] {
  ProgArg @[0] { };
 };
};
ProgramCall .projects[0].programs.gp[2][1].prog_code[18] {
 name=\"ProgramCall_LeabraTestTrialMonitornetwork\";
 desc=;
 flags=CAN_REVERT_TO_CODE;
 code_string=\"LeabraTestTrialMonitor(network)\";
 prog_args {
  name=\"prog_args\";
  el_typ=ProgArg;
  el_def=0;
  ProgArg @[0] {
   arg_type=Network;
   type=\"LeabraNetwork*\";
   name=\"network\";
   required=1;
   def_val=;
   prev_expr=;
   expr {
    expr=\"network\";
   };
  };
 };
 target=.programs.gp[\"UtilProgs\"].gp[\"Monitors\"][\"LeabraTestTrialMonitor\"]$$<Program,LeabraTestTrialMonitor>;
 targ_ld_init=\"*LeabraTestTrialMonitor*\";
};
";
   };
   PatchRec @[10] {
    off=0;
    action=ASSIGN;
    obj_path_names=".programs.gp[\"TaskProgs\"][\"TestAll\"].prog_code[\"ProgramCall_programname\"]";
    obj_path_idx=".programs.gp[2][2].prog_code[5]";
    obj_type="ProgramCall";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgramCall .projects[0].programs.gp[2][2].prog_code[5] { 
 ProgArg_List @.prog_args = [1] {
  ProgArg @[0] { };
 };
};
ProgramCall .projects[0].programs.gp[2][2].prog_code[5] {
 name=\"ProgramCall_LeabraTestEpochMonitornetwork\";
 desc=\"run program that records data from network and possibly other sources about the epoch\";
 flags=CAN_REVERT_TO_CODE;
 code_string=\"LeabraTestEpochMonitor(network)\";
 prog_args {
  name=\"prog_args\";
  el_typ=ProgArg;
  el_def=0;
  ProgArg @[0] {
   arg_type=Network;
   type=\"LeabraNetwork*\";
   name=\"network\";
   required=1;
   def_val=;
   prev_expr=;
   expr {
    expr=\"network\";
   };
  };
 };
 target=.programs.gp[\"UtilProgs\"].gp[\"Monitors\"][\"LeabraTestEpochMonitor\"]$$<Program,LeabraTestEpochMonitor>;
 targ_ld_init=\"*LeabraTestEpochMonitor*\";
};
";
   };
   PatchRec @[11] {
    off=0;
    action=ASSIGN;
    obj_path_names=".programs.gp[\"TaskProgs\"][\"TestAll\"].prog_code[\"ProgramCall_programname\"]";
    obj_path_idx=".programs.gp[2][2].prog_code[5]";
    obj_type="ProgramCall";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgramCall .projects[0].programs.gp[2][2].prog_code[5] { 
 ProgArg_List @.prog_args = [1] {
  ProgArg @[0] { };
 };
};
ProgramCall .projects[0].programs.gp[2][2].prog_code[5] {
 name=\"ProgramCall_LeabraTestEpochMonitornetwork\";
 desc=\"run program that records data from network and possibly other sources about the epoch\";
 flags=CAN_REVERT_TO_CODE;
 code_string=\"LeabraTestEpochMonitor(network)\";
 prog_args {
  name=\"prog_args\";
  el_typ=ProgArg;
  el_def=0;
  ProgArg @[0] {
   arg_type=Network;
   type=\"LeabraNetwork*\";
   name=\"network\";
   required=1;
   def_val=;
   prev_expr=;
   expr {
    expr=\"network\";
   };
  };
 };
 target=.programs.gp[\"UtilProgs\"].gp[\"Monitors\"][\"LeabraTestEpochMonitor\"]$$<Program,LeabraTestEpochMonitor>;
 targ_ld_init=\"*LeabraTestEpochMonitor*\";
};
";
   };
   PatchRec @[12] {
    off=0;
    action=DELETE;
    obj_path_names=".programs.gp[\"UtilProgs\"][\"TrainStart\"].vars[\"save_log_files_interactive\"]";
    obj_path_idx=".programs.gp[4][4].vars[0]";
    obj_type="ProgVar";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgVar .projects[1].programs.gp[4][4].vars[0] { };
ProgVar .projects[1].programs.gp[4][4].vars[0] {
 name=\"save_log_files_interactive\";
 var_type=T_Bool;
 bool_val=0;
 object_scope=NULL;
 flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
 reference=0;
 desc=\"save log files when running interactively?\";
 init_from=NULL;
};
";
   };
   PatchRec @[13] {
    off=0;
    action=INSERT;
    obj_path_names=".programs.gp[\"UtilProgs\"][\"TrainStart\"].vars";
    obj_path_idx=".programs.gp[4][4].vars";
    obj_type="ProgVar_List";
    mbr_path=;
    targ_idx=0;
    targ_name="dmem_rnd_seed";
    insert_after="weights_file";
    insert_before="save_log_files_interactive";
    new_obj_type="ProgVar";
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgVar .projects[0].programs.gp[4][4].vars[0] { };
ProgVar .projects[0].programs.gp[4][4].vars[0] {
 name=\"dmem_rnd_seed\";
 var_type=T_Object;
 object_type=RndSeed;
 object_val=.programs.gp[\"UtilProgs\"][\"TrainStart\"].objs[\"dmem_rnd_seed\"]$$<RndSeed,dmem_rnd_seed>;
 object_scope=NULL;
 objs_ptr=1;
 flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
 reference=0;
 desc=;
 init_from=NULL;
};
";
   };
   PatchRec @[14] {
    off=0;
    action=INSERT;
    obj_path_names=".programs.gp[\"UtilProgs\"][\"TrainStart\"].vars";
    obj_path_idx=".programs.gp[4][4].vars";
    obj_type="ProgVar_List";
    mbr_path=;
    targ_idx=0;
    targ_name="load_weights";
    insert_after="dmem_rnd_seed";
    insert_before="save_log_files_interactive";
    new_obj_type="ProgVar";
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgVar .projects[0].programs.gp[4][4].vars[1] { };
ProgVar .projects[0].programs.gp[4][4].vars[1] {
 name=\"load_weights\";
 var_type=T_Bool;
 bool_val=0;
 object_scope=NULL;
 flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
 reference=0;
 desc=\"load initial weights from a file (specified in weights_file)\";
 init_from=NULL;
};
";
   };
   PatchRec @[15] {
    off=0;
    action=DELETE;
    obj_path_names=".programs.gp[\"UtilProgs\"][\"TrainStart\"].vars[\"load_weights\"]";
    obj_path_idx=".programs.gp[4][4].vars[2]";
    obj_type="ProgVar";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ProgVar .projects[1].programs.gp[4][4].vars[2] { };
ProgVar .projects[1].programs.gp[4][4].vars[2] {
 name=\"load_weights\";
 var_type=T_Bool;
 bool_val=0;
 object_scope=NULL;
 flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
 reference=0;
 desc=\"fm enviro\";
 init_from=NULL;
};
";
   };
   PatchRec @[16] {
    off=0;
    action=ASSIGN;
    obj_path_names=".programs.gp[\"UtilProgs\"][\"TrainStart\"].prog_code[\"If_ifdmemnewseedtaMiscdmemnprocs1\"].true_code[\"MethodCall_savelogfilesinteractiveNewSeed\"]";
    obj_path_idx=".programs.gp[4][4].prog_code[8].true_code[0]";
    obj_type="MethodCall";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
MethodCall .projects[0].programs.gp[4][4].prog_code[8].true_code[0] { 
 ProgArg_List @.meth_args = [0] {
 };
};
MethodCall .projects[0].programs.gp[4][4].prog_code[8].true_code[0] {
 name=\"MethodCall_dmemrndseedNewSeed\";
 desc=\"restore previous random seed (all runs produce same results); change to NewSeed to have new random numbers each time\";
 flags=CAN_REVERT_TO_CODE;
 code_string=\"dmem_rnd_seed->NewSeed()\";
 result_var=NULL;
 obj=.programs.gp[\"UtilProgs\"][\"TrainStart\"].vars[\"dmem_rnd_seed\"]$$<ProgVar,dmem_rnd_seed>;
 method=RndSeed::NewSeed;
 meth_args {
  name=\"meth_args\";
  el_typ=ProgArg;
  el_def=0;
 };
 meth_sig=\"void NewSeed()\";
 meth_desc=\" set the seed to a new random value (based on time and process id)\";
};
";
   };
   PatchRec @[17] {
    off=0;
    action=ASSIGN;
    obj_path_names=".programs.gp[\"UtilProgs\"][\"TrainStart\"].prog_code[\"If_ifdmemnewseedtaMiscdmemnprocs1\"].true_code[\"MethodCall_savelogfilesinteractiveNewSeed\"]";
    obj_path_idx=".programs.gp[4][4].prog_code[8].true_code[0]";
    obj_type="MethodCall";
    mbr_path=;
    targ_idx=0;
    targ_name=;
    insert_after=;
    insert_before=;
    new_obj_type=;
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
MethodCall .projects[0].programs.gp[4][4].prog_code[8].true_code[0] { 
 ProgArg_List @.meth_args = [0] {
 };
};
MethodCall .projects[0].programs.gp[4][4].prog_code[8].true_code[0] {
 name=\"MethodCall_dmemrndseedNewSeed\";
 desc=\"restore previous random seed (all runs produce same results); change to NewSeed to have new random numbers each time\";
 flags=CAN_REVERT_TO_CODE;
 code_string=\"dmem_rnd_seed->NewSeed()\";
 result_var=NULL;
 obj=.programs.gp[\"UtilProgs\"][\"TrainStart\"].vars[\"dmem_rnd_seed\"]$$<ProgVar,dmem_rnd_seed>;
 method=RndSeed::NewSeed;
 meth_args {
  name=\"meth_args\";
  el_typ=ProgArg;
  el_def=0;
 };
 meth_sig=\"void NewSeed()\";
 meth_desc=\" set the seed to a new random value (based on time and process id)\";
};
";
   };
  };
  PatchRec_Group @.gp[5] {
   name="active_params_1";
   el_typ=PatchRec;
   el_def=0;
   path=;
   PatchRec @[0] {
    off=0;
    action=INSERT;
    obj_path_names=".active_params.gp[\"RunParams\"][\"RunMaster\"].mbrs";
    obj_path_idx=".active_params.gp[0][0].mbrs";
    obj_type="ControlPanelMember_Group";
    mbr_path=;
    targ_idx=10;
    targ_name="load_weights";
    insert_after="log_trials";
    insert_before="weights_file";
    new_obj_type="ControlPanelMember";
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ControlPanelMember .projects[1].active_params.gp[0][0].mbrs[10] { };
ControlPanelMember .projects[1].active_params.gp[0][0].mbrs[10] {
 label=\"load_weights\";
 short_label=1;
 cust_label=0;
 desc=\"load initial weights from a file (specified in weights_file)\";
 cust_desc=0;
 base=.programs.gp[\"UtilProgs\"][\"TrainStart\"].vars[\"load_weights\"]$$<ProgVar,load_weights>;
 mbr=ProgVar::bool_val;
 data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=STABLE: saved_value=\"false\": range=\"\": notes=\"\": };
};
";
   };
   PatchRec @[1] {
    off=0;
    action=INSERT;
    obj_path_names=".active_params.gp[\"RunParams\"][\"RunConfig1\"].mbrs";
    obj_path_idx=".active_params.gp[0][1].mbrs";
    obj_type="ControlPanelMember_Group";
    mbr_path=;
    targ_idx=10;
    targ_name="load_weights";
    insert_after="log_trials";
    insert_before="weights_file";
    new_obj_type="ControlPanelMember";
    value="// ta_Dump File v3.0 -- code v8.0.9.0 rev10721
ControlPanelMember .projects[1].active_params.gp[0][1].mbrs[10] { };
ControlPanelMember .projects[1].active_params.gp[0][1].mbrs[10] {
 label=\"load_weights\";
 short_label=1;
 cust_label=0;
 desc=\"load initial weights from a file (specified in weights_file)\";
 cust_desc=0;
 base=.programs.gp[\"UtilProgs\"][\"TrainStart\"].vars[\"load_weights\"]$$<ProgVar,load_weights>;
 mbr=ProgVar::bool_val;
 data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=STABLE: saved_value=\"false\": range=\"\": notes=\"\": };
};
";
   };
  };
 };
};

#!/usr/bin/env python
# Copyright 2007, Brian Mingus
#
# This file is part of prm.py, the PDP++ Release Manager
#
#   This library is free software; you can redistribute it and/or
#   modify it under the terms of the GNU Lesser General Public
#   License as published by the Free Software Foundation; either
#   version 2.1 of the License, or (at your option) any later version.
#
#   This library is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#   Lesser General Public License for more details. 

# TODO:
#      * wakeonlan for night!
#      * modalize these includes?

# Standard library imports

from optparse import OptionParser
from time import strftime
import smtplib, tempfile, logging, time, math, sys, os, re
from xml.sax.saxutils import unescape

from email.Utils import COMMASPACE, formatdate
from email.MIMEMultipart import MIMEMultipart
from email.MIMEBase import MIMEBase
from email.MIMEText import MIMEText
from email import Encoders

# Third party imports
from BeautifulSoup import BeautifulSoup, BeautifulStoneSoup
#from pyvix.vix import *

#sys.path.append('/usr/local/lib/python2.4/site-packages/pywikipedia')
#import wikipedia

from pygments import highlight
from pygments.lexers import CppLexer
from pygments.formatters import HtmlFormatter

"""
The PDP++ Release Manager knows how to perform all sorts of build
related tasks on several systems
"""

class ReleaseManager:
    """
    The main release manager class does all the heavy lifting
    """
    def __init__(self):
        self.host = None
        self.vm = None
        self.vix = None
        self.email = None

        # TODO: We should use a configuration file for listing the currently valid VMs
        self.kubuntu = "C:\\Virtual Machines\\Kubuntu Feisty Fawn CD\\Ubuntu.vmx"
        self.oses = "kubuntu"

        self.whoami = Popen3("whoami").out.replace("\n","").replace(" ","")
        self.logfile = '/usr/local/prm/logs/' + self.whoami + "_" + strftime("%Y-%y-%d") + '_' + strftime("%I:%M:%S") + '.txt'

        # TODO: Spend some time with the logging module to optimize this
        logging.basicConfig(level=logging.INFO,format = \
                        self.whoami + ":" + \
                        '%(asctime)s %(levelname)-8s %(message)s',
                        filename=self.logfile,
                        filemode='a')

        # True for success, False for failure
        self.status = True

        # This is the error accumulator! :)
        self.errors = ''

        # Get's set when a build is started
        self.revision = ''

    def GetHost(self):
        """
        Opens up a socket to the server running on night.
        """
        # TODO: Better user/pass
        self.host = Host(2,"night.colorado.edu",902,"mingus","m!n*us")

    def GetVM(self, vmx):
        """
        Pass this thing the (remote) location of a vmx file and it will open up
        a virtual machine
        """
        self.host = self.vix.Host()
        self.vm = self.host.openVM(vmx)

    def PowerOnVM(self):
        self.vm.powerOn()

    def LocalCommand(self, cmd, stdin=None, quiet=True, silent=False):
        """
        Runs a command on the local OS. If --quiet is passed, doesn't output
        anything.
        """
        logging.info("Running command: %s", cmd)

        printcmd = strftime("%I:%M:%S") + '> ' + cmd
        self.errors += "\n" + printcmd

        if not silent:
            print printcmd

        output = Popen3(cmd)
        result = ''
        if output.err:
            result += output.err
            self.errors += "\n" + output.err
        if output.out:
            result += output.out
        # Any return code above 0 implies error
        if output.errorlevel > 0:
            self.status = False
            
        logging.info("Command output:\n%s", result)

        printrslt = strftime("%I:%M:%S") + '> ' + result
        if not silent and not quiet:
            print printrslt

    def LocalBuild(self, quiet=True, silent=False, configure_flags=None):
        """
        Do a checkout of the software locally and try to build and install it.
        TODO: Need to be able to pass arbitrary configure flags  --configure-flags=
        TODO: Some of these commands produce so much output that we will never
              want to see it all in one chunk, since it is accumulated while
              the command is run. Maybe there is a better alternative to Popen3
              in this case
        TODO: What about distcc/ccache? How can we inherit the user's environment?
        TODO: When prm is run from the cron, whose environment will it inherit?!
              We need to have these in a common location, such as /etc/profile.
              This could be problemantic, though, because randy uses csh. 
        TODO: What about a lock file? Two instances of this simultaneously would be bad
        """

        self.LocalCommand("if test -d /tmp/pdp4.0;then rm -fr /tmp/pdp4.0;fi")
        self.LocalCommand("svn checkout file:///usr/local/svn/repo/pdp4.0/trunk /tmp/pdp4.0")
        self.revision = Popen3("svn info /tmp/pdp4.0 | grep ^Rev").out[:-1]
        self.LocalCommand("cd /tmp/pdp4.0")
        self.LocalCommand("make clean")
        self.LocalCommand("./configure --prefix=/tmp/pdp4.0")
        self.LocalCommand("make -j 6") # TODO: Ability to specify number of jobs
        self.LocalCommand("make install")
        self.errors += "\n" + strftime("%I:%M:%S") + '> '
        return (self.status, self.errors, self.revision, self.logfile)

    def EmailLogFile(self,
                     to=['reflection@gmail.com'],
                     subject='',
                     text='',
                     files=[],
                     server="localhost"):
        """
        Thank you manatlan http://snippets.dzone.com/posts/show/757
        """
        assert type(to)==list
        assert type(files)==list
        fro = "PDP++ Release Manager <pdpdev@grey.colorado.edu>"
        if not files:
            files = [self.logfile]

        msg = MIMEMultipart()
        msg['From'] = fro
        msg['To'] = COMMASPACE.join(to)
        msg['Date'] = formatdate(localtime=True)
        msg['Subject'] = subject

        msg.attach( MIMEText(text) )

        for file in files:
            part = MIMEBase("text","plain")
            part.set_payload( open(file,"rb").read() )
            Encoders.encode_base64(part)
            part.add_header('Content-Disposition', 'attachment; filename="%s"'
                            % os.path.basename(file))
            msg.attach(part)

            smtp = smtplib.SMTP(server)
            smtp.sendmail(fro, to, msg.as_string() )
            smtp.close()
    
    def main(self):
        print "Logging to:", self.logfile
        self.LocalBuild()

class ProgressMeter(object):
    ESC = chr(27)
    def __init__(self, **kw):
        # What time do we start tracking our progress from?
        self.timestamp = kw.get('timestamp', time.time())
        # What kind of unit are we tracking?
        self.unit = str(kw.get('unit', ''))
        # Number of units to process
        self.total = int(kw.get('total', 100))
        # Number of units already processed
        self.count = int(kw.get('count', 0))
        # Refresh rate in seconds
        self.rate_refresh = float(kw.get('rate_refresh', .5))
        # Number of ticks in meter
        self.meter_ticks = int(kw.get('ticks', 60))
        self.meter_division = float(self.total) / self.meter_ticks
        self.meter_value = int(self.count / self.meter_division)
        self.last_update = None
        self.rate_history_idx = 0
        self.rate_history_len = 10
        self.rate_history = [None] * self.rate_history_len
        self.rate_current = 0.0
        self.last_refresh = 0
        self._cursor = False
        self.reset_cursor()

    def reset_cursor(self, first=False):
        if self._cursor:
            sys.stdout.write(self.ESC + '[2K' + self.ESC+'[G')
            #sys.stdout.write(self.ESC + '[u')
        self._cursor = True
        sys.stdout.write(self.ESC + '[s')

    def update(self, count, **kw):
        now = time.time()
        # Caclulate rate of progress
        rate = 0.0
        # Add count to Total
        self.count += count
        self.count = min(self.count, self.total)
        if self.last_update:
            delta = now - float(self.last_update)
            if delta:
                rate = count / delta
            else:
                rate = count
            self.rate_history[self.rate_history_idx] = rate
            self.rate_history_idx += 1
            self.rate_history_idx %= self.rate_history_len
            cnt = 0
            total = 0.0
            # Average rate history
            for rate in self.rate_history:
                if rate == None:
                    continue
                cnt += 1
                total += rate
            rate = total / cnt
        self.rate_current = rate
        self.last_update = now
        # Device Total by meter division
        value = int(self.count / self.meter_division)
        if value > self.meter_value:
            self.meter_value = value
        if self.last_refresh:
            if (now - self.last_refresh) > self.rate_refresh or \
                (self.count >= self.total):
                    self.refresh()
        else:
            self.refresh()

    def get_meter(self, **kw):
        bar = '-' * self.meter_value
        pad = ' ' * (self.meter_ticks - self.meter_value)
        perc = (float(self.count) / self.total) * 100
        return '[%s>%s] %d%%  %.1f/sec' % (bar, pad, perc, self.rate_current)

    def refresh(self, **kw):
        # Clear line
        sys.stdout.write(self.ESC + '[2K')
        self.reset_cursor()
        sys.stdout.write(self.get_meter(**kw))
        # Are we finished?
        if self.count >= self.total:
            sys.stdout.write('\n')
        sys.stdout.flush()
        # Timestamp
        self.last_refresh = time.time()

class Popen3:
   """
   This is a deadlock-safe version of popen that returns
   an object with errorlevel, out (a string) and err (a string).
   (capturestderr may not work under windows.)
   Example: print Popen3('grep spam','\n\nhere spam\n\n').out
   """
   def __init__(self,command,input=None,capturestderr=True):
       outfile=tempfile.mktemp()
       command="( %s ) > %s" % (command,outfile)
       if input:
           infile=tempfile.mktemp()
           open(infile,"w").write(input)
           command=command+" <"+infile
       if capturestderr:
           errfile=tempfile.mktemp()
           command=command+" 2>"+errfile
       self.errorlevel=os.system(command) >> 8
       self.out=open(outfile,"r").read()
       os.remove(outfile)
       if input:
           os.remove(infile)
       if capturestderr:
           self.err=open(errfile,"r").read()
           os.remove(errfile)

# TODO: Put all of the TA/CSS stuff in that category, and all of the PDP stuff in that category

if __name__ == "__main__":
    """
    Command-line behavior
    """
    usage = "Usage: %prog --options[=value]"
    parser = OptionParser(usage)

    parser.add_option("-b",
                      "--build-pdp",
                      action="store_true",
                      dest="test_build",
                      default=0,
                      help="Initiate a build of PDP++. See --operating-systems, --configure-flags, --jobs, --email, --quiet")


    parser.add_option("-o",
                      "--operating-systems",
                      action="store",
                      type="string",
                      dest="os",
                      default=None,
                      help="Comma separated list of operating systems to act on. [default=localhost]. See --list-operating-systems")

    parser.add_option("--list-operating-systems",
                      action="store_false",
                      default=0,
                      help="Print a list of available operating systems and exit.")

    parser.add_option("--configure-flags",
                      action="store",
                      type="string",
                      dest="flags",
                      default=None,
                      help="The flags to pass to configure. Use single quotes in bash to preserve parameters for later expansion.")

    parser.add_option("-r",
                      "--release",
                      action="store_false",
                      dest="release",
                      default=0,
                      help="If --build-pdp passes, create packages and update our repositories")

    parser.add_option("-e",
                      "--email",
                      action="store",
                      type="string",
                      dest="email",
                      default=None,
                      help="Send all output as an attachment to this comma-separated list of e-mail addresses.")

    parser.add_option("-q",
                      "--quiet",
                      action="store_false",
                      dest="quiet",
                      default=1,
                      help="Print the commands being executed, but not their output. [default=enabled]. See --silent")
    
    parser.add_option("-s",
                      "--silent",
                      action="store_true",
                      dest="silent",
                      default=0,
                      help="Don't print anything to stdout.")
    
    parser.add_option("-g",
                      "--gendoc",
                      action="store_true",
                      dest="gendoc",
                      default=0,
                      help="Run `maketa -gendoc', convert the XML GenDoc format to HTML and update the wiki. Depends on the PDP4DIR environment variable to know where to find maketa and the xml files.")

    (options, args) = parser.parse_args()

    rm = ReleaseManager()
        
    if options.test_build:
        (stat, err, rev, log)  = rm.LocalBuild(quiet=options.quiet,
                                               silent=options.silent)
        # TODO: Make pdpdev default address
        if options.email:
            addrs = options.email.split(',')

            if stat:
                success = "successful"
            else:
                success = "failure"

            #TODO: The message body should be the command that was run
            #      followed by its stderr

            subject = rev + ". Build " + success + ". See stdout and stderr inside."
            text = "View the attached or backup logfile for the complete output.\n"
            text += "Backup logfile: " + log + "\n"
            text += err

            rm.EmailLogFile(to=addrs,
                            subject=subject,
                            text=text)

    if options.gendoc:
        """
        TODO:
        """
        valid_tags = ['typespace','typedef','desc','options','parent','children','subtypes','enumtype','enumdef','memberspace','memberdef','type','methodspace','methoddef','prototype','desc','option','enumspace','enumdef']

        if os.environ.has_key("PDP4DIR"):
            pwd = os.environ["PDP4DIR"]
        else:
            print "Error: PDP4DIR not set"
            sys.exit(1)

        # TODO: Uncomment
        #tmp = Popen3("cd " + pwd).out
        #tmp += Popen3("make gendoc").out

        xml = ""
        gendoc_dir = pwd + "/gendoc/"
        Popen3("rm -fr " + gendoc_dir) # Cleanup from last time

        dirs = ["ta","pdp","bp","leabra","so","cs"]
        print "Scanning",dirs
        for ddir in dirs:
            # Scan in XML files
            abs_xml_path = pwd + "/src/" + ddir + "/" + ddir + "_TA_doc.xml"
            f=open(abs_xml_path);xml+=f.read();f.close()

            # Create new directory structure
            os.makedirs(gendoc_dir + ddir)
            
        # Write css file
        css = "<style>\n<!--\n" + HtmlFormatter().get_style_defs('.highlight') + "\n#navcontainer ul li {align:left;list-style-type: none;padding: 0;margin: 0;display: block;float: left;font: 10px/20px \"Lucida Grande\", verdana, sans-serif;text-align: center;}\n#navcontainer a {color: #000;text-decoration: none;display: block;width: 115px;border: 1px solid #A8B090;}\n#navcontainer a:hover { background: url(\"http://grey.colorado.edu/pdp/images/c/c9/NavBarBgHover.gif\") repeat-x 20px; }\n#met_def {word-wrap: break-word;margin-top:20px;margin-left:30px;border:1px;background-color:#f8f8f8;font-size:12px;}\n#td_opts {margin-top:5%;}\n-->\n</style>"

        css_file = open(gendoc_dir + "gendoc.css","w")
        css_file.write(css);css_file.close()

        xml = unescape(xml)
        soup = BeautifulStoneSoup(xml)

        ####################
        #     TypeSpace    #
        ####################
        TypeSpaces = soup.findAll("typespace")
        for TypeSpace in TypeSpaces:
            space_name = TypeSpace.next.next.next
            this_dir = gendoc_dir + space_name + "/"

            ####################
            #     TypeDef      #
            ####################
            # TODO: Global css include
            # TODO: Write a file for each TypeDef. Put them in folders according
            # to the name of the TypeSpace

            TypeDefs = TypeSpace.findAllNext("typedef")

            TypeDef_names = []
            for TypeDef in TypeDefs:
                TypeDef_names.append(TypeDef.next.next.next)

            TypeDef_names.sort()

            for TypeDef in TypeDefs:
                def_name = TypeDef.next.next.next

                h_body = ""

                try:
                    td_desc = TypeDef.desc
                    if len(td_desc) > 4:
                        h_body += td_desc + "\n"
                except:
                    None

                try:
                    opts = []
                    cats = []
                    td_options = TypeDef.options
                    for td_option in td_options:
                        if len(td_option.string) > 3:
                            if td_option.string[:4] == "CAT_":
                                cats.append(td_option.string[4:])
                            else:
                                opts.append(td_option.string.strip())
                except:
                    cats = None
                    opts = None

                # Parents
                try:
                    parents = []
                    td_parents = TypeDef.parents
                    for td_parent in td_parents:
                        if len(td_parent.string) > 2:
                            parents.append(td_parent.string)
                except:
                    parents = None

                if parents:
                    parents.reverse()
                    h_body += "<h3>Parents</h3>"
                    h_body += "<div id=\"navcontainer\">\n<ul id=\"navlist\">"
                    for parent in parents:
                        h_body += "<li><a href=\"" + parent  + ".html\" id=\"active\">" + parent + "</a></li>"
                    h_body += "</ul></div>\n<br/>"
                # Children
                try:
                    children = []
                    td_children = TypeDef.children
                    for td_child in td_children:
                        if len(td_child.string) > 2:
                            children.append(td_child.string)
                except:
                    children = None

                if children:
                    #children.sort()
                    h_body += "<h3>Children</h3>"
                    h_body += "<div id=\"navcontainer\">\n<ul id=\"navlist\">"
                    for child in children:
                        h_body += "<li><a href=\"" + child  + ".html\" id=\"active\">" + child + "</a></li>"
                    h_body += "</ul></div>\n<br/>"

                if opts:
                    h_body += "<span style=\"margin-top: 5px;\"><h4 id=\"td_opts\">Options</h4></span>"
                    h_body +=  "<div id=\"met_def\">" + ', '.join(opts) + "</div>"
                if cats:
                    h_body += "<h4 id=\"td_cats\">Categories</h4>"
                    h_body +=  "<div id=\"met_def\">" + ', '.join(cats) + "</div>"

                file_name = this_dir + def_name + ".html"
                this_file = open(file_name,"w")

                h_head = "<html><head><link href=\"../gendoc.css\" rel=\"stylesheet\" type=\"text/css\"/></head><body>"
                h_jump = "<div id=\"navcontainer\">\n<ul id=\"navlist\">"
                h_jump += "<li><a href=\"#TypeDef\" id=\"active\">TypeDef</a></li>"
                h_td = "<h1 id=\"TypeDef\" style=\"clear:both\">" + highlight("typedef " + def_name, CppLexer(), HtmlFormatter())  + "</h1>"

                ####################
                #     MethodDef    #
                ####################
                MethodDefs = TypeDef.findAll("methoddef")
                total = len(MethodDefs)
                if total:
                    h_met_def = ""
                    # Get a sorted list of MethodDef names for the navigation bar
                    MetDef_names = []
                    for MethodDef in MethodDefs:
                        MetDef_names.append(MethodDef.next.next.next)
                    MetDef_names.sort()

                    h_met_def_head = "<h2 id=\"MethodDef\" style=\"clear:both\">MethodDef's</h2>"
                    h_met_def_jump = "<div id=\"navcontainer\">\n<ul id=\"navlist\">\n"

                    for name in MetDef_names:
                        h_met_def_jump += "<li><a href=\"#" + name + "\" id=\"active\">" + name + "</a></li>"

                    h_jump += "<li id=\"active\"><a href=\"#MethodDef\" id=\"active\">MethodDef</a></li>"

                    h_met_def += "<div style=\"clear:both;margin-top:10%;\">" # Start: Head room
                    
                    for MethodDef in MethodDefs:
                        m_def_name = MethodDef.next.next.next
                        h_met_def += "<span style=\"margin-top: 5px;\"><h3 id=\"" + m_def_name + "\">" + m_def_name + "</b></span>\n"
                        try:
                            if MethodDef.desc.string:
                                h_met_desc = MethodDef.desc.string
                        except:
                            h_met_desc = ""

                        h_met_def += "<div id=\"met_def\">" + highlight(MethodDef.prototype.string, CppLexer(), HtmlFormatter()) + "\n" + h_met_desc + "</div>"

                    h_met_def += "</div>" # End: Head room

                h_foot = "</body></html>"
                h_jump += "</ul></div>\n<br/>"
                h_met_def_jump += "</ul></div><br/>\n"
                html = h_head + h_td + h_jump + h_body + h_met_def_head + h_jump + h_met_def_jump + h_met_def + h_foot

                print "Writing" + file_name
                this_file.write(html);this_file.close()

    sys.exit(0)
